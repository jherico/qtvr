{"Shader":{"ver":"0.1","info":{"id":"4slGRn","date":"1361092641","viewed":1105,"name":"Alien in London","username":"iq","description":"Trying to integrate a raymarched thing with a 2d background","likes":9,"published":3,"flags":0,"tags":["procedural","3d","raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 monster( vec3 p )\n{\n\tp.x += 1.4*sin( 0.55*iGlobalTime + p.y );\n\tp.z += 1.4*sin( 0.75*iGlobalTime + p.y );\n\t\n\tp.x += sin( 3.2*p.y + 0.0*iGlobalTime );\n    p.z += sin( 2.0*p.x  + 3.0*p.y - 0.0*iGlobalTime );\n\n\tp.xz *= 3.0-0.25*(p.y+0.55);\/\/1.5 - 1.0*sin(0.2*iGlobalTime);\n\n\tp.y -= 0.4 + 5.0*sin(0.2*iGlobalTime);\n\n\tfloat r = 4.0 + 0.1*sin(10.0*p.y);\n    return vec2( length(p) - r, 1.0 );\n}\n\nvec2 map( vec3 p )\n{\n    vec2 d2 = vec2( p.y+0.55, 2.0 );\n    vec2 d1 = monster( p );\n    if( d2.x<d1.x) d1=d2;\n    return d1;\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    float t=0.0;\n    float dt = 0.08;\n    float nh = 0.0;\n    float lh = 0.0;\n    float lm = -1.0;\n    for(int i=0;i<100;i++)\n    {\n        vec2 ma = map(ro+rd*t);\n        nh = ma.x;\n        if(nh>0.0) { lh=nh; t+=dt;  } lm=ma.y;\n    }\n\n    if( nh>0.0 ) return vec2(-1.0);\n    t = t - dt*nh\/(nh-lh);\n\n    return vec2(t,lm);\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n    float res = 1.0;\n    float dt = 0.1;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map(ro + rd*t).x;\n\t\th = max( h, 0.0 );\n\t\tres = min( res, k*h\/t );\n        t += dt;\n        if( h<0.001 ) break;\n    }\n    return res;\n}\n\nfloat occlusion( in vec3 ro, in vec3 rd, float mint, float maxt, float k )\n{\n\tfloat res = -1.0;\n    float dt = 0.1;\n    float t = 0.0;\n\t\n\tfloat ao = 0.0;\n    for( int j=0; j<24; j++ )\n\t{\n\t\tres = -1.0;\n        vec3 rr = normalize( vec3( -1.0+2.0*float(j)\/32.0, 0.7, sin(1.2456*float(j)) ) );\n\t\tt = 0.0;\n        for( int i=0; i<10; i++ )\n        {\n            float h = monster(ro + rr*t).x;\n            if( h<0.0 && res<0.0 )\n            {\n                res = t;\n            }\n            t += dt;\n        }\n\t\tif( res>0.0 ) ao += 1.0;\n\t}\n\n    return 1.0-ao\/24.0;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3  eps = vec3(.001,0.0,0.0);\n    vec3 nor;\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n\n    \/\/ camera\n    vec3 ro = vec3( 0.0, 0.8, 6.0 );\n    vec3 ww = normalize(vec3(0.0,1.0,0.0) - ro);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n    vec3 col = texture2D( iChannel0, q*vec2(1.0,-1.0) ).xyz;\n\n    \/\/ raymarch\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n        vec3 lig = normalize(vec3(0.2,0.8,0.1));\n     \n        float con = 1.0;\n        float amb = 0.5 + 0.5*nor.y;\n        float dif = max(dot(nor,lig),0.0);\n        float bac = max(0.2 + 0.8*dot(nor,vec3(-lig.x,lig.y,-lig.z)),0.0);\n        float rim = pow(1.0+dot(nor,rd),1.0);\n\n        \/\/ shadow\n        float sh = softshadow( pos, lig, 0.06, 4.0, 4.0 );\n\n        \/\/ lights\n\n\n        \/\/ color\n        vec2 pro;\n        if( tmat.y<1.5 )\n\t\t{\n            col  = 0.10*con*vec3(0.90,0.90,0.90);\n            col += 0.30*dif*vec3(1.00,0.97,0.85)*vec3(sh, (sh+sh*sh)*0.5, sh*sh );\n            col += 0.20*bac*vec3(1.00,0.90,0.90);\n            col += 0.20*amb*vec3(0.20,0.22,0.25);\n\n            vec3 mcol = texture2D( iChannel0, 0.5 + 0.5*nor.xy*vec2(-1.0,-1.0) + 0.5*pos.xy ).xyz;\n            col *= 1.5*mcol;\n\n            col *= 0.4+0.6*smoothstep( -0.5, -0.15, pos.y );\n\n            col = 0.3*col + 0.7*sqrt(col);\n\t\t}\n        else\n\t\t{\n           col *= 0.35 + 0.65*sh;\n\n           float f = occlusion( pos, vec3(0.0,1.0,0.0), 0.06, 4.0, 4.0 ); \n           col *= vec3(f);\n\t\t}\n    }\n\n\tcol *= vec3( 1.0, 1.05, 1.0 );\n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}