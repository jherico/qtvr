{"Shader":{"ver":"0.1","info":{"id":"4ddGDB","date":"1452037353","viewed":322,"name":"N-Body Gravity (Optimised)","username":"Flyguy","description":"An optimised version of my other n-body shader.<br\/>This version breaks up the process of summing up the net acceleration into a bunch of small parallel \"chunks\" which are then summed up in another pass to integrate the position.","likes":3,"published":3,"flags":32,"tags":["simulation","gravity","nbody","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/#define VIEW_POSITION_BUFFER\n\/\/#define VIEW_CHUNK_BUFFER\n\n\/\/NUM_BODIES must be less than or equal to iResolution.x and must be changed in all tabs.\n#define NUM_BODIES 768\n\n#define BODY_RADIUS 3.0\n\nvec4 getBody(int id)\n{\n    return texture2D(iChannel1, vec2(id,0.0)\/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    float d = 1e6;\n    \n    for(int i = 0;i < NUM_BODIES;i++)\n    {\n        vec2 body = getBody(i).xy - uv;\n\t\td = min(d, dot(body,body));\n    }\n    \n    d = sqrt(d);\n    \n    float px = 1.0\/iResolution.y;\n    \n    float c = smoothstep(BODY_RADIUS*px - px, BODY_RADIUS*px, d);\n    \n\tfragColor = vec4(vec3(c),1.0);\n    \n    #ifdef VIEW_POSITION_BUFFER\n    \tfragColor = texture2D(iChannel1, uv \/ res \/ vec2(1,64));\n    #endif\n    #ifdef VIEW_CHUNK_BUFFER\n    \tfragColor = texture2D(iChannel0, uv \/ res) \/ 16.0;\n    #endif\n}","name":"","description":"","type":"image"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Acceleration Chunk Buffer\n\n\/\/fragCoord.x = Body ID\n\/\/fragCoord.y = Chunk ID\n\n\/\/fragColor.xy = Chunk Acceleration\n\n\/\/The process of summing up the accelerations is broken up into small parallel chunks which are summed up to get\n\/\/the final net acceleration of a body.\n\n#define CLAMP_VIEW\n\n#define NUM_BODIES 768\n#define CHUNK_SIZE 32\n\n#define BODY_MASS 0.2\n#define MAX_ACCEL 1e4\n\n\/\/Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    return texture2D(iChannel0, vec2(id,0)\/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if( fragCoord.x > float(NUM_BODIES))\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    int id = int(fragCoord.x);\n    int chunk = int(fragCoord.y);\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < CHUNK_SIZE;i++)\n    {\n        if(i + chunk * CHUNK_SIZE != id)\n        {\n            vec2 diff = getBody(i + chunk * CHUNK_SIZE).xy - body.xy;\n            \n            acc += min(MAX_ACCEL, BODY_MASS \/ dot(diff, diff)) * normalize(diff);\n        }\n    }\n    \n    fragColor = vec4(acc,0,0);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Body Position Buffer\n\n\/\/fragCoord.x = Body ID\n\n\/\/fragColor.xy = Current Body Position\n\/\/fragColor.zw = Last Body Position\n\n\/\/Keep bodies inside the viewport\n#define CLAMP_VIEW\n\n#define NUM_BODIES 768\n#define CHUNK_SIZE 32\n\n#define TIME_SCALE 0.01\n\n\/\/Get an acceleration chunk from the chunk buffer.\nvec2 getChunk(int id, int blk)\n{\n    return texture2D(iChannel0, vec2(id, blk)\/iResolution.xy).xy;\n}\n\n\/\/Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    return texture2D(iChannel1, vec2(id, 0.0)\/iResolution.xy);\n}\n\n\/\/Integrate the body's position.\nvec4 Integrate(vec4 body, vec2 accel, float delta)\n{\n    return vec4(2.0*body.xy - body.zw + accel * delta*delta, body.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if(fragCoord.y > 0.5 || fragCoord.x > float(NUM_BODIES))\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 res = iResolution.xy \/ iResolution.y;\n    \n    int id = int(fragCoord.x);\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < NUM_BODIES\/CHUNK_SIZE;i++)\n    {\n        acc += getChunk(id, i);\n    }\n    \n    body = Integrate(body, acc, iTimeDelta * TIME_SCALE);\n    \n    \/\/Initialization (iFrame == 0 doesn't seem to work when the page is initially loaded)\n    if(iFrame == 0 || iGlobalTime < 1.0)\n    {\n        vec2 rpos = vec2(float(id) * 1.85, float(id) * -0.03); \n        body = texture2D(iChannel2, rpos \/ iChannelResolution[1].xy, -99.0).xyxy * res.xyxy;\n    }\n    \n    #ifdef CLAMP_VIEW\n    \tbody = clamp(body, vec4(0), res.xyxy);\n    #endif\n    \n    fragColor = body;\n}","name":"","description":"","type":"buffer"}]}}