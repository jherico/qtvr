{"Shader":{"ver":"0.1","info":{"id":"XtlSzS","date":"1437583309","viewed":747,"name":"Curiosity Ball","username":"aiekick","description":"raytracing","likes":4,"published":3,"flags":0,"tags":["raytracing","curiosity"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nfloat gl = 0.;\nfloat t = 0.;\nvec2 k;\n\nvec4 pattern(vec3 p)\n{\n    gl += 1.5e-2;\n            \n    vec4 c = vec4(p,1);\n    \n    \/\/ pattern based on 104 shader https:\/\/www.shadertoy.com\/view\/ltlSW4 \n    vec2 i = c.xz*k.y\/c.y;\n    i-=c.xy=ceil(i+=i.x*=.577);\n    c.xy+=step(1.,c.z=mod(c.x+c.y,3.))-step(2.,c.z)*step(i,i.yx);\n    c.z=0.;\n    c=.5+.5*sin(c);     \n    \n    c.w = smoothstep(0., 1., dot(c,vec4(k.x))); \/\/ sphere + displace\n    return c.wxyz;\/\/ dist, col\n}\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n\treturn normalize(pos-sph.xyz);\n}\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\treturn -b - sqrt( h );\n}\n\nfloat dist = 1.5;\nvec3 cam(vec2 uv, out vec3 ro, float t)\n{\n\tro = vec3(sin(t*.2)*dist, 0.5, cos(t*.2)*dist);\/\/ pixel ray origine\n\tvec3 rov = normalize(-ro.xyz);\n    vec3 u =  normalize(cross(vec3(0,1,0), rov));\n    vec3 v =  normalize(cross(rov, u));\n    return normalize(rov + u*uv.x + v*uv.y);\n}\n\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 si = iResolution.xy;\n\tvec2 uv = (g+g-si)\/si.y;\n    vec4 col = vec4(0);\n\t\n\tt = iGlobalTime;\n\tk = vec2(sin(t*.5)*.3+.4,10);\n\t\n\tvec3 ro, rd = cam(uv, ro, t);\n\t\n\tvec4 sph0 = vec4(0,0,0,1.);\n\tfloat d = 0.0;\n\tvec3 p =ro+rd*d;\n\tvec3 n;\n\t\n\td = sphIntersect(ro, rd, sph0);\n\tp = ro+rd*d;\n\td \/= pattern(p).x;\n\tp = ro+rd*d;\n\t\n\tif( d>0. && d<dist ) \n\t{\t\n\t\n\t\tvec3 n = sphNormal(p, sph0);\n\t\tvec4 cubeRay = textureCube(iChannel0, reflect(rd, n)) ;\n\n\t\tcol = cubeRay; \n\t}\n\telse\n\t{\n\t\tcol = textureCube(iChannel0, rd);\n\t}\n    \n    f = col;\n}","name":"","description":"","type":"image"}]}}