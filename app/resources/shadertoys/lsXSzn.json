{"Shader":{"ver":"0.1","info":{"id":"lsXSzn","date":"1396119056","viewed":865,"name":"Visual dFdx","username":"HLorenzi","description":"Visually showing GLSL's partial derivative functions! Function is in red, derivative is in blue. On my computer, at extreme cases, the blue line displays as 2-pixel-wide dashes, revealing my GPU's fragment shader architecture.","likes":6,"published":3,"flags":0,"tags":["glsl","derivative","dfdx","dfdy","function","partial","dx","dy","visual"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float function(float x)\n{\n\tfloat index = mod(floor(iGlobalTime \/ 2.0), 4.0);\n\t\n\tif (index < 1.0)\n\t\treturn pow(x * 0.5, 2.0);\n\t\t\n\telse if (index < 2.0)\n\t\treturn (pow(x * 0.75,3.0) + 3.0*pow(x * 0.75,2.0) - 6.0*x - 8.0) \/ 8.0;\n\t\n\telse if (index < 3.0)\n\t\treturn sin(x) * 4.0;\n\t\t\n\telse\n\t\treturn pow(x * 0.25, x * 0.5);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\/\/ Viewport: (-16,-16) to (16,16)\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tuv = uv * 2.0 - vec2(1,1);\n\tuv *= 16.0;\n\t\n\t\n\t\n\t\n\t\n\t\/\/ Function of viewport's X position:\n\tfloat fx = function(uv.x);\n\t\n\t\/\/ Take the function's image difference between neighboring pixels\n\t\/\/ and divide by the viewport distance between the pixels:\n\tfloat dfdx = dFdx(fx) \/ (32.0 \/ iResolution.x); \n\t\n\t\n\t\n\t\n\t\n\t\n\t\/\/ Color the function line\n\tif (fx >= uv.y && fx < uv.y + 32.0 \/ iResolution.y)\n\t\tfragColor = vec4(1,0,0,1);\n\t\n\t\/\/ Color the derivative line\n\telse if (dfdx >= uv.y && dfdx < uv.y + 32.0 \/ iResolution.y)\n\t\tfragColor = vec4(0,0,1,1);\n\t\t\n\t\/\/ Color vertical grid\n\telse if (mod(uv.x, 1.0) > 0.5 && mod(uv.x + 32.0 \/ iResolution.x, 1.0) <= 0.5)\n\t\tif (abs(uv.x) < 0.5)\n\t\t\tfragColor = vec4(0,0.5,0,1);\n\t\telse\n\t\t\tfragColor = vec4(0,0.2,0.1,1) * (mod(uv.x, 5.0) * 0.25 + 0.25);\n\t\t\n\t\/\/ Color horizontal grid\n\telse if (mod(uv.y, 1.0) > 0.5 && mod(uv.y + 32.0 \/ iResolution.y, 1.0) <= 0.5)\n\t\tif (abs(uv.y) < 0.5)\n\t\t\tfragColor = vec4(0,0.5,0,1);\n\t\telse\n\t\t\tfragColor = vec4(0,0.2,0.1,1) * (mod(uv.y, 5.0) * 0.25 + 0.25);\n\t\n\t\/\/ Color the background\n\telse\n\t\tfragColor = vec4(0,0,0,1);\n}","name":"","description":"","type":"image"}]}}