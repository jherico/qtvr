{"Shader":{"ver":"0.1","info":{"id":"ld2GRz","date":"1383005075","viewed":3910,"name":"Metaballs - Quintic","username":"iq","description":"Bounded metaballs with quintic falloff. Literature often recommends cubic (smoothstep) falloffs (rather than exponential or 1\/d\u00b2) for they are bounded. However they produce discontinuities in normals\/lighting. Quintic falloffs solves the problem.","likes":59,"published":3,"flags":0,"tags":["3d","raymarching","distancefields","distance","lipschitz"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/ Using polynomial fallof of degree 5 for bounded metaballs, which produce smooth normals\n\/\/ unlike the cubic (smoothstep) based fallofs recommended in literature (such as John Hart).\n\n\/\/ The quintic polynomial p(x) = 6x5 - 15x4 + 10x3 has zero first and second derivatives in\n\/\/ its corners. The maxium slope p''(x)=0 happens in the middle x=1\/2, and its value is \n\/\/ p'(1\/2) = 15\/8. Therefore the  minimum distance to a metaball (in metaball canonical \n\/\/ coordinates) is at least 8\/15 = 0.533333 (see line 63).\n\n\/\/ This shader uses bounding spheres for each ball so that rays traver much faster when far\n\/\/ or outside their radius of influence.\n\n\n\n\/\/ if you change this, try making it a square number (1,4,9,16,25,...)\n#define samples 1\n\n#define numballs 8\n\n\/\/ undefine this for numerical normals\n#define ANALYTIC_NORMALS\n\n\/\/----------------------------------------------------------------\n\nfloat hash1( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nvec2 hash2( float n )\n{\n    return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n\/\/----------------------------------------------------------------\n\nvec4 blobs[numballs];\n\nfloat sdMetaBalls( vec3 pos )\n{\n\tfloat m = 0.0;\n\tfloat p = 0.0;\n\tfloat dmin = 1e20;\n\t\t\n\tfloat h = 1.0; \/\/ track Lipschitz constant\n\t\n\tfor( int i=0; i<numballs; i++ )\n\t{\n\t\t\/\/ bounding sphere for ball\n        float db = length( blobs[i].xyz - pos );\n        if( db < blobs[i].w )\n    \t{\n    \t\tfloat x = db\/blobs[i].w;\n    \t\tp += 1.0 - x*x*x*(x*(x*6.0-15.0)+10.0);\n\t    \tm += 1.0;\n    \t\th = max( h, 0.5333*blobs[i].w );\n\t    }\n\t    else \/\/ bouncing sphere distance\n\t    {\n    \t\tdmin = min( dmin, db - blobs[i].w );\n    \t}\n\t}\n    float d = dmin + 0.1;\n\t\n\tif( m>0.5 )\n\t{\n\t\tfloat th = 0.2;\n\t\td = h*(th-p);\n\t}\n\t\n\treturn d;\n}\n\n\nvec3 norMetaBalls( vec3 pos )\n{\n\tvec3 nor = vec3( 0.0, 0.0001, 0.0 );\n\t\t\n\tfor( int i=0; i<numballs; i++ )\n\t{\n        float db = length( blobs[i].xyz - pos );\n\t\tfloat x = clamp( db\/blobs[i].w, 0.0, 1.0 );\n\t\tfloat p = x*x*(30.0*x*x - 60.0*x + 30.0);\n\t\tnor += normalize( pos - blobs[i].xyz ) * p \/ blobs[i].w;\n\t}\n\t\n\treturn normalize( nor );\n}\n\n\nfloat map( in vec3 p )\n{\n\treturn sdMetaBalls( p );\n}\n\n\nconst float precis = 0.01;\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 10.0;\n    float h = precis*2.0;\n    float t = 0.0;\n    float m = 1.0;\n    for( int i=0; i<75; i++ )\n    {\n        if( h<precis||t>maxd ) continue;\/\/break;\n        t += h;\n\t    h = map( ro+rd*t );\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n#ifdef ANALYTIC_NORMALS\t\n\treturn norMetaBalls( pos );\n#else\t\n    vec3 eps = vec3(precis,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy) - map(pos-eps.xyy),\n           map(pos+eps.yxy) - map(pos-eps.yxy),\n           map(pos+eps.yyx) - map(pos-eps.yyx) ) );\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/-----------------------------------------------------\n    \/\/ input\n    \/\/-----------------------------------------------------\n\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n\n\tvec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ montecarlo (over time, image plane and lens) (5D)\n    \/\/-----------------------------------------------------\n\n\tfloat msamples = sqrt(float(samples));\n\t\n\tvec3 tot = vec3(0.0);\n\t#if samples>1\n\tfor( int a=0; a<samples; a++ )\n    #else\n    float a = 0.0;\t\t\n    #endif\t\t\n\t{\n\t\tvec2  poff = vec2( mod(float(a),msamples), floor(float(a)\/msamples) )\/msamples;\n\t\t#if samples>4\n        float toff = 0.0;\n\t\t#else\n        float toff = 0.0*(float(a)\/float(samples)) * (0.5\/24.0); \/\/ shutter time of half frame\n        #endif\n\t\t\n        \/\/-----------------------------------------------------\n        \/\/ animate scene\n        \/\/-----------------------------------------------------\n\t\tfloat time = iGlobalTime + toff;\n\n        \/\/ move metaballs\n\t\tfor( int i=0; i<numballs; i++ )\n        {\n            float h = float(i)\/8.0;\n            blobs[i].xyz = 2.0*sin( 6.2831*hash3(h*1.17) + hash3(h*13.7)*time );\n            blobs[i].w = 1.7 + 0.9*sin(6.28*hash1(h*23.13));\n\t\t}\n\n        \/\/ move camera\t\t\n\t\tfloat an = 0.5*time - 6.2831*(m.x-0.5);\n\t\tvec3 ro = vec3(5.0*sin(an),2.5*cos(0.4*an),5.0*cos(an));\n        vec3 ta = vec3(0.0,0.0,0.0);\n\n\t\t\/\/-----------------------------------------------------\n        \/\/ camera\n        \/\/-----------------------------------------------------\n        \/\/ image plane\t\t\n\t\tvec2 p = -1.0 + 2.0 * (fragCoord.xy + poff) \/ iResolution.xy;\n        p.x *= iResolution.x\/iResolution.y;\n        \/\/ camera matrix\n        vec3 ww = normalize( ta - ro );\n        vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n        vec3 vv = normalize( cross(uu,ww));\n        \/\/ create view ray\n        vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n        \/\/ dof\n        #if samples >= 9\n        vec3 fp = ro + rd * 5.0;\n\t\tvec2 le = -1.0 + 2.0*hash2( dot(fragCoord.xy,vec2(131.532,73.713)) + float(a)*121.41 );\n        ro += ( uu*le.x + vv*le.y )*0.1;\n        rd = normalize( fp - ro );\n        #endif\t\t\n\n\t\t\/\/-----------------------------------------------------\n        \/\/ render\n        \/\/-----------------------------------------------------\n\n        \/\/ background\n\t    vec3 col = pow( textureCube( iChannel0, rd ).xyz, vec3(2.2) );\n\t\t\n\t    \/\/ raymarch\n        vec2 tmat = intersect(ro,rd);\n        if( tmat.y>-0.5 )\n        {\n            \/\/ geometry\n            vec3 pos = ro + tmat.x*rd;\n            vec3 nor = calcNormal(pos);\n    \t\tvec3 ref = reflect( rd, nor );\n\n            \/\/ materials\n    \t\tvec3 mate = vec3(0.0);\n    \t\tfloat w = 0.01;\n    \t\tfor( int i=0; i<numballs; i++ )\n    \t\t{\n    \t\t\tfloat h = float(i)\/8.0;\n\n                \/\/ metaball color\n    \t\t\tvec3 ccc = vec3(1.0);\n    \t\t\tccc = mix( ccc, vec3(1.0,0.60,0.05), smoothstep(0.65,0.66,sin(30.0*h)));\n    \t\t\tccc = mix( ccc, vec3(0.3,0.45,0.25), smoothstep(0.65,0.66,sin(15.0*h)));\n\t\t\t\n                float x = clamp( length( blobs[i].xyz - pos )\/blobs[i].w, 0.0, 1.0 );\n                float p = 1.0 - x*x*(3.0-2.0*x);\n                mate += p*ccc;\n                w += p;\n            }\n            mate \/= w;\n\n            \/\/ lighting\n    \t\tvec3 lin = vec3(0.0);\n\t\t\tlin += mix( vec3(0.05,0.02,0.0), 1.2*vec3(0.8,0.9,1.0), 0.5 + 0.5*nor.y );\n            lin *= 1.0 + 1.5*vec3(0.7,0.5,0.3)*pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n    \t\tlin += 1.5*clamp(0.3+2.0*nor.y,0.0,1.0)*pow(textureCube( iChannel0, ref ).xyz,vec3(2.2))*(0.04+0.96*pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 4.0 ));\n\n\t    \t\/\/ surface-light interacion\n    \t\tcol = lin * mate;\n\t    }\n\t\ttot += col;\n\t}\n\ttot \/= float(samples);\n\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.45) );\n\n\t\/\/ vigneting\n    tot *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor = vec4( tot, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}