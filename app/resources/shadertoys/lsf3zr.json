{"Shader":{"ver":"0.1","info":{"id":"lsf3zr","date":"1362908515","viewed":12025,"name":"Catacombs","username":"iq","description":"Porting my old Slisesix procedural image, and improving it. ","likes":101,"published":3,"flags":1,"tags":["procedural","3d","raymarching","distancefield","modeling"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SC 15.0\n\nfloat fbm( vec3 p, vec3 n )\n{\n\tp *= 0.15;\n\tfloat x = texture2D( iChannel0, p.yz ).x;\n\tfloat y = texture2D( iChannel0, p.zx ).x;\n\tfloat z = texture2D( iChannel0, p.xy ).x;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nfloat distToBox( in vec3 p, in vec3 abc )\n{\n\tvec3 di = max(abs(p)-abc,0.0);\n\treturn dot(di,di);\n}\n\nvec2 column( in float x, in float y, in float z )\n{\n\tvec3 p = vec3( x, y, z );\n\n\tfloat y2=y-0.40;\n    float y3=y-0.35;\n    float y4=y-1.00;\n\n    float di1=distToBox( p, vec3(0.10*0.85,1.00,0.10*0.85) );\n    float di2=distToBox( p, vec3(0.12,0.40,0.12) );\n    float di3=distToBox( vec3(x,y4,z), vec3(0.14,0.02,0.14) );\n    x = max( abs(p.x), abs(p.z) );\n    z = min( abs(p.x), abs(p.z) );\t\n    float di4=distToBox( vec3(x, y, z), vec3(0.14,0.35,0.05) );\n    float di5=distToBox( vec3(x, (y2+z)*0.7071, (z-y2)*0.7071), vec3(0.12, 0.10*0.7071, 0.10*0.7071) );\n    float di6=distToBox( vec3(x, (y3+z)*0.7071, (z-y3)*0.7071), vec3(0.14, 0.10*0.7071, 0.10*0.7071) );\n\n    float dm = min(min(min(di5,di6),min(di3,di4)),di2);\n\t\n\tvec2 res = vec2( dm, 3.0 );\n\tif( di1<res.x ) res = vec2( di1, 2.0 );\n\n\treturn vec2( sqrt(res.x), res.y );\n}\n\nvec3 map( vec3 pos )\n{\npos \/= SC;\n    float sid = 0.0;\n    float dis;\n\n    \/\/ floor\n\tfloat mindist = pos.y;\n\n    \/\/ ceilin\n\tfloat x = fract( pos.x+128.0 ) - 0.5;\n\tfloat z = fract( pos.z+128.0 ) - 0.5;\n    float y = 1.0 - pos.y;\n\tdis = -sqrt( y*y + min(x*x,z*z)) + 0.4;\n\tdis = max( dis, y );\n    if( dis<mindist )\n    {\n        mindist = dis;\n        sid = 1.0;\n    }\n\n    \/\/ columns\n\tvec2 fc = fract( pos.xz+128.5 ) - 0.5;\n\tvec2 dis2 = column( fc.x, pos.y, fc.y );\n\t\t\n    if( dis2.x<mindist )\n    {\n        mindist = dis2.x;\n        sid = dis2.y;\n    }\n\t\n\t\/\/float dsp = 1.0*clamp(pos.y,0.0,1.0)*abs(sin(6.0*pos.y)*sin(50.0*pos.x)*sin(4.0*6.2831*pos.z));\n    float dsp = 1.0*clamp(pos.y,0.0,1.0)*abs(sin(12.0*pos.y)*sin(100.0*pos.x)*sin(8.0*6.2831*pos.z));\n\tmindist -= dsp*0.03*0.25;\n\n    return vec3(mindist*SC,sid,dsp);\n}\n\nvec3 calcColor( in vec3 pos, in vec3 nor, in float sid )\n{\n\tvec3 col = vec3( 1.0 );\n\n    float kk = fbm( 32.0*pos, nor );\n\n    if( sid<0.5 )\n\t{\n\t\tvec2 peldxz = fract( 3.0*12.0*pos.xz );\n\t\tpeldxz = 4.0*peldxz*(1.0-peldxz);\n\t\tfloat de = 20.0*length(fwidth(pos.xz));\n\t\tfloat peld = smoothstep( 0.15-de, 0.15+de, min( peldxz.x, peldxz.y ) );\n\t\tcol = 0.05 + 0.95*vec3(peld);\n        col = pow( texture2D( iChannel1, 6.0*pos.xz ).xyz, vec3(2.20) );\n\t}\n    else if( sid>0.5 && sid<1.5 )\n\t{\n\t\tfloat fx = fract( pos.x+128.0 ); \n\t    float fz = fract( pos.z+128.0 ); \n\t\tcol = vec3(0.7,0.7,0.7);\n\t\tfloat p = 1.0;\n\t\tp *= smoothstep( 0.02, 0.03, abs(fx-0.1) );\n\t\tp *= smoothstep( 0.02, 0.03, abs(fx-0.9) );\n\t\tp *= smoothstep( 0.02, 0.03, abs(fz-0.1) );\n\t\tp *= smoothstep( 0.02, 0.03, abs(fz-0.9) );\n\t\tcol = mix( 0.75*vec3(0.3,0.15,0.15), col, p );\n\t}\n    else if( sid>1.5 && sid<2.5 )\n\t{\n\t\tfloat l = fract( 12.0*pos.y );\n\t\tfloat peld = smoothstep( 0.1, 0.2, l );\n\t\tcol = 0.05 + 0.95*vec3(peld);\n\t}\n\t\n    return col * 2.0 * kk;\t\n}\n\nvec3 castRay( in vec3 ro, in vec3 rd, in float precis, in float startf, in float maxd )\n{\n    float h = precis*10.0;\n    vec3 c;\n    float t = h*4.0;\n    float dsp = 0.0;\n    float sid = -1.0;\n    for( int i=0; i<50; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) break;\n        t += h;\n\t    vec3 res = map( ro+rd*t );\n        h = res.x;\n\t    sid = res.y;\n\t\tdsp = res.z;\n    }\n\n    if( t>maxd ) sid=-1.0;\n    return vec3( t, sid, dsp );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float maxt, in float k )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<32; i++ )\n    {\n        float h = map( ro + rd*t ).x;\n        res = min( res, k*h\/t );\n        t += h;\n\t\tif( t>maxt ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 doBumpMap( in vec3 pos, in vec3 nor )\n{\n    float e = 0.0015;\n    float b = 0.005;\n    \n\tfloat ref = fbm( 48.0*pos, nor );\n    vec3 gra = -b*vec3( fbm(48.0*vec3(pos.x+e, pos.y, pos.z),nor)-ref,\n                        fbm(48.0*vec3(pos.x, pos.y+e, pos.z),nor)-ref,\n                        fbm(48.0*vec3(pos.x, pos.y, pos.z+e),nor)-ref )\/e;\n\t\n\tvec3 tgrad = gra - nor * dot ( nor , gra );\n    return normalize ( nor - tgrad );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n    float ao = 0.0;\n    float sca = 15.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = SC*(0.01 + 0.015*float(i*i));\n        float dd = map( pos + hr*nor ).x;\n        ao += (hr-dd)*sca\/SC;\n        sca *= 0.5;\n    }\n    return 1.0 - clamp( ao, 0.0, 1.0 );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    \/\/ move lights\n    vec3 lpos[7];\n    vec4 lcol[7];\n\n    for( int i=0; i<7; i++ )\n\t{\n\t    float la = 1.0;\n\t    lpos[i].x = 0.5 + 2.2*cos(0.22+0.1*iGlobalTime + 17.0*float(i) );\n\t    lpos[i].y = 0.25;\n\t    lpos[i].z = 1.5 + 2.2*cos(2.24+0.1*iGlobalTime + 13.0*float(i) );\n\n\t\t\/\/ make the lights avoid the columns\n        vec2 ilpos = floor( lpos[i].xz );\n        vec2 flpos = lpos[i].xz - ilpos;\n        flpos = flpos - 0.5;\n        if( length(flpos)<0.2 ) flpos = 0.2*normalize(flpos);\n\t    lpos[i].xz = ilpos + flpos;\n\t\t\n        lpos[i] *= SC;\n        \n        float li = sqrt(0.5 + 0.5*sin(2.0*iGlobalTime+ 23.1*float(i)));\n\n        float h = float(i)\/8.0;\n\t\tvec3 c = mix( vec3(1.0,0.8,0.6), vec3(1.0,0.3,0.05), 0.5+0.5*sin(40.0*h) );\n\t    lcol[i] = vec4( c, li );\n\t}\n\n    vec3 col = vec3(0.0);\n    vec3 res = castRay(ro,rd,0.001*SC,0.025*SC,20.0*SC);\n    float t = res.x;\n    if( res.y>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        float ao = calcAO( pos, nor );\npos \/= SC;\nt \/= SC;\n             col = calcColor( pos, nor, res.y );\n\n        nor = doBumpMap( pos, nor );\n\n        ao *= 0.7 + 0.6*res.z;\n        \/\/ lighting\n        vec3 lin = 0.03*ao*vec3(0.25,0.20,0.20)*(0.5+0.5*nor.y);\n\t\tvec3 spe = vec3(0.0);\n        for( int i=0; i<7; i++ )\n        {\n            vec3 lig = lpos[i]\/SC - pos;\n            float llig = dot( lig, lig);\n            float im = inversesqrt( llig );\n            lig = lig * im;\n            float dif = dot( nor, lig );\n            dif = clamp( dif, 0.0, 1.0 );\n\t\t\tfloat at = 2.0*exp2( -2.3*llig )*lcol[i].w;\n            dif *= at;\n            float at2 = exp2( -0.35*llig );\n\n\t\t\tfloat sh = 0.0;\n\t\t\tif( dif>0.02 ) { sh = softshadow( pos*SC, lig, 0.02*SC, sqrt(llig)*SC, 32.0 ); dif *= sh; }\n\n            float dif2 = clamp( dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 );\n            lin += 0.20*ao*dif2*vec3(0.35,0.20,0.10)*at2;\n            lin += 2.50*ao*dif*lcol[i].xyz;\n\t\t\t\n\t\t\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\t\t\tspe += ao*lcol[i].xyz*at*sh*(pow(pp,16.0) + 0.5*pow(pp,4.0));\n        }\n\t  \n        \/\/ material\n        col = mix( col, vec3(0.1,0.3,0.0), sqrt(max(1.0-ao*1.4,0.0))*smoothstep(-0.5,-0.1,nor.y) );\n        \/\/col = mix( col, vec3(0.1,0.3,0.0), (1.0-smoothstep( 0.0, 0.12, abs(nor.y) - 0.1*(1.0-smoothstep(-0.1,0.3,pos.y)) ))*(1.0-smoothstep(0.5,1.0,pos.y)) );\n    \n        col = col*lin;\n\n        col += 3.0*spe*vec3(1.0,0.6,0.2);\n    }\nelse\nt \/= SC;\n\tcol *= exp( -0.055*t*t );\n\n    \/\/ lights\n\tfor( int i=0; i<7; i++ )\n\t{\n        vec3 lv = lpos[i]\/SC - ro\/SC;\n        float ll = length( lv );\n        if( ll<t )\n        {\n            float dle = clamp( dot( rd, lv\/ll ), 0.0, 1.0 );\n\t\t\tdle = (1.0-smoothstep( 0.0, 0.2*(0.7+0.3*lcol[i].w), acos(dle)*ll ));\n            col += dle*6.0*lcol[i].w*lcol[i].xyz*dle*exp( -0.07*ll*ll );;\n        }\n    }\n\t\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    vec2 mo = iMouse.xy\/iResolution.xy;\n\t\t \n\tfloat time = iGlobalTime;\n\n\t\/\/ camera\t\n\tvec3 ce = vec3( 0.5, 0.25, 1.5 );\n\tvec3 ro = ce + vec3( 1.3*cos(0.11*time + 6.0*mo.x), 0.65*(1.0-mo.y)- 0.2, 1.3*sin(0.11*time + 6.0*mo.x) );\n\tvec3 ta = ce + vec3( 0.95*cos(1.2+.08*time), 0.4*0.25+0.75*ro.y- 0.2, 0.95*sin(2.0+0.07*time) );\nro *= SC;\nta *= SC;\n\tfloat roll = -0.15*sin(0.1*time);\n\t\n\t\/\/ camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( sin(roll), cos(roll),0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 1.5*cw );\n\t\n    vec3 col = render( ro, rd );\n\n\tcol = sqrt( col );\n\t\n    \/\/ vigneting\n    col *= 0.25+0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor=vec4( col, 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 ro = fragRayOri + vec3( 0.5*SC, 1.8, 1.5*SC );\n    vec3 rd = fragRayDir;\n    \n    vec3 col = render( ro, rd );\n\n  \tcol = sqrt( col );\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}