{"Shader":{"ver":"0.1","info":{"id":"lsl3W2","date":"1379986451","viewed":2874,"name":"Cubic Julia","username":"iq","description":"A cubic Julia set f(z) = z^3 + c, in quaternion space. I used the regular Hubbard-Douady potential based distance estimator d(z) = 0.5\u00b7log|z|\u00b7|z|\/|dz| for the marcher, orbit traps for coloring, and a compact way to rise a quaterion to the cube power.","likes":29,"published":3,"flags":0,"tags":["3d","raymarching","fractal","julia","distance","quaternion","cubic"],"hasliked":0},"renderpass":[{"inputs":[{"id":24,"src":"\/presets\/cube02_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n\/\/--------------------------------------------------------------------------------\n\/\/ quaternion manipulation\n\/\/--------------------------------------------------------------------------------\n\nvec4 qSquare( vec4 a )\n{\n    return vec4( a.x*a.x - dot(a.yzw,a.yzw), 2.0*a.x*(a.yzw) );\n}\n\nvec4 qCube( vec4 a )\n{\n\treturn a * ( 4.0*a.x*a.x - dot(a,a)*vec4(3.0,1.0,1.0,1.0) );\n}\n\n\/\/--------------------------------------------------------------------------------\n\nfloat lengthSquared( vec4 z ) { return dot(z,z); }\n\n\/\/ animation\nvec4 c = vec4(-0.1,0.6,0.9,-0.3) + 0.1*sin( vec4(3.0,0.0,1.0,2.0) + 0.5*vec4(1.0,1.3,1.7,2.1)*iGlobalTime);\n\nvec3 map( vec3 p )\n{\n    vec4 z = vec4( p, 0.2 );\n\t\n\tfloat m2 = 0.0;\n\tvec2  t = vec2( 1e10 );\n\n\tfloat dz2 = 1.0;\n\tfor( int i=0; i<10; i++ ) \n\t{\n        \/\/ |dz|\u00b2 = |3z\u00b2|\u00b2\n\t\tdz2 *= 9.0*lengthSquared(qSquare(z));\n        \n\t\t\/\/ z = z^3 + c\t\t\n\t\tz = qCube( z ) + c;\n\t\t\n        \/\/ stop under divergence\t\t\n        m2 = dot(z, z);\t\t\n        if( m2>10000.0 ) break;\t\t\t\t \n\n        \/\/ orbit trapping ( |z|\u00b2 and z_x  )\n\t\tt = min( t, vec2( m2, abs(z.x)) );\n\n\t}\n\n\t\/\/ distance estimator: d(z) = 0.5\u00b7log|z|\u00b7|z|\/|dz|   (see http:\/\/iquilezles.org\/www\/articles\/distancefractals\/distancefractals.htm)\n\tfloat d = 0.25 * log(m2) * sqrt(m2\/dz2 );\n\n\treturn vec3( d, t );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 8.0;\n\tfloat precis = 0.002;\n    float h = 1.0;\n    float t = 0.0;\n\tfloat d = 0.0;\n    float m = 1.0;\n    for( int i=0; i<150; i++ )\n\t{\n        if( h<precis||t>maxd ) break;\n        t += h;\n\t    vec3 res = map( ro+rd*t );\n        h = res.x;\n\t\td = res.y;\n\t\tm = res.z;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, d, m );\n}\n\nvec3 calcNormal( in vec3 pos, float e )\n{\n    vec3 eps = vec3(e,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvec3 calcPixel( in vec2 pi, in float time )\n{\n\tvec2 q = pi \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n    \/\/ camera\n\tfloat an = -2.4 + 0.2*time - 6.2*m.x;\n    vec3 ro = 3.0*vec3(sin(an),0.25,cos(an));\n    vec3 ta = vec3( 0.0, 0.0, 0.0 );\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 4.0*ww );\n\n\t\/\/ raymarch\n    vec3 tmat = intersect(ro,rd);\n\t\n\t\/\/ shade\n    vec3 col = vec3(0.0);\n    if( tmat.z>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos, 0.001);\n        vec3 sor = calcNormal(pos, 0.01);\n\n        \/\/ material\t\t\n\t\tvec3 mate = 0.5 + 0.5*sin( tmat.z*4.0 + 4.0 + vec3(3.0,1.5,2.0)  + nor*0.2 ).xzy;\n\t\t\n        \/\/ lighting\t\t\n\t\tfloat occ = clamp( tmat.y*0.5 + 0.5*(tmat.y*tmat.y), 0.0, 1.0 ) * (1.0 + 0.1*nor.y);\n\t\t\n        \/\/ diffuse\t\t\n\t\tcol = vec3(0.0);\n\t\tfor( int i=0; i<32; i++ )\n\t\t{\n\t\t\tvec3 rr = normalize(-1.0 + 2.0*hash3(float(i)*123.5463));\n\t\t\trr = normalize( nor + 8.0*rr );\n\t\t\trr = rr * sign(dot(nor,rr));\t\t\t\t\t\t\t  \n            col += pow( textureCube( iChannel0, rr ).xyz, vec3(2.2) ) * dot(rr,nor);\n\t\t}\n        col = 5.0 * occ * (col\/32.0);\n\n        \/\/ rim\t\t\n\t\tcol *= 1.0 + 1.0*pow(clamp(1.0+dot(rd,sor),0.0,1.0),1.0)*vec3(1.0);\n\n        \/\/ specular\t\t \n\t\tfloat fre = pow( clamp(1.0+dot(rd,sor),0.0,1.0), 5.0 );\n\t\tvec3  ref = reflect( rd, nor );\n\t\tcol *= 1.0 - 0.5*fre; \n\t\tcol += 1.5 * (0.5 + 0.5*fre) * pow( textureCube( iChannel0, ref ).xyz, vec3(2.0) ) * occ;\n\n        col *= mate;\n    }\n\telse\n\t{\n        \/\/ background\t\t\n\t\tcol = pow( textureCube( iChannel0, rd ).xyz, vec3(2.2) );\n\t}\n\n\t\/\/ gamma\n\tcol = pow( clamp( col, 0.0, 1.0 ), vec3(0.45) );\n\t\n    return col;\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t#if 0\n    const int samples = 4;\n\tvec3 col = vec3(0.0);\n\tfor( int i=0; i<samples; i++ )\n\t{\n\t\tfloat r = texture2D( iChannel1, fragCoord.xy\/iChannelResolution[1].xy ).x;\n\t\tvec3  h = hash3( r + float(i) + iGlobalTime );\n        vec2  p = fragCoord.xy + h.xy;\n\t\tfloat t = iGlobalTime + 0.5*h.z\/24.0;\n        col += calcPixel( p, t );\n\t}\n    fragColor = vec4( col\/float(samples), 1.0 );\n\t#else\n\t\n    fragColor = vec4( calcPixel( fragCoord.xy, iGlobalTime ), 1.0 );\n\t\n\t#endif\n}\n","name":"","description":"","type":"image"}]}}