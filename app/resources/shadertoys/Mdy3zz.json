{"Shader":{"ver":"0.1","info":{"id":"Mdy3zz","date":"1452986566","viewed":83,"name":"In Cars","username":"eiffie","description":"Here in my car I feel safest of all. Use SPACE BAR for everything else. Chase the ball and put it in your (RED) goal.<br\/>A glitchy game written long long ago to be like Ball Blazer from Commodore 64 days. If this still crashes let me know!","likes":0,"published":3,"flags":56,"tags":["game"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define RED vec3(1.0,0.2,0.3)\n#define BLUE vec3(0.2,0.5,1.0)\n#define MaxDepth 1000.0\n#define PI 3.14159\n#define FIELD_WIDTH 30.0\n#define HALF_FIELD 15.0\n#define WALL_HEIGHT 4.0\n#define GOAL_WIDTH 0.5\n\n\/\/matrix math\nmat3  rotAA(vec3 v, float angle){\/\/axis angle rotation\n\tfloat c=cos(angle);vec3 s=v*sin(angle);\n\treturn mat3(v.xxx*v,v.yyy*v,v.zzz*v)*(1.0-c)+mat3(c,-s.z,s.y,s.z,c,-s.x,-s.y,s.x,c);\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\nfloat Pattern(in vec3 uv){\n\treturn 0.5+0.5*sin(uv.x+sin(2.0*uv.y)+sin(3.0*(uv.z)+sin(0.5*uv.x*uv.y)));\n}\n\nstruct Hit{vec3 n; vec2 uv; float dist,obj;};\n\n\/\/struct Triad{vec3 p1,p2,p3; vec2 t1,t2,t3;};\/\/this was fancier but may crash??\n\/\/ intersect a triangle\n\/*float iTri( in vec3 ro, in vec3 rd, in vec3 p, in mat3 mx, in Triad T, inout Hit H)\n{\/\/this is some very old code ripped from ???\n\tvec3 p1=p+mx*T.p1;\n\tvec3 u=p+mx*T.p2-p1;\n\tvec3 v=p+mx*T.p3-p1;\n\tvec3 n=cross(u,v);\t\t\/\/calc normal\n\tfloat r=dot(n,rd);\n\tif(r==0.0)return MaxDepth;\n\tvec3 w=ro-p1;\n\tr=dot(-n,w)\/r;\t\t\t\/\/distance\t\n\tif(r<0.0 || r>H.dist)return MaxDepth;\n\tp=ro+rd*r;\t\t\t\/\/hit point\n\tfloat uu=dot(u,u);\n\tfloat uv=dot(u,v);\n\tfloat vv=dot(v,v);\n\tw=p-p1;\n\tfloat wu=dot(w,u);\n\tfloat wv=dot(w,v);\n\tfloat d=uv*uv-uu*vv;\n\tfloat s=(uv*wv-vv*wu)\/d;\n\tif(s<0.0||s>1.0)return MaxDepth;\n\tfloat t=(uv*wu-uu*wv)\/d;\n\tif(t<0.0||(s+t)>1.0)return MaxDepth;\n\td=1.0-t-s;\n\tif(p.y>0.43 && min(s,t)>0.05)return MaxDepth; \/\/cut out windows\n\tH.uv=T.t1*d+T.t2*s+T.t3*t;\t\/\/texture coord\n\tH.n=n;\n\tH.obj=1.0;\n\tH.dist=r;\n\treturn r;\n}*\/\n\/\/intersect a sphere\nfloat iSph( in vec3 ro, in vec3 rd, in vec3 p, in mat3 mx, in float r, inout Hit H)\n{\/\/based on iq's\n\tp-=ro;\n\tfloat b=dot(p,rd);\n\tfloat inner=b*b-dot(p,p)+r*r;\n\tif(inner<0.0)return MaxDepth;\n\tfloat t=b-sqrt(inner);\n\tif(t<0.0 || t>H.dist)return MaxDepth;\n\tH.dist=t;\n\tH.obj=0.0;\n\tH.n=normalize((-p+rd*t)*mx);\n\tH.uv=vec2(atan(H.n.x,H.n.z)\/PI,H.n.y*0.5+0.5);\n\treturn t;\n}\nvec3 N[4];\nvoid setup(){\n\tN[0]=normalize(vec3(0.0,0.3,-1.0));N[1]=normalize(vec3(-1.0,0.4,0.3));\n\tN[2]=normalize(vec3(1.0,0.4,0.3));N[3]=vec3(0.0,-1.0,0.0);\n}\n\/\/intersect planes\nfloat iGeod( in vec3 ro, in vec3 rd, in vec3 p, in mat3 mx, float r, inout Hit H)\n{\/\/a convex shape made by the intersecting planes\n \/\/find the farthest facing plane nearer then the closest back-facing plane\n\tfloat t1=-MaxDepth,t2=MaxDepth;\n\tvec3 N1,N2;\n\tfor(int i=0;i<4;i++){\n\t\tvec3 n=mx*N[i];\n\t\tfloat frontface=dot( n, -rd );\n\t\tfloat t = (dot( n, ro-p ) - ((i==0)?0.666:r)) \/ frontface;\n\t\tif(frontface>0.0){\n\t\t\tif(t>t1){N1=n;t1=t;}\n\t\t}else{\n\t\t\tif(t<t2){N2=n;t2=t;}\n\t\t}\n\t}\n\tif(t1<0.0 || t1>t2 || t1>H.dist)return MaxDepth;\n\tH.n=N1*mx;H.dist=t1;H.obj=1.0;H.uv=((ro+rd*t1-p)*mx).zy;\n\treturn t1;\n}\nvec3 bps,cp;\nmat3 bm,cm;\n\nHit GetHits(vec3 ro, vec3 rd){\n\tHit H;\n\tH.dist=MaxDepth;\n\tiSph(ro,rd,bps,bm,0.2,H);\n\tiGeod(ro,rd,cp,cm,0.25,H);\n\t\/*Triad T;\n\tT.p1=vec3(0.0,0.0,0.0);T.p2=vec3(0.0,-1.0,1.75);T.p3=vec3(-0.75,-1.0,-0.25); \n\tT.t1=vec2(0.0,1.0);T.t2=vec2(1.0,0.0);T.t3=vec2(0.0);\n\tiTri(ro,rd,cp,cm,T,H);\n\tT.p3.x*=-1.0;\n\tiTri(ro,rd,cp,cm,T,H);\n\tT.p2=vec3(-0.75,-1.0,-0.25);\n\tiTri(ro,rd,cp,cm,T,H);*\/\n\treturn H;\n}\n\n\/\/from iq\nvec4 load(in int re) {\n    return texture2D(iChannel0, (0.5+vec2(re,0.0)) \/ iResolution.xy, -100.0 );\n}\n\n\/\/ ==================================================\n\/\/ Bit Packed Sprites by Flyguy\n\/\/ https:\/\/www.shadertoy.com\/view\/XtsGRl\n#define CHAR_SIZE vec2(3, 7)\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_5 = 1985614.0;\nfloat ch_6 = 707946.0;\nfloat ch_7 = 1873042.0;\nfloat ch_8 = 709994.0;\nfloat ch_9 = 710250.0;\nfloat ch_0 = 711530.0;\n\n\/\/Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n\treturn floor(mod(floor(n \/ pow(2.0,floor(b))),2.0));   \n}\n\n\/\/Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \/\/Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    \/\/Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? extract_bit(spr, bit) : 0.0;\n\n}\n\/\/Returns the sprite data for the given number.\nfloat get_digit(int d)\n{\n    if(d == 0) return ch_0;\n    if(d == 1) return ch_1;\n    if(d == 2) return ch_2;\n    if(d == 3) return ch_3;\n    if(d == 4) return ch_4;\n    if(d == 5) return ch_5;\n    if(d == 6) return ch_6;\n    if(d == 7) return ch_7;\n    if(d == 8) return ch_8;\n    if(d == 9) return ch_9;\n    return 0.0;\n}\nfloat print_digit(int digit, vec2 uv){\n\treturn sprite(get_digit(digit),CHAR_SIZE, uv);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tsetup();\n\tvec4 lbp=load(0);\n\tvec4 lpp=load(1);\n\tbps=vec3(lbp.x,0.75,lbp.y);\n\tcp=vec3(lpp.z,0.25,lpp.w);\n\tvec3 ro=vec3(lpp.x,1.0,lpp.y);\n\tvec3 or=load(2).xyz;\n\tivec4 gm=ivec4(load(3)+vec4(0.25));\n\tvec3 rd=vec3((2.0*fragCoord-iResolution.xy)\/iResolution.y,1.0);\n\tbm=mat3(1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0);\n\tcm=rotAA(vec3(0.0,1.0,0.0),or.y-1.57);\n\tmat3 pm=rotAA(vec3(0.0,1.0,0.0),or.z-1.57);\n\trd=normalize(pm*rd);\n\tvec3 L=normalize(vec3(0.7,0.6,0.4)); \/\/light dir\n\t\n\t\/\/draw the playing field\n\tvec3 col=mix(vec3(0.4,0.5,0.7),vec3(1.0),Pattern(rd*vec3(1.5,8.0,1.5)));\n\tif(rd.y<0.0){\/\/ground\n\t\tfloat t=-ro.y\/rd.y;\n\t\tvec2 p=abs(fract((ro.xz+rd.xz*t)*0.25)-vec2(0.5))-0.25;\n\t\tvec3 chk=mix(vec3(0.25),vec3(1.0),smoothstep(0.0,t*t*0.001,sign(p.x*p.y)*min(abs(p.x),abs(p.y))));\n\t\t\/\/chk=mix(chk,vec3(0.35),clamp(t*0.03,0.0,1.0));\n\t\tcol=mix(chk,col,clamp(t*0.01,0.0,1.0));\n\t\tHit H=GetHits(ro+rd*t,L);\n\t\tif(H.dist<MaxDepth)col=min(col,vec3(0.15+H.dist*0.1));\n\t}\n\tfloat ct=MaxDepth;\n\tfloat t=(sign(rd.x)*HALF_FIELD-ro.x)\/rd.x;\n\tif(t>0.0){\/\/walls\n\t\tvec3 p=ro+rd*t;\n\t\tif(abs(p.z)<HALF_FIELD && p.y>0.0 && p.y<WALL_HEIGHT){\n\t\t\tcol=mix(col,vec3(0.2,0.1,0.0),2.0*abs(fract(p.z)-0.5));\n\t\t\tct=t;\n\t\t}\n\t}\n\tfloat sz=sign(rd.z);\n\tt=(sz*HALF_FIELD-ro.z)\/rd.z;\n\tif(t>0.0){\n\t\tvec3 p=ro+rd*t;\n\t\tif(abs(p.x)<HALF_FIELD && p.y>0.0 && p.y<WALL_HEIGHT && abs(p.x)>GOAL_WIDTH){\n\t\t\tcol=mix(col,(sz>0.0)?BLUE:RED,2.0*abs(fract(p.x)-0.5));\n\t\t\tif(t<ct)ct=t;\n\t\t}\n\t}\n\t\n\t\/\/draw the ball and opponent\n\tHit H=GetHits(ro,rd);\n\tif(H.dist<MaxDepth){\n\t\tif(H.obj==0.0)col=vec3(0.1,1.0,0.3);\n\t\telse col=mix(BLUE,vec3(0.2),smoothstep(0.4,0.405,H.uv.y));\n\t\tH.n=normalize(H.n);\n\t\tcol*=0.5+0.5*dot(L,H.n);\n\t\tcol+=vec3(1.0,0.9,0.7)*pow(max(0.0,dot(reflect(rd,H.n),L)),4.0);\n\t\tcol+=mix(RED,BLUE,-dot(rd,H.n))*0.1;\n\t}\n    \/\/draw score\n\tfloat d1=print_digit(gm.x,fragCoord\/iResolution.xy*100.0-vec2(10.0,90.0));\n\tfloat d2=print_digit(gm.y,fragCoord\/iResolution.xy*100.0-vec2(80.0,90.0));\n\tcol=mix(col,RED,d1);\n\tcol=mix(col,BLUE,d2);\n\tfragColor=vec4(col,1.0);\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/buf A needs bufA & keyboard\n\n#define PI 3.14159\n\n\/\/originally from iq but messed up by me\nfloat isInside( vec2 p, vec2 c ) { vec2 d = abs(p-0.5-c) - 0.5; return -max(d.x,d.y); }\n\nvec4 load(in int re) {\n    return texture2D(iChannel0, (0.5+vec2(re,0.0)) \/ iResolution.xy, -100.0 );\n}\n\nvoid store( in int re, in vec4 va, inout vec4 fragColor, in vec2 fragCoord) {\n    fragColor = ( isInside(fragCoord,vec2(re,0.0)) > 0.0 ) ? va : fragColor;\n}\n\nbool KeyDown(in int key){\n\treturn (texture2D(iChannel1,vec2((float(key)+0.5)\/256.0, 0.25)).x>0.0);\n}\n\nfloat rndseed;\nfloat rand(){rndseed+=1.0;return fract(sin(rndseed)*213.189);}\n\n\/\/matrix math\nmat3  rotAA(vec3 v, float angle){\/\/axis angle rotation\n\tfloat c=cos(angle);vec3 s=v*sin(angle);\n\treturn mat3(v.xxx*v,v.yyy*v,v.zzz*v)*(1.0-c)+mat3(c,-s.z,s.y,s.z,c,-s.x,-s.y,s.x,c);\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\n\/\/stored mem\nvec4 pp;\/\/player positions xy=red,zw=blue\nvec4 bp;\/\/ball position and velocity\nvec4 or;\/\/rotations around y axis (b,c,p) and last time\nivec4 gs;\t\/\/gamestate = red score, blue score, game mode, ai mode\nfloat timeDelta;\n\n#define GS_WAIT4SPACE 0\n#define GS_PLAYING 1\n#define GS_RETURN2CENTER 2\n#define AI_GET_BALL 1\n#define AI_SCORE 2\n#define AI_DEFEND 3\n#define PLAYERSPEED 3.0*timeDelta\n#define BALLSPEED 8.0*timeDelta\n#define TURNSPEED 2.0*timeDelta\n#define FIELD_WIDTH 30.0\n#define HALF_FIELD 15.0\n#define WALL_HEIGHT 4.0\n#define GOAL_WIDTH 0.5\n#define AILevel gs.w\n#define BALL_START vec2(0.0)\n#define BLUE_START vec2(-10.0,0.0)\n#define RED_START vec2(10.0,0.0)\n#define ORI_START vec3(0.0,0.0,PI)\n\n\/\/start game logic\nvoid FieldConstrict(inout vec2 v)\n{\/\/ keep players on the field\n\tfloat f=HALF_FIELD-0.75;\n    v=clamp(v,-f,f);\n}\nvoid FixRad(inout float a){a=mod(a+PI,2.0*PI)-PI;}\nvec2 Or2v(in float a){return vec2(cos(a),sin(a));}\nfloat dot2(vec2 v){return dot(v,v);}\nvoid IncScore(int scorer){\/\/increment scores\n\tif(scorer==0)gs.x+=1;else gs.y+=1;\n}\nvoid DoGame(){\/\/ Game logic goes here\n\tvec2 ms=(iMouse.x>0.0)?iMouse.xy\/iResolution.xy-vec2(0.5):vec2(0.0);\n\tbool bShoot=KeyDown(32);\/\/(iMouse.xy==iMouse.zw); \/\/\n\tif(gs.z==GS_PLAYING){\n\t\tfloat a;\/\/temp variables\n\t\tvec2 v;\n\t\/\/position player\n\t\tor.z-=ms.x*TURNSPEED;\n\t\tv=Or2v(or.z);\n\t\tpp.xy+=v*(ms.y+0.25)*PLAYERSPEED*2.0;\n\t\tFieldConstrict(pp.xy);\n\t\tvec2 lookat=pp.xy+v;\n\t\/\/position ball;\n\t\tbp.xy+=bp.zw;\n\t\/\/position ai\n\t\tv=bp.xy-pp.zw;\n\t\tif(AILevel==AI_GET_BALL){\n\t\t\tif(dot2(v)<1.25){\n\t\t\t\tAILevel=AI_SCORE;\n\t\t\t}else{\n\t\t\t\tif(dot2(bp.xy-pp.xy)<dot2(bp.xy-pp.zw)*0.5){\n\t\t\t\t\t\tv=(pp.xy-vec2(0.0,HALF_FIELD))*0.5;\n\t\t\t\t\t\tv-=pp.zw;\n\t\t\t\t}\n\t\t\t}\n\t\t\ta=atan(v.y,v.x)-or.y;FixRad(a);\n\t\t\tor.y+=a*TURNSPEED;FixRad(or.y);\n\t\t\tpp.zw+=Or2v(or.y)*PLAYERSPEED;\n\t\t\tFieldConstrict(pp.zw);\n\t\t}\n\t\tif(AILevel==AI_SCORE){\/\/move towards goal\n\t\t\tv=pp.zw+Or2v(or.y)-bp.xy;\n\t\t\tif(dot(v,v)<2.0){\n\t\t\t\tbp.zw=vec2(0.0);\n\t\t\t\tbp.xy+=v*BALLSPEED;\n\t\t\t\tv=vec2(0.0,HALF_FIELD);\n\t\t\t\tv-=pp.zw;\n\t\t\t\ta=atan(v.y,v.x)-or.y;FixRad(a);\n\t\t\t\tor.y+=a*TURNSPEED;FixRad(or.y);\n\t\t\t\tpp.zw+=Or2v(or.y)*PLAYERSPEED;\n\t\t\t\tFieldConstrict(pp.zw);\n\t\t\t\tif(dot(v,v)<HALF_FIELD){\/\/shoot\n\t\t\t\t\tbp.zw=normalize(bp.xy-pp.zw);\n\t\t\t\t\tbp.xy+=bp.zw;bp.zw*=BALLSPEED;\n\t\t\t\t\tAILevel=AI_GET_BALL;\n\t\t\t\t}\n\t\t\t}else AILevel=AI_GET_BALL;\n\t\t}\/\/does player have ball?\n\t\tv=lookat-bp.xy;\n\t\tif(dot(v,v)<1.0){\n\t\t\tbp.zw=vec2(0.0);\n\t\t\t\/\/shoot\n\t\t\tif(bShoot||(AILevel==AI_SCORE)){\n\t\t\t\tif(bShoot)bp.zw=bp.xy-pp.xy;\n\t\t\t\telse bp.zw=bp.xy-(pp.zw+pp.xy)*0.5;\n\t\t\t\tbp.zw=normalize(bp.zw);\n\t\t\t\tbp.xy+=bp.zw;bp.zw*=BALLSPEED;\n\t\t\t}else bp.xy+=v*BALLSPEED;\n\t\t}\n\t\t\/\/is there a collision\n\t\tv=pp.xy-pp.zw;\n\t\ta=dot(v,v);\n\t\tif(a<1.0){\n\t\t\ta=sqrt(a);\n\t\t\tv*=((1.0-a)*0.5)\/a;\n\t\t\tpp.xy+=v;\n\t\t\tpp.zw-=v;\n\t\t}\n\t\tif(abs(bp.x)>HALF_FIELD){\n\t\t\tbp.x=sign(bp.x)*HALF_FIELD;\n\t\t\tbp.z=-bp.z;\n\t\t}\n\t\tif(abs(bp.y)>HALF_FIELD){\n\t\t\tif(abs(bp.x)<GOAL_WIDTH){\n\t\t\t\tIncScore(bp.y<0.0?0:1);\n\t\t\t\tgs.z=GS_RETURN2CENTER;\n\t\t\t}else{\n\t\t\t\tbp.y=sign(bp.y)*HALF_FIELD;\n\t\t\t\tbp.w=-bp.w;\n\t\t\t}\n\t\t}\n\t\tbp.zw*=1.0-timeDelta;\n\t}else if(gs.z==GS_RETURN2CENTER){\/\/return position to center of field\n\t\t\tpp.xy=RED_START;\n\t\t\tpp.zw=BLUE_START;\n\t\t\tbp.xy=BALL_START;\n\t\t\tor.xyz=ORI_START;\n\t\t\tgs.z=GS_WAIT4SPACE;\n\t\t\tbp.zw=vec2(rand()-0.5,rand()-0.5);\n\t\t\tAILevel=AI_GET_BALL;\n\t}else{\/\/wait for space\n\t\tif((gs.x>9)||(gs.y>9)){\n\t\t\t\/\/g->settitle(\"GAME OVER\");\n\t\t\tgs.xy=ivec2(-1);\n\t\t}\n\t\tif(bShoot){gs.z=GS_PLAYING;}\n\t}\n\tor.x=mod(iGlobalTime,PI*2.0)-PI;\n}\n               \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.y>0.5 || fragCoord.x>3.5)discard;\n    rndseed=iDate.w;\n    if(iFrame<2){\/\/initialize state\n        bp.xy=BALL_START;\n        bp.zw=vec2(0.0);\n        pp.zw=BLUE_START;\n        pp.xy=RED_START;\n        or=vec4(ORI_START,iGlobalTime);\n        gs=ivec4(0,0,2,1);\n    }else{\/\/load state and run game\n        bp=load(0);\n        pp=load(1);\n        or=load(2);\n        gs=ivec4(load(3)+vec4(0.25));\n        timeDelta=iGlobalTime-or.w;\n        or.w=iGlobalTime;\n        DoGame();\n    }\n    \/\/store state\n    store(0,bp,fragColor,fragCoord);\n    store(1,pp,fragColor,fragCoord);\n    store(2,or,fragColor,fragCoord);\n    store(3,vec4(gs),fragColor,fragCoord);\n}","name":"","description":"","type":"buffer"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define bps 4.5\n#define N(a) if(bt--==0)n=a\n\/\/ note number to frequency  from https:\/\/www.shadertoy.com\/view\/ldfSW2\nfloat ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) \/ 12.0):0.0;}\nvec2 saw(vec2 t){return 2.0*(fract(t)-0.5);}\n\nvec2 mainSound( float time )\n{\n    int bt=int(floor(mod(time*bps,8.0)));\n    float n=0.0;\n    if(mod(time*bps,48.0)<31.0){\n    \tN(38.0);N(37.0);N(43.0);N(45.0);N(0.0);N(45.0);N(45.0);N(0.0);\n    }else{\n        N(43.0);N(0.0);N(47.0);N(43.0);N(0.0);N(0.0);N(0.0);N(42.0);\n    }\n    float f=ntof(n);\n    \n    return 0.2*saw(vec2(f*time,f*time*0.993))*vec2(sin(time),cos(time))*fract(time*bps);\n}","name":"","description":"","type":"sound"}]}}