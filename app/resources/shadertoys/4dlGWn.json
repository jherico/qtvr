{"Shader":{"ver":"0.1","info":{"id":"4dlGWn","date":"1367360511","viewed":424,"name":"Fractals: Mandelbrot","username":"4rknova","description":"A simple Mandelbrot fractal shader.","likes":1,"published":3,"flags":0,"tags":["fractal","mandelbrot"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2013\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define AA\t    2.\n#define ITER    128 \/\/ Max number of iterations\n#define COL_IN  vec3(0)\n\nvec3 fractal(vec2 p)\n{    \n\tvec2 z = vec2(0);  \n\n\tfor (int i = 0; i < ITER; ++i) {  \n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + p; \n\n\t\tif (dot(z,z) > 4.) {\n\t\t\tfloat s = .125662 * float(i);\n\t\t\treturn vec3(vec3(cos(s + .9), cos(s + .3), cos(s + .2)) * .4 + .6);\n\t\t}  \n\t}\n\n    return COL_IN;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 c = (fragCoord.xy \/ iResolution.xy * 2. - 1.)\n\t\t   * vec2(iResolution.x \/ iResolution.y, 1)\n\t\t   * 1.2 - vec2(.5,0.);\n\n    vec3 col = vec3(0);\n    \n#ifdef AA\n    \/\/ Antialiasing via supersampling\n    float e = 1. \/ min(iResolution.y , iResolution.x);    \n    for (float i = -AA; i < AA; ++i) {\n        for (float j = -AA; j < AA; ++j) {\n    \t\tcol += fractal(c + vec2(i, j) * (e\/AA)) \/ (4.*AA*AA);\n        }\n    }\n#else\n    col = fractal(c);\n#endif \/* AA *\/\n\n\tfragColor = vec4(col, 1);\n}","name":"","description":"","type":"image"}]}}