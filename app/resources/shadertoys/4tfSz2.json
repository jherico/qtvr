{"Shader":{"ver":"0.1","info":{"id":"4tfSz2","date":"1437849230","viewed":815,"name":"NumeredGrid","username":"patriciogv","description":"Example from http:\/\/patriciogonzalezvivo.com\/2015\/thebookofshaders\/10\/","likes":11,"published":3,"flags":0,"tags":["random","numbers","serial"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Author @patriciogv - 2015\n\/\/ http:\/\/patriciogonzalezvivo.com\n\nfloat random(in float x){ return fract(sin(x)*43758.5453); }\nfloat random(in vec2 st){ return fract(sin(dot(st.xy ,vec2(12.9898,78.233))) * 43758.5453); }\n\nfloat bin(vec2 ipos, float n){\n    float remain = mod(n,33554432.);\n    for(float i = 0.0; i < 25.0; i++){\n        if ( floor(i\/3.) == ipos.y && mod(i,3.) == ipos.x ) {\n            return step(1.0,mod(remain,2.));\n        }\n        remain = ceil(remain\/2.);\n    }\n    return 0.0;\n}\n\nfloat char(vec2 st, float n){\n    st.x = st.x*2.-0.5;\n    st.y = st.y*1.2-0.1;\n\n    vec2 grid = vec2(3.,5.);\n\n    vec2 ipos = floor(st*grid);\n    vec2 fpos = fract(st*grid);\n\n    n = floor(mod(n,10.));\n    float digit = 0.0;\n    if (n < 1. ) { digit = 31600.; } \n    else if (n < 2. ) { digit = 9363.0; } \n    else if (n < 3. ) { digit = 31184.0; } \n    else if (n < 4. ) { digit = 31208.0; } \n    else if (n < 5. ) { digit = 23525.0; } \n    else if (n < 6. ) { digit = 29672.0; } \n    else if (n < 7. ) { digit = 29680.0; } \n    else if (n < 8. ) { digit = 31013.0; } \n    else if (n < 9. ) { digit = 31728.0; } \n    else if (n < 10. ) { digit = 31717.0; }\n    float pct = bin(ipos, digit);\n\n    vec2 borders = vec2(1.);\n    \/\/ borders *= step(0.01,fpos.x) * step(0.01,fpos.y);   \/\/ inner\n    borders *= step(0.0,st)*step(0.0,1.-st);            \/\/ outer\n\n    return step(.5,1.0-pct) * borders.x * borders.y;\n}\n\nfloat grid(vec2 st, float res){\n    vec2 grid = fract(st*res);\n    return 1.-(step(res,grid.x) * step(res,grid.y));\n}\n\nfloat box(in vec2 st, in vec2 size){\n    size = vec2(0.5) - size*0.5;\n    vec2 uv = smoothstep(size,\n                        size+vec2(0.001),\n                        st);\n    uv *= smoothstep(size,\n                    size+vec2(0.001),\n                    vec2(1.0)-st);\n    return uv.x*uv.y;\n}\n\nfloat cross(in vec2 st, vec2 size){\n    return  clamp(box(st, vec2(size.x*0.5,size.y*0.125)) +\n            box(st, vec2(size.y*0.125,size.x*0.5)),0.,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\tvec2 st = fragCoord.xy \/ iResolution.xy;\n    st.x *= iResolution.x\/iResolution.y;\n    st *= 0.7;\n\n    vec3 color = vec3(0.0);\n    \n    \/\/ Grid\n    vec2 grid_st = st*300.;\n    color += vec3(0.5,0.,0.)*grid(grid_st,0.01);\n    color += vec3(0.2,0.,0.)*grid(grid_st,0.02);\n    color += vec3(0.2)*grid(grid_st,0.1);\n\n    \/\/ Crosses\n    vec2 crosses_st = st + .5;\n    crosses_st *= 3.;\n    vec2 crosses_st_f = fract(crosses_st);\n    color *= 1.-cross(crosses_st_f,vec2(.3,.3));\n    color += vec3(.9)*cross(crosses_st_f,vec2(.2,.2));\n\n    \/\/ Digits\n    vec2 digits_st = mod(st*60.,20.);\n    vec2 digits_st_i = floor(digits_st);\n    if (digits_st_i.y == 1. &&\n        digits_st_i.x > 0. && digits_st_i.x < 6. ) {\n        vec2 digits_st_f = fract(digits_st);\n        float pct = random(digits_st_i+floor(crosses_st)+floor(iGlobalTime*20.));\n        color += vec3(char(digits_st_f,100.*pct));\n    } else if (digits_st_i.y == 2. &&\n        digits_st_i.x > 0. && digits_st_i.x < 8. ) {\n        vec2 digits_st_f = fract(digits_st);\n        float pct = random(digits_st_i+floor(crosses_st)+floor(iGlobalTime*20.));\n        color += vec3(char(digits_st_f,100.*pct));\n    }\n    \n    \/\/ Digits\n    vec2 blocks_st = floor(st*3.);\n    float t = iGlobalTime*.8+random(blocks_st);\n    float time_i = floor(t);\n    float time_f = fract(t);\n    color.rgb += step(0.9,random(blocks_st+time_i))*(1.0-time_f);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}