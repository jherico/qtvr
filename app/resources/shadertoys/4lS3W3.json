{"Shader":{"ver":"0.1","info":{"id":"4lS3W3","date":"1432818373","viewed":872,"name":"Audio cube II - Visualiser","username":"uNiversal","description":"A variation of AudioCube by kuvkar -- Modified to work with Kodi shadertoy <a href=\"http:\/\/imgur.com\/a\/WfT2T#0\" class=\"regular\" target=\"_blank\">http:\/\/imgur.com\/a\/WfT2T#0<\/a><br\/>Cleanup channels and code white spaces mainly. Making it work with Kodi shadertoy","likes":1,"published":3,"flags":0,"tags":["3d","audio","visualiser"],"hasliked":0},"renderpass":[{"inputs":[{"id":19,"src":"\/presets\/mzk02.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*\nAudio cube II - Visualiser - \nVariation of AudioCube by: kuvkar - 19th March, 2015 https:\/\/www.shadertoy.com\/view\/llBGR1\nAuido Cube II by: uNiversal - 28th May, 2015\nCreative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n*\/\n \n\/\/Distance field functions from\n\/\/http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\/*-------------------------------------------------------------------------*\/\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n    vec2 q = vec2(length(p.xz)-t.x,p.y);\n    return length(q)-t.y;\n}\n\nfloat udBox( vec3 p, vec3 b )\n{\n    return length(max(abs(p)-b,0.0));\n}\n\nfloat sdHexPrism( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    return max(q.z-h.y,max((q.x*0.866025+q.y*0.5),q.y)-h.x);\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n    return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )\/k;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n    vec3 d = abs(p) - b;\n    return min(max(d.x,max(d.y,d.z)),0.0) +\n           length(max(d,0.0));\n}\n\n\/*-------------------------------------------------------------------------*\/\n\n#define PI 3.14159\n#define TYPE_CUBE 1\n#define TYPE_SPHERE 2\n#define OBJECT_COUNT 2\n\nmat3 rotx(float a) { mat3 rot; rot[0] = vec3(1.0, 0.0, 0.0); rot[1] = vec3(0.0, cos(a), -sin(a)); rot[2] = vec3(0.0, sin(a), cos(a)); return rot; }\nmat3 roty(float a) { mat3 rot; rot[0] = vec3(cos(a), 0.0, sin(a)); rot[1] = vec3(0.0, 1.0, 0.0); rot[2] = vec3(-sin(a), 0.0, cos(a)); return rot; }\n\nstruct Object\n{\n    mat3 rot;\n    vec3 pos;\n    vec3 size;\n    int type;\n};\n\nObject objects[OBJECT_COUNT];\n\nfloat dist(vec3 position)\n{\n    float m = 9999.0;\n    vec4 audio = texture2D(iChannel0, vec2(0.0, 0.0));\n    vec2 uv = vec2(position.x, position.y) * 1.0;\n    vec4 col = texture2D(iChannel0, uv).rgba;\n\n    Object o = objects[0];\n    vec3 p = position + o.pos;\n\n    p = p * o.rot;\n    float f = 0.0;\n\n    float a = sdBox(p, o.size);\n    float b = sdSphere(p, o.size.x);\n    float au = audio.x;\n\n    f = au * a + (1.0 - au) * b;\n    f -= sdSphere(p, o.size.x) * (0.3 + au * 0.4);\n\n    m = min(f, m);\n    return m;\n}\n\nfloat toClipSpace(float f)\n{\n    return f * 2.0 - 1.0;\n}\n\nvec3 lookAt(vec3 from, vec3 to, vec3 dir)\n{\n    mat3 m;\n    \n    vec3 fwd = normalize(to - from);\n    vec3 _up = vec3(0.0, 1.0, 0.0);\n    vec3 r = cross(fwd, _up);\n    vec3 u = cross(r, fwd);\n    \n    m[0] = r;\n    m[1] = u;\n    m[2] = fwd;\n    vec3 d = m * dir;    \n    d.z *= -1.0;\n    return d;\n}\n\nbool trace(vec3 from, vec3 dir, out vec3 hitPosition, out float m)\n{\n    \n    const int steps = 300;\n    float step = 0.01;    \n    vec3 rp = from;\n    m = 99999.0;\n    \n    for (int i = 0; i < steps; ++i)\n    {\n        rp += dir * step;\n        float sp = dist(rp);\n        step  = sp;\n        m = min(m, abs(sp));\n        if (abs(sp) <= 0.001)\n        {\n            hitPosition = rp;\n            return true;\n        }\n        \n    }\n    return false;\n}\n\nObject getObject(vec3 position, int type)\n{\n    Object c;\n    c.pos = position;\n    c.rot = mat3(1.0);\n    c.type = type;\n    c.size = vec3(0.1, 0.1, 0.1);\n    return c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = vec2(fragCoord.x \/ iResolution.x, fragCoord.y \/ iResolution.x);\n    uv.y += (iResolution.y \/ iResolution.x) * 0.4;\n\n    vec4 audio = texture2D(iChannel0, vec2(1.0, 0.0));\n\n    objects[0] = getObject(vec3(0.0), TYPE_CUBE);\n    objects[0].size = vec3(0.1, 0.1, 0.1);\n\n    objects[0].rot *= rotx(iGlobalTime * 1.5);\n    objects[0].rot *= roty(sin(iGlobalTime * 1.5));\n\n    vec3 camPos = vec3(0.0, 0.0, 1.0);    \n    vec3 lk = vec3(-toClipSpace(uv.x), -toClipSpace(uv.y), -2.0);\n    vec3 mclip = vec3(0.0);\n    vec3 dir = lookAt(camPos, mclip, normalize(lk));\n    vec3 hit = vec3(0.0);\n    vec4 color = vec4(0.0);\n\n    float m;\n    bool h = trace(camPos, dir, hit, m);\n    vec4 aColor = vec4(1.0);\n\n    float p =  pow(length(uv - vec2(0.5, 0.5)), 3.0);\n    aColor.r = 0.5 + (sin((iGlobalTime + 100.0) * 0.25) * 0.5);\n    aColor.g = 0.5 + (cos((iGlobalTime + 300.0) * 0.15) * 0.5);\n\n    if(h)\n    {\n        vec2 offset = vec2(0.001, 0.0);\n        vec3 grad = normalize(vec3(dist(hit + offset.xyy) - dist(hit - offset.xyy), \n                                   dist(hit + offset.yxy) - dist(hit - offset.yxy),\n                                   dist(hit + offset.yyx) - dist(hit - offset.yyx)));\n        \n        float d = clamp(dot(grad, vec3(0.0, 0.0, 1.0)), 0.0, 1.0);\n        float rim = (1.0 - d) * 1.4;        \n        color += aColor * pow(rim, 2.0);\n\n    }\n    else\n    {\n        color = aColor * pow(length(uv - vec2(0.5, 0.5)) * (1.0 + p * audio.x * 5.0), 1.4) * 1.5;\n    }\n\n    float d = (1.0 - m * 75.0) * 15.0 * p;\n    color += aColor * pow(clamp(d, 0.0, 0.0), 1.2);\n\n    fragColor = color;\n}\n","name":"","description":"","type":"image"}]}}