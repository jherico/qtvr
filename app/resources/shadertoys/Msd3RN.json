{"Shader":{"ver":"0.1","info":{"id":"Msd3RN","date":"1448466820","viewed":466,"name":"Glowing Teapot","username":"834144373","description":"The model copy form  iapafoto:<a href=\"https:\/\/www.shadertoy.com\/view\/4d33RN\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/4d33RN<\/a>and <a href=\"https:\/\/www.shadertoy.com\/view\/XsSGzG\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/XsSGzG<\/a>,with iapafoto's permission.here thanks his support.<img src=\"\/img\/emoticonHappy.png\"\/><br\/>Move mouse change color and full screen to get a good effect.","likes":14,"published":3,"flags":0,"tags":["3d","raymarching","teapot","glowing","density"],"hasliked":0},"renderpass":[{"inputs":[{"id":215,"src":"https:\/\/soundcloud.com\/aristoquartet\/enya-orinoco-flow","ctype":"musicstream","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/-----------------------------------------------------------------------------------------\n\/\/Glowing Teapot.glsl\n\/\/License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/Created by 834144373 2015\/11\/25\n\/\/Tags: density, 3D, Raymarching, Glowing, Teapot.\n\/\/Original: https:\/\/www.shadertoy.com\/view\/Msd3RN\n\/\/-----------------------------------------------------------------------------------------\n\/*\nThe model copy form  iapafoto: https:\/\/www.shadertoy.com\/view\/4d33RN\n\t\t\t\t\t\t\t   https:\/\/www.shadertoy.com\/view\/XsSGzG,\n\twith iapafoto's permission.here thanks his support.:)\n*\/\n\nvec2 A[15];\nvec2 T1[5];\nvec2 T2[5];\n\n#define U(a,b) (a.x*b.y-b.x*a.y)\n\n\/\/\/some tools for blend model\nvec3 Rot(vec3 p,vec3 angles)\n{\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n\t    \n    return p*rotX * rotY * rotZ;\n}\n\nfloat smin(float a, float b, float k){\n    float h = clamp(.5+.5*(b-a)\/k, 0., 1.);\n    return mix(b,a,h)-k*h*(1.-h);\n}\n\/\/set values for teapot\nvoid SetValue(){\n\n\t\/\/ Teapot body profil (8 quadratic curves) \n\tA[0]=vec2(0,0);A[1]=vec2(.64,0);A[2]=vec2(.64,.03);A[3]=vec2(.8,.12);A[4]=vec2(.8,.3);A[5]=vec2(.8,.48);A[6]=vec2(.64,.9);A[7]=vec2(.6,.93);\n\tA[8]=vec2(.56,.9);A[9]=vec2(.56,.96);A[10]=vec2(.12,1.02);A[11]=vec2(0,1.05);A[12]=vec2(.16,1.14);A[13]=vec2(.2,1.2);A[14]=vec2(0,1.2);\n\t\/\/ Teapot spout (2 quadratic curves)\n\tT1[0]=vec2(1.16, .96);T1[1]=vec2(1.04, .9);T1[2]=vec2(1,.72);T1[3]=vec2(.92, .48);T1[4]=vec2(.72, .42);\n\t\/\/ Teapot handle (2 quadratic curves)\n\tT2[0]=vec2(-.6, .78);T2[1]=vec2(-1.16, .84);T2[2]=vec2(-1.16,.63);T2[3]=vec2(-1.2, .42);;T2[4]=vec2(-.72, .24);\n\n}\n\n\/\/\/Bezier \nvec2 B(vec2 m, vec2 n, vec2 o, vec3 p) {\n\tvec2 q = p.xy;\n\tm-= q; n-= q; o-= q;\n\tfloat x = U(m, o), y = 2. * U(n, m), z = 2. * U(o, n);\n\tvec2 i = o - m, j = o - n, k = n - m, \n\t\t s = 2. * (x * i + y * j + z * k), \n\t\t r = m + (y * z - x * x) * vec2(s.y, -s.x) \/ dot(s, s);\n\tfloat t = clamp((U(r, i) + 2. * U(k, r)) \/ (x + x + y + z), 0.,1.); \/\/ parametric position on curve\n\tr = m + t * (k + k + t * (j - k)); \/\/ distance on 2D xy space\n\treturn vec2(sqrt(dot(r, r) + p.z * p.z), t); \/\/ distance on 3D space\n}\n\n\nfloat M(vec3 p) {\n\t\n\tp.y -= - 0.5;\n\n    \/\/ Distance to Teapot --------------------------------------------------- \n\t\/\/ precalcul first part of teapot spout\n\tvec2 h = B(T1[2],T1[3],T1[4], p);\n\tfloat a = 99., \n\t\tr = length(p), \n    \/\/ distance to teapot handle (-.06 => make the thickness) \n\t\tb = min(min(B(T2[0],T2[1],T2[2], p).x, B(T2[2],T2[3],T2[4], p).x) - .06, \n    \/\/ max p.y-.9 => cut the end of the spout \n                max(p.y - .9,\n    \/\/ distance to second part of teapot spout (abs(dist,r1)-dr) => enable to make the spout hole \n                    min(abs(B(T1[0],T1[1],T1[2], p).x - .07) - .01, \n    \/\/ distance to first part of teapot spout (tickness incrase with pos on curve) \n                        h.x * (1. - .75 * h.y) - .08)));\n\t\n    \/\/ distance to teapot body => use rotation symetry to simplify calculation to a distance to 2D bezier curve\n\tvec3 qq = vec3(r * sin(acos(p.y \/ r)), p.y, 0);\n    \/\/ the substraction of .015 enable to generate a small thickness arround bezier to help convergance\n    \/\/ the .8 factor help convergance  \n\tfor(int i=0;i<13;i+=2) \n\t\ta = min(a, (B(A[i], A[i + 1], A[i + 2], qq).x - .015) * .8); \n    \/\/ smooth minimum to improve quality at junction of handle and spout to the body\n\tfloat dTeapot = smin(a,b,.02);\n\n    return dTeapot;\n}\n\n\nfloat dis(vec3 campos,vec3 p){\n\tfloat d = 0.;\n\tfloat dd = 1.;\n\tfor(int i = 0;i<54;++i){\n\t\tvec3 sphere = campos + dd*p;\n\t\td = M(sphere);\n\t\tdd += d;\n\t\tif(d<0.02 || dd>10.)break;\n\t}\n\treturn dd;\n}\n\nvec3 normal(vec3 p){\n\tvec2 offset = vec2(0.,0.01);\n\tvec3 nDir = vec3(\n\t\tM(p+offset.yxx),\n\t\tM(p+offset.xyx),\n\t\tM(p+offset.xxy)\n\t)-M(p);\n\treturn normalize(nDir);\n}\n\nfloat objdetal(in vec3 p) {\n  \tfloat res = 0.;\n    vec3 c = p;\n  \tfor (int i = 0; i < 10; ++i) {\n        p =1.7*abs(p)\/dot(p,p) -0.8;\n        p=p.zxy;\n        res += exp(-20. * abs(dot(p,c)))*.5;        \n  }\n  return res;\n}\n\nvec4 objdensity(vec3 pointpos,vec3 dir,float finaldis){\n    vec4 color=vec4(0.);\n    float den = 0.;\n    vec3 sphere = pointpos + finaldis*dir;\n    float dd = 0.;\n   \n    for(int j = 0;j<45;++j){\n        vec4 col;\n        col.a = objdetal(sphere);\n\n        float c = col.a\/200.;\n        col.rgb = vec3(c,c,c);\n        col.rgb *= col.a;\n        col.rgb *= exp(-float(j)\/20.);\n        dd = 0.01*exp(-2.*col.a);\n        \/\/float dd = max(0.1,col.a);\n        sphere += dd*dir;\n\n        color += col;\/\/*0.8;\n        if(c>.9 || dd >0.014)break;\n    }\n \n    return color*4.5;\n}\n#define time iGlobalTime\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = ( fragCoord.xy - iResolution.xy\/2. )\/iResolution.y;\n\n\t\/\/\/set values for teapos\n\tSetValue();\n\t\n\tfloat t1 = -.5;\/\/ - min(mo.y*1.3,.4);\n\tfloat t2 = time*0.1+2.2;\n\tfloat t3 = 0.;\n\t\n\tvec2 Mo = (iMouse.xy\/iResolution.xy)*vec2(0.5,1.5);\n\t\n\t\/\/directiong\n\tvec3 p = normalize(vec3(uv,2.3));\n\t\tp = Rot(p,vec3(t1,t2,t3));\n\t\/\/camera position\n\tvec3 campos = vec3(0.,0.,-4.2);\n\t\tcampos = Rot(campos,vec3(t1,t2,t3));\n\t\/\/return surface distance\n\tfloat dd = dis(campos,p);\n\t\n\tvec4 col;\n\tif(dd<10.){\n\t\tvec3 surface = campos + dd*p;\n\t\tvec3 nDir = normal(surface);\n\t\t\tnDir = max(abs(nDir-0.13)-0.1,0.);\n\t\tcol = objdensity(campos,p,dd).rgba;\n\t\t\/\/col.rgb *= col.a\/300.;\n\t\tcol.rgb = 1.6*col.rgb*vec3(0.7+Mo.y,0.8+Mo.x,0.5);\n\t\tcol.rgb += nDir.yyy*nDir.xxx;\n\t}\n\t\n\tfragColor = vec4( col.rgb, 1.0 );\n\n}\n","name":"","description":"","type":"image"}]}}