{"Shader":{"ver":"0.1","info":{"id":"MlfGDX","date":"1425608755","viewed":945,"name":"FCC Linear Interpolation","username":"paniq","description":"Linear interpolation of values in a face-centered cubic (FCC) lattice - original left, interpolated right; T = visualization; W = grid; C = automatic \/ user-controlled cross section; when user-controlled: P = change cutting plane.","likes":10,"published":3,"flags":0,"tags":["mattdamon"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*\n\nTo find the cell that a point is passing, we skew the coordinates so that\nan octahedron with two tetrahedra at opposing sides forms a perfect\ncube with two interior faces along the normal (1 1 1); \n\nWe can now split the coordinate into an integer and a fractional part. \nThe integer coordinate is unskewed to find the local basis; we take the\ndot product of the fractional part and the normal (x+y+z) to get the type\nof cell: \n\nx < 1 is the lower left front tetrahedron, \n1 <= x < 2 is the center octahedron,\n2 <= x is the upper right back tetrahedron.\n\nThe first three interpolants q,r,s of the tetrahedra are simply the \nxyz components of the fractional part. The fourth interpolant\nis 1-q-r-s.\n\nThe three axis aligned interpolants of the octahedron are the unskewed\nfractional part - 1.\n*\/\n\nvec3 cart2fcc(vec3 p) {\n    return vec3(p.yzx + p.zxy - p.xyz)\/2.0;\n}\n\nvec3 fcc2cart(vec3 p) {\n    return vec3(p.yzx + p.zxy);\n}\n\n\/\/------------------------------------------------------------------------\n\n\/\/ keys are javascript keycode: http:\/\/www.webonweboff.com\/tips\/js\/event_key_codes.aspx\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\n\nbool ReadKey( int key )\/\/, bool toggle )\n{\n\tbool toggle = true;\n\tfloat keyVal = texture2D( iChannel3, vec2( (float(key)+.5)\/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\nvec2 mouse;\n\n\/\/------------------------------------------------------------------------\n\/\/ Camera\n\/\/\n\/\/ Move the camera. In this case it's using time and the mouse position\n\/\/ to orbitate the camera around the origin of the world (0,0,0), where\n\/\/ the yellow sphere is.\n\/\/------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float ur = 6.5;\n    float an = 0.1*sin(iGlobalTime);\/\/ + 10.0*mouseX;\n\tcamPos = vec3(ur*sin(an),3.0+cos(iGlobalTime*0.7)*1.5,ur*cos(an));\n    \/\/camPos = vec3(0.0,4.0,ur);\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\nvec3 doBackground( void )\n{\n    return vec3( 1.0);\n}\n\nfloat box(vec3 p, vec3 b)\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nconst float INVSQRT3 = 0.5773502691896258;\n\nfloat octa(vec3 p) {\n    vec3 o = abs(p);\n\tfloat s = o.x+o.y+o.z;\n\treturn (s-1.0)*INVSQRT3;\n}\n\nfloat tetra1(vec3 o) {\n    float p1 = -o.x+o.y-o.z;\n    float p2 =  o.x-o.y-o.z;\n    float p3 = -o.x-o.y+o.z;\n    float p4 =  o.x+o.y+o.z;    \n\tfloat s = max(max(max(p1,p2),p3),p4);\n\treturn (s-0.5)*INVSQRT3;\n}\n\nfloat tetra2(vec3 o) {\n    return tetra1(vec3(-o.x,o.yz));\n}\n\n\/\/ face-centered lattice (rhombic dodecahedral symmetry), 12 directions\nfloat fcc_axis(vec3 p) {\n    vec3 o = abs(p);\n    vec3 q = o \/ 2.0;\n    float s = length(vec3(o.xy - (q.x + q.y), o.z));\n    s = min(s, length(vec3(o.xz - (q.x + q.z), o.y)));\n    s = min(s, length(vec3(o.yz - (q.y + q.z), o.x)));\n    return s;\n}\n\nfloat lattice_fcc(vec3 p) {\n    p = mod(p-1.0,2.0)-1.0;\n    float a0 = fcc_axis(p);\n    float ax = min(min(\n        fcc_axis(p-vec3(0.0,1.0,1.0)),\n        fcc_axis(p-vec3(0.0,-1.0,-1.0))\n   \t), min(\n        fcc_axis(p-vec3(0.0,-1.0,1.0)),\n        fcc_axis(p-vec3(0.0,1.0,-1.0))\n    ));\n    float ay = min(min(\n        fcc_axis(p-vec3(1.0,0.0,1.0)),\n        fcc_axis(p-vec3(-1.0,0.0,-1.0))\n   \t), min(\n        fcc_axis(p-vec3(-1.0,0.0,1.0)),\n        fcc_axis(p-vec3(1.0,0.0,-1.0))\n    ));\n    \n    return min(a0, min(ax, ay));\n}\n\nvec4 min4(vec4 a, vec4 b) {\n    return (a.x <= b.x)?a:b;\n}\n\nvec4 max4(vec4 a, vec4 b) {\n    return (a.x > b.x)?a:b;\n}\n\nconst vec3 plane_color = vec3(0.6, 0.5, 0.4);\nconst vec3 oct_color = vec3(0.0,0.9,0.5);\nconst vec3 tet_color = vec3(0.1,0.9,0.5);\nconst vec3 point_color = vec3(0.1,0.0,0.1);\nconst vec3 lut_color = vec3(0.0);\n\nvec3 random_point() {\n    float t = iGlobalTime*0.05;\n    vec3 p = vec3(2.0*cos(3.0*t+0.1),2.0*cos(4.0*t+0.7),2.0*cos(7.0*t));\n    return p;\/\/vec3(-0.3,-1.5,p.z);\n}\n    \nvec4 scene(vec3 p) {\n    \/\/ fix coordinate system so Z is up\n    p = vec3(p.x,-p.z,p.y);\n    \n    vec4 plane = vec4(p.z+2.0, plane_color);\n    \n    vec4 d = plane;\n    \n    vec3 rp = random_point();\n    vec3 mrp = cart2fcc(rp);\n    vec3 f = floor(mrp);\n    vec3 o = mrp - f;\n    float q = dot(o, vec3(1.0));\n    f = fcc2cart(f);\n    \n    float zcap = box(p, vec3(4.0,2.0,2.0));\n    float lattice = lattice_fcc(p);\n    vec4 m;\n    if (!ReadKey(Key_W)) {\n\t    m = vec4(max(zcap, lattice-0.05), 0.0, 0.0, 1.0);\n    } else {\n        lattice = 1e+20;\n        m.x = 1e+20;\n    }\n    \n    if (!ReadKey(Key_T)) {\n\t    m = min4(m, vec4(max(zcap,-lattice+0.1), 0.0, 0.0, 0.0));\n    } else {\n    \n        if (q < 1.0) {\n            m = min4(m,vec4(tetra1(p-f-vec3(0.5,0.5,0.5))+0.01, lut_color));\n        } else if (q < 2.0) {\n            m = min4(m,vec4(octa(p-f-vec3(1.0,1.0,1.0))+0.01, lut_color));\n        } else {\n            m = min4(m,vec4(tetra2(p-f-vec3(1.5,1.5,1.5))+0.01, lut_color));\n        }    \n    }\n\n    if (!ReadKey(Key_C)) {\n        m.x = max(m.x, max(rp.y-p.y,p.z-rp.z));\n\t    d = min4(d, vec4(length(p-rp)-0.1, point_color));\n    } else if (ReadKey(Key_P)) {\n        float df = (p.x+p.y-p.z)*INVSQRT3;\n\t    m.x = max(m.x, (mouse.x*4.0)-2.0-df);\n    } else {\n\t    m.x = max(m.x, (mouse.x*4.0)-2.0-p.y);\n    }\n    d = min4(d, m);\n    \n    return d;\n}\n\nvec3 hue2rgb(float hue) {\n    return clamp( \n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, \n        0.0, 1.0);\n}\n\nvec3 hsl2rgb(vec3 c) {\n    vec3 rgb = hue2rgb(c.x);\n    return c.z + c.y * (rgb - 0.5) * (1.0 - abs(2.0 * c.z - 1.0));\n}\n\n#if 0\n\nconst vec3 c0 = vec3(1.0,0.0,0.0);\nconst vec3 c1 = vec3(0.0,1.0,1.0);\nconst vec3 c2 = vec3(0.0,1.0,0.0);\nconst vec3 c3 = vec3(1.0,0.0,1.0);\nconst vec3 c4 = vec3(0.0,0.0,1.0);\nconst vec3 c5 = vec3(1.0,1.0,0.0);\n\nvec3 tet_demo1(vec3 b, vec4 q) {\n    return c3*q.x + c1*q.y + c5*q.z + c4*q.w;\n}\n\nvec3 tet_demo2(vec3 b, vec4 q) {\n    return c3*q.x + c4*q.y + c2*q.z + c1*q.w;\n}\n\nvec3 oct_demo(vec3 b, vec3 s, vec3 t) {\n    return c0*s.x + c1*t.x + c2*s.y + c3*t.y + c4*s.z + c5*t.z;\n}\n\n#else\n\nconst vec3 c0 = vec3(1.0,0.0,0.0);\nconst vec3 c1 = vec3(0.0,1.0,1.0);\nconst vec3 c2 = vec3(0.0,1.0,0.0);\nconst vec3 c3 = vec3(1.0,0.0,1.0);\nconst vec3 c4 = vec3(0.0,0.0,1.0);\nconst vec3 c5 = vec3(1.0,1.0,0.0);\n\nvec3 fake_lut(vec3 p) {\n    \/\/ this would access a texture in a real application\n    p = fcc2cart(p);\n    float w = length(p)*0.2;\n    return hsl2rgb(vec3(w-iGlobalTime*0.01,1.0,0.5));\n}\n\nvec3 tet_demo1(vec3 b, vec4 q) {\n    vec3 p0 = fake_lut(b + vec3( 1.0, 0.0, 0.0));\n    vec3 p1 = fake_lut(b + vec3( 0.0, 1.0, 0.0));\n    vec3 p2 = fake_lut(b + vec3( 0.0, 0.0, 1.0));\n    vec3 p3 = fake_lut(b);\n\t\n    return p0 * q.x + p1 * q.y + p2 * q.z + p3 * q.w;\n}\n\nvec3 tet_demo2(vec3 b, vec4 q) {\n    vec3 p0 = fake_lut(b + vec3( 0.0, 1.0, 1.0));\n    vec3 p1 = fake_lut(b + vec3( 1.0, 0.0, 1.0));\n    vec3 p2 = fake_lut(b + vec3( 1.0, 1.0, 0.0));\n    vec3 p3 = fake_lut(b + vec3( 1.0 ));\n\t\n    return p0 * q.x + p1 * q.y + p2 * q.z + p3 * q.w;\n}\n\nvec3 oct_demo(vec3 b, vec3 s, vec3 t) {\n    vec3 p0 = fake_lut(b + vec3( 1.0, 0.0, 0.0));\n    vec3 p1 = fake_lut(b + vec3( 0.0, 1.0, 0.0));\n    vec3 p2 = fake_lut(b + vec3( 0.0, 0.0, 1.0));\n    vec3 p3 = fake_lut(b + vec3( 0.0, 1.0, 1.0));\n    vec3 p4 = fake_lut(b + vec3( 1.0, 0.0, 1.0));\n    vec3 p5 = fake_lut(b + vec3( 1.0, 1.0, 0.0));\n    \n    return p0*s.x + p1*s.y + p2*s.z + p3*t.x + p4*t.y + p5*t.z;\n}\n\n#endif\n\nvec3 fcc_lookup(vec3 p) {\n    \/\/ fix coordinate system so Z is up\n    p = vec3(p.x,-p.z,p.y);\n    \n    vec3 fcc_p = cart2fcc(p);\n    if (p.x < 0.0) {\n        return fake_lut(fcc_p);\n    }        \n    \n    vec3 fcc_basis = floor(fcc_p);\n    \n    vec3 fcc_fract = fcc_p - fcc_basis;\n    float q = fcc_fract.x+fcc_fract.y+fcc_fract.z;\n    \n    if (q < 1.0) {\n        vec4 t = vec4(fcc_fract, 1.0-q);\n        return tet_demo1(fcc_basis, t);\n    } else if (q < 2.0) {\n        vec3 w = fcc2cart(fcc_fract)-1.0;\n        float d = (1.0 - (abs(w.x)+abs(w.y)+abs(w.z)))\/6.0;\n        vec3 s = d+max(-w,0.0);\n        vec3 t = d+max(w,0.0);\n        return oct_demo(fcc_basis, s,t);\n    } else {\n        vec4 t = vec4(1.0 - fcc_fract, q-2.0);\n        return tet_demo2(fcc_basis, t);\n    }\n    \n    return vec3(0.0);\n}\n\nfloat doModel( vec3 p ) {\n    return scene(p).x;\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    vec3 hsl = scene(pos).yzw;\n    return hsl.b==0.0?fcc_lookup(pos):hsl2rgb(hsl);\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Lighting\n\/\/------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nfloat ao(vec3 ro, vec3 rd) {\n\tconst float st = 0.2;\n\tfloat total = 0.0;\n\tfloat weight = 0.5;\n\tfor (int i = 1; i <= 5; ++i) {\n\t\tfloat d1 = st * float(i);\n\t\tfloat d2 = doModel(ro + rd * d1);\n\t\ttotal += weight * (d1 - d2);\n\t\tweight *= 0.5;\n\t}\n\t\n\treturn clamp(1.0 - 2.0 * total, 0.0, 1.0);\n}\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    \/\/ ambient light\n    \/\/-----------------------------\n    lin += vec3(1.0) * ao( pos, nor );\n\n    \n    \/\/ surface-light interacion\n    \/\/-----------------------------\n    vec3 col = mal*lin;\n\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \/\/ max trace distance\n\tconst float precis = 0.001;        \/\/ precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          \/\/ max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             \/\/ precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \/\/ selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         \/\/ 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t);\n        res = min( res, 64.0*h\/t );   \/\/ 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   \/\/ limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n    mouse = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    \n    \/\/ camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iGlobalTime, mouse.x );\n\n    \/\/ camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  \/\/ 0.0 is the camera roll\n    \n\t\/\/ create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \/\/ 2.0 is the lens length\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t\/\/ raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        \/\/ materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}