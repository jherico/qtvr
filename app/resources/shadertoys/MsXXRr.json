{"Shader":{"ver":"0.1","info":{"id":"MsXXRr","date":"1395768131","viewed":977,"name":"Cavern game","username":"XT95","description":"A small game (delete inadvertently but bugs fixed now!)<br\/>You must avoid the obstacles by moving the camera with the mouse !","likes":9,"published":3,"flags":0,"tags":["3d","distancefield","reflection","game","collision","sss"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const float sensivity = .025;\nconst float speed     = 1.5;\n\nfloat noise3f( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+0.5)\/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z )*2.-1.;\n}\n\nfloat scene(vec3 p)\n{\n\treturn max( .4+noise3f(p*.7)*.5+noise3f(p*2.)*.1-abs(p.y), p.z+5.); \/\/\n}\n\nvec3 raymarche(vec3 org, vec3 dir)\n{\n\tvec3 p=org;\n\tfloat d=1.;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif(d>0.01)\n\t\t{\n\t\t\td = scene(p);\n\t\t\tp += d * dir;\n\t\t}\n\t}\n\treturn p;\n}\nvec3 raymarcheSmall(vec3 org, vec3 dir)\n{\n\tvec3 p=org;\n\tfloat d=1.;\n\tfor(int i=0; i<16; i++)\n\t{\n\t\tif(d>0.01)\n\t\t{\n\t\t\td = .4+noise3f(p*.7)*.5-abs(p.y);\n\t\t\tp += d * dir;\n\t\t}\n\t}\n\treturn p;\n}\n\nvec3 getNormal(vec3 p)\n{\n\tvec3 eps = vec3(0.01,0.0,0.0);\n\treturn normalize(vec3(\n\tscene(p+eps.xyy)-scene(p-eps.xyy),\n\tscene(p+eps.yxy)-scene(p-eps.yxy),\n\tscene(p+eps.yyx)-scene(p-eps.yyx)\n\t));\n}\nfloat getAO(vec3 p, vec3 n, vec2 a)\n{\n\tfloat dlt = a.x;\n\tfloat oc = 0.0, d = a.y;\n\tfor(int i = 0; i<6; i++)\n\t{\n\t\toc += (float(i) * dlt - scene(p + n * float(i) * dlt)) \/ d;\n\t\td *= 2.0;\n\t}\n\treturn clamp(1.0 - oc, 0.0, 1.0);\n}\n\nvec4 getColor(vec3 p, vec3 n, vec3 org, vec3 dir)\n{\n\tvec3 lightdir = normalize(vec3(1.0,0.0,-1.0));\t\n\t\n\tfloat diffuse = max( dot(n,lightdir), 0.0)*.5+.5;\n\tfloat ao = getAO(p,dir,vec2(1.0,2.5));\n\t\n\tvec4 color =  vec4(0.5,1.0,0.5,1.);\n\tif(p.y>0.)\n\t\tcolor = mix(vec4(.5,.7,1.,1.),vec4(.2,.7,.2,1.)*2., noise3f(p)*.5+.5);\n\telse\n\t\tcolor =  mix(vec4(.5,.7,1.,1.),vec4(1.5), ao);\n\tcolor *= diffuse  * ao ;\t\n\tcolor = mix(color, vec4(1.), min(distance(p,org)*0.05,1.0)); \/\/Fog\n\t\n\treturn color*color*4.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 v = -1.0 + 2.0 * fragCoord.xy \/ iResolution.xy;\n\tv.x *= iResolution.x\/iResolution.y;\t\n\t\n\tvec3 org = raymarcheSmall(vec3(iMouse.x*sensivity,0.,-pow(iGlobalTime,speed)),vec3(.0,-1.,.0))+vec3(.0,.15,.0);\n\tvec3 dir = normalize(vec3(v.x*1.6,v.y,-.9-1.\/pow(iGlobalTime,speed)));\n\tvec4 color=vec4(0.,1.,0.,1.);\n\tvec3 p = raymarche(org,dir);\n\tcolor = getColor(p,getNormal(p),org,dir);\n\t\t\n\tvec3 refdir = reflect(dir,getNormal(p));\n\tp = raymarcheSmall(p+refdir,refdir);\n\tcolor = mix( color, getColor(p,getNormal(p),org,dir), .15 );\n\t\n\tif(scene(org)<.0) \/\/Fail ? red screen !\n\t\tcolor = vec4(1.,.0,.0,1.);\n\tfragColor = color;\n}\n\n\n\n","name":"","description":"","type":"image"}]}}