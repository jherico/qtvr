{"Shader":{"ver":"0.1","info":{"id":"4slGWN","date":"1370708969","viewed":1001,"name":"Pokeball","username":"4rknova","description":"Gotta catch' em all!","likes":5,"published":3,"flags":0,"tags":["ray","marching","csg","pokeball"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2013\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#ifdef GL_ES\nprecision highp float;\n#endif\n\n#define EPS\t\t.001\n#define EPS_M\t.1\n#define PI\t\t3.14159265359\n#define\tRADIAN\t180. \/ PI\n\n#define RM_MAX\t256\n#define RS_MAX\t32\n#define PNMBRA\t25.\n\nstruct L { vec3 p,d,s; };\nstruct M { vec3 d,s; float e; };\nstruct C { vec3 p,t,u; };\nstruct R { vec3 o,d; };\n\t\nfloat gmp(vec3 p, vec4 n)\t\t{return dot(p,normalize(n.xyz)) + n.w;}\nfloat gms(vec3 p, float r)\t\t{return length(p) - r;}\nfloat gmb(vec3 p, vec3 b)\t\t{vec3 d = abs(p)-b;\n\t\t\t\t\t\t\t\t return min(max(d.x,max(d.y,d.z)), 0.) \n\t\t\t\t\t\t\t\t\t \t+length(max(d,0.0));}\nfloat opu(float d1, float d2) \t{return min( d1, d2);}\nfloat ops(float d1, float d2)\t{return max( d1,-d2);}\nfloat opi(float d1, float d2)\t{return max( d1, d2);}\nvec3  tmv(vec3 v, vec3 t)\t\t{return v - t;}\n\nvoid ray(C c, out R r, in vec2 fragCoord)\n{\n\tvec2  uv = (fragCoord.xy \/ iResolution.xy * 2. - 1.)\n\t\t\t * vec2(iResolution.x \/ iResolution.y, 1.);\n\t\n\tr.o = c.p;\n\tr.d = normalize(vec3(uv.x, uv.y, 1.0 \/ tan(30. * RADIAN)));\n\t\n\tvec3 cd = c.t - c.p,\n\t\t rz = normalize(cd),\n\t\t rx = normalize(cross(rz, c.u)),\n\t\t ry = normalize(cross(rx, rz));\n\n\tr.d = normalize(mat3(rx, ry, rz) * r.d);\n}\n\nfloat dst(vec3 p)\n{\n    vec3 v0 = vec3( 0., 10.,  0.0);\n    vec3 v1 = vec3(10., 10.,  1.0);\n    vec3 v2 = vec3(20., .49, 20.0);\n    vec3 v3 = vec3( 0., 10.,-10.4);\n    vec3 v4 = vec3( 0., 10.,-11.5);\n    vec3 v5 = vec3( 0., 10.,- 8.9);\n    vec3 v6 = vec3( 0., 10.,-10.8);\n    vec3 v7 = vec3( 0. ,10.,- 9.3);\n\tvec3 v8 = vec3( 0., 10.,-11.0);\n    vec4 v9 = vec4( 0, 1, 0, 0);\n    \n\tfloat d = gms(tmv(p, v0), 10.);\n\td = opu(ops(d,gmb(tmv(p, v0),v2)), gms(tmv(p, v0),9.5));\n\td = opu(ops(d,opi(gmb(tmv(p, v3), v1), gms(tmv(p, v4), 2.7))), \n            ops(gms(tmv(p, v5), 1.5), gmb(tmv(p, v6), v1)));\n\td = opu(d,ops(gms(tmv(p, v7), 1.), gmb(tmv(p, v8), v1)));\t\n\treturn opu(d,gmp(p, v9));\n}\n\n\nvec3 scene_normal(vec3 pos, float d)\n{\n    return normalize(\n\t\tvec3(dst(vec3(pos.x + EPS, pos.y, pos.z)),\n\t\t\t dst(vec3(pos.x, pos.y + EPS, pos.z)),\n\t\t \t dst(vec3(pos.x, pos.y, pos.z + EPS))) - d);\n}\n\nvec3 scene_shade(vec3 p, vec3 n, L l, M m, C c)\n{\n\treturn l.d * m.d * dot(n, normalize(l.p - p))\n\t\t+ l.s * m.s * pow(clamp(dot(normalize(reflect(l.p - p, n)), normalize(p - c.p)), 0., 1.), m.e);\n}\n\nbool rm(R r, out vec3 p, out vec3 n)\n{\n\tp = r.o;\n\n\tvec3 pos = p;\n\n\tfor (int i = 0; i < RM_MAX; i++) {\n\t\tfloat d = dst(pos);\n\n\t\tif (d > 25.) {\n\t\t\treturn false;\n\t\t} else if (d < EPS) {\n\t\t\tp = pos;\n\t\t\tn = scene_normal(p, d);\n\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\tpos += d * r.d;\n\t}\n\t\n\treturn false;\n}\n\nfloat sh( in vec3 ro, in vec3 rd)\n{\n    float res = 1.;\n\t\n\tfloat t = EPS_M;\n\t\n\tfor (int i = 0; i < RS_MAX; i++) {\n        float d = dst(ro + rd * t);\n\t\t\n\t\tif (d < EPS) {\n\t\t\treturn 0.;\n\t\t\tbreak;\n\t\t}\n\t\t\n        res = min(res, PNMBRA * d \/ t);\n\n        t += d;\n    }\n\n    return res;\n}\n\nvoid dmap (out vec3 c, vec3 p)\n{\n\tc = p.y > EPS ? \n\t\t(p.y > 9.54 ? (p.y > 10.45 ? vec3(1, 0, 0) : vec3(0)): vec3(1))\n\t\t: vec3(.8);\n\t\t\n\tif (length(p - vec3(0, 10, -10)) < 1.5) c = vec3(1);\n\telse if (length(p - vec3(0, 10, -10)) < 1.8) c = vec3(0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tC c;\n\n\tfloat t1 = sin(mod(iGlobalTime * .34, 2. * PI + EPS)),\n\t\t  t2 = cos(mod(iGlobalTime * .23, 2. * PI + EPS)),\n\t\t  t3 = sin(mod(iGlobalTime * .10, PI + EPS));\n\n\tc.p = vec3(26. * t1, 15. + 8. * t2, -(15. + 17. * t3));\n\tc.t = vec3(0, 10, 0);\n\tc.u = vec3(0, 1, 0);\n\t\n\tR r;\n\tray(c, r, fragCoord);\n\n\tvec3 sp, sn, col = vec3(0);\n\t\n\tif (rm(r, sp, sn)) {\n\t\tL l1, l2;\n\t\tl1.p = vec3(13, 35, -40);\n\t\tl1.d = vec3(.7); l1.s = vec3(1);\n\t\tl2.p = vec3(0, 1000, 0);\n\t\tl2.d = vec3(.1); l2.s = vec3(0);\n\t\n\t\tM m;\t\t\n\t\tdmap(m.d, sp);\n\t\tm.s = vec3(1.) * length(1. - m.d);\n\t\tm.e = 256.;\n\t\n\t\tcol = sh(sp, normalize(l1.p-sp)) * scene_shade(sp, sn, l1, m, c) +\n\t\t      sh(sp, normalize(l2.p-sp)) * scene_shade(sp, sn, l2, m, c);\n\t}\n\n\tfragColor = vec4(smoothstep(EPS, 3.5, iGlobalTime) *\tcol, 1.);\n}","name":"","description":"","type":"image"}]}}