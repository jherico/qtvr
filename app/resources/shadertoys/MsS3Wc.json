{"Shader":{"ver":"0.1","info":{"id":"MsS3Wc","date":"1394252538","viewed":2894,"name":"Smooth HSV","username":"iq","description":"C1 continuous RGB colors under linear interpolation of hue H in HSV space. ","likes":37,"published":3,"flags":0,"tags":["2d","color","hsv","colorspace"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/ Converting from HSV to RGB leads to C1 discontinuities, for the RGB components\n\/\/ are driven by picewise linear segments. Using a cubic smoother (smoothstep) makes \n\/\/ the color transitions in RGB C1 continuous when linearly interpolating the hue H.\n\n\/\/ C2 continuity can be achieved as well by replacing smoothstep with a quintic\n\/\/ polynomial. Of course all these cubic, quintic and trigonometric variations break \n\/\/ the standard (http:\/\/en.wikipedia.org\/wiki\/HSL_and_HSV), but they look better.\n\n\n\/\/ Official HSV to RGB conversion \nvec3 hsv2rgb( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\/\/ Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); \/\/ cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\n\/\/ compare\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\tvec3 hsl = vec3( uv.x, 1.0, uv.y );\n\n\tvec3 rgb_o = hsv2rgb( hsl );\n\tvec3 rgb_s = hsv2rgb_smooth( hsl );\n\t\n\tvec3 rgb = mix( rgb_o, rgb_s, smoothstep( -0.2, 0.2, sin(2.0*iGlobalTime)) );\n\t\n\tfragColor = vec4( rgb, 1.0 );\n}","name":"","description":"","type":"image"}]}}