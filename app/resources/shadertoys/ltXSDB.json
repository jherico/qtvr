{"Shader":{"ver":"0.1","info":{"id":"ltXSDB","date":"1439341322","viewed":1497,"name":"B\u00e9zier - Signed Distance","username":"ajs15822","description":"Analytical signed distance to a quadratic bezier curve. Click and drag to move the center control point.","likes":14,"published":3,"flags":0,"tags":["2d","bezier","distance"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Signed Distance to a Quadratic Bezier Curve\n\/\/ - Adam Simmons (@adamjsimmons) 2015\n\/\/\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\/\/\n\/\/ Inspired by http:\/\/www.pouet.net\/topic.php?which=9119\n\/\/ and various shaders by iq, T21, and demofox\n\/\/ \n\/\/ I needed the -signed- distance to a quadratic bezier\n\/\/ curve but couldn't find any examples online that\n\/\/ were both fast and precise. This is my solution.\n\/\/\n\/\/ v1 - Initial release\n\/\/ v2 - Faster and more robust sign computation\n\/\/\n\n\/\/ Test if point p crosses line (a, b), returns sign of result\nfloat testCross(vec2 a, vec2 b, vec2 p) {\n    return sign((b.y-a.y) * (p.x-a.x) - (b.x-a.x) * (p.y-a.y));\n}\n\n\/\/ Determine which side we're on (using barycentric parameterization)\nfloat signBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{ \n    vec2 a = C - A, b = B - A, c = p - A;\n    vec2 bary = vec2(c.x*b.y-b.x*c.y,a.x*c.y-c.x*a.y) \/ (a.x*b.y-b.x*a.y);\n    vec2 d = vec2(bary.y * 0.5, 0.0) + 1.0 - bary.x - bary.y;\n    return mix(sign(d.x * d.x - d.y), mix(-1.0, 1.0, \n        step(testCross(A, B, p) * testCross(B, C, p), 0.0)),\n        step((d.x - d.y), 0.0)) * testCross(A, C, B);\n}\n\n\/\/ Solve cubic equation for roots\nvec3 solveCubic(float a, float b, float c)\n{\n    float p = b - a*a \/ 3.0, p3 = p*p*p;\n    float q = a * (2.0*a*a - 9.0*b) \/ 27.0 + c;\n    float d = q*q + 4.0*p3 \/ 27.0;\n    float offset = -a \/ 3.0;\n    if(d >= 0.0) { \n        float z = sqrt(d);\n        vec2 x = (vec2(z, -z) - q) \/ 2.0;\n        vec2 uv = sign(x)*pow(abs(x), vec2(1.0\/3.0));\n        return vec3(offset + uv.x + uv.y);\n    }\n    float v = acos(-sqrt(-27.0 \/ p3) * q \/ 2.0) \/ 3.0;\n    float m = cos(v), n = sin(v)*1.732050808;\n    return vec3(m + m, -n - m, n - m) * sqrt(-p \/ 3.0) + offset;\n}\n\n\/\/ Find the signed distance from a point to a bezier curve\nfloat sdBezier(vec2 A, vec2 B, vec2 C, vec2 p)\n{    \n    B = mix(B + vec2(1e-4), B, abs(sign(B * 2.0 - A - C)));\n    vec2 a = B - A, b = A - B * 2.0 + C, c = a * 2.0, d = A - p;\n    vec3 k = vec3(3.*dot(a,b),2.*dot(a,a)+dot(d,b),dot(d,a)) \/ dot(b,b);      \n    vec3 t = clamp(solveCubic(k.x, k.y, k.z), 0.0, 1.0);\n    vec2 pos = A + (c + b*t.x)*t.x;\n    float dis = length(pos - p);\n    pos = A + (c + b*t.y)*t.y;\n    dis = min(dis, length(pos - p));\n    pos = A + (c + b*t.z)*t.z;\n    dis = min(dis, length(pos - p));\n    return dis * signBezier(A, B, C, p);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)\/iResolution.y;\n    vec2 m = mix((2.0*iMouse.xy-iResolution.xy)\/iResolution.y,\n        vec2(cos(iGlobalTime * 1.2) * 0.8, 0.0), step(iMouse.z, 0.0));\n    \n    \/\/ Define the control points of our curve\n    vec2 A = vec2(0.0, -0.6), C = vec2(0.0, +0.6), B = (4.0 * m - A - C) \/ 2.0;\n    \n    \/\/ Render the control points\n    float d = min(distance(p, A),(min(distance(p, m),distance(p, C))));\n    if (d < 0.04) { fragColor = vec4(1.0 - smoothstep(0.025, 0.034, d)); return; }\n    \n    \/\/ Get the signed distance to bezier curve\n    d = sdBezier(A, B, C, p);\n    \n    \/\/ Visualize the distance field using iq's orange\/blue scheme\n    fragColor = vec4(1.0) - sign(d)*vec4(0.1,0.4,0.7,1.0);\n    fragColor *= (1.0 - exp(-4.0*abs(d))) * (0.8 + 0.2*cos(140.*d));\n    fragColor = mix(fragColor, vec4(1.0), 1.0-smoothstep(0.0,0.02,abs(d)) );\n}","name":"","description":"","type":"image"}]}}