{
    "Shader": 
    [
        {
            "ver": "0.1",
            "info": 
            {
                "id": "4df3DS",
                "date": "1377824874",
                "viewed": 3587,
                "name": "Infinite City",
                "username": "TekF",
                "description": "Use a fast 2D voronoi-based pattern to build an isosurface that looks like a city. Based on some POV-Ray images I made a few years ago: http:\/\/evilsuperbrain.com\/gallery\/misc\/inc.php?file=gallery.php&filter=crackle",
                "likes": 49,
                "published": 3,
                "tags": 
                [
                    "voronoi"
                ],

                "hasliked": 0
            },

            "renderpass": 
            [
                {
                    "inputs": 
                    [
                        {
                            "id": 7,
                            "src": "\/presets\/tex06.jpg",
                            "ctype": "texture",
                            "channel": 1
                        },

                        {
                            "id": 30,
                            "src": "\/presets\/tex16.png",
                            "ctype": "texture",
                            "channel": 0
                        }
                    ],

                    "outputs": 
                    [
                        {
                            "channel": "0",
                            "dst": "-1"
                        },

                        {
                            "channel": "0",
                            "dst": "-1"
                        }
                    ],

                    "code": "// https://www.shadertoy.com/view/4df3DS\n// Ininite City\n// Ben Weston - 2013\n// License Creative Commons \n// Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// slightly shaky street-level view!\n#pragma vr\n\nvec2 Rand(vec2 pos) {\n  return texture2D(iChannel0, (pos + .5) / 256.0, -100.0).xz;\n}\n\nvec3 VoronoiPoint(vec2 pos, vec2 delta) {\n  // reduce this to remove axis-aligned hard edged errors\n  const float randScale = .8;\n\n  vec2 p = floor(pos) + delta;\n  vec2 r = (Rand(p) - .5) * randScale;\n  vec2 c = p + .5 + r;\n\n  // various length calculations for different patterns\n  //float l = length(c-pos);\n  //float l = length(vec3(c-pos,.1));\n  // more interesting shapes\n  float l = abs(c.x - pos.x) + abs(c.y - pos.y);\n\n  return vec3(c, l);\n}\n\n// For building height I want to know which voronoi point I used\n// For side-walls I want difference between distance of closest \n// 2 points\nvec3 Voronoi(vec2 pos) {\n  // find closest & second closest points\n  vec3 delta = vec3(-1, 0, 1);\n\n  // sample surrounding points on the distorted grid\n  // could get 2 samples for the price of one using a rotated \n  // (17,37) grid...\n  vec3 point[9];\n  point[0] = VoronoiPoint(pos, delta.xx);\n  point[1] = VoronoiPoint(pos, delta.yx);\n  point[2] = VoronoiPoint(pos, delta.zx);\n  point[3] = VoronoiPoint(pos, delta.xy);\n  point[4] = VoronoiPoint(pos, delta.yy);\n  point[5] = VoronoiPoint(pos, delta.zy);\n  point[6] = VoronoiPoint(pos, delta.xz);\n  point[7] = VoronoiPoint(pos, delta.yz);\n  point[8] = VoronoiPoint(pos, delta.zz);\n\n  vec3 closest;\n  closest.z = min(\n    min(\n      min(min(point[0].z, point[1].z), min(point[2].z, point[3].z)), \n      min(min(point[4].z, point[5].z), min(point[6].z, point[7].z))\n    ), \n    point[8].z);\n\n  // find second closest\n  // maybe there's a better way to do this\n  closest.xy = point[8].xy;\n  for (int i = 0; i < 8; i++) {\n    if (closest.z == point[i].z) {\n      closest = point[i];\n      point[i] = point[8];\n    }\n  }\n\n  float t;\n  t = min(\n    min(min(point[0].z, point[1].z), min(point[2].z, point[3].z)), \n    min(min(point[4].z, point[5].z), min(point[6].z, point[7].z))\n  );\n  return vec3(closest.xy, t - closest.z);\n}\n\nfloat DistanceField(vec3 pos, float dist) {\n  vec3 v = Voronoi(pos.xz);\n  // per-building seed\n  vec2 r = Rand(v.xy * 4.0);\n\n  // correct for max gradient of voronoi x+z distance calc\n  float f = (.2 + .3 * r.y - v.z) * .5; //.7071; \n\n  // random height\n  // v.xy is position of cell centre, use it as random seed\n  float h = r.x;\n  h = mix(.2, 2.0, pow(h, 2.0));\n  h = pos.y - h;\n\n  // we get precision problems caused by the discontinuity in \n  // height so clamp it near to the surface and then apply a \n  // plane at max height \n  h = max(min(h, .008 * dist), pos.y - 2.0);\n\n  //  f = max( f, h );\n  if (f > 0.0 && h > 0.0)\n    // better distance computation, to reduce errors\n    f = sqrt(f * f + h * h); \n  else\n    f = max(f, h);\n\n  f = min(f, pos.y); // ground plane\n\n  return f;\n}\n\nfloat DistanceField(vec3 pos) {\n  return DistanceField(pos, 10.0);\n}\n\n// normal\n// could do this analytically, by looking at the maths when comupting voronoi value\n// but the lions share of the cost is in the trace, not this, so I shalln't worry\nvec3 GetNormal(vec3 pos) {\n  vec3 n;\n  vec2 delta = vec2(0, 1);\n\n  // allow a slight curve so it looks more interesting\n#ifdef FIRST_PERSON\n  delta *= .004;\n#else\n  delta *= .04;\n#endif\n\n  n.x = DistanceField(pos + delta.yxx) - DistanceField(pos - delta.yxx);\n  n.y = DistanceField(pos + delta.xyx) - DistanceField(pos - delta.xyx);\n  n.z = DistanceField(pos + delta.xxy) - DistanceField(pos - delta.xxy);\n\n  // we get some black on surfaces because of flat spots in the voronoi\n  // fix that by giving it an arbitrary (and incorrect) normal\n  if (dot(n, n) == 0.0)\n    n.y += 1.0;\n\n  return normalize(n);\n}\n\nvoid main(void) {\n  /*  float f = Voronoi(gl_FragCoord.xy/40.0).z;\n   gl_FragColor = vec4( vec3(f), 1.0 );*/\n  vec2 mouse = iMouse.xy / iResolution.xy;\n\n  float h;\n  vec2 rot = vec2(-.2, .28) + vec2(1.6, .5) * mouse;\n\n  vec3 rayStart = vec3(0, 5, 0) + vec3(1, 0, 1) * iGlobalTime + vec3(0, 6, 0) * mouse.y;\n  rayStart += -10.0 * vec3(sin(rot.x), 0, cos(rot.x));\n\n  float zoom = 1.0;\n\n  vec3 rayDir = normalize(iDir); \n  // vec3 rayDir = normalize(\n  //    vec3(gl_FragCoord.xy - iResolution.xy * .5, iResolution.x * zoom));\n  // rayDir.yz = rayDir.yz * cos(rot.y) + rayDir.zy * sin(rot.y) * vec2(-1, 1);\n  // rayDir.xz = rayDir.xz * cos(rot.x) + rayDir.zx * sin(rot.x) * vec2(1, -1);\n\n  // trace\n  float t = 0.0;\n  h = 1.0;\n  for (int i = 0; i < 100; i++) {\n    if (h < .003)\n      break;\n\n    h = DistanceField(rayStart + rayDir * t, t);\n    t += h;\n  }\n\n  // shade\n  vec3 pos = rayStart + rayDir * t;\n  vec3 norm = GetNormal(pos);\n  vec3 v = Voronoi(pos.xz);\n\n  vec2 r = Rand(v.xy).xy;\n  vec4 albedo = mix(\n      mix(vec4(.4, .2, .0, 0), vec4(1, 1, 1, 0), r.x), \n      mix(vec4(0, .2, .6, 1), vec4(0, 0, 0, 1), r.x), \n    r.y);\n\n  // floors\n  if (fract(pos.y * 8.0) < .4)\n    albedo = mix(vec4(0, 0, 0, 0), vec4(1, 1, 1, 0), r.x);\n\n  // remove reflection on rooves!\n  albedo.w = mix(albedo.w, 0.0, step(.2, norm.y));\n\n  // roads\n  albedo = mix(vec4(.05, .05, .05, 0), albedo, step(.07, abs(v.z - .08)));\n\n  vec3 lighting = max(0.0, dot(norm, normalize(vec3(-2, 3, -1)))) * vec3(1, .9, .8);\n  lighting += vec3(.2); //ambient\n\n  vec3 result = albedo.xyz * lighting;\n\n  // reflections\n  float fresnel = pow(1.0 + dot(norm, rayDir), 5.0);\n  if (fresnel > 1.0)\n    fresnel = 0.0;\n  fresnel = mix(.2, 1.0, fresnel);\n\n  vec3 reflection = texture2D(iChannel1, reflect(rayDir, norm).xz / 8.0).rgb * 3.0;\n\n  result = mix(result, reflection, fresnel * albedo.w);\n\n  if (h > .01) //&& rayDir.y > 0.0 )\n      {\n    // sky\n    result = mix(vec3(.3), vec3(.85, 1.0, 1.2), smoothstep(-.1, .1, rayDir.y));\n  }\n\n  // fake ambient occlusion\n  result *= mix(.2, 1.0, smoothstep(0.0, .7, pos.y));\n\n  // fog\n  //result = mix( vec3(.85,1.0,1.2), result, exp(-t*.02) );\n  //More realistic fog\n  // absorb more blue on distant things\n  result *= pow(vec3(.7, .57, .3), vec3(t * .02)); \n  result += vec3(.7, .9, 1.2) * (1.0 - exp(-t * .02));\n\n  gl_FragColor = vec4(result, 1);\n}\n",
                    "name": "",
                    "description": "",
                    "type": "image"
                }
            ]
        }
    ]
}