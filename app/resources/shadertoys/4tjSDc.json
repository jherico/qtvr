{"Shader":{"ver":"0.1","info":{"id":"4tjSDc","date":"1446981392","viewed":329,"name":"Octopod","username":"dr2","description":"For arachnophiles only (use the mouse for a closer look).","likes":4,"published":3,"flags":0,"tags":["raymarching","spiders","walking"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Octopod\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Gait based on Dave_H's \"Spider\"; knee positions computed using trig.\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrOBoxDf (vec3 p, vec3 b)\n{\n  return length (max (abs (p) - b, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r, float dFac) {\n  return dFac * (length (p \/ r) - 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 footPos[8], kneePos[8], hipPos[8], sunDir, qHit;\nfloat tCur, legLenU, legLenD, gDisp, bdyHt, bdyEl;\nint idObj;\nconst int idBdy = 1, idHead = 2, idEye = 3, idAnt = 4, idLegU = 5, idLegD = 6;\nbool multi;\nconst float dstFar = 200.;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float sd, f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    f = Fbm2 (0.05 * (ro.xz + rd.xz * (50. - ro.y) \/ rd.y));\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    sd = - ro.y \/ rd.y;\n    ro += sd * rd;\n    ro.z += gDisp;\n    sd \/= dstFar;\n    f = Fbm2 (0.2 * ro.xz);\n    vn = normalize (vec3 (f - Fbm2 (0.2 * (ro.xz + vec2 (0.2, 0.))), 0.4,\n       f - Fbm2 (0.2 * (ro.xz + vec2 (0., 0.2)))));\n    f = 0.5 + 0.5 * smoothstep (0.8, 1.1, f * exp (-2. * sd * sd));\n    col = mix (vec3 (0.4, 0.3, 0.2), vec3 (0.3, 0.5, 0.2), f) *\n       (1. - 0.1 * Noisefv2 (21. * ro.xz));\n    col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n    col = mix (col, vec3 (0.1, 0.2, 0.4) + 0.25, pow (1. + rd.y, 32.));\n  }\n  return col;\n}\n\nfloat ShpCylDf (vec3 p, vec3 v, float md, float r, float rf)\n{\n  float len, s;\n  len = length (v);\n  v = normalize (v);\n  s = clamp (dot (p, v), 0., len);\n  p -= s * v;\n  s = s \/ len - md;\n  return length (p) - r * (1. - rf * s * s);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 pp, q, v;\n  float d, dMin, s, len, hGap, bf;\n  if (multi) {\n    hGap = 6.;\n    bf = PrOBoxDf (p - vec3 (0., 4., 0.), vec3 (3. * hGap, 5., 3. * hGap));\n    p.xz -= 2. * hGap * floor ((p.xz + hGap) \/ (2. * hGap));\n  } else bf = -1.;\n  dMin = dstFar;\n  pp = p - vec3 (0., bdyHt, 0.);\n  pp.yz = Rot2D (pp.yz, bdyEl);\n  q = pp - vec3 (0., -0.15, 0.2);\n  d = max (bf, PrEllipsDf (q, vec3 (0.7, 0.5, 1.3), 0.6));\n  if (d < dMin) { dMin = d;  idObj = idBdy;  qHit = q; }\n  q = pp - vec3 (0., 0.1, 1.1);\n  d = max (bf, PrEllipsDf (q, vec3 (0.2, 0.4, 0.5), 0.2));\n  if (d < dMin) { dMin = d;  idObj = idHead;  qHit = q; }\n  q = pp;\n  q.x = abs (q.x);\n  q -= vec3 (0.15, 0.25, 1.5);\n  d = max (bf, PrSphDf (q, 0.1));\n  if (d < dMin) { dMin = d;  idObj = idEye; }\n  q -= vec3 (-0.05, 0.15, -0.3);\n  d = max (bf, ShpCylDf (q, vec3 (0.3, 1.1, 0.4), 0., 0.05, 0.7));\n  if (d < dMin) { dMin = d;  idObj = idAnt; }\n  for (int j = 0; j < 8; j ++) {\n    q = p - hipPos[j];\n    d = max (bf, 0.6 * ShpCylDf (q, kneePos[j] - hipPos[j], 0., 0.15, 0.4));\n    if (d < dMin) { dMin = d;  idObj = idLegU;  qHit = q; }\n    q = p - kneePos[j];\n    d = max (bf, 0.6 * ShpCylDf (q, footPos[j] - kneePos[j], 0.3, 0.1, 1.3));\n    if (d < dMin) { dMin = d;  idObj = idLegD;  qHit = q; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.0002 || dHit > dstFar) break;\n  }\n\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 20; j ++) {\n    h = 1.5 * ObjDf (ro + rd * d);\n    sh = min (sh, 30. * h \/ d);\n    d += h + 0.07;\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.5);\n}\n\nvec4 ObjCol (vec3 ro, vec3 vn)\n{\n  vec4 col;\n  if (idObj == idBdy) {\n    col = mix (vec4 (0., 0.8, 0., 0.5), vec4 (0.8, 0., 0., 0.5),\n       smoothstep (-0.7, 0.3, qHit.z));\n  } else if (idObj == idHead) {\n    col = vec4 (0.8, 0.8, 0., 0.5);\n    if (qHit.z > 0.4) col = mix (vec4 (0.1, 0.03, 0.03, 0.1), col,\n       smoothstep (0.02, 0.04, abs (qHit.x)));\n  } else if (idObj == idEye) {\n    if (vn.z > 0.6) col = vec4 (0., 0., 0., 0.3);\n    else col = vec4 (0.6, 0.6, 0., 1.);\n  } else if (idObj == idLegU || idObj == idLegD) {\n    col = vec4 (0.6, 0.4, 0., 0.3) * (0.6 + 0.4 * cos (8. * length (qHit)));\n  } else if (idObj == idAnt) {\n    col = vec4 (0.2, 0.4, 0.7, 0.5);\n  }\n  return col;\n}\n\nvoid ConfigWalker ()\n{\n  vec3 v;\n  float tCyc, tWait, tc, spd, a, az, fz, d, ll;\n  for (int j = 0; j < 4; j ++) {\n    a = 0.2 * (1. + float (j)) * pi;\n    hipPos[j] = 0.5 * vec3 (- sin (a), 0., 1.5 * cos (a));\n    hipPos[j + 4] = hipPos[j];  hipPos[j + 4].x *= -1.;\n  }\n  spd = 1.5;\n  tCyc = 19.5;\n  tWait = 4.;\n  tCur += 4.;\n  tc = mod (spd * tCur, tCyc);\n  gDisp = spd * tCur - tc + ((tc < tWait) ? 0. :\n     (tc - tWait) * tCyc \/ (tCyc - tWait));\n  bdyHt = 1. + 1.2 * SmoothBump (tWait + 1.5, tCyc - 1.5, 1.5, mod (tc, tCyc));\n  bdyEl = -10. * (1. + 1.2 * SmoothBump (tWait + 1.5, tCyc - 1.5, 1.5,\n     mod (tc + 0.05, tCyc)) - bdyHt);\n  legLenU = 2.2;\n  legLenD = 3.;\n  ll = legLenD * legLenD - legLenU * legLenU;\n  for (int j = 0; j < 8; j ++) {\n    fz = fract ((gDisp + 0.93 + ((j < 4) ? -1. : 1.) +\n       mod (7. - float (j), 4.)) \/ 3.);\n    az = smoothstep (0.7, 1., fz);\n    footPos[j] = 5. * hipPos[j];\n    footPos[j].x *= 1.7;\n    footPos[j].y += 0.7 * sin (pi * clamp (1.4 * az - 0.4, 0., 1.));\n    footPos[j].z += ((j < 3) ? 0.5 : 1.) - 3. * (fz - az);\n    hipPos[j].yz = Rot2D (hipPos[j].yz, - bdyEl);\n    hipPos[j] += vec3 (0., bdyHt - 0.3, 0.2);\n    v = footPos[j] - hipPos[j];\n    d = length (v);\n    a = asin ((hipPos[j].y - footPos[j].y) \/ d);\n    kneePos[j].y = footPos[j].y + legLenD *\n       sin (acos ((d * d + ll) \/ (2. * d *  legLenD)) + a);\n    kneePos[j].xz = hipPos[j].xz + legLenU * sin (acos ((d * d - ll) \/\n       (2. * d *  legLenU)) + 0.5 * pi - a) * normalize (v.xz);\n  }\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[5], rPath, a, r, tC, tL, tWf, tWb;\n  bool rotStep;\n  rPath = 22.;\n  tC = pi * rPath \/ 8.;\n  tL = 2. * rPath \/ 5.;\n  tWf = 15.;\n  tWb = 1.;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tWf;\n  ti[2] = ti[1] + tL;\n  ti[3] = ti[2] + tWb;\n  ti[4] = ti[3] + tC;\n  p.y = 4. - 2. * cos (2. * pi * fract (t \/ (2. * ti[4])));\n  t = mod (t, ti[4]);\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    tr.y = rPath;\n  } else if (t < ti[2]) {\n    tr.y = rPath - 2. * rPath * (t - ti[1]) \/ (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    tr.y = - rPath;\n  } else {\n    rotStep = true;\n    a = 1.5 - (t - ti[3]) \/ (ti[4] - ti[3]);\n    r = rPath;\n  }\n  if (rotStep) {\n    a *= pi;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    p.xz = tr;\n  }\n  p.x -= 5.;\n  return p;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstHit, sh;\n  int idObjT;\n  idObj = -1;\n  sh = 1.;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col4 = ObjCol (ro, vn);\n    sh = ObjSShadow (ro, sunDir);\n  } else if (rd.y < 0.) {\n    sh = ObjSShadow (ro - rd * ro.y \/ rd.y, sunDir);\n  }\n  if (dstHit < dstFar) {\n    col = sh * col4.rgb * ((0.2 +\n       0.2 * max (dot (vec3 (- sunDir.x, 0., - sunDir.z), vn), 0.) +\n       0.8 * max (dot (vn, sunDir), 0.)) +\n       col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.));\n  } else col = sh * BgCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.8));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec2 canvas, uv, vf, cf, sf;\n  vec3 ro, rd, vd, u;\n  float f;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  multi = (mPtr.z <= 0.);\n  ConfigWalker ();\n  if (multi) {\n    ro = TrackPath (0.8 * tCur);\n    vd = normalize (vec3 (0., 2., 10.) - ro);\n    u = - vd.y * vd;\n    f = 1. \/ sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    rd = vuMat * normalize (vec3 (uv, 2.));\n    sunDir = normalize (vec3 (-1., 1.5, 1.));\n  } else {\n    vf = vec2 (clamp (0.7 - 1.5 * mPtr.y, 0.01, 1.4), pi + 6. * mPtr.x);\n    cf = cos (vf);\n    sf = sin (vf);\n    vuMat = mat3 (1., 0., 0., 0., cf.x, - sf.x, 0., sf.x, cf.x) *\n       mat3 (cf.y, 0., sf.y, 0., 1., 0., - sf.y, 0., cf.y);\n    rd = normalize (vec3 (uv, 4.5)) * vuMat;\n    ro = vec3 (0., 0., -20.) * vuMat;\n    ro.y += 1.;\n    sunDir = normalize (vec3 (-0.3, 1.5, 1.));\n  }\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}