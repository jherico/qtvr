{"Shader":{"ver":"0.1","info":{"id":"4lfSzs","date":"1438814030","viewed":1081,"name":"explosion no. 13","username":"miloszmaki","description":"experimenting with raymarching in 3D noise","likes":31,"published":3,"flags":0,"tags":["3d","raymarching","explosion"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/#define COLORFUL\n\nconst int ITERATIONS = 30;\nconst float STEP = 0.02;\nconst float DITHER = 0.2;\nconst float DURATION = 10.0;\nconst float PI = 3.14159265;\n\nfloat noise(vec3 x) \/\/ iq's 3D noise\n{\n    vec3 f = fract(x);\n    vec3 p = x - f;\n    f = f*f*(3.0 - 2.0*f);\n    vec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n    vec2 rg = texture2D(iChannel0, (uv + 0.5)\/256.0, -100.0).rg;\n    return mix(rg.y, rg.x, f.z);\n}\n\nfloat fbm(vec3 x)\n{\n    float r = 0.0;\n    float w = 1.0, s = 1.0;\n    for (int i=0; i<5; i++)\n    {\n        w *= 0.5;\n        s *= 2.0;\n        r += w * noise(s * x);\n    }\n    return r;\n}\n\nfloat sphere(vec3 p, float r)\n{\n    return length(p) - r;\n}\n\nvec4 scene(vec3 pos, vec3 dir, float t, out float dist)\n{\n    float rad1 = 0.4, rad2 = 0.35;\n    float d = sphere(pos, rad1);\n    d -= rad2 * fbm(pos * mix(1.5, 3.5, sin(t\/DURATION*2.*PI)*.5+.5) + iGlobalTime * 0.1);\n    dist = d;\n    vec4 color;\n    float r = length(pos) \/ rad1;\n    color.a = smoothstep(1., 0., clamp(d \/ .05, 0., 1.));\n    color.a *= smoothstep(1., 0., clamp((r - 1.25) * 2., 0., 1.));\n    color.rgb = 1.2 * mix(vec3(1.0,0.95,0.2), vec3(1.0,0.35,0.), clamp((r - 1.1)*3., 0., 1.));\n    color.rgb = mix(color.rgb, vec3(0.95,0.95,1.0)*0.25, clamp((r - 1.3)*3., 0., 1.));\n    return color;\n}\n\nvec3 render(vec3 eye, vec3 dir, vec2 fragCoord, float t)\n{\n    vec4 color = vec4(0.0);\n    \n    vec3 pos = eye + dir * DITHER * texture2D(iChannel0, fragCoord.xy\/iChannelResolution[0].x).r;\n    \n    for (int i=0; i<ITERATIONS; i++)\n    {\n        if (color.a > 0.99) continue;\n        \n        float dist;\n        vec4 d = scene(pos, dir, t, dist);\n        d.rgb *= d.a;\n        color += d * (1.0 - color.a);\n     \n        pos += dir * max(STEP, dist * 0.5);\n    }\n    \n    color.rgb += vec3(0.1 * vec3(1.0,0.5,0.1)) * (1.0 - color.a);\n    \n    return clamp(color.rgb, 0.0, 1.0);\n}\n\nvec3 lookAtDir(vec2 uv, vec3 eye, vec3 at, vec3 up, float fov)\n{\n    vec3 f = normalize(at - eye);\n    vec3 r = normalize(cross(up, f));\n    vec3 u = normalize(cross(f, r));\n    return normalize(f + fov * (uv.x*r + uv.y*u));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float angle = iGlobalTime * 0.3;\n    if (iMouse.z > 0.) angle = iMouse.x \/ iResolution.x * 2. * PI;\n    vec3 eye = vec3(sin(angle), sin(angle * 4.5)*0.1, cos(angle));\n    vec3 dir = lookAtDir(uv, eye, vec3(0, 0, 0), vec3(0, 1, 0), 1.0);\n    \n    float time = mod(iGlobalTime, DURATION);\n\t\n    vec3 color = render(eye, dir, fragCoord, time);\n    \n#ifdef COLORFUL\n    color = mix(color.rgb, mix(color.bgr, color.brg, sin(iGlobalTime * 0.3)*.5+.5), sin(iGlobalTime * 0.5)*.5+.5);\n#endif\n    \n    fragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}}