{"Shader":{"ver":"0.1","info":{"id":"lsSSWV","date":"1434151481","viewed":1496,"name":"Balls and shadows","username":"iq","description":"Playing","likes":24,"published":3,"flags":0,"tags":["3d","raytracing","shadow","occlusion","analytic"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define NO_ANTIALIAS\n\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ sphere related functions\n\/\/-------------------------------------------------------------------------------------------\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat sphShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n            \nvec2 sphDistances( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    float d = sqrt( max(0.0,sph.w*sph.w-h)) - sph.w;\n    return vec2( d, -b-sqrt(max(h,0.0)) );\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    float s = 1.0;\n    vec2 r = sphDistances( ro, rd, sph );\n    if( r.y>0.0 )\n        s = max(r.x,0.0)\/r.y;\n    return s;\n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    float d = dot(nor,r);\n    float res = d;\n\n    if( d<sph.w ) res = pow(clamp((d+sph.w)\/(2.0*sph.w),0.0,1.0),1.5)*sph.w;\n    \n    return clamp( res*(sph.w*sph.w)\/(l*l*l), 0.0, 1.0 );\n}\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ rendering functions\n\/\/-------------------------------------------------------------------------------------------\n\n#define NUMSPHEREES 20\n\nvec4 sphere[NUMSPHEREES];\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n        res = min( res, 8.0*sphSoftShadow(ro,rd,sphere[i]) );\n    return res;\t\t\t\t\t  \n}\n\nfloat occlusion( in vec3 pos, in vec3 nor )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t    res *= 1.0 - sphOcclusion( pos, nor, sphere[i] ); \n    return res;\t\t\t\t\t  \n}\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ utlity functions\n\/\/-------------------------------------------------------------------------------------------\n\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\nvec3 textureBox( sampler2D sam, in vec3 pos, in vec3 nor )\n{\n    vec3 w = abs(nor);\n    return (w.x*texture2D( sam, pos.yz ).xyz + \n            w.y*texture2D( sam, pos.zx ).xyz + \n            w.z*texture2D( sam, pos.xy ).xyz ) \/ (w.x+w.y+w.z);\n}\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ SCENE\n\/\/-------------------------------------------------------------------------------------------\n\nvec3 lig = normalize( vec3( -0.8, 0.3, -0.5 ) );\n\nvec3 shade( in vec3 rd, in vec3 pos, in vec3 nor, in float id, in vec3 uvw, in float dis )\n{\n    vec3 ref = reflect(rd,nor);\n    float occ = occlusion( pos, nor );\n    float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n    \n    occ = occ*0.5 + 0.5*occ*occ;\n    \n    float dif = clamp( dot(nor,lig), 0.0, 1.0 );\n    dif *=  shadow( pos, lig );\n    float bac = clamp( dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 );\n    \n    vec3 lin = vec3(0.0);\n    lin += 1.5*vec3(1.0,0.9,0.7)*dif;\n    lin += 1.0*vec3(1.0,0.9,0.7)*pow( clamp(dot(ref,lig),0.0,1.0), 4.0 )*dif;\n    lin += 0.3*vec3(1.0,0.9,0.8)*bac*occ;\n    lin += 0.3*vec3(0.3,0.5,0.9)*occ;\n    lin += 0.1*vec3(0.1,0.2,0.3)*(0.3+0.7*occ);\n    lin += 0.1*vec3(0.5,0.4,0.3)*pow( fre, 2.0 )*occ;\n\n    vec3 mate = 0.5 + 0.5*cos( 19.4*id + vec3(0.0,0.5,0.7) + 6.0 );\n    vec3 te = textureBox( iChannel0, 0.25*uvw, nor );\n    vec3 qe = te;\n    mate *= te;\n    \n    vec2 uv = vec2( 0.5+0.5*atan(nor.x,nor.z)\/3.1416, acos(nor.y)\/3.1416 );\n    uv.x = 0.1*abs(uv.x - 0.5)\/0.5;\n    uv.y *= 4.0;\n    te = texture2D( iChannel1, uv ).zyx;\n    mate = sqrt(te*mate)*4.0;\n    \n\n    vec3 col = mate*lin;\n    float r = clamp(qe.x,0.0,1.0);\n    col *= 0.7;\n    col += r*1.5*vec3(0.85,0.9,1.0)*smoothstep(-0.1-0.4*pow(fre,5.0),0.0,ref.y )*occ*(0.03+0.97*pow(fre,4.0))*shadow( pos, ref );\n    col += r*0.5*vec3(1.0,0.9,0.7)*pow( clamp(dot(ref,lig),0.0,1.0), 12.0 )*dif;\n\n    return col;\n}    \n\n\nvec3 trace( in vec3 ro, in vec3 rd, vec3 col, in float px, in float tmin )\n{\n#ifdef NO_ANTIALIAS\n\tfloat t = tmin;\n\tfloat id  = -1.0;\n    vec4  obj = vec4(0.0);\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float h = sphIntersect( ro, rd, sph ); \n\t\tif( h>0.0 && h<t ) \n\t\t{\n\t\t\tt = h;\n            obj = sph;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    if( id>-0.5 )\n    {\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = sphNormal( pos, obj );\n        col = shade( rd, pos, nor, id, pos-obj.xyz, t );\n    }\n\n#else\n    \n    vec4 cols[NUMSPHEREES];\n    float alps[NUMSPHEREES];\n\tfor( int i=0; i<NUMSPHEREES; i++ ) { cols[i] = vec4(0.0,0.0,0.0,tmin); alps[i] = 0.0; }\n    \n    \/\/ intersect spheres\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n        vec2 dt = sphDistances( ro, rd, sph );\n        float d = dt.x;\n\t    float t = dt.y;\n        \n        float s = max( 0.0, d\/t );\n\n        if( s < px ) \/\/ intersection, or close enough to an intersection\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = sphNormal( pos, sph );\n            float id = float(i);\n            cols[i].xyz = shade( rd, pos, nor, id, pos-sph.xyz, t );\n            cols[i].w = t;\n            alps[i] = 1.0 - s\/px;\n        }\n\t}\n#if 1\n    \/\/ sort intersectionsback to front\n\tfor( int i=0; i<NUMSPHEREES-1; i++ )\n    for( int j=0; j<NUMSPHEREES; j++ )\n    {\n        if( (j>i) && (cols[j].w>cols[i].w) )\n        {\n            vec4 tm = cols[i];\n            cols[i] = cols[j];\n            cols[j] = tm;\n            tm.x = alps[i];\n            alps[i] = alps[j];\n            alps[j] = tm.x;\n        }\n\t}\n#endif    \n    \n    \/\/ composite\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n        col = mix( col, cols[i].xyz, alps[i] );\n    \n#endif\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\t\n    \/\/-----------------------------------------------------\n    \/\/ animate\n    \/\/-----------------------------------------------------\n\tfloat time = iGlobalTime*0.5;\n\t\n\tfloat an = 0.3*time - 7.0*m.x;\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(i);\n        float ra = pow(id\/float(NUMSPHEREES-1),4.0);\n\t    vec3  pos = 2.5*cos( 6.2831*hash3(id*137.17) + 1.5*(1.0-0.7*ra)*hash3(id*431.3+4.7)*time );\n        pos.xz *= 1.0 - 0.2*ra;\n        \/\/ra = 0.3 + 0.7*ra;\n        ra = 0.2 + 0.8*ra;\n        pos.y = -1.0+ra;\n\t\tsphere[i] = vec4( pos, ra );\n    }\n\t\t\t\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    float le = 2.0;\n\tvec3 ro = vec3(4.0*sin(an),1.5,4.0*cos(an));\n    vec3 ta = vec3(0.0,-1.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + le*ww );\n\n    float px = 1.0*(2.0\/iResolution.y)*(1.0\/le);\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\tvec3 col = vec3(0.3) + 0.3*smoothstep(-0.5,0.5,rd.y);\n\n    float tmin = 1e20;\n    float t = (-1.0-ro.y)\/rd.y;\n    if( t>0.0 )\n    {\n        tmin = t;\n        vec3 pos = ro + t*rd;\n        vec3 nor = vec3(0.0,1.0,0.0);\n        col = shade( rd, pos, nor, 0.0, pos*0.5, t );\n    }\n    \n    col = trace( ro, rd, col, px, tmin );\n    \n\n    col = pow( col, vec3(0.4545) );\n\t\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.15);\n\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}