{"Shader":{"ver":"0.1","info":{"id":"MdVGRh","date":"1453307762","viewed":319,"name":"Gray-Scott diffusion","username":"knighty","description":"View of K-k plane. The code is duplicated into the 4 stages in order to gain speed because speed is limited by the refresh rate.<br\/>Needs better parametrization (too much uninterresting areas) .","likes":20,"published":3,"flags":32,"tags":["reactiondiffusion","grayscott"],"hasliked":0},"renderpass":[{"inputs":[{"id":25,"src":"\/presets\/cube03_0.png","ctype":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Adapted from original fragmentarium shader by Syntopia\n\/\/I've only added F-k parametrization and coloring\nvec3 normal(vec2 uv){\n    vec3 delta = vec3(1.\/iResolution.xy, 0.);\n    float du = texture2D(iChannel0, uv + delta.xz).x - texture2D(iChannel0, uv - delta.xz).x;\n    float dv = texture2D(iChannel0, uv + delta.zy).x - texture2D(iChannel0, uv - delta.zy).x;\n    return normalize(vec3(du,dv,1.));\n}\nvec3 getColor(vec2 uv){\n    return 0.5+0.5*sin(vec3(uv,uv.x-uv.y)*vec3(12.2,6.8,1.25)+vec3(1.,.0,1.25));\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tvec2 val=texture2D(iChannel0, uv).xy;\n    vec3 col = getColor(val)*(1.5*val.y+0.25);\n    col += textureCube(iChannel1, reflect(vec3(0.,1.,0.),normal(uv))).xyz*0.15;\n    fragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const vec2 Diffusion = vec2(0.08,0.03);\n\/\/const float F = 0.04;\n\/\/const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t\/\/ implementation found at: lumina.sourceforge.net\/Tutorials\/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\/\/ nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.5;\n        else fragColor.y=.5;\n        return;\n    }\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture2D(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const vec2 Diffusion = vec2(0.08,0.03);\n\/\/const float F = 0.04;\n\/\/const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t\/\/ implementation found at: lumina.sourceforge.net\/Tutorials\/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\/\/ nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \/*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*\/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture2D(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const vec2 Diffusion = vec2(0.08,0.03);\n\/\/const float F = 0.04;\n\/\/const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t\/\/ implementation found at: lumina.sourceforge.net\/Tutorials\/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\/\/ nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \/*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*\/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture2D(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const vec2 Diffusion = vec2(0.08,0.03);\n\/\/const float F = 0.04;\n\/\/const float k = 0.06;\nconst float dt = 2.;\n\nfloat rand(vec2 co){\n\t\/\/ implementation found at: lumina.sourceforge.net\/Tutorials\/Noise.html\n\treturn fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\/\/ nine point stencil\nvec2 laplacian1(vec2 position) {\n    vec2 pixelSize = 1. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian2(vec2 position) {\n    vec2 pixelSize = 5. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\n\/\/ nine point stencil\nvec2 laplacian3(vec2 position) {\n    vec2 pixelSize = 7. \/ iResolution.xy;\n    vec4 P = vec4(pixelSize, 0.0, -pixelSize.x);\n\treturn  \n\t0.5* texture2D( iChannel0,  position - P.xy ).xy \/\/ first row\n\t+ texture2D( iChannel0,  position - P.zy ).xy\n\t+  0.5* texture2D( iChannel0,  position - P.wy ).xy\n\t+  texture2D( iChannel0,  position - P.xz).xy \/\/ seond row\n\t- 6.0* texture2D( iChannel0,  position ).xy\n\t+   texture2D( iChannel0,  position + P.xz ).xy\n\t+  0.5*texture2D( iChannel0,  position +P.wy).xy  \/\/ third row\n\t+ texture2D( iChannel0,  position +P.zy ).xy\n\t+   0.5*texture2D( iChannel0,  position + P.xy   ).xy;\t\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = vec4(0.0,0.0,0.0,1.0);\n    \/*if(iFrame == 0) {\n        float rnd=rand(uv)+(sin(50.*uv.x)+sin(50.*uv.y))*0.;\n        if(rnd>0.5) fragColor.x=.1;\n        else fragColor.y=.1;\n        return;\n    }*\/\n    float F = uv.y*0.05+0.0;\n    float k = uv.x*0.05+0.025;\n    vec4 data = texture2D(iChannel0, uv);\n    float u = data.x;\n    float v = data.y;\n    vec2 Duv = (1.*laplacian1(uv)+0.*laplacian2(uv)+0.*laplacian3(uv))*Diffusion;\n    float du = Duv.x - u*v*v + F*(1.-u);\n    float dv = Duv.y + u*v*v - (F+k)*v;\n    fragColor.xy = clamp(vec2(u+du*dt,v+dv*dt), 0., 1.);\n}","name":"","description":"","type":"buffer"}]}}