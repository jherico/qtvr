{"Shader":{"ver":"0.1","info":{"id":"ltfGWf","date":"1425603794","viewed":331,"name":"Filter: Emboss","username":"4rknova","description":"A simple emboss filter","likes":1,"published":3,"flags":0,"tags":["convolution"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2015\n\/\/ WTFPL\n\n\/\/ Emboss kernel\n\/\/  3  0  0\n\/\/  0 -1  0\n\/\/  0  0 -1\n\nvec3 sample(const int x, const int y, in vec2 fragCoord)\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) \/ iChannelResolution[0].xy;\n\treturn texture2D(iChannel0, uv).xyz;\n}\n\nvec3 filter(in vec2 fragCoord)\n{\n    vec3 sum = sample(-1, -1, fragCoord) *  3.\n             + sample( 0,  0, fragCoord) * -1.\n             + sample( 1,  1, fragCoord) * -1.;\n    \n\treturn sum;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float u = fragCoord.x \/ iResolution.x;\n    float m = iMouse.x \/ iResolution.x;\n    \n    float l = smoothstep(0., 1. \/ iResolution.y, abs(m - u));\n    \n    vec2 fc = fragCoord.xy;\n    fc.y = iResolution.y - fragCoord.y;\n    \n    vec3 cf = filter(fc);\n    vec3 cl = sample(0, 0, fc);\n    vec3 cr = (u < m ? cl : cf) * l;\n    \n    fragColor = vec4(cr, 1);\n}","name":"","description":"","type":"image"}]}}