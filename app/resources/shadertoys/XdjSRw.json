{"Shader":{"ver":"0.1","info":{"id":"XdjSRw","date":"1410283972","viewed":915,"name":"Hashed blur","username":"Dave_Hoskins","description":"Samples evenly in a circular area. <br\/><br\/>","likes":16,"published":3,"flags":0,"tags":["2d","blur","post","effects","hashedblur"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Hashed blur\n\/\/ David Hoskins.\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Can go down to 10 or so, and still be usable, probably...\n#define ITERATIONS 30\n\n\/\/ Set this to 0.0 to stop the pixel movement.\n#define TIME iGlobalTime\n\n#define TAU  6.28318530718\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ Use last part of hash function to generate new random radius and angle...\nvec2 Sample(inout vec2 r)\n{\n    r = fract(r * vec2(33.3983, 43.4427));\n    return r-.5;\n    \/\/return sqrt(r.x+.001) * vec2(sin(r.y * TAU), cos(r.y * TAU))*.5; \/\/ <<=== circular sampling.\n}\n\n\/\/-------------------------------------------------------------------------------------------\n#define HASHSCALE 443.8975\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * HASHSCALE);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n\/\/-------------------------------------------------------------------------------------------\nvec3 Blur(vec2 uv, float radius)\n{\n\tradius = radius * .04;\n    \n    vec2 circle = vec2(radius) * vec2((iResolution.y \/ iResolution.x), 1.0);\n    \n\t\/\/ Remove the time reference to prevent random jittering if you don't like it.\n\tvec2 random = Hash22(uv+iGlobalTime);\n\n    \/\/ Do the blur here...\n\tvec3 acc = vec3(0.0);\n\tfor (int i = 0; i < ITERATIONS; i++)\n    {\n\t\tacc += texture2D(iChannel0, uv + circle * Sample(random), radius*10.0).xyz;\n    }\n\treturn acc \/ float(ITERATIONS);\n}\n\n\/\/-------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    float radius = 1.0 + 1.0 * sin(iGlobalTime*.2*TAU+4.3);\n    if (iMouse.w >= 1.0)\n    {\n    \tradius = iMouse.x*2.0\/iResolution.x;\n    }\n    radius = pow(radius, 2.0);\n \n    if (mod(iGlobalTime, 15.0) < 10.0 || iMouse.w >= 1.0)\n    {\n\t\tfragColor = vec4(Blur(uv * vec2(1.0, -1.0), radius), 1.0);\n    }else\n    {\n        fragColor = vec4(Blur(uv * vec2(1.0, -1.0), abs(sin(uv.y*.8+2.85))*4.0), 1.0);\n    }\n}","name":"","description":"","type":"image"}]}}