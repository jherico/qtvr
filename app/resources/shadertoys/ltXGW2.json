{"Shader":{"ver":"0.1","info":{"id":"ltXGW2","date":"1425141951","viewed":735,"name":"dr2's knots, iq approx","username":"eiffie","description":"Just a mashup.","likes":3,"published":3,"flags":0,"tags":["knot","cubicapproximation"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/dr2's knots by eiffie\n\/\/a mashup of dr2's knots and iq's cubic curve approximation\n\n\n\/\/if you want to compare the cubic vs fudge comment this (fudge uses 2x the steps)\n#define USE_CUBIC_APPROX\n\n#define PERIOD 6.283\n#define RADIUS 0.05\n\nvec3 gc1,gs1,gc2,gs2,gc3,gs3;\nfloat freq2;\n\n\/\/knot's from dr2 @ https:\/\/www.shadertoy.com\/view\/4ts3zl\nvoid InitCurve(float tm){\n\tfloat t=1.0+sin(tm);\n\tfreq2=mix(2.0,5.0,clamp(t-1.0,0.0,1.0));\n\tgc1 = mix(vec3 ( 41,   36,   0), mix(vec3 (  32,   94,   16),vec3 ( -22,  11,   0),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n\tgs1 = mix(vec3 (-18,   27,   45),mix(vec3 ( -51,   41,   73),vec3 (-128,   0,   0),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n\tgc2 = mix(vec3 (-83, -113,  -30),mix(vec3 (-104,  113, -211),vec3 (   0,  34,   8),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n\tgs2 = mix(vec3 (-83,   30,  113),mix(vec3 ( -34,    0,  -39),vec3 (   0, -39,  -9),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n\tgc3 = mix(vec3 (-11,   11,  -11),mix(vec3 ( 104,  -68,  -99),vec3 ( -44, -43,  70),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n\tgs3 = mix(vec3 ( 27,  -27,   27),mix(vec3 ( -91, -124,  -21),vec3 ( -78,   0, -40),clamp(t-1.0,0.0,1.0)),clamp(t,0.0,1.0));\n}\nvec3 F (float a)  \/\/dr2's knots\n{\n\treturn (gc1 * cos (a)  + gs1 * sin (a) +\n\t\tgc2 * cos (freq2 * a) + gs2 * sin (freq2 * a) +\n\t\tgc3 * cos (3. * a) + gs3 * sin (3. * a))*0.01;\n}\nvec2 SegD(vec3 a, vec3 b, vec3 ro, vec3 rd){\/\/distance between segment and ray, and distance to closest point on segment\n\tvec3 ao=a-ro,ba=b-a;\t\t\t\t\t\/\/...or something close to that :)\n\tfloat d=dot(rd,ba);\n\tao+=ba*clamp((dot(rd,ao)*d-dot(ao,ba))\/(dot(ba,ba)-d*d),0.0,1.0);\n\tfloat t=dot(ao,rd);\n\td=sqrt(abs(dot(ao,ao)-t*t));\n\treturn vec2(d,t+d);\n}\n\nvec2 compare(vec2 a, vec2 b){\/\/crappy z-sort\n\tfloat r=RADIUS+0.25;\n\tif(b.x<RADIUS){\n\t\tif(b.y<a.y-r)return b;\n\t\tif(b.y>a.y+r)return a;\n\t\treturn min(a,b);\/\/(a.x<b.x)?a:b;\n\t}else return a; \n}\n\n#ifdef USE_CUBIC_APPROX\n\/\/from iq @ https:\/\/www.shadertoy.com\/view\/4ts3DB\nvec3 cubic( in vec3 a, in vec3 b, in vec3 c, in vec3 d, float v1 )\n{\n    float u1 = 1.0 - v1;\n    float u2 = u1*u1;\n    float v2 = v1*v1;\n    float u3 = u2*u1;\n    float v3 = v2*v1;\n    return a*u3 + d*v3 + b*3.0*u2*v1 + c*3.0*u1*v2;\n}\n\n\/\/----------------------------------------------------------\n\/\/mod for 3d of iq's\nvec2 sdSegment_Cheap( vec3 a, vec3 b, vec3 na, vec3 nb, vec3 ro, vec3 rd )\n{\n    \/\/ secondary points\n    vec3 k1 = (a*2.0+b)\/3.0; k1 = a + na*dot(na,k1-a)\/dot(na,na);\n    vec3 k2 = (b*2.0+a)\/3.0; k2 = b + nb*dot(nb,k2-b)\/dot(nb,nb);\n\n\t\n\tvec3 ao=a-ro,ba=b-a;\n\tfloat d=dot(rd,ba);\n\tfloat h=clamp((dot(rd,ao)*d-dot(ao,ba))\/(dot(ba,ba)-d*d),0.0,1.0);\n\t\/\/vec2 pa = p-a, ba = b-a;\n\t\/\/float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\n    return SegD( cubic( a, k1, k2, b, clamp( h-0.1, 0.0, 1.0) ), \n                             cubic( a, k1, k2, b, clamp( h+0.1, 0.0, 1.0) ) , ro, rd);\n\n}\n#define STEPS 32\nfloat DistanceTo3dCurve(in vec3 ro, in vec3 rd){\n\tvec3 p0=F(0.0),p1=F(PERIOD\/float(STEPS)),p2=F(2.0*PERIOD\/float(STEPS));\n\tvec3 t0=normalize(p0-F(-PERIOD\/float(STEPS)))+normalize(p1-p0);\n\tvec3 t1=normalize(p1-p0)+normalize(p2-p1);\n\tvec2 C=compare(vec2(100.0),sdSegment_Cheap( p0, p1, t0, t1, ro, rd ));\n\tfor(int i=1;i<STEPS;i++){\n\t\tfloat t=float(i+2)*PERIOD\/float(STEPS);\n\t\tvec3 pL=p0;\n\t\tp0=p1;p1=p2;t0=t1;\n\t\tp2=F(t);\n\t\tt1=normalize(p1-p0)+normalize(p2-p1);\n\t\tC=compare(C,sdSegment_Cheap( p0, p1, t0, t1, ro, rd ));\n\t}\n\treturn C.x;\n}\n\n#else \n\n#define CURVE_FUDGE 0.13\n#define CURVE_MIN_STEP 0.05\n#define CURVE_MAX_STEP 1.0\n#define STEPS 64\nfloat DistanceTo3dCurve(in vec3 ro, in vec3 rd){\n\tvec3 p1=F(0.0),p2;\n\tfloat t=CURVE_MIN_STEP;\n\tvec2 C=vec2(100.0);\n\tfor(int i=0;i<STEPS;i++){\n\t\tp2=F(t);\n\t\tvec2 v=SegD(p1,p2,ro,rd);\n\t\tC=compare(C,v);\n\t\tif(t==PERIOD)break;\n\t\tt+=clamp(v.x*CURVE_FUDGE,CURVE_MIN_STEP,CURVE_MAX_STEP);\n\t\tt=min(t,PERIOD);\n\t\tp1=p2;\n\t}\n\treturn C.x;\n}\n\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\t\/\/simple 3d camera setup\n\tvec3 ro=vec3(0.0,0.0,-6.0);\n\tvec3 rd=normalize(vec3((2.0*fragCoord.xy-iResolution.xy)\/iResolution.y,2.0));\n\t\n\tInitCurve(iGlobalTime*0.3);\n\tfloat d=DistanceTo3dCurve(ro,rd);\n\t\n\t\/\/silly coloring\t\n\td=1.0-smoothstep(0.0,RADIUS,d);\n\tvec3 col=vec3(sqrt(d),d*d,d);\n\tfragColor = vec4(col,1.0);\n}\n\n","name":"","description":"","type":"image"}]}}