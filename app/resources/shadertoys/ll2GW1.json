{"Shader":{"ver":"0.1","info":{"id":"ll2GW1","date":"1428734688","viewed":801,"name":"blinn-phong sphere","username":"cgikoray","description":"An adaption of the Blinn-Phong shading model for use in education.","likes":3,"published":3,"flags":0,"tags":["phong","sphere","metal","blinn","learn"],"hasliked":0},"renderpass":[{"inputs":[{"id":3,"src":"\/presets\/tex02.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"# define PI 3.14159265358979323846\n# define TEXTURING 1\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Contact {\n    vec3 normal;\n    vec3 position;\n};\n\nstruct Material {\n    vec3 ambient;\n    vec3 diffuse;\n    vec3 specular;\n    float high_light;\n};\n    \nstruct Sphere {\n    Material material;\n    vec3 position;\n    float radius;\n};\n\nstruct Light {\n    vec3 direction;\n    float occlusion;\n};\n\nstruct Fragment {\n    vec3 color;\n    vec3 gamma;\n};\n  \nfloat intersect(in Ray ray, in Sphere sphere) {\n    vec3 look = -sphere.position;\n\tfloat a = dot(look, ray.direction);\n\tfloat t = a * a - (dot(look,look) - sphere.radius * sphere.radius);\n\tif(t <= 0.0) return -1.0;\n\treturn -a - sqrt(t);\n}\n\nvec3 ray_position(in Ray ray, float t) {\n    return ray.origin + ray.direction * t;\n}\n\nvec3 spherical_texturing(in vec3 normal, in sampler2D texture, float delta) {\n     float u = atan(normal.z, normal.x) \/ PI * 2.0 + delta;\n\t float v = asin(normal.y) \/ PI * 2.0;\n     return texture2D(texture, vec2(u, v)).xyz;\n}\n\nvec3 blinn_phong(in Contact contact, in Ray eye, in Sphere sphere, in Light light, float t, float delta) {\n    Fragment fragment;\n    fragment.color = vec3(0.15);\n    fragment.gamma = vec3(1.0);\n    \n    if(t > 0.0) {\n        float ambient = clamp(0.5 + 0.5 * contact.normal.y, 0.0, 1.0);\n        float diffuse = clamp(dot(light.direction, contact.normal), 0.0, 1.0);\n        vec3 half_way = normalize(-eye.direction + light.direction);\n        float specular = pow(clamp(dot(half_way, contact.normal), 0.0, 1.0), sphere.material.high_light);\n        \n        fragment.color = ambient * sphere.material.ambient * light.occlusion;\n        fragment.color += diffuse * sphere.material.diffuse * light.occlusion;\n        fragment.color += diffuse * specular * sphere.material.specular * light.occlusion;\n#if TEXTURING\n        fragment.color *= spherical_texturing(contact.normal, iChannel0, delta * 0.05);\n#endif\n    }\n    \n    return pow(fragment.color, fragment.gamma);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {   \n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    float delta = iGlobalTime;\n    \n    Ray eye;\n    eye.origin = vec3(0.0);\n    eye.direction = normalize(vec3(uv.xy, -1.0));\n    \n    Material material;\n    material.ambient = vec3(0.2, 0.2, 0.2);\n    material.diffuse = vec3(0.9, 0.9, 0.9);\n    material.specular = vec3(0.45, 0.45, 0.45);\n    material.high_light = 25.0;\n    \n    Sphere sphere;\n    sphere.position = vec3(0.0, 0.0, -10.0);\n    sphere.radius = 5.0;\n    sphere.material = material;\n    \n    float t = intersect(eye, sphere); \n    \n    Contact contact;\n    contact.position = ray_position(eye, t);\n    contact.normal = normalize(contact.position - sphere.position);\n    \n    Light light;\n    light.direction = normalize(vec3(0.0, 5.0, 5.0));\n    light.direction.x = sin(delta);\n    light.occlusion = 0.5 + 0.5 * contact.normal.y;\n\n    fragColor = vec4(blinn_phong(contact, eye, sphere, light, t, delta), 1.0);\n}","name":"","description":"","type":"image"}]}}