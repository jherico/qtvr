{"Shader":{"ver":"0.1","info":{"id":"XtB3Dm","date":"1429461339","viewed":687,"name":"Terrain Experiment 2","username":"aiekick","description":"Terrain Experiment 2","likes":0,"published":3,"flags":0,"tags":["terrain","experiment","2"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst vec2 RMPrec = vec2(0.25, 0.015); \/\/ ray marching tolerance precision \/\/ vec2(low, high)\nconst vec2 DPrec = vec2(0.05, 0.0008); \/\/ ray marching distance precision\n\nvec4 map(vec3 p)\n{\n   \tfloat scale = 2.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec3 col = texture2D(iChannel1, p.xz\/10.).rgb;\n    \n    float dist = dot(col,vec3(0.25));\n    \n    vec4 disp = vec4(dist, col * normalize(vec3(1.,0.5,0.2)));;\n        \n    float y = disp.x;\n    \n    p.y+=3.;\n    \n    dist = length(max(abs(p)-vec3(x,1.-y,z),0.0));\n    \n    return vec4(dist, disp.yzw);\n}\n\nvec3 nor( in vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t    map(p+e.xyy).x - map(p-e.xyy).x,\n\t    map(p+e.yxy).x - map(p-e.yxy).x,\n\t    map(p+e.yyx).x - map(p-e.yyx).x );\n\treturn normalize(n);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.1;\n    float cam_a = time; \/\/ angle z\n    \n    float cam_e = -0.5; \/\/ elevation\n    float cam_d = 1.; \/\/ distance to origin axis\n    \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .3; \/\/ reflexion intensity\n    float bii = 0.35; \/\/ bright init intensity\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    vec2 d = vec2(0.);\n    vec3 p = ro+rd*d.x;\n    float s = DPrec.x;\n    \n    vec3 ray, cubeRay, m;\n    \n    float sgn=sign(map(p).x);\n    \n    float pas = 0.1;\n    \n    float coef = -50.*(sin(iGlobalTime*.5)*.5+.5)+25.;\n    if ( iMouse.z>0.) coef=-50.*iMouse.y\/iResolution.y+25.;\n\n        for(int i=0;i<80;i++)\n        {      \n            if(s<DPrec.y||s>maxd||sign(s)!=sgn) break;\n            s = map(p).x*(s>DPrec.x?RMPrec.x:RMPrec.y);\n            d.y=d.x;\n            d.x+=(log(s)*s*coef)*pas*sgn;\n            p=ro+rd*d.x;\n        }\n        if (sign(s)!=sgn) \n        {\n            m=vec3(d.y,0.,d.x);\n            p=ro+rd*m.x;\n            sgn=sign(map(p).x);\n            for(int i=0;i<80;i++)\n            { \n                if (abs(d.x)<1e-8)break;\n                m.y=(m.x+m.z)*.5;\n                p=ro+rd*m.y;\n                s = map(p).x*RMPrec.y;\n                d.x=(log(s)*s*coef)*pas*sgn;\n                d.x*sgn<0.?m.z=m.y:m.x=m.y;\n            }\n            d.x=m.y;\n    \t}\n        if (d.x<maxd)\n        {\n            p=ro+rd*d.x;\n            sgn = sign(map(p).x);\n            vec3 n = nor(p, sgn*0.025);\n\n            ray = reflect(rd, n);\n            col = textureCube(iChannel0, ray).rgb * refl_i;\n            \n            b=li;\n\n            \/\/ lighting        \n            float occ = calcAO( p, rd );\n            vec3  lig = normalize( vec3(-0.2, 0.5, -0.3) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, rd.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( rd, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(occ);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d.x*d.x ) );\n\n            col = mix(col, map(p).yzw, 0.5);\n        }\n\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}