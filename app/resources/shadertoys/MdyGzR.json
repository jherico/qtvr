{"Shader":{"ver":"0.1","info":{"id":"MdyGzR","date":"1452926867","viewed":223,"name":"Lights in Smoke","username":"ehj1","description":"Glowing balls of light illuminating smoke.","likes":12,"published":3,"flags":0,"tags":["clouds","glow","smoke","lights"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  { \n  const vec2  C = vec2(1.0\/6.0, 1.0\/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\/\/ First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n\/\/ Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  \/\/   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  \/\/   x1 = x0 - i1  + 1.0 * C.xxx;\n  \/\/   x2 = x0 - i2  + 2.0 * C.xxx;\n  \/\/   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; \/\/ 2.0*C.x = 1\/3 = C.y\n  vec3 x3 = x0 - D.yyy;      \/\/ -1.0+3.0*C.x = -0.5 = -D.y\n\n\/\/ Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\/\/ Gradients: 7x7 points over a square, mapped onto an octahedron.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; \/\/ 1.0\/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  \/\/  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    \/\/ mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  \/\/vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  \/\/vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n\/\/Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\/\/ Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\nfloat normnoise(float noise) {\n\treturn 0.5*(noise+1.0);\n}\n\nfloat clouds(vec2 uv) {\n    uv += vec2(iGlobalTime*0.05, + iGlobalTime*0.01);\n    \n    vec2 off1 = vec2(50.0,33.0);\n    vec2 off2 = vec2(0.0, 0.0);\n    vec2 off3 = vec2(-300.0, 50.0);\n    vec2 off4 = vec2(-100.0, 200.0);\n    vec2 off5 = vec2(400.0, -200.0);\n    vec2 off6 = vec2(100.0, -1000.0);\n\tfloat scale1 = 3.0;\n    float scale2 = 6.0;\n    float scale3 = 12.0;\n    float scale4 = 24.0;\n    float scale5 = 48.0;\n    float scale6 = 96.0;\n    return normnoise(snoise(vec3((uv+off1)*scale1,iGlobalTime*0.5))*0.8 + \n                     snoise(vec3((uv+off2)*scale2,iGlobalTime*0.4))*0.4 +\n                     snoise(vec3((uv+off3)*scale3,iGlobalTime*0.1))*0.2 +\n                     snoise(vec3((uv+off4)*scale4,iGlobalTime*0.7))*0.1 +\n                     snoise(vec3((uv+off5)*scale5,iGlobalTime*0.2))*0.05 +\n                     snoise(vec3((uv+off6)*scale6,iGlobalTime*0.3))*0.025);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \n\tvec2 uv =  fragCoord.xy\/iResolution.x;\n    \n    vec2 center = vec2(0.5,0.5*(iResolution.y\/iResolution.x));\n    \n    vec2 light1 = vec2(sin(iGlobalTime*1.2+50.0)*1.0 + cos(iGlobalTime*0.4+10.0)*0.6,sin(iGlobalTime*1.2+100.0)*0.8 + cos(iGlobalTime*0.2+20.0)*-0.2)*0.2+center;\n    vec3 lightColor1 = vec3(1.0, 0.3, 0.3);\n    \n    vec2 light2 = vec2(sin(iGlobalTime+3.0)*-2.0,cos(iGlobalTime+7.0)*1.0)*0.2+center;\n    vec3 lightColor2 = vec3(0.3, 1.0, 0.3);\n    \n    vec2 light3 = vec2(sin(iGlobalTime+3.0)*2.0,cos(iGlobalTime+14.0)*-1.0)*0.2+center;\n    vec3 lightColor3 = vec3(0.3, 0.3, 1.0);\n\n    \n    float cloudIntensity1 = 0.7*(1.0-(2.5*distance(uv, light1)));\n    float lighIntensity1 = 1.0\/(100.0*distance(uv,light1));\n\n    float cloudIntensity2 = 0.7*(1.0-(2.5*distance(uv, light2)));\n    float lighIntensity2 = 1.0\/(100.0*distance(uv,light2));\n    \n    float cloudIntensity3 = 0.7*(1.0-(2.5*distance(uv, light3)));\n    float lighIntensity3 = 1.0\/(100.0*distance(uv,light3));\n    \n    \n\tfragColor = vec4(vec3(cloudIntensity1*clouds(uv))*lightColor1 + lighIntensity1*lightColor1 +\n                     vec3(cloudIntensity2*clouds(uv))*lightColor2 + lighIntensity2*lightColor2 +\n                     vec3(cloudIntensity3*clouds(uv))*lightColor3 + lighIntensity3*lightColor3 \n                     ,1.0);\n}","name":"","description":"","type":"image"}]}}