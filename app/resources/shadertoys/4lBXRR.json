{"Shader":{"ver":"0.1","info":{"id":"4lBXRR","date":"1441268481","viewed":918,"name":"Moon Phases","username":"clayjohn","description":"Basic moon and stars learning about noise functions. Also moon phases for fun!","likes":6,"published":3,"flags":0,"tags":["stars","moon","nightsky","phases"],"hasliked":0},"renderpass":[{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/inspiration and a few lines of code from IQ's Pirates https:\/\/www.shadertoy.com\/view\/ldXXDj\n\n\nfloat hash(vec2 p) {\n  return fract(sin(dot(p.xy, vec2(5.34, 7.13)))*5865.273458);   \n}\n\nvec2 hash2(vec2 p ) {\n   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   \n}\n\nfloat noise(vec2 p) {\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    f = f * f * f * (3.0 - 2.0 * f);\n    vec2 add = vec2(1.0, 0.0);\n    float h = mix( mix(hash(n+add.yy), hash(n+add.xy), f.x), \n                   mix(hash(n+add.yx), hash(n+add.xx), f.x), f.y);\n        \n    return h;\n}\n\nfloat fbm(vec2 p) {\n  float h = 0.0;\n  float a = 0.5;\n    for (int i = 0;i<4;i++) {\n      \/\/h+=noise(p)*a;\n        h+= texture2D(iChannel0, p).x*a; \n      p*=2.0;\n      a*=0.5;\n    }\n  return h;\n}\nvec3 project(vec2 p) {\n return vec3(p.x, p.y, sqrt(-(p.x*p.x+p.y*p.y-0.24)));   \n}\n\nfloat voronoi(vec2 p) {\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    float md = 5.0;\n    vec2 m = vec2(0.0);\n    for (int i = -1;i<=1;i++) {\n        for (int j = -1;j<=1;j++) {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n+g);\n            o = 0.5+0.5*sin(iGlobalTime+5.038*o);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n            if (d<md) {\n              md = d;\n              m = n+g+o;\n            }\n        }\n    }\n    return 1.0-md;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/set uv coordinates\n\tvec2 uv = (-iResolution.xy+2.0*fragCoord.xy) \/ iResolution.y;\n    \/\/project regular coordinates onto curved surface\n    vec3 n = project(uv);\n    \/\/compute shading for curved moon\n    vec3 sun = vec3(sin(iGlobalTime*0.5)*2.0, 0.0, cos(iGlobalTime*0.5)*2.0);\n    vec3 I = sun-n;\n    I = normalize(I);\n    float s = dot(n, I);\n    s = clamp(s*1.9, 0.0, 1.0);\n    \/\/make stars\n    vec3 col = vec3(smoothstep(0.995, 1.0, hash(uv)));\n    \/\/moon\n    float dist = length(uv);\n    vec3 moon = vec3(0.99, 0.99, 0.9);\n    moon = moon*(1.0-0.2*smoothstep(0.4, 0.44, dist));\n    float tex = fbm((uv+vec2(5.0))*0.03);\n    vec3 vtex = vec3(0.9+0.1*voronoi(uv*10.0));\n    \/\/brightness lines\n    float sun_str = sqrt(1.0-0.25*length(vec3(0.0, 0.0, 2.0)-sun));\n    sun_str = clamp(sun_str, 0.01, 1.0);\n    col+= vec3(4.0*exp(-7.0*dist))*moon*sun_str;\n    col+= vec3(0.8*exp(-1.5*dist))*moon*sun_str;\n    col *= 1.2;\n    col = pow(col, vec3(1.0, 1.0, 1.1));\n   \n\tfragColor = vec4(mix(mix(moon*(0.6+0.4*tex), vtex, fbm(uv*0.02))*s, col, smoothstep(0.4, 0.44, dist)), 1.0);\n    \n}","name":"","description":"","type":"image"}]}}