{"Shader":{"ver":"0.1","info":{"id":"4tl3D2","date":"1425323005","viewed":740,"name":"float print","username":"casty","description":"yet another float print tool, use the mouse. Nothing special, I just needed one for my work.","likes":5,"published":3,"flags":0,"tags":["float","print","sevensegments"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Eduardo Castineyra - casty\/2015\n\/\/ Creative Commons Attribution 4.0 International License\n\n\nvec2 pV[4];\n\/\/ |0  |1\n\/\/\n\/\/ |2  |3\n\nvec2 pH[3];\n\/\/\t- 2\n\/\/\t- 1\n\/\/\t- 0\n\nvec2 uv;\nvec2 pixel = 2.0\/iResolution.xy;\nint SIZE = 8;\nvec2 SEGMENT = pixel * vec2(SIZE, 1.0);\nfloat KERNING = 1.3;\nconst ivec2 DIGITS = ivec2(2, 4);\n\nvoid fillNumbers(){\n    pV[0] = vec2(0, SIZE);  pV[1] = vec2(SIZE - 1, SIZE);\n    pV[2] = vec2(0, 0); \tpV[3] = vec2(SIZE - 1, 0);\n    \n    for (int i = 0; i < 3; i++)\n    \tpH[i] = vec2(0, SIZE * i);\n    \n\t}\n\nvec2 digitSegments(int d){\n    vec2 v;\n    if (d == 0) v = vec2(.11115, .1015);\n    if (d == 1) v = vec2(.01015, .0005);\n    if (d == 2) v = vec2(.01105, .1115);\n    if (d == 3) v = vec2(.01015, .1115);\n    if (d == 4) v = vec2(.11015, .0105);\n    if (d == 5) v = vec2(.10015, .1115);\n    if (d == 6) v = vec2(.10115, .1115);\n    if (d == 7) v = vec2(.01015, .0015);\n    if (d == 8) v = vec2(.11115, .1115);\n    if (d == 9) v = vec2(.11015, .1115);\n    return v;\n\t}\n\nvec2 step2(vec2 edge, vec2 v){\n    return vec2(step(edge.x, v.x), step(edge.y, v.y));\n\t}\n\nfloat segmentH(vec2 pos){\n    vec2 sv = step2(pos, uv) - step2(pos + SEGMENT.xy, uv);\n    return step(1.1, length(sv));\n\t}\n\nfloat segmentV(vec2 pos){\n    vec2 sv = step2(pos, uv) - step2(pos + SEGMENT.yx, uv);\n    return step(1.1, length(sv));\n\t}\n\nfloat nextDigit(inout float f){\n    f = fract(f) * 10.0;\n    return floor(f);\n\t}\n\nfloat drawDigit(int d, vec2 pos){\n    vec4 sv = vec4(1.0, 0.0, 1.0, 0.0);\n    vec3 sh = vec3(1.0);\n    float c = 0.0;\n    \n    vec2 v = digitSegments(d);\n    \n    for (int i = 0; i < 4; i++)\n        c += segmentV(pos + pixel.x * pV[i]) * nextDigit(v.x);\n\n    for (int i = 0; i < 3; i++)\n        c += segmentH(pos + pixel.x * pH[i]) * nextDigit(v.y);\n    \n\treturn c;\n\t}\n\nfloat printNumber(float f, vec2 pos){\n    float c = 0.0;\n    f \/= pow(10.0, float(DIGITS.x));\n        \n    for (int i = 0; i < DIGITS.x; i++){\n        c += drawDigit(int(nextDigit(f)), pos);\n        pos += KERNING * pixel * vec2(SIZE, 0.0);\n    \t}\n    \n    for (int i = 0; i < DIGITS.y; i++){\n        pos += KERNING * pixel * vec2(SIZE, 0.0);\n        c += drawDigit(int(nextDigit(f)), pos);\n    \t}\n   \treturn c;\n\t}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    uv = fragCoord.xy \/ iResolution.xy;\n    vec2 mouse = iMouse.xy \/ iResolution.xy;\n    \n    fillNumbers();\n    \n    fragColor = vec4(printNumber(mouse.x * 100.0, mouse) + \n                     printNumber(mouse.y * 100.0, mouse - pixel * vec2(0.0, SIZE * 5)) + \n                     printNumber(50.999, vec2(0.5))\n                    );\n    \n}","name":"","description":"","type":"image"}]}}