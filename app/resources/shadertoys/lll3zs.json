{"Shader":{"ver":"0.1","info":{"id":"lll3zs","date":"1424535693","viewed":246,"name":"Superstar","username":"Dave_Hoskins","description":"Just trying to make Van Damme seem better than he really is. :p","likes":9,"published":3,"flags":0,"tags":["2d","video","effect","superstar"],"hasliked":0},"renderpass":[{"inputs":[{"id":20,"src":"\/presets\/mzk03.mp3","ctype":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":36,"src":"\/presets\/vid03.webm","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Superstar\n\/\/ By David Hoskins.\n\n#define RES 96.0\n#define MOD2 vec2(.27232,.17369)\n#define MOD3 vec3(.27232,.17369,.20787)\n\nvec2 add = vec2(1.0, 0.0);\n\nfloat Video(vec2 uv)\n{\n    vec2 c = texture2D(iChannel0, uv).xz;\n    return max(sqrt((c.x*c.y))-.1, 0.0);\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nfloat GetDotImage(vec2 uv, float res)\n{\n\tvec2 st = floor(uv * res) \/ res;\n\tfloat t = Video(st);\n\treturn  smoothstep(t, 0.0, length(fract(uv * res)-.5))*3.;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  2 out, 2 in...\nvec2 Hash22(vec2 p)\n{\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3.zxy, p3.yxz+19.19);\n    return fract(vec2(p3.x * p3.y, p3.z*p3.x))-.5;\n}\n\/\/----------------------------------------------------------------------------------------\n\/\/  2 out, 2 in...\nvec2 Noise22(vec2 x)\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 res = mix(mix( Hash22(p),          Hash22(p + add.xy),f.x),\n                    mix( Hash22(p + add.yx), Hash22(p + add.xx),f.x),f.y);\n    return res;\n}\n\n\n\/\/----------------------------------------------------------------------------------------\nvec2 FBM(vec2 x, float add)\n{\n    vec2 r = vec2(0.0);\n    float a = 1.0;\n    \n    for (int i = 0; i < 4; i++)\n    {\n        r += Noise22(x*a) \/ a;\n        a += a;\n    }\n    r.x-=add;\n     \n    return r;\n}\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 1 in ...\nfloat Hash11(float p)\n{\n\tvec2 p2 = fract(vec2(p) * MOD2);\n    p2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y)-.5;\n}\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 1 in...\nfloat Noise11(float x)\n{\n    float p = floor(x);\n    x = fract(x);\n    x = x*x*(3.0-2.0*x);\n    x = mix( Hash11(p), Hash11(p + 1.0), x);\n    return x;\n}\n\/\/----------------------------------------------------------------------------------------\nfloat FBM(float x)\n{\n    float f = 0.0, m = .8;    \n    for (int i = 0; i < 3; i++)\n    {\n        f+= Noise11(x*m)\/m;\n        m+=m;\n    }\n\treturn f;\n}\n\n\/\/----------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    float time = -iChannelTime[0];\n    float a = sin(FBM(time*.22+2.75)*6.28)*.2;\n    uv.x += a; a= a*3.;\n    vec3 col = vec3(0);\n    col = vec3(GetDotImage(uv, RES));\n    \n    for (float y = 0.03; y < .4; y+=.015)\n    {\n        col.x += Video(uv+FBM(uv*2.4+time*1.5, a)*1.5*y)*(.4-y)*.1;\n        col.y += Video(uv+FBM(uv*2.1+time*1.2, a)*1.5*y)*(.4-y)*.07;\n        col.z += Video(uv+FBM(uv*2.5+time*1.4, a)*1.5*y)*(.4-y)*.1;\n        uv = (uv-.5)*.99+.5;\n\n    }\n    col = min(col, 1.0);\n    fragColor = vec4(sqrt(col), 1.0);\n}","name":"","description":"","type":"image"}]}}