{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "MsXGz4",
				"date": "1363595124",
				"viewed": 2045,
				"name": "Cubemap",
				"username": "iq",
				"description": "Note that the reflection is properly occluded (see the reflection shadow of the sphere on the plane)",
				"likes": 33,
				"published": 3,
				"tags": 
				[
					"3d",
					"raymarching",
					"distancefield",
					"cubemap"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 2,
							"src": "\/presets\/tex01.jpg",
							"ctype": "texture",
							"channel": 2
						},

						{
							"id": 7,
							"src": "\/presets\/tex06.jpg",
							"ctype": "texture",
							"channel": 3
						},

						{
							"id": 22,
							"src": "\/presets\/cube00_0.jpg",
							"ctype": "cubemap",
							"channel": 0
						},

						{
							"id": 23,
							"src": "\/presets\/cube01_0.png",
							"ctype": "cubemap",
							"channel": 1
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "#pragma vr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nvec2 map( vec3 p )\n{\n    vec2 d2 = vec2( p.y+1.0, 2.0 );\n\n    float r = 1.0;\n    float f = smoothstep( 0.0, 0.5, sin(3.0+iGlobalTime) );\n    float d = 0.5 + 0.5*sin( 4.0*p.x + 0.13*iGlobalTime)*\n                        sin( 4.0*p.y + 0.11*iGlobalTime)*\n                        sin( 4.0*p.z + 0.17*iGlobalTime);\n    r += f*0.4*pow(d,4.0);//*(0.5-0.5*p.y);\n    vec2 d1 = vec2( length(p) - r, 1.0 );\n\n    if( d2.x<d1.x) d1=d2;\n\n    p = vec3( length(p.xz)-2.0, p.y, mod(iGlobalTime / 10.0 + 6.0*atan(p.z,p.x)/3.14,1.0)-0.5 );\n    //p -= vec3( 1.5, 0.0, 0.0 );\n    vec2 d3 = vec2( 0.5*(length(p) - 0.2), 3.0 );\n    if( d3.x<d1.x) d1=d3;\n\n    \n    return d1;\n}\n\n\nvec4 sphereColor( in vec3 pos, in vec3 nor )\n{\n    vec2 uv = vec2( atan( nor.x, nor.z ), acos(nor.y) );\n    vec3 col = (texture2D( iChannel3, uv ).xyz);\n    float ao = clamp( 0.75 + 0.25*nor.y, 0.0, 1.0 );\n    return vec4( col, ao );\n}\n\nvec4 satelitesColor( in vec3 pos, in vec3 nor )\n{\n    vec2 uv = vec2( atan( nor.x, nor.z ), acos(nor.y) );\n    vec3 col = (texture2D( iChannel3, uv ).xyz);\n    float ao = 1.0;\n    return vec4( col, ao );\n}\n\nvec4 floorColor( in vec3 pos, in vec3 nor )\n{\n    vec3 col = texture2D( iChannel2, 0.5*pos.xz ).xyz;\n    \n    // fake ao\n    float f = smoothstep( 0.1, 1.75, length(pos.xz) );\n\n    return vec4( col, 0.5*f+0.5*f*f );\n}\n\nconst float precis = 0.001;\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n    float h=precis*2.0;\n    vec3 c;\n    float t = 0.0;\n    float maxd = 9.0;\n    float sid = -1.0;\n    for( int i=0; i<100; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) continue;//break;\n        t += h;\n        vec2 res = map( ro+rd*t );\n        h = res.x;\n        sid = res.y;\n    }\n\n    if( t>maxd ) sid=-1.0;\n    return vec2( t, sid );\n}\n\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3  eps = vec3(precis,0.0,0.0);\n    vec3 nor;\n    nor.x = map(pos+eps.xyy).x - map(pos-eps.xyy).x;\n    nor.y = map(pos+eps.yxy).x - map(pos-eps.yxy).x;\n    nor.z = map(pos+eps.yyx).x - map(pos-eps.yyx).x;\n    return normalize(nor);\n}\n\nvoid main(void)\n{\n    vec2 q = gl_FragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x/iResolution.y;\n    vec2 mo = iMouse.xy/iResolution.xy;\n    // camera\n    vec3 ro1 = vec3(0.0, 0.19, 2.1) + iPos / 20.0;\n    vec3 ro2 = vec3(0.0, 1.5, 5.0) + iPos * 10.0;\n    vec3 ro = mix(ro1, ro2, cos(iGlobalTime / 10.0) / 2.0 + 0.5);\n    vec3 rd = normalize( iDir );\n\n    // raymarch\n    vec3 col = texture( iChannel0, rd ).xyz;\n    \n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>0.5 )\n    {\n        // geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n        vec3 ref = reflect(rd,nor);\n\n        float rim = pow(clamp(1.0+dot(nor,rd),0.0,1.0),4.0);\n\n        col = texture( iChannel1, nor ).xyz;\n\n        // color\n        vec4 mate = vec4(0.0);\n        if( tmat.y<1.5 )\n            mate = sphereColor(pos,nor);\n        else if( tmat.y<2.5 )\n            mate = floorColor(pos,nor);\n        else\n            mate = satelitesColor(pos,nor);\n        \n        col += 2.0*rim*pow(mate.w,3.0);\n        col *= mate.w;\n        col *= mate.xyz;\n\n        // reflection occlusion     \n        vec2 tref = intersect(pos+nor*0.001,ref);\n        if( tref.y<0.5 )\n        {\n            float fre = 0.3 + 0.7*pow( clamp( 1.0 + dot( rd, nor ), 0.0, 1.0 ), 5.0 );\n            vec3 sss = texture( iChannel0, ref ).xyz;\n            col += 2.0*mate.w*pow(sss,vec3(4.0))*fre;\n        }\n\n        col = sqrt(col);\n    }\n\n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    gl_FragColor = vec4(col,1.0);\n}",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}