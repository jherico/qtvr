{"Shader":{"ver":"0.1","info":{"id":"4ljGW1","date":"1428651319","viewed":1977,"name":"Artificial","username":"mu6k","description":"Rotate with mouse. Started out as an experiment. Ended up as something awesome!","likes":35,"published":3,"flags":0,"tags":["3d","raymarch","shading"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*\/\n\nfloat time = iGlobalTime+99.0; \/\/i hate the name in the uniforms\n\nvoid angularRepeat(const float a, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    v = vec2(cos(an),sin(an))*len;\n}\n\nfloat mBox(vec3 p, vec3 b)\n{\n\treturn max(max(abs(p.x)-b.x,abs(p.y)-b.y),abs(p.z)-b.z);\n}\n\nfloat mSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat rtime1 = time*.012;\nfloat rtime2 = time*.027;\nfloat rtime3 = time*.013;\nmat3 rot = mat3(cos(rtime1),0,sin(rtime1),0,1,0,-sin(rtime1),0,cos(rtime1))*\n    mat3(cos(rtime2),sin(rtime2),.0,-sin(rtime2),cos(rtime2),.0,0,0,1)*\n    mat3(1,0,0,0,cos(rtime3),sin(rtime3),0,-sin(rtime3),cos(rtime3));\n\nfloat df(vec3 p)\n{\n    float e=.4;\n    for (int i=0;i<8; i++)\n    {\n        p = abs(p*rot)-e;\n        p.y-=p.x*.1;\n        p.x-=p.z*.1;\n        e = e*.8+e*e*.1;\n    }\n    p = abs(p*rot)-e;\n    p = abs(p*rot)-e;\n  \treturn mBox(p,vec3(.05));\n}\n\nvec3 nf(vec3 p)\n{\n    vec2 e = vec2(0,0.005);\n    return normalize(vec3(df(p+e.yxx),df(p+e.xyx),df(p+e.xxy)));\n}\n\nvoid rotate(const float a, inout vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) \/ iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy*.5) \/ iResolution.yy;\n    \n    vec3 pos = vec3(0,0,-5);\n    vec3 dir = normalize(vec3(uv,1.0-length(uv)*.6));\n    \n    float rx = mouse.x*8.0 + time*.04 +.1;\n    float ry = mouse.y*8.0 + time*.024+.4;\n    \n    rotate(rx,pos.xz);\n    rotate(rx,dir.xz);    \n    rotate(ry,pos.yx);\n    rotate(ry,dir.yx);\n    \n    for (int i=0; i<40; i++)\n    {\n     \tfloat dist = df(pos);\n       \tpos += dist*dir;\n        if (dist<0.001||dist>10.0)break;\n    }\n    \n    vec3 light = normalize(vec3(1,2,3));\n    \n    float value = \n        df(pos+light)+\n        df(pos+light*.5)*2.0+\n        df(pos+light*.25)*4.0+\n        df(pos+light*.125)*8.0+\n        df(pos+light*.6125)*16.0;\n    \n    value=value*.1+.04;\n   \n    vec3 ref = reflect(dir,nf(pos));\n    float ro = min(max(min(min(df(pos+ref),df(pos+ref*0.25)*4.0), df(pos+ref*.5)*2.0)*.5,.0),1.0);\n   \n    vec3 tex = textureCube(iChannel0,ref).xyz;\n    float fres = (dot(dir,nf(pos))*.5+.5)*9.0;\n    \n    vec3 color = value*vec3(dot(nf(pos),light)*.5+.5)*.5 + fres*tex*ro;\n   \n    color -= pow(length(uv),2.0)*.1;\n    color = mix(color,vec3(length(color)),length(color)*.5);\n    \n\tfragColor = vec4(pow(color,vec3(1.0\/2.2)),1.0);\n}","name":"","description":"","type":"image"}]}}