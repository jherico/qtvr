{"Shader":{"ver":"0.1","info":{"id":"4sc3Wn","date":"1448935145","viewed":465,"name":"Neontoy","username":"Flyguy","description":" A neon Shadertoy logo made using AutoCAD and converted to GLSL using C# and netDxf. <br\/>The font is a slightly modified version of Srfm_Neon by Srfm.","likes":21,"published":3,"flags":0,"tags":["distancefield","text","neon"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\nfloat scale = 1.0 \/ 6.0;\n\nfloat epsilon = 1e-3;\nfloat infinity = 1e6;\n\n\/\/Settings\n\/\/Uses cheaper arcs for common sweep angles (90 & 180 degrees).\n#define USE_CHEAP_ARCS\n\n#define TEXT_COLOR   vec3(1.00, 0.20, 0.10)\n#define BORDER_COLOR vec3(0.05, 0.20, 1.00)\n\n#define BRIGHTNESS 0.004\n#define THICKNESS  0.002\n\n\/\/Checks if a and b are approximately equal.\nbool ApproxEqual(float a, float b)\n{\n    return abs(a - b) <= epsilon;\n}\n\n\/\/Distance to a line segment,\nfloat dfLine(vec2 start, vec2 end, vec2 uv)\n{\n\tstart *= scale;\n\tend *= scale;\n    \n\tvec2 line = end - start;\n\tfloat frac = dot(uv - start,line) \/ dot(line,line);\n\treturn distance(start + line * clamp(frac, 0.0, 1.0), uv);\n}\n\n\/\/Distance to an arc.\nfloat dfArc(vec2 origin, float start, float sweep, float radius, vec2 uv)\n{\n\torigin *= scale;\n\tradius *= scale;  \n\tuv -= origin;\n    \n\tuv *= mat2(cos(start), sin(start),-sin(start), cos(start));\n\t\n    #ifdef USE_CHEAP_ARCS\n        if(ApproxEqual(sweep, pi)) \/\/180 degrees\n        {\n            float d = abs(length(uv) - radius) + step(uv.y, 0.0) * infinity;\n            d = min(d, min(length(uv - vec2(radius, 0)), length(uv + vec2(radius, 0))));\n            return d;\n        }\n        else if(ApproxEqual(sweep, pi\/2.0)) \/\/90 degrees\n        {\n            float d = abs(length(uv) - radius) + step(min(uv.x, uv.y), 0.0) * infinity;\n            d = min(d, min(length(uv - vec2(0, radius)), length(uv - vec2(radius, 0))));\n            return d;\n        }\n        else \/\/Others\n        {\n            float offs = (sweep \/ 2.0 - pi);\n            float ang = mod(atan(uv.y, uv.x) - offs, tau) + offs;\n            ang = clamp(ang, min(0.0, sweep), max(0.0, sweep));\n\n            return distance(radius * vec2(cos(ang), sin(ang)), uv); \n        }\n    #else\n        float offs = (sweep \/ 2.0 - pi);\n        float ang = mod(atan(uv.y, uv.x) - offs, tau) + offs;\n        ang = clamp(ang, min(0.0, sweep), max(0.0, sweep));\n\n        return distance(radius * vec2(cos(ang), sin(ang)), uv);\n\t#endif\n}\n\nfloat dfLogo(vec2 uv)\n{\n\tfloat dist = infinity;\n\n\tdist = min(dist, dfLine(vec2(0.267,1.200), vec2(0.533,1.200), uv));\n\tdist = min(dist, dfLine(vec2(0.267,0.667), vec2(0.533,0.667), uv));\n\tdist = min(dist, dfLine(vec2(0.533,0.000), vec2(0.067,0.000), uv));\n\tdist = min(dist, dfLine(vec2(0.400,0.133), vec2(0.067,0.133), uv));\n\tdist = min(dist, dfLine(vec2(1.000,1.200), vec2(1.000,0.067), uv));\n\tdist = min(dist, dfLine(vec2(1.133,0.067), vec2(1.133,0.533), uv));\n\tdist = min(dist, dfLine(vec2(1.200,0.600), vec2(1.667,0.600), uv));\n\tdist = min(dist, dfLine(vec2(1.733,0.667), vec2(1.733,1.133), uv));\n\tdist = min(dist, dfLine(vec2(1.867,1.133), vec2(1.867,0.000), uv));\n\tdist = min(dist, dfLine(vec2(3.000,0.067), vec2(3.000,1.200), uv));\n\tdist = min(dist, dfLine(vec2(3.867,0.333), vec2(3.867,0.867), uv));\n\tdist = min(dist, dfLine(vec2(3.533,1.200), vec2(3.000,1.200), uv));\n\tdist = min(dist, dfLine(vec2(3.133,0.067), vec2(3.133,1.000), uv));\n\tdist = min(dist, dfLine(vec2(3.533,0.000), vec2(3.267,0.000), uv));\n\tdist = min(dist, dfLine(vec2(4.867,1.200), vec2(4.000,1.200), uv));\n\tdist = min(dist, dfLine(vec2(4.000,1.200), vec2(4.000,0.667), uv));\n\tdist = min(dist, dfLine(vec2(4.000,0.000), vec2(4.867,0.000), uv));\n\tdist = min(dist, dfLine(vec2(4.467,0.667), vec2(4.000,0.667), uv));\n\tdist = min(dist, dfLine(vec2(4.467,0.533), vec2(4.000,0.533), uv));\n\tdist = min(dist, dfLine(vec2(4.000,0.533), vec2(4.000,0.000), uv));\n\tdist = min(dist, dfLine(vec2(5.000,0.000), vec2(5.000,1.200), uv));\n\tdist = min(dist, dfLine(vec2(5.000,1.200), vec2(5.533,1.200), uv));\n\tdist = min(dist, dfLine(vec2(5.533,0.533), vec2(5.205,0.533), uv));\n\tdist = min(dist, dfLine(vec2(5.166,0.413), vec2(5.716,0.013), uv));\n\tdist = min(dist, dfLine(vec2(5.410,0.400), vec2(5.794,0.121), uv));\n\tdist = min(dist, dfLine(vec2(6.000,1.200), vec2(6.333,1.200), uv));\n\tdist = min(dist, dfLine(vec2(6.467,0.067), vec2(6.467,1.200), uv));\n\tdist = min(dist, dfLine(vec2(6.333,0.067), vec2(6.333,1.200), uv));\n\tdist = min(dist, dfLine(vec2(6.467,1.200), vec2(6.800,1.200), uv));\n\tdist = min(dist, dfLine(vec2(7.000,1.000), vec2(7.000,0.333), uv));\n\tdist = min(dist, dfLine(vec2(7.333,0.000), vec2(7.467,0.000), uv));\n\tdist = min(dist, dfLine(vec2(7.800,0.333), vec2(7.800,0.867), uv));\n\tdist = min(dist, dfLine(vec2(7.133,0.867), vec2(7.133,0.733), uv));\n\tdist = min(dist, dfLine(vec2(8.467,0.067), vec2(8.467,0.533), uv));\n\tdist = min(dist, dfLine(vec2(8.467,0.533), vec2(8.800,1.200), uv));\n\tdist = min(dist, dfLine(vec2(2.530,1.153), vec2(2.864,0.087), uv));\n\tdist = min(dist, dfLine(vec2(2.403,1.153), vec2(2.043,0.000), uv));\n\tdist = min(dist, dfLine(vec2(2.626,0.400), vec2(2.736,0.047), uv));\n\tdist = min(dist, dfLine(vec2(2.626,0.400), vec2(2.307,0.400), uv));\n\tdist = min(dist, dfLine(vec2(8.333,0.067), vec2(8.333,0.533), uv));\n\tdist = min(dist, dfLine(vec2(8.333,0.533), vec2(8.000,1.200), uv));\n\n\tdist = min(dist, dfArc(vec2(0.267,0.933),1.571, 3.142, 0.267, uv));\n\tdist = min(dist, dfArc(vec2(0.067,0.067),1.571, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(0.533,0.333),4.712, 3.142, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(1.067,0.067),3.142, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(1.200,0.533),1.571, 1.571, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(1.667,0.667),4.712, 1.571, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(1.800,1.133),0.000, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(3.067,0.067),3.142, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(3.533,0.867),0.000, 1.571, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(3.533,0.333),4.712, 1.571, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(4.467,0.600),4.712, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(5.533,0.867),4.712, 3.142, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(5.205,0.467),1.571, 2.513, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(5.755,0.067),4.084, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(6.400,0.067),3.142, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(7.467,0.867),0.000, 3.142, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(7.467,0.333),4.712, 1.571, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(7.333,0.333),3.142, 1.571, 0.333, uv));\n\tdist = min(dist, dfArc(vec2(8.400,0.067),3.142, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(2.800,0.067),3.444, 3.142, 0.067, uv));\n\tdist = min(dist, dfArc(vec2(2.467,1.133),0.303, 2.536, 0.067, uv));\n\n\treturn dist;\n}\n\nfloat dfBorder(vec2 uv)\n{\n    float dist = infinity;\n    \n\tdist = min(dist, dfLine(vec2(0.067,1.533), vec2(8.733,1.533), uv));\n\tdist = min(dist, dfLine(vec2(9.133,1.133), vec2(9.133,0.067), uv));\n\tdist = min(dist, dfLine(vec2(8.733,-0.333), vec2(4.467,-0.333), uv));\n\tdist = min(dist, dfLine(vec2(-0.333,0.067), vec2(-0.333,1.133), uv));\n\tdist = min(dist, dfLine(vec2(0.067,1.400), vec2(4.333,1.400), uv));\n\tdist = min(dist, dfLine(vec2(9.000,1.133), vec2(9.000,0.067), uv));\n\tdist = min(dist, dfLine(vec2(8.733,-0.200), vec2(0.067,-0.200), uv));\n\tdist = min(dist, dfLine(vec2(-0.200,0.067), vec2(-0.200,1.133), uv));\n\tdist = min(dist, dfLine(vec2(4.333,-0.333), vec2(0.067,-0.333), uv));\n\tdist = min(dist, dfLine(vec2(4.467,1.400), vec2(8.733,1.400), uv));\n\tdist = min(dist, dfArc(vec2(8.733,1.133),0.000, 1.571, 0.400, uv));\n\tdist = min(dist, dfArc(vec2(8.733,0.067),4.712, 1.571, 0.400, uv));\n\tdist = min(dist, dfArc(vec2(0.067,0.067),3.142, 1.571, 0.400, uv));\n\tdist = min(dist, dfArc(vec2(0.067,1.133),1.571, 1.571, 0.400, uv));\n\tdist = min(dist, dfArc(vec2(8.733,1.133),0.000, 1.571, 0.267, uv));\n\tdist = min(dist, dfArc(vec2(8.733,0.067),4.712, 1.571, 0.267, uv));\n\tdist = min(dist, dfArc(vec2(0.067,0.067),3.142, 1.571, 0.267, uv));\n\tdist = min(dist, dfArc(vec2(0.067,1.133),1.571, 1.571, 0.267, uv));\n    \n    return dist;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\tvec2 aspect = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y - aspect\/2.0;\n\t\n    vec2 offs = vec2(9.0, 1.5) * scale\/2.0;\n    \n    float dist = 0.0;\n    float shade = 0.0;\n    vec3 color = vec3(0);\n    \n    \/\/Flicker fade in effect.\n    float tf_text = max(epsilon, iGlobalTime - 0.6);\n    float bright_text = BRIGHTNESS * min(1.0, 1.0 - sin(tf_text * pi * 50.0) \/ (tf_text * pi * 1.3));\n    \n    float tf_bord = max(epsilon, iGlobalTime - 0.5);\n    float bright_bord = BRIGHTNESS * min(1.0, 1.0 - sin(tf_bord * pi * 50.0) \/ (tf_bord * pi * 1.3));\n    \n    \/\/\"Shadertoy\"\n\tdist = dfLogo(uv + offs);\n\t\n\tshade = bright_text \/ max(epsilon, dist - THICKNESS);\n\t\n\tcolor += TEXT_COLOR * shade;\n    \n    \/\/Border\n    dist = dfBorder(uv + offs);\n\t\n\tshade = bright_bord \/ max(epsilon, dist - THICKNESS);\n\t\n\tcolor += BORDER_COLOR * shade;\n\t\n\tfragColor = vec4(color , 1.0);\n}\n\n\n\n","name":"","description":"","type":"image"}]}}