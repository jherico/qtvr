{"Shader":{"ver":"0.1","info":{"id":"MlsSzn","date":"1434492778","viewed":754,"name":"Ellipsoid - occlusion","username":"iq","description":"Ellipsoid - occlusion (approximation)","likes":4,"published":3,"flags":0,"tags":["3d","occlusion","ellipsoid"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/ Compute fake occlusion for ellipsode objects.\n\n\n\/\/-------------------------------------------------------------------------------------------\n\/\/ ellipsoid related functions\n\/\/-------------------------------------------------------------------------------------------\n\nstruct Ellipsoid\n{\n    vec3 cen;\n    vec3 rad;\n};\n\nfloat eliShadow( in vec3 ro, in vec3 rd, in Ellipsoid sph, in float k )\n{\n    vec3 oc = ro - sph.cen;\n    \n    vec3 ocn = oc \/ sph.rad;\n    vec3 rdn = rd \/ sph.rad;\n    \n    float a = dot( rdn, rdn );\n\tfloat b = dot( ocn, rdn );\n\tfloat c = dot( ocn, ocn );\n\n    if( b>0.0 || (b*b-a*(c-1.0))<0.0 ) return 1.0;\n    \n    return 0.0;\n}\n\nfloat eliSoftShadow( in vec3 ro, in vec3 rd, in Ellipsoid sph, in float k )\n{\n    vec3 oc = ro - sph.cen;\n    \n    vec3 ocn = oc \/ sph.rad;\n    vec3 rdn = rd \/ sph.rad;\n    \n    float a = dot( rdn, rdn );\n\tfloat b = dot( ocn, rdn );\n\tfloat c = dot( ocn, ocn );\n\tfloat h = b*b - a*(c-1.0);\n\n\n    float t = (-b - sqrt( max(h,0.0) ))\/a;\n\n    return (h>0.0) ? step(t,0.0) : smoothstep(0.0, 1.0, -k*h\/max(t,0.0) );\n}    \n            \nvec3 eliNormal( in vec3 pos, in Ellipsoid sph )\n{\n    return normalize( (pos-sph.cen)\/sph.rad );\n}\n\nfloat eliOcclusion( in vec3 pos, in vec3 nor, in Ellipsoid sph )\n{\n    vec3  r = (sph.cen - pos)\/sph.rad;\n    float l = length(r);\n    return dot(nor,r)\/(l*l*l);\n}\n\n\nfloat eliIntersect( in vec3 ro, in vec3 rd, in Ellipsoid sph )\n{\n    vec3 oc = ro - sph.cen;\n    \n    vec3 ocn = oc \/ sph.rad;\n    vec3 rdn = rd \/ sph.rad;\n    \n    float a = dot( rdn, rdn );\n\tfloat b = dot( ocn, rdn );\n\tfloat c = dot( ocn, ocn );\n\tfloat h = b*b - a*(c-1.0);\n\tif( h<0.0 ) return -1.0;\n\treturn (-b - sqrt( h ))\/a;\n}\n\n\/\/=====================================================\n\nvec2 hash2( float n ) { return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); }\n\nfloat iPlane( in vec3 ro, in vec3 rd )\n{\n    return (-1.0 - ro.y)\/rd.y;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (2.0*fragCoord.xy-iResolution.xy) \/ iResolution.y;\n    \n\tvec3 ro = vec3(0.0, 0.0, 4.0 );\n\tvec3 rd = normalize( vec3(p,-2.0) );\n\t\n    \/\/ sphere animation\n    Ellipsoid sph = Ellipsoid( vec3(0.0,0.0,0.0),\/\/vec3(0.0,0.25,0.0) + vec3(1.0,0.5,1.0)*cos( iGlobalTime*1.0 + vec3(2.0,1.0,1.0) + 0.0 )*vec3(1.5,0.5,1.0), \n                               vec3(1.5,0.6,1.5) + vec3(1.0,0.4,1.0)*cos( iGlobalTime*3.0 + vec3(0.0,0.71,2.71) ) );\n\n    vec3 lig = normalize( vec3(0.6,0.3,0.4) );\n    vec3 col = vec3(0.0);\n\n    float tmin = 1e10;\n    vec3 nor;\n    float occ = 1.0;\n    \n    float t1 = iPlane( ro, rd );\n    if( t1>0.0 )\n    {\n        tmin = t1;\n        vec3 pos = ro + t1*rd;\n        nor = vec3(0.0,1.0,0.0);\n        occ = 1.0 - eliOcclusion( pos, nor, sph );\n    }\n\n    float t2 = eliIntersect( ro, rd, sph );\n    if( t2>0.0 && t2<tmin )\n    {\n        tmin = t2;\n        vec3 pos = ro + t2*rd;\n        nor = eliNormal( pos, sph );\n        occ = 0.5 + 0.5*nor.y;\n\t}\n    \n    if( tmin<1000.0 )\n    {\n        vec3 pos = ro + tmin*rd;\n        \n\t\tcol = vec3(1.0);\n        col *= clamp( dot(nor,lig), 0.0, 1.0 );\n        col *= eliSoftShadow( pos + nor*0.01, lig, sph, 2.0 );\n        col += 0.05*occ;\n        col = vec3(occ);\n\t    col *= exp( -0.05*tmin );\n    }\n\n    col = sqrt(col);\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}