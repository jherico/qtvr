{"Shader":{"ver":"0.1","info":{"id":"Xd3GDs","date":"1452719383","viewed":125,"name":"drl007","username":"DrLuke","description":"Distance to discretized bezier function","likes":0,"published":3,"flags":0,"tags":["bezier","distance"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float dist = 1.0;\n\nvec3 color = vec3(0.3,1.0,0.8);\nvec2 startpoint = vec2(0.1, 0.1);\nvec2 endpoint = vec2(0.7, 0.7);\n\nvec2 bezier(vec2 p0, vec2 p1, vec2 p2, vec2 p3, float t)\n{\n \treturn vec2(pow(1.0-t,3.0)*p0 + 3.0* pow(1.0-t,2.0)*t*p1 + (1.0-t)*3.0*pow(t,2.0)*p2 + pow(t,3.0)*p3);\n}\n\nfloat distance_segment(vec2 p, vec2 a, vec2 b)\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    startpoint = iMouse.xy\/iResolution.xy;\n    \n    \/\/ Tune curvature depending on horizontal and vertical distance\n    float curvature = smoothstep(0.0, 0.5, abs(endpoint.x - startpoint.x)) * 0.2 + min(abs(endpoint.y - startpoint.y)*0.3,0.1);\n    \n    #define STEPSIZE 0.05\n    for(float i = 0.0; i < 1.0; i += STEPSIZE)\n    {\n        \/\/ (1.0-cos(i*3.14159))*0.5 -> Integrated sinewave to increase the stepcount at the beginning and end of curve\n        vec2 p1 = bezier(startpoint, startpoint+vec2(min(curvature, 0.2),0), endpoint-vec2(min(curvature, 0.2),0), endpoint, (1.0-cos(i*3.14159))*0.5);\n        vec2 p2 = bezier(startpoint, startpoint+vec2(min(curvature, 0.2),0), endpoint-vec2(min(curvature, 0.2),0), endpoint, (1.0-cos((i+STEPSIZE)*3.14159))*0.5);\n        \n        dist = min(dist, distance_segment(uv, p1, p2));\n    }\n    \n    vec4 outcol = vec4(mix(color, vec3(0.2,0.2,0.2), smoothstep(0.0, 4.0, dist*length(iResolution))), dist);\n    outcol.rgb = mix(texture2D(iChannel0, uv).rgb, outcol.rgb, 1.0-smoothstep(0.0, 4.0, dist*length(iResolution)));\n    \n\tfragColor = vec4(outcol.rgb, 1);\n}","name":"","description":"","type":"image"}]}}