{"Shader":{"ver":"0.1","info":{"id":"4tSGWV","date":"1432508066","viewed":743,"name":"Photoshop Blend Modes","username":"ridhojeftha","description":"Ps modes","likes":7,"published":3,"flags":0,"tags":["blend"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Darken\nvec3 darken (vec3 target, vec3 blend){\n    \n return min (target, blend);   \n}\n\n\/\/Multiply\nvec3 multiply (vec3 target, vec3 blend){\n    return target*blend;\n}\n\n\/\/Color Burn\nvec3 colorBurn (vec3 target, vec3 blend){\n    return 1.0 - (1.0 - target)\/ blend;\n}\n\n\/\/Linear Burn\nvec3 linearBurn (vec3 target, vec3 blend){\n    return target + blend - 1.0;\n}\n\n\/\/Lighten\nvec3 lighten (vec3 target, vec3 blend){\n    return max (target, blend);\n}\n\n\/\/Screen\nvec3 screen (vec3 target, vec3 blend){\n    return 1.0 - (1.0 - target) * (1.0 - blend);\n}\n\n\/\/Color Dodge\nvec3 colorDodge (vec3 target, vec3 blend){\n    return target \/ (1.0 - blend);\n}\n\n\/\/Linear Dodge\nvec3 linearDodge (vec3 target, vec3 blend){\n    return target + blend;\n}\n\n\/\/Overlay\nvec3 overlay (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (target.x > 0.5) ? (1.0-(1.0-2.0*(target.x-0.5))*(1.0-blend.x)) : (2.0*target.x)*blend.x;\n    temp.y = (target.y > 0.5) ? (1.0-(1.0-2.0*(target.y-0.5))*(1.0-blend.y)) : (2.0*target.y)*blend.y;\n    temp.z = (target.z > 0.5) ? (1.0-(1.0-2.0*(target.z-0.5))*(1.0-blend.z)) : (2.0*target.z)*blend.z;\n    return temp;\n}\n\n\/\/Soft Light\nvec3 softLight (vec3 target, vec3 blend){\n vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)*(1.0-(blend.x-0.5))) : (target.x * (blend.x + 0.5));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)*(1.0-(blend.y-0.5))) : (target.y * (blend.y + 0.5));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)*(1.0-(blend.z-0.5))) : (target.z * (blend.z + 0.5));\n    return temp;   \n}\n\n\/\/Hard Light\nvec3 hardLight (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)*(1.0-2.0*(blend.x-0.5))) : (target.x * (2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)*(1.0-2.0*(blend.y-0.5))) : (target.y * (2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)*(1.0-2.0*(blend.z-0.5))) : (target.z * (2.0*blend.z));\n    return temp;\n}\n\n\/\/Vivid Light\nvec3 vividLight (vec3 target, vec3 blend){\n     vec3 temp;\n    temp.x = (blend.x > 0.5) ? (1.0-(1.0-target.x)\/(2.0*(blend.x-0.5))) : (target.x \/ (1.0-2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (1.0-(1.0-target.y)\/(2.0*(blend.y-0.5))) : (target.y \/ (1.0-2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (1.0-(1.0-target.z)\/(2.0*(blend.z-0.5))) : (target.z \/ (1.0-2.0*blend.z));\n    return temp;\n}\n\n\/\/Linear Light\nvec3 linearLight (vec3 target, vec3 blend){\n    vec3 temp;\n    temp.x = (blend.x > 0.5) ? (target.x)+(2.0*(blend.x-0.5)) : (target.x +(2.0*blend.x-1.0));\n    temp.y = (blend.y > 0.5) ? (target.y)+(2.0*(blend.y-0.5)) : (target.y +(2.0*blend.y-1.0));\n    temp.z = (blend.z > 0.5) ? (target.z)+(2.0*(blend.z-0.5)) : (target.z +(2.0*blend.z-1.0));\n    return temp;\n}\n\n\/\/Pin Light\nvec3 pinLight (vec3 target, vec3 blend){\n     vec3 temp;\n    temp.x = (blend.x > 0.5) ? (max (target.x, 2.0*(blend.x-0.5))) : (min(target.x, 2.0*blend.x));\n    temp.y = (blend.y > 0.5) ? (max (target.y, 2.0*(blend.y-0.5))) : (min(target.y, 2.0*blend.y));\n    temp.z = (blend.z > 0.5) ? (max (target.z, 2.0*(blend.z-0.5))) : (min(target.z, 2.0*blend.z));\n    return temp;\n}\n\n\/\/Difference\nvec3 difference (vec3 target, vec3 blend){\n    return abs (target - blend);\n    \n}\n\/\/Exclusion\nvec3 exclusion (vec3 target, vec3 blend){\n    return 0.5 - 2.0*(target-0.5)*(blend-0.5);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\t\/\/upper texture\n\tvec3 upperTexture = texture2D(iChannel0, fragCoord.xy \/ iChannelResolution[0].xy).xyz;\n\t\n\t\/\/lower texture\n\tvec3 lowerTexture = texture2D(iChannel1, fragCoord.xy \/ iChannelResolution[1].xy).xyz;\n    \n    int time = int (mod (iGlobalTime, 16.0));\n    \n    vec3 finalImage = vec3(0.0);\n    if (time==0) finalImage =  darken ( upperTexture,  lowerTexture\t);\n    else if (time==1) finalImage = multiply ( upperTexture,  lowerTexture);\n    else if (time==2) finalImage =colorBurn ( upperTexture,  lowerTexture);\n    else if (time==3) finalImage =linearBurn ( upperTexture,  lowerTexture);\n    else if (time==4) finalImage =lighten ( upperTexture,  lowerTexture);\n    else if (time==5) finalImage =screen ( upperTexture,  lowerTexture);\n    else if (time==6) finalImage =colorDodge ( upperTexture,  lowerTexture);\n    else if (time==7) finalImage =linearDodge (upperTexture,  lowerTexture);\n    else if (time==8) finalImage =overlay ( upperTexture,  lowerTexture);\n    else if (time==9) finalImage =softLight ( upperTexture,  lowerTexture);\n    else if (time==10) finalImage =hardLight ( upperTexture,  lowerTexture);\n    else if (time==11) finalImage =vividLight ( upperTexture,  lowerTexture);\n    else if (time==12) finalImage =linearLight ( upperTexture,  lowerTexture);\n    else if (time==13) finalImage =pinLight ( upperTexture,  lowerTexture);\n    else if (time==14) finalImage =difference ( upperTexture,  lowerTexture);\n    else if (time==15) finalImage =exclusion (upperTexture, lowerTexture);\n    \n    \/\/set the color\n    fragColor = vec4(finalImage, 1.0);\n}","name":"","description":"","type":"image"}]}}