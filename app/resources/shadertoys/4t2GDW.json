{"Shader":{"ver":"0.1","info":{"id":"4t2GDW","date":"1429116323","viewed":690,"name":"Ray Marching Experiment 18","username":"aiekick","description":"mouse control","likes":1,"published":3,"flags":0,"tags":["ray","experiment","marching","18"],"hasliked":0},"renderpass":[{"inputs":[{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define USE_SPHERE_OR_BOX\n\nconst int REFLEXIONS_STEP = 1;\n    \n\/\/\/\/\/\/2D FUNC TO MODIFY\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec3 effect(vec2 uv) \n{\n    uv \/=4.;\n\n    float t = iGlobalTime+5.;\n        \n    \/\/ vars\n    float z = 2.5;\n    \n    const int n = 10; \/\/ particle count\n    \n    vec3 startColor = normalize(vec3(1.,0.,0.));\n    vec3 endColor = normalize(vec3(0.2,0.2,.8));\n    \n    float startRadius = 0.3;\n    float endRadius = 0.8;\n    \n    float power = 0.6;\n    float duration = 8.;\n    \n    vec3 col = vec3(0.);\n    \n    vec2 pm = uv.yx*2.8;\n    \n    float dMax = duration;\n    \n    float mb = 0.;\n    float mbRadius = 0.;\n    float sum = 0.;\n    for(int i=0;i<n;i++)\n    {\n        float d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \tfloat a = 6.28*float(i)\/float(n);\n         \n        float x = d*cos(a);\n        float y = d*sin(a);\n        \n        float distRatio = d\/dMax;\n        \n        mbRadius = mix(startRadius, endRadius, distRatio); \n        \n        uv = mod(uv,pm) - 0.5*pm;\n        \n        vec2 p = uv - vec2(x,y);\n    \t\n        p = mod(p,pm) - 0.5*pm;\n        \n        mb = mbRadius\/dot(p,p);\n    \t\n        sum += mb;\n        \n        col = mix(col, mix(startColor, endColor, distRatio), mb\/sum);\n    }\n    \n    sum \/= float(n);\n    \n    col = normalize(col) * sum;\n    \n    sum = clamp(sum, 0., .4);\n\n    col *= smoothstep(vec3(0.), vec3(1.8), vec3(sum));\n\n    return col;\n}\n\n\/\/ tex2d to sphere 3d\nvec2 uvMap(vec3 p)\n{\n    p = normalize(p);\n    vec2 tex2DToSphere3D;\n    tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ (2.*3.14159);\n    tex2DToSphere3D.y = 0.5 - asin(p.y) \/ 3.14159;\n    return tex2DToSphere3D;\n}\n\n\/\/\/\/\/\/\/FRAMEWORK\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 displacement(vec3 p)\n{\n    vec3 col = effect(p.xz);\n    \n    col = clamp(col, vec3(0), vec3(5.));\n    \n    float dist = dot(col,vec3(0.01));\n    \n    return vec4(dist,col);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n   \tfloat scale = 3.;\n    float dist = 0.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n    #ifdef USE_SPHERE_OR_BOX\n        dist = osphere(p, +5.-y);\n    #else    \n        if ( p.y > 0. ) dist = obox(p, vec3(x,1.-y,z));\n        else dist = obox(p, vec3(x,1.,z));\n\t#endif\n    \n    return vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.1, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.5;\n    float cam_a = time; \/\/ angle z\n    \n    #ifdef USE_SPHERE_OR_BOX\n        float cam_e = 5.52; \/\/ elevation\n        float cam_d = 1.88; \/\/ distance to origin axis\n   \t#else\n        float cam_e = 1.; \/\/ elevation\n        float cam_d = 1.8; \/\/ distance to origin axis\n    #endif\n    \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 1.2; \/\/ refraction angle\n    float refr_i = .8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float marchPrecision = 0.5; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    vec3 ray, cubeRay;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<250;i++)\n        {      \n            if (s<prec||s>maxd) break;\n            s = map(p).x*marchPrecision;\n            d += s;\n            p = ro+rd*d;\n        }\n\n        if (d<maxd)\n        {\n            vec2 e = vec2(-1., 1.)*0.005; \n            vec3 n = calcNormal(p);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(ray, n, refr_a);\n            cubeRay += textureCube(iChannel0, ray).rgb * refr_i;\n\n            float ratio = float(k)\/float(REFLEXIONS_STEP);\n            \n            if ( k == 0 ) \n                col = cubeRay+pow(b,15.); \n            else \n                col = mix(col, cubeRay+pow(b,25.\/ratio), ratio*0.8);  \n            \n            \/\/ lighting        \n            float occ = calcAO( p, n );\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            col = mix(col, map(p).yzw, 0.5);\n            \n            ro = p;\n            rd = ray;\n            s = prec;\n        }\n        else if (k == 0)\n        {\n            col = textureCube(iChannel0, rd).rgb;\n        }\n    }\n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}