{"Shader":{"ver":"0.1","info":{"id":"4dfGz4","date":"1363194052","viewed":3108,"name":"Voxel Tyre","username":"Dave_Hoskins","description":"Ray casting into a voxel scene, with reflections and shadows.","likes":45,"published":3,"flags":0,"tags":["raytracing","voxels","tyre"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Voxel tyre\n\/\/ By       Dave Hoskins\n\n\n#define REFLECTIONS_ON\n\t\t\t\t\t\t\t\n#define PI  3.1415926535\n\nvec3 areaPlane = normalize(vec3(-1.0, 1.0, 1.0));\nvec3 lightDir = normalize(vec3(-337.0, 743.0, 330.0));\nmat3 rotateMat;\nfloat height;\n\n\nfloat time = iGlobalTime * 3.1+230.0;\n\nfloat deTorus( vec3 p, vec2 t )\n{\n\tp.y -= height;\n\tp = rotateMat * p;\n\tvec2 q = vec2(length(p.xz)-t.x,p.y);\n\treturn length(q)-t.y;\n}\n\nfloat deTorusWarped( vec3 p, vec2 t, out int material)\n{\n\tp.y -= height;\n\tp = rotateMat * p;\n\tfloat l = length(p.xz);\n\tl= pow(l, 4.0) * .00008;\n\tvec2 q = vec2(l-t.x,p.y);\n\tif (q.x < -3.5) material = 2;\n\telse material = 3;\n\treturn length(q)-t.y;\n}\n\nfloat Scene(vec3 p, out int material)\n{\t\n    float d;\n\td = deTorusWarped(p, vec2(10.2,8.0), material);\n\tfloat d2 = deTorus(p, vec2(13.3, 4.5));\n\td = max(d, -d2);\n\td = min(d, p.y+4.0);\n\t\n    return d;\n}\n\n\/\/----------------------------------------------------------------------------\n\/\/ Voxel grid search that I found in 1994 in Graphics Gems IV - \"Voxel Traversal along a 3D Line\"!\n\/\/ This (Amanatides & Woo) varient is from another shader on here.\nfloat VoxelTrace(vec3 ro, vec3 rd, out bool hit, out vec3 hitNormal, out vec3 pos, out int material)\n{\n    const int maxSteps = 100;\n    vec3 voxel = floor(ro)+.501;\n    vec3 step = sign(rd);\n\t\/\/voxel = voxel + vec3(rd.x > 0.0, rd.y > 0.0, rd.z > 0.0);\n    vec3 tMax = (voxel - ro) \/ rd;\n    vec3 tDelta = 1.0 \/ abs(rd);\n    vec3 hitVoxel = voxel;\n\tint mat = 0;\n\t\n    hit = false;\n\t\n    float hitT = 0.0;\n    for(int i=0; i < maxSteps; i++)\n\t{\n\t\tif (!hit)\n\t\t{\n\t\t\tfloat d = Scene(voxel, mat);        \n\t\t\tif (d <= 0.0 && !hit)\n\t\t\t{\n\t\t\t\thit = true;\n\t\t\t\thitVoxel = voxel;\n\t\t\t\tmaterial = mat;\n                break;\n\t\t\t}\n\t\t\tbool c1 = tMax.x < tMax.y;\n\t\t\tbool c2 = tMax.x < tMax.z;\n\t\t\tbool c3 = tMax.y < tMax.z;\n\t\t\tif (c1 && c2) \n\t\t\t{ \n\t\t\t\tif (!hit) \n\t\t\t\t{\n\t\t\t\t\thitNormal = vec3(-step.x, 0.0, 0.0);\n\t\t\t\t\thitT = tMax.x;\n\t\t\t\t}\n\t\t\t\tvoxel.x += step.x;\n\t\t\t\ttMax.x += tDelta.x;\n\t\n\t\t\t} else if (c3 && !c1) \n\t\t\t{\n\t\t\t\tif (!hit) \n\t\t\t\t{\n\t\t\t\t\thitNormal = vec3(0.0, -step.y, 0.0);\t\n\t\t\t\t\thitT = tMax.y;\n\t\t\t\t}\n\t\t\t\tvoxel.y += step.y;\n\t\t\t\ttMax.y += tDelta.y;\n\t\t\t} else\n\t\t\t{\n\t\t\t\tif (!hit) \n\t\t\t\t{\n\t\t\t\t\thitNormal = vec3(0.0, 0.0, -step.z);\t\t\n\t\t\t\t\thitT = tMax.z;\n\t\t\t\t}\n\t\t\t\tvoxel.z += step.z;\n\t\t\t\ttMax.z += tDelta.z;\n\t\t\t}\n\t\t}\n    }\n\tif (hit && (hitVoxel.x > 27.0 || hitVoxel.x < -27.0 || hitVoxel.z < -27.0 || hitVoxel.z > 27.0))\n\t{\n\t\thit = false;\n\t\treturn 1000.0;\n\t}\n\t\n\tpos = ro + hitT * rd;\n\treturn hitT;\n}\n\n\/\/----------------------------------------------------------------------------\n\/\/ Do all the ray casting for voxels...\nfloat TraceEverything(vec3 ro, vec3 rd, out int material, out vec3 hitNormal, out vec3 pos)\n{\n\tbool hit1;\n\tint hit2;\n\tvec3 pos2;\n    float dist = VoxelTrace(ro, rd, hit1, hitNormal, pos, material);\n\tif (hit1)\n\t{\n\t\tif (pos.y < -3.45)\n\t\t{\n\t\t\tmaterial = 1;\n\t\t}\t\t\n\t}else\n\t{\n\t\tmaterial = 0;\n\t}\n\treturn dist;\n}\n\n\/\/----------------------------------------------------------------------------\nbool TraceShadow(vec3 ro, vec3 rd)\n{\n\tbool hit;\n\tvec3 pos;\n\tvec3 hitNormal;\n\tint mat;\n\tfloat dist2 = VoxelTrace(ro+rd*0.6, rd, hit, hitNormal, pos, mat);\n\treturn hit;\n}\n\n\/\/----------------------------------------------------------------------------\nvec3 DoMaterialRGB(int m, vec3 pos, vec3 norm, vec3 rd, vec3 ro)\n{\n\tvec3 rgb;\n\tfloat diff = dot(norm, lightDir);\n    diff = max(diff, 0.0);\n    \/\/return diff *areaColor;\t\n\tif (m == 1)\n\t{\n\t\trgb = diff * vec3(0.1, 0.1, 0.1);\n\t\t\n\t}else\n\tif (m == 2)\n\t{\n\t\trgb = diff * vec3(1.0, 1.0, 1.0);\n\t\t\n\t}else\n\tif (m == 3)\n\t{\n\t\trgb = diff * vec3(0.2, 0.2, 0.2);\n\t\t\n\t}else\n\t{\n\t\trgb = mix(vec3(.0, .05, .1), vec3(0.4, 0.3, .6), abs(sin(rd.y*3.0)));\n    }\n\treturn rgb;\n}\n\n\/\/----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 pixel = (fragCoord.xy \/ iResolution.xy)*2.0-1.0;\n    float asp = iResolution.x \/ iResolution.y;\n    vec3 rd = normalize(vec3(asp*pixel.x, pixel.y-1.3, -3.0));\n    vec3 ro = vec3(0.0, 50.0, 90.0);\n\tmat3 matZ, matY;\n\n\ttime = (cos(time \/ PI) + 1.0);\n\t\/\/ Rotate Z\n\tfloat z = time * .8;\n\tfloat sz = sin(z);\n\tfloat cz = cos(z);\n\tmatZ[0] = vec3(cz,\t\t-sz,\t0.0);\n\tmatZ[1] = vec3(sz,\t\tcz,\t\t0.0);\n\tmatZ[2] = vec3(0.0,\t0.0,\t1.0);\n\theight = (sz) *  14.0+4.0;\n\t\n\t\/\/ Rotate Y\n\tfloat y = time * 4.0*PI + PI*.5;\n\tfloat sy = sin(y);\n\tfloat cy = cos(y);\n\tmatY[0] = vec3(cy,\t\t0.0,\t-sy);\n\tmatY[1] = vec3(0.0,\t\t1.0,\t0.0);\n\tmatY[2] = vec3(sy,\t\t0.0,\t cy);\n\t\n\trotateMat = matZ * matY;\n\n\tvec3 rgb;\n    vec3 norm, pos;\n\tint material; \n\n\tTraceEverything(ro+rd*70.0, rd, material, norm, pos);\n\trgb = DoMaterialRGB(material, pos, norm, rd, ro);\n\t\n\t\/\/ Do the shadow casting...\n\tif (material > 0 && TraceShadow(pos+lightDir*.04, lightDir) == true)\n\t{\n\t\trgb *= .35;\n\t}\n\t\n\t\t\n#ifdef REFLECTIONS_ON\n\tif (material > 0 && material != 3)\n\t{\n\t\tro = pos;\n\t\trd = ((-2.0*(dot(rd, norm))*norm)+rd);\n\t\tTraceEverything(ro+rd*0.04, rd, material, norm, pos);\n\t\trgb = mix(rgb, DoMaterialRGB(material, pos, norm, rd, ro), .2);\n\t}\n#endif\n\n\t\/\/ Curve the brightness a little...\n\trgb = pow(rgb, vec3(.65, .65, .65));\n    fragColor=vec4(rgb, 1.0);\n}\n\t\t\t\t\t\t\t   \n\t\t\t\t\t\t\t   ","name":"","description":"","type":"image"}]}}