{"Shader":{"ver":"0.1","info":{"id":"MsXGz8","date":"1363318954","viewed":3097,"name":"Isolines","username":"iq","description":"Yet another meta-ball based isoline effect. Basically, a regular potential based scalar field is computed (based in 10 charges) and used to index into a 1D texture (in this case, a slice of a 2D texture). ","likes":21,"published":3,"flags":0,"tags":["2d","sound","fft","metaballs"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 doit( in vec2 p, in float off, float amp )\n{\n    float f = 0.0;\n\tfloat a = 0.0;\n    for( int i=0; i<10; i++ )\n    {\n  \t    float h = float(i)\/10.0;\n  \t    float g = texture2D( iChannel1, vec2(0.01+h*0.5, 0.25)).x;\n  \t    float k = 1.0 + 0.4*g*g;\n\n        vec2 q;\n        q.x = sin(iGlobalTime*0.015+0.67*g*(1.0+amp) + off + float(i)*121.45) * 0.5 + 0.5;\n        q.y = cos(iGlobalTime*0.016+0.63*g*(1.0+amp) + off + float(i)*134.76) * 0.5 + 0.5;\n\t    vec2 d = p - q;\n\t\tfloat at = 1.0\/(0.01+dot(d,d));\n        f += k*0.1*at;\n\t\ta += 0.5 + 0.5*sin(2.0*atan(d.y,d.x));\/\/*at;\n    }\n\t\n    return vec2(f,a);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy \/ iResolution.xy;\n\n\tfloat isTripy = smoothstep( 86.5, 87.5, iChannelTime[1] ) - \n\t\t            smoothstep( 100.5, 108.0, iChannelTime[1] );\n\n    vec2 ref = doit( p, 0.0, isTripy );\n    float b = ref.x;\t\n\n\t\n    vec3 col = texture2D( iChannel0,vec2(pow(0.25*ref.x,0.25), 0.5)).xyz\n             * texture2D( iChannel0,vec2(0.1*pow(ref.y,1.2), 0.6)).xyz;\n\tcol = sqrt(col)*2.0;\n\t\n\tvec3 col2 = col;\n\tcol2 = 4.0*col2*(1.0-col2);\n\tcol2 = 4.0*col2*(1.0-col2);\n\tcol2 = 4.0*col2*(1.0-col2);\n    \n\tcol = mix( col, col2, isTripy );\n\n\tfloat useLights = 0.5 + 1.5*smoothstep( 45.0, 45.2, iChannelTime[1] );\n\tcol += useLights*0.5*pow( b*0.1, 4.0 ) * pow( texture2D( iChannel1, vec2(0.1,0.25) ).x, 2.0 );\n\n\tfragColor = vec4( col, 1.0 );;\n}\n","name":"","description":"","type":"image"}]}}