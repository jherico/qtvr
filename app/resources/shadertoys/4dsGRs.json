{"Shader":{"ver":"0.1","info":{"id":"4dsGRs","date":"1377126109","viewed":1830,"name":"Juster Beaver","username":"movAX13h","description":"just a beaver; use your mouse (horizontal) to make him smile","likes":26,"published":3,"flags":0,"tags":["2d","mouse","triangle","motionblur","rectangle","shapes","beaver"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Juster Beaver fragment shader by movAX13h, august 2013\n\n\/\/ upd 1: added grain and vignetting\n\/\/ upd 2: added motion blur (excl. ears) ;)\n\n#define ANTIALIASING;\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\n\/\/ too lazy for calculating barycentric coordinates and solving the\n\/\/ expensive equation for triangle hits might be slower anyway ...\nfloat dir(vec2 a, vec2 b, vec2 c)\n{\n\treturn (a.x - c.x) * (b.y - c.y) - (b.x - c.x) * (a.y - c.y);\n}\n\nbool insideTri(vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tbool b1 = dir(p, a, b) < 0.0;\n\tbool b2 = dir(p, b, c) < 0.0;\n\tbool b3 = dir(p, c, a) < 0.0;\n  \treturn ((b1 == b2) && (b2 == b3));\n}\n\nfloat distRect(vec2 p, vec2 rect)\n{\n  vec2 d = abs(p) - rect;\n  return smoothstep(rect.y, 0.0, min(max(d.x, d.y),0.0) + length(max(d, 0.0)));\n}\n\nvoid applyColor(vec3 paint, inout vec3 col, vec2 p, vec2 a, vec2 b, vec2 c)\n{\n\tif (insideTri(p, a, b, c)) col = mix(col, paint, max(col.r, 1.0));\n}\n\nvec3 beaver(vec2 uv, float grin)\n{\n\tvec3 col = vec3(0.6, 0.6, 0.76)+sin(iGlobalTime*0.2)*0.1;\n\t\n\t\/\/ ears\n\tvec3 paint = vec3(0.74, 0.465, 0.19);\n\tfloat flapping = sin(iGlobalTime*50.0) * step(4.4, mod(iGlobalTime, 5.0))*6.0;\n\tapplyColor(paint, col, uv, vec2(102.0, 24.0), vec2(133.45, 61.2-grin*0.2+flapping), vec2(110.6, 61.2));\n\t\n\tuv.x = -uv.x;\n\tflapping = sin(iGlobalTime*40.0) * step(7.5, mod(iGlobalTime, 8.0))*3.0;\n\tapplyColor(paint, col, uv, vec2(102.0, 24.0), vec2(133.45, 61.2-grin*0.2*flapping), vec2(110.6, 61.2));\n\t\n\tuv.x = abs(uv.x); \/\/ mirror ON\n\t\n\t\/\/ head\n\tpaint = vec3(0.566, 0.387, 0.183);\n\tapplyColor(paint, col, uv, vec2(0.0, 0.0), vec2(102.0, 24.0), vec2(0.0, 201.5));\n\tapplyColor(paint, col, uv, vec2(102.0, 24.0), vec2(140.65, 174.2-grin*0.3), vec2(0.0, 201.5));\n\t\n\t\/\/ snout\n\tpaint = vec3(0.76, 0.57, 0.33);\n\tapplyColor(paint, col, uv, vec2(0.0, 51.45), vec2(57.55, 57.55), vec2(0.0, 152.35));\n\tapplyColor(paint, col, uv, vec2(57.55, 57.55), vec2(92.05, 152.35-grin), vec2(0.0, 152.35));\n\t\n\t\/\/ mouth\n\tpaint = vec3(0.33, 0.2, 0.11);\n\tapplyColor(paint, col, uv, vec2(0.0, 152.35), vec2(92.05, 152.35-grin), vec2(0.0, 171.4+grin)); \n\t\n\t\/\/ nose\n\tapplyColor(paint, col, uv, vec2(0.0, 51.45), vec2(41.85, 55.7), vec2(0.0, 115.1)); \n\tapplyColor(paint, col, uv, vec2(41.85, 55.7), vec2(41.85, 98.35), vec2(0.0, 115.1)); \n\t\n\tapplyColor(paint, col, uv, vec2(0.0, 114.1), vec2(1.8, 152.35), vec2(0.0, 152.35)); \n\tapplyColor(paint, col, uv, vec2(0.0, 114.1), vec2(1.8, 114.1), vec2(1.8, 152.35)); \n\t\n\t\/\/ eyes\n\tvec2 p = vec2(abs(uv.x), uv.y-grin*0.24)-vec2(68.85, 51.45);\n\tfloat blink = step(0.999, sin(iGlobalTime*0.9)) * smoothstep(6.0, 0.0, p.y)*19.0;\n\tcol = mix(col, paint, smoothstep(1.5, 0.0, length(p)-7.5+blink));\n\t\n\t\/\/ body\n\tapplyColor(paint, col, uv, vec2(0.0, 201.5), vec2(140.65, 174.2-grin*0.3), vec2(0.0, 255.0));\n\tapplyColor(paint, col, uv, vec2(140.65, 174.2-grin*0.3), vec2(140.65, 255.0), vec2(0.0, 255.0));\n\t\n\t\/\/ teeth\n\tpaint = vec3(0.98, 0.76, 0.24);\n\tapplyColor(paint, col, uv, vec2(2.0, 152.35-grin*0.03), vec2(18.0, 152.35-grin*0.2), vec2(18.0, 163.65)); \n\tapplyColor(paint, col, uv, vec2(2.0, 152.35-grin*0.03), vec2(18.0, 163.65), vec2(2.0, 163.65));\n\t\n\t\/\/ whiskers\n\tfloat k = max(0.0, abs(uv.x) - 26.0);\n\tk -= smoothstep(0.0, 89.0, k)*grin;\n\tvec2 pw = vec2(uv.x-89.0, uv.y-122.15-4.0*cos(0.03*(uv.x+10.0)));\n\t\n\tcol = mix(col, vec3(0.0), distRect(vec2(pw.x,        pw.y - 0.04*k), vec2(63.0, 0.3)));\n\tcol = mix(col, vec3(0.0), distRect(vec2(pw.x + 2.0,  pw.y - 0.3*k),  vec2(61.0, 0.3)));\n\tcol = mix(col, vec3(0.0), distRect(vec2(pw.x + 8.0,  pw.y - 0.6*k),  vec2(55.0, 0.3)));\n\tcol = mix(col, vec3(0.0), distRect(vec2(pw.x + 12.0, pw.y - 0.9*k),  vec2(50.0, 0.3)));\n\t\n\treturn col;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy;\n\tuv.y = iResolution.y-uv.y+128.0;\n\tuv -= iResolution.xy*0.5;\n\tuv *= 0.8;\n\t\n\t\/\/ quickfix for Shadertoy \n\t\/\/ #ifdef THUMBNAIL would be nice\n\tif (iResolution.y < 200.0) \n\t{\n\t\tuv *= 2.2;\n\t\tuv.y -= 120.0;\n\t}\n\t\n\tfloat beaverTime = iGlobalTime;\n\tfloat grinBase = 2.0 + 30.0*(iMouse.x-iResolution.x*0.5)\/iResolution.x;\n\tfloat grin = max(0.0, sin(beaverTime*4.0))*10.0 + grinBase;\n\n\tvec3 col = beaver(uv, grin);\n\t\n\t\/\/ basic antialiasing (9 samples)\n  \t#ifdef ANTIALIASING\n\tconst float aa = 0.3;\n\tfor(float i = -aa; i <= aa; i+=aa)\n\t{\n\t\tfor(float j = -aa; j <= aa; j+=aa)\n\t\t{\n\t\t\tgrin = max(0.0, sin(beaverTime*4.0+0.5*length(vec2(i,j))))*10.0 + grinBase; \/\/ \"motion blur\"\n\t\t\tvec2 aauv = vec2(uv.x+i, uv.y+j);\n\t\t\tcol += beaver(aauv, grin);\n\t\t\t\/\/col -= rand(aauv\/iResolution.xy) * 0.1; \/\/ smoothed grain\n\t\t}\n\t}\n\tcol \/= 10.0;\n  \t#endif\n\t\n    \/\/ grain\n    col *= 1.0 - rand(uv\/iResolution.xy) * 0.06;\n\t\n\t\/\/ \"shading\" (vignetting)\n\tcol -= smoothstep(0.0, 170.0, length(vec2(uv.x, uv.y-110.0)))*0.2;\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}