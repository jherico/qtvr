{"Shader":{"ver":"0.1","info":{"id":"MtfGDn","date":"1420790809","viewed":1083,"name":"Ray Marching Experiment 1","username":"aiekick","description":"mouse for control camera elevation and camera distance","likes":7,"published":3,"flags":0,"tags":["mouse","ray","marching","experiment2"],"hasliked":0},"renderpass":[{"inputs":[{"id":12,"src":"\/presets\/vid01.webm","ctype":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define USE_OREN_NAYAR_LIGHT_MODEL\n#define USE_TEXTURE_COLOR\n#define USE_REFLECTIONS\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat random(float p){return fract(sin(p)*1000.);}\nfloat noise(vec2 p){return random(p.x + p.y*100.);}\nvec2 sw(vec2 p) {return vec2( floor(p.x) , floor(p.y) );}\nvec2 se(vec2 p) {return vec2( ceil(p.x)  , floor(p.y) );}\nvec2 nw(vec2 p) {return vec2( floor(p.x) , ceil(p.y)  );}\nvec2 ne(vec2 p) {return vec2( ceil(p.x)  , ceil(p.y)  );}\nfloat snoise(vec2 p) {\n  vec2 inter = smoothstep(0., 1., fract(p));\n  float s = mix(noise(sw(p)), noise(se(p)), inter.x);\n  float n = mix(noise(nw(p)), noise(ne(p)), inter.x);\n  return mix(s, n, inter.y);\n  return noise(nw(p));\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 displacement(vec3 p)\n{\n   \tp.x\/=iResolution.x\/iResolution.y;\n\n    vec3 tex = texture2D(iChannel1, p.xz\/9.).rgb;\n    \n    tex = clamp(tex, vec3(0.), vec3(1.));\n    return vec4(length(tex),tex);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\n\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n   \tfloat scale = 1.;\n    float box = 0.;\n    \n    float x = 8.;\n    float z = x*iResolution.y\/iResolution.x;\n    \n    vec4 disp = displacement(p+vec3(x,1.,z));\n    \n    float y = disp.x*scale;\n    \n    if ( p.y > 0. ) box = obox(p, vec3(x,y,z));\n    else box = obox(p, vec3(x,1.,z));\n\t\n    return vec4(box, disp.yzw);\n}\n\n\/\/\/https:\/\/www.shadertoy.com\/view\/Xds3zN\/\/\/\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.005, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/ ray marching\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec)\n{\n    float s = rmPrec;\n    float d = 0.;\n    for(int i=0;i<150;i++)\n    {      \n        if (s<rmPrec||s>maxd) break;\n        s = map(ro+rd*d).x*mapPrec;\n        d += s;\n    }\n    return d;\n}\n\n\/\/https:\/\/en.wikipedia.org\/wiki\/Oren%E2%80%93Nayar_reflectance_model\nvec3 OrenNayarLightModel(vec3 rd, vec3 ld, vec3 n){\n\tvec3 col = vec3(1.);\/\/cubeMap(uCubeMap, ld, uCubeMapSize.x).rgb;\n\n\tfloat RDdotN = dot(-rd, n);\n\tfloat NdotLD = dot(n, ld);\n    \n    float aRDN = acos(RDdotN);\n\tfloat aNLD = acos(NdotLD);\n    \n\tfloat mu = .3; \/\/ roughness\n\tif (iMouse.z>0.) mu = iMouse.y\/iResolution.y;\n    \n\tfloat A = 1.-.5*mu*mu\/(mu*mu+0.57);\n    float B = .45*mu*mu\/(mu*mu+0.09);\n\n\tfloat alpha = max(aRDN, aNLD);\n\tfloat beta = min(aRDN, aNLD);\n\t\n\tfloat albedo = 1.1;\n\t\n\tfloat e0 = 3.1;\n\tcol *= vec3(albedo \/ 3.14159) * cos(aNLD) * (A + ( B * max(0.,cos(aRDN - aNLD)) * sin(alpha) * tan(beta)))*e0;\n\t\n\treturn col;\n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.5;\n    float cam_a = 3.14159; \/\/ angle z\n    float cam_e = 6.1; \/\/ elevation\n    float cam_d = 2.; \/\/ distance to origin axis\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = 0.45; \/\/ reflexion intensity\n    float refr_a = 0.0; \/\/ refraction angle\n    float refr_i = 0.8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float marchPrecision = 0.3; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.y>0.) cam_d = iMouse.y\/iResolution.y * 50.;\n    if ( iMouse.x>0.) cam_e = iMouse.x\/iResolution.x * 10.;\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, prec, maxd, marchPrecision);\n    \n    if (d<maxd)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\/\/normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );\n        \/\/vec3 np = normalize(p);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n        \n\t\tvec3 refrRay = refract(rd, n, refr_a);\n        vec3 cubeRefl = textureCube(iChannel0, reflRay).rgb * refl_i;\n        vec3 cubeRefr = textureCube(iChannel0, refrRay).rgb * refr_i;\n        \n        #ifdef USE_REFLECTIONS\n        \tcol = cubeRefr+cubeRefl+pow(b,15.);  \n        #endif\n        \n        #ifndef USE_OREN_NAYAR_LIGHT_MODEL\n            \/\/ lighting        \n            float occ = calcAO( p, n );\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, reflRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( reflRay, lig ), 0.0, 1.0 ),16.0);\n\n            dif *= softshadow( p, lig, 0.02, 2.5 );\n            dom *= softshadow( p, reflRay, 0.02, 2.5 );\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n       \t#else\n        \tcol = OrenNayarLightModel(rd, reflect(rd,n), n);\n        #endif\n        #ifdef USE_TEXTURE_COLOR\n        \tcol = mix(col, map(p).yzw, 0.5);\n       \t#endif\n    }\n    else\n    {\n        b+=0.1;\n        col = textureCube(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}