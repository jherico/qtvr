{"Shader":{"ver":"0.1","info":{"id":"4tlGzS","date":"1423033513","viewed":1540,"name":"Sine deformation","username":"iq","description":"Another weird sculpture. It's one cylinder distorted by a composition of sine waves deformation. Similar to <a href=\"https:\/\/www.shadertoy.com\/view\/Mdl3RH\"  class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/Mdl3RH<\/a>, but in 3D.","likes":10,"published":3,"flags":0,"tags":["3d","raymarching","distancefield","sine"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture2D( sam, p.yz );\n\tvec4 y = texture2D( sam, p.zx );\n\tvec4 z = texture2D( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) \/ (w.x+w.y+w.z);\n}\n\nvec4 map( vec3 p )\n{\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime*0.4 );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime*0.4 );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime*0.4 );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime*0.3 );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime*0.3 );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime*0.3 );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime*0.2 );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime*0.2 );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime*0.2 );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime*0.1 );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime*0.1 );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime*0.1 );\n    float d1 = length(p.xz) - 1.0;\n    d1 *= 0.01;\t\n\n    return vec4( d1, p );\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd, in float maxd )\n{\n    vec3 res = vec3(-1.0);\n\tfloat precis = 0.0001;\n    float t = 1.0;\n    for( int i=0; i<2048; i++ )\n    {\n\t    vec4 tmp = map( ro+rd*t );\n        res = tmp.yzw;\n        float h = tmp.x;\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n    return vec4( t, res );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec2 e = vec2(1.0,-1.0)*0.001;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n    const float h = 0.2;\n\tfloat ao = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n        dir *= sign(dot(dir,nor));\n        float d = map( pos + h*dir ).x;\n        ao += max(0.0,h-d*2.0);\n    }\n    return clamp( 4.0 - 2.5*ao, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n\t\n\tfloat an = 0.1*iGlobalTime - 5.0*m.x;\n\tvec3 ro = vec3(4.5*sin(an),0.0,4.5*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    \/\/-----------------------------------------------------\n\n\tvec3 col = vec3(0.1);\n\n    const float maxd = 8.0;\n    vec4  inn = intersect(ro,rd,maxd);\n    float t = inn.x;\n    if( t<maxd )\n    {\n        vec3 tra = inn.yzw;\n\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        col = 0.5 + 0.5*sin(tra.y*1.0 + vec3(0.0,1.0,2.0) );\n        vec3 pat = texCube( iChannel0, 0.3*tra, nor, 4.0 ).xyz;\n        col *= pat;\n\n        \n\t\tfloat occ = calcOcc( pos, nor );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 4.0 );\n        float spe = 0.3*pat.x*max( 0.0, pow( clamp( dot(-rd,nor), 0.0, 1.0), 32.0 ) )*occ;\n        \n\t\tvec3 lin = vec3(0.0);\n        lin += vec3(0.8,0.9,1.0)*occ;\n        lin += 4.0*fre*vec3(1.00,0.80,0.70)*occ;\n        lin *= 1.0 + nor.y;\n        col = col*lin + spe;\n\n        col = 1.1*pow( col, vec3(0.16,0.31,0.4) );\n\t}\n\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2 );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}