{"Shader":{"ver":"0.1","info":{"id":"MsSSWV","date":"1415959692","viewed":3425,"name":"Sphere - antialias","username":"iq","description":"Analytical antialiasing for raytraced spheres. Only one ray\/sample per pixel is casted. This shader also uses analytical ambient occlusion and analytical soft shadows.","likes":44,"published":3,"flags":0,"tags":["3d","sphere","antialias","analytical"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Analytical antialiasing of raytraced spheres. Only one ray\/sample per pixel is casted. \n\/\/ However, spheres have simple analytical pixel coverage computation, so some degree of \n\/\/ edge antialiasing can be performed.\n\/\/\n\/\/ For that, all intersections and near-intersections must be found and sorted back to front, \n\/\/ for proper composition.\n\/\/\n\/\/ Try undefining the flag below to see the difference.\n\/\/\n\/\/ Related info: http:\/\/iquilezles.org\/www\/articles\/spherefunctions\/spherefunctions.htm\n\n\n\/\/#define NO_ANTIALIAS\n\n\/\/-------------------------------------------------------------------------------------------\n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return normalize(pos-sph.xyz);\n}\n\nfloat sphIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat sphShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n            \nvec2 sphDistances( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    float d = sqrt( max(0.0,sph.w*sph.w-h)) - sph.w;\n    return vec2( d, -b-sqrt(max(h,0.0)) );\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    float s = 1.0;\n    vec2 r = sphDistances( ro, rd, sph );\n    if( r.y>0.0 )\n        s = max(r.x,0.0)\/r.y;\n    return s;\n}    \n            \nfloat sphOcclusion( in vec3 pos, in vec3 nor, in vec4 sph )\n{\n    vec3  r = sph.xyz - pos;\n    float l = length(r);\n    float d = dot(nor,r);\n    float res = d;\n\n    if( d<sph.w ) res = pow(clamp((d+sph.w)\/(2.0*sph.w),0.0,1.0),1.5)*sph.w;\n    \n    return clamp( res*(sph.w*sph.w)\/(l*l*l), 0.0, 1.0 );\n\n}\n\n\/\/-------------------------------------------------------------------------------------------\n#define NUMSPHEREES 12\n\nvec4 sphere[NUMSPHEREES];\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n        res = min( res, 8.0*sphSoftShadow(ro,rd,sphere[i]) );\n    return res;\t\t\t\t\t  \n}\n\nfloat occlusion( in vec3 pos, in vec3 nor )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t    res *= 1.0 - sphOcclusion( pos, nor, sphere[i] ); \n    return res;\t\t\t\t\t  \n}\n\n\/\/-------------------------------------------------------------------------------------------\n\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\nvec3 textureBox( sampler2D sam, in vec3 pos, in vec3 nor )\n{\n    vec3 w = abs(nor);\n    return (w.x*texture2D( sam, pos.yz ).xyz + \n            w.y*texture2D( sam, pos.zx ).xyz + \n            w.z*texture2D( sam, pos.xy ).xyz ) \/ (w.x+w.y+w.z);\n}\n\nvec3 shade( in vec3 rd, in vec3 pos, in vec3 nor, in float id, in vec3 uvw )\n{\n    vec3 ref = reflect(rd,nor);\n    float occ = occlusion( pos, nor );\n    float fre = clamp(1.0+dot(rd,nor),0.0,1.0);\n    \n    occ = occ*0.5 + 0.5*occ*occ;\n    vec3 lig = vec3(occ)*vec3(0.9,0.95,1.0);\n    lig *= 0.7 + 0.3*nor.y;\n    lig += 0.7*vec3(0.3,0.2,0.1)*fre*occ;\n    lig *= 0.9;\n\n    \n    lig += 0.7*smoothstep(-0.05,0.05,ref.y )*occ*shadow( pos, ref ) * (0.03+0.97*pow(fre,3.0));\n\n    return lig;\n}    \n\n\n#define SWP(i,j) if(cols[j].w>cols[i].w){vec4 tm=cols[i];cols[i]=cols[j];cols[j]=tm;tm.x=alps[i];alps[i]=alps[j];alps[j]=tm.x;}\n\n\nvec3 trace( in vec3 ro, in vec3 rd, vec3 col, in float px )\n{\n#ifdef NO_ANTIALIAS\n\tfloat t = 1e20;\n\tfloat id  = -1.0;\n    vec4  obj = vec4(0.0);\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float h = sphIntersect( ro, rd, sph ); \n\t\tif( h>0.0 && h<t ) \n\t\t{\n\t\t\tt = h;\n            obj = sph;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    if( id>-0.5 )\n    {\n\t\tvec3 pos = ro + t*rd;\n\t\tvec3 nor = sphNormal( pos, obj );\n        col = shade( rd, pos, nor, id, pos-obj.xyz );\n    }\n\n#else\n\n    vec4 cols[NUMSPHEREES]; float alps[NUMSPHEREES];\n\n    \/\/ clear visible point list    \n\tfor( int i=0; i<NUMSPHEREES; i++ ) { cols[i] = vec4(0.0,0.0,0.0,1e10); alps[i] = 0.0; }\n    \n    \/\/ intersect spheres\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n        vec2 dt = sphDistances( ro, rd, sph );\n        float d = dt.x;\n\t    float t = dt.y;\n        \/\/if( t<0.0 ) continue; \/\/ skip stuff behind camera. If I enable it, I loose mipmapping\n        \n        float s = max( 0.0, d\/t );\n        if( s < px ) \/\/ intersection, or close enough to an intersection\n        {\n            vec3 pos = ro + t*rd;\n            vec3 nor = sphNormal( pos, sph );\n            float id = float(i);\n            cols[i].xyz = shade( rd, pos, nor, id, pos-sph.xyz );\n            cols[i].w = t;\n            alps[i] = 1.0 - clamp(s\/px,0.0,1.0); \/\/ coverage\n        }\n\t}\n\n    \/\/ sort intersections, back to front\n    \n    \/\/ bubble sort unrolled for 12 spheres\n    SWP( 0, 1); SWP(0, 2); SWP(0, 3); SWP(0, 4); SWP(0, 5); SWP(0, 6); SWP(0, 7); SWP(0, 8); SWP(0, 9); SWP(0,10); SWP(0,11);\n    SWP( 1, 2); SWP(1, 3); SWP(1, 4); SWP(1, 5); SWP(1, 6); SWP(1, 7); SWP(1, 8); SWP(1, 9); SWP(1,10); SWP(1,11);\n    SWP( 2, 3); SWP(2, 4); SWP(2, 5); SWP(2, 6); SWP(2, 7); SWP(2, 8); SWP(2, 9); SWP(2,10); SWP(2,11);\n    SWP( 3, 4); SWP(3, 5); SWP(3, 6); SWP(3, 7); SWP(3, 8); SWP(3, 9); SWP(3,10); SWP(3,11);\n    SWP( 4, 5); SWP(4, 6); SWP(4, 7); SWP(4, 8); SWP(4, 9); SWP(4,10); SWP(4,11);\n    SWP( 5, 6); SWP(5, 7); SWP(5, 8); SWP(5, 9); SWP(5,10); SWP(5,11);\n    SWP( 6, 7); SWP(6, 8); SWP(6, 9); SWP(6,10); SWP(6,11);\n    SWP( 7, 8); SWP(7, 9); SWP(7,10); SWP(7,11);\n    SWP( 8, 9); SWP(8,10); SWP(8,11);\n    SWP( 9,10); SWP(9,11);\n    SWP(10,11);\n    \/*\n\tfor( int i=0; i<NUMSPHEREES-1; i++ )\n    for( int j=0; j<NUMSPHEREES; j++ )\n    {\n        if( (j>i) && (cols[j].w>cols[i].w) )\n        {\n            vec4 tm = cols[i];\n            cols[i] = cols[j];\n            cols[j] = tm;\n            tm.x = alps[i];\n            alps[i] = alps[j];\n            alps[j] = tm.x;\n        }\n\t}*\/\n    \n    \/\/ composite\n    float ow = 1e20;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n    {\n        float w = cols[i].w;\n        float al = clamp( 0.5 + 0.5*(ow-w)\/(px*4.0), 0.0, 1.0 );\n        col = mix( col, cols[i].xyz, alps[i]*al );\n        ow = w;\n    }\n    \n#endif\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = (2.0*fragCoord.xy-iResolution.xy)\/iResolution.y;\n\n    vec2 m = step(0.0001,iMouse.z) * iMouse.xy\/iResolution.xy;\n\t\n    \/\/-----------------------------------------------------\n    \/\/ animate\n    \/\/-----------------------------------------------------\n\tfloat time = iGlobalTime*0.5;\n\t\n\tfloat an = 0.3*time - 7.0*m.x;\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(i);\n        float ra = pow(id\/float(NUMSPHEREES-1),3.0);\n\t    vec3  pos = 1.0*cos( 6.2831*hash3(id*14.0) + 0.5*(1.0-0.7*ra)*hash3(id*7.0)*time );\n\t\tsphere[i] = vec4( pos, (0.3+0.6*ra) );\n    }\n\t\t\t\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    float le = 1.8;\n\tvec3 ro = vec3(2.5*sin(an),1.5*cos(0.5*an),2.5*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + le*ww );\n\n    float px = 1.0*(2.0\/iResolution.y)*(1.0\/le);\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\tvec3 col = vec3(0.02) + 0.02*rd.y;\n    \n    col = trace( ro, rd, col, px );\n    \n\n    \/\/-----------------------------------------------------\n\t\/\/ postpro\n    \/\/-----------------------------------------------------\n    \n    \/\/ gamme    \n    col = pow( col, vec3(0.4545) );\n\n    \/\/ vignetting    \n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.15);\n\n    \/\/ dithering\n    col += (1.0\/255.0)*hash3(q.x+13.0*q.y);\n    \n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}