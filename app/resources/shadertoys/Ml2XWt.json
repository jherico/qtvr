{"Shader":{"ver":"0.1","info":{"id":"Ml2XWt","date":"1447431763","viewed":339,"name":"Sound Experiment 3","username":"aiekick","description":"based on shader \/\/ https:\/\/www.shadertoy.com\/view\/4ljSDt from gilesruscoe ","likes":3,"published":3,"flags":0,"tags":["sound","experiment","3"],"hasliked":0},"renderpass":[{"inputs":[{"id":20,"src":"\/presets\/mzk03.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ Tuned via XShade (http:\/\/www.funparadigm.com\/xshade\/)\n\n\/\/ based on https:\/\/www.shadertoy.com\/view\/4ljSDt from gilesruscoe \n\nvec4 freqs;\n\nfloat map(vec3 p)\n{\n    \n    p.z += cos(p.y) * freqs.y * 3.;\n    float xz = length(fract(p.xz)*2.-1.);\n\t\n   \tp.y += cos(p.z\/2.) * freqs.z * 2.;\n\tfloat xy = length(fract(p.xy\/1.2)*2.-1.);\n\t   \n   \tfloat zy = max(length(fract(p.zy+vec2(.5))*2.-1.), \n                   max(min(cos(p.z) * freqs.x * 2.,cos(p.z) * freqs.y),.2) - abs(p.x));\n\t\n    return min(xz, min(xy, zy)) - 0.1;\n}\n\nfloat trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    for (int i = 0; i < 40; ++i)\n    {\n        vec3 p = o + r * t;\n        float d = map(p);\n        t += d * 0.5;\n    }\n    return t;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ from CubeScape : https:\/\/www.shadertoy.com\/view\/Msl3Rr\n    freqs.x = texture2D( iChannel0, vec2( 0.01, 0.25 ) ).x;\n\tfreqs.y = texture2D( iChannel0, vec2( 0.1, 0.25 ) ).x;\n\tfreqs.z = texture2D( iChannel0, vec2( 0.2, 0.25 ) ).x;\n\tfreqs.w = texture2D( iChannel0, vec2( 0.3, 0.25 ) ).x;\n    \n    freqs.x = (freqs.x * 1. + freqs.y * 2. + freqs.z *3. + freqs.w * 4.)\/5.;\n   \tfreqs.y = (freqs.y * 1. + freqs.z * 2. + freqs.w *3.)\/5.;\n   \tfreqs.z = (freqs.z * 1. + freqs.w * 2.)\/6.;\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 2.0));\n    \n    vec3 o = vec3(0.0, -cos( freqs.y ) * freqs.z * 2., iGlobalTime * 2.);\n    \n    float t = trace(o, r * clamp(freqs.w, 1., 2.));\n    \n    float fog = 2. \/ (1. + t * t * 0.1);\n    \n    vec3 col = (.5 + freqs.yzx) * fog;\n    \n\tfragColor = vec4(col, 1.0);\n}\n\n","name":"","description":"","type":"image"}]}}