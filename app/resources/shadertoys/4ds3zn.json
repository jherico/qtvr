{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4ds3zn",
				"date": "1367486490",
				"viewed": 2754,
				"name": "Apollonian",
				"username": "iq",
				"description": "The classic standard apollonian\/kleinian fractal (everybody needs to render one at some point).",
				"likes": 50,
				"published": 3,
				"tags": 
				[
					"3d",
					"raymarching",
					"fractal",
					"distancefield",
					"kleinian",
					"apollonian"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						
					],

					"outputs": 
					[
						
					],

					"code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n//\n// I can't recall where I learnt about this fractal.\n//\n// Coloring and fake occlusions are done by orbit trapping, as usual.\n\n// Antialiasing level. Make it 2 or 3 if you have a fast machine\n#define AA 1\n#pragma vr\n\nvec4 orb;\nfloat ss;\nfloat map(vec3 p)\n    {\n  float scale = 1.0;\n\n  orb = vec4(1000.0);\n\n  for (int i = 0; i < 8; i++)\n      {\n    p = -1.0 + 2.0 * fract(0.5 * p + 0.5);\n\n    float r2 = dot(p, p);\n\n    orb = min(orb, vec4(abs(p), r2));\n\n    float k = max(ss / r2, 0.1);\n    p *= k;\n    scale *= k;\n  }\n\n  return 0.25 * abs(p.y) / scale;\n}\n\nfloat trace( in vec3 ro, in vec3 rd )\n{\n  float maxd = 30.0;\n  float t = 0.01;\n  for( int i=0; i<200; i++ )\n  {\n    float precis = 0.001 * t;\n\n    float h = map( ro+rd*t );\n    if( h<precis||t>maxd ) break;\n    t += h;\n  }\n\n  if( t>maxd ) t=-1.0;\n  return t;\n}\n\nvec3 calcNormal( in vec3 pos, in float t )\n{\n  float precis = 0.001 * t;\n\n  vec2 e = vec2(1.0,-1.0)*precis;\n  return normalize( e.xyy*map( pos + e.xyy ) +\n      e.yyx*map( pos + e.yyx ) +\n      e.yxy*map( pos + e.yxy ) +\n      e.xxx*map( pos + e.xxx ) );\n}\n\nvoid main(void)\n    {\n  float time = iGlobalTime * 0.25 + 0.01 * iMouse.x;\n  ss = 1.1 + 0.5 * smoothstep(-0.3, 0.3, cos(0.1 * iGlobalTime));\n\n  vec3 tot = vec3(0.0);\n#if AA>1\n  for( int jj=0; jj<AA; jj++ )\n  for( int ii=0; ii<AA; ii++ )\n#else\n  int ii = 1, jj = 1;\n#endif\n  {\n    vec2 q = gl_FragCoord.xy + vec2(float(ii), float(jj)) / float(AA);\n    vec2 p = (2.0 * q - iResolution.xy) / iResolution.y;\n\n    // camera\n    vec3 ro = vec3(2.8 * cos(0.1 + .33 * time), 0.4 + 0.30 * cos(0.37 * time),\n        2.8 * cos(0.5 + 0.35 * time));\n    vec3 ta = vec3(1.9 * cos(1.2 + .41 * time), 0.4 + 0.10 * cos(0.27 * time),\n        1.9 * cos(2.0 + 0.38 * time));\n    float roll = 0.2 * cos(0.1 * time);\n    vec3 cw = normalize(ta - ro);\n    vec3 cp = vec3(sin(roll), cos(roll), 0.0);\n    vec3 cu = normalize(cross(cw, cp));\n    vec3 cv = normalize(cross(cu, cw));\n    vec3 rd = normalize(iDir);\n\n    // trace  \n    vec3 col = vec3(0.0);\n    float t = trace(ro, rd);\n    if (t > 0.0)\n        {\n      vec4 tra = orb;\n      vec3 pos = ro + t * rd;\n      vec3 nor = calcNormal(pos, t);\n\n      // lighting\n      vec3 light1 = vec3(0.577, 0.577, -0.577);\n      vec3 light2 = vec3(-0.707, 0.000, 0.707);\n      float key = clamp(dot(light1, nor), 0.0, 1.0);\n      float bac = clamp(0.2 + 0.8 * dot(light2, nor), 0.0, 1.0);\n      float amb = (0.7 + 0.3 * nor.y);\n      float ao = pow(clamp(tra.w * 2.0, 0.0, 1.0), 1.2);\n\n      vec3 brdf = 1.0 * vec3(0.40, 0.40, 0.40) * amb * ao;\n      brdf += 1.0 * vec3(1.00, 1.00, 1.00) * key * ao;\n      brdf += 1.0 * vec3(0.40, 0.40, 0.40) * bac * ao;\n\n      // material    \n      vec3 rgb = vec3(1.0);\n      rgb = mix(rgb, vec3(1.0, 0.80, 0.2), clamp(6.0 * tra.y, 0.0, 1.0));\n      rgb = mix(rgb, vec3(1.0, 0.55, 0.0),\n          pow(clamp(1.0 - 2.0 * tra.z, 0.0, 1.0), 8.0));\n\n      // color\n      col = rgb * brdf * exp(-0.2 * t);\n    }\n\n    col = sqrt(col);\n    tot += col;\n  }\n\n  tot = tot / float(AA * AA);\n\n  gl_FragColor = vec4(tot, 1.0);\n\n//  gl_FragColor=vec4(col,1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}