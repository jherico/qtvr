{"Shader":{"ver":"0.1","info":{"id":"4lfSzf","date":"1438384265","viewed":806,"name":"strange tendrils","username":"netgrind","description":"spooky","likes":2,"published":3,"flags":0,"tags":["raytrace","grey","spooky","tendrils"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/By Cale Bradbury, 2015\n\n\/\/how many itterations of the fractal\n#define LOOPS 10.0\n\n#define BOX\n\/\/uncomment the line below to make shit magical\n\/\/#define COLOR\n\n\/\/fuck yeah, mirror that shit\n#define MIRROR\n\n\/\/ Base ray trace code via https:\/\/www.shadertoy.com\/view\/Xds3zN by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat sphere( vec3 p, float s ){\n  return length(p)-s;\n}\n\nfloat qbox( vec3 p, float s ){\n  return length(max(abs(p)-vec3(s,s,s),0.0));\n}\n\nfloat box( vec3 p, vec3 b ){\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nvec2 kale(vec2 uv, float angle, float base, float spin) {\n\tfloat a = atan(uv.y,uv.x)+spin;\n\tfloat d = length(uv)*1.4;\n\ta = mod(a,angle*2.0);\n\ta = abs(a-angle);\n\tuv.x = sin(a+base)*d;\n\tuv.y = cos(a+base)*d;\n    return uv;\n}\n\nfloat f(vec3 pos, float size, float cur){\n    return smin(cur,sphere(pos,size), .15);\n}\n#define pi 3.14158\n\nvec2 map( in vec3 pos )\n{\n    pos =(opRep(pos,vec3(3.,3.,3.)));\n   pos.xy = kale(pos.xy,pi\/6.,pi*1.4+cos(iGlobalTime)*.1,0.);\n    pos.xz = kale(pos.xz,pi\/6.,pi*1.4+sin(iGlobalTime)*.1,0.);\n    \n    float size = .5;\n    float r = f(pos,size,1.);  \n    \n    for(float i = 0.; i<LOOPS;i++){\n        pos+=vec3(size*(sin(iGlobalTime)*.5+1.5),0.,0.);\n        size*=(cos(iGlobalTime*2.)*.3+.5);\n        r = f(pos,size,r);\n    }\n    return vec2(r,1.0);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)\/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)\/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.01;\n    float t = tmin;\n    float m = 0.0;\n    for( int i=0; i<30; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.;\n    return vec2( t, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<8; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd, float c )\n{ \n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    vec3 col = vec3(c);\n    if( m>-.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        \/\/ lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.5, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.5, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.5,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.5, 1.0 ),16.0);\n        \n       dif *= softshadow( pos, lig, 0.01, .5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 brdf = vec3(0.0);\n        brdf += 1.20*dif;\n\t\tbrdf += 1.20*spe*dif;\n        brdf += 0.30*amb*occ;\n        brdf += 0.40*dom*occ;\n        brdf += 0.30*bac*occ;\n        brdf += 0.40*fre*occ;\n\t\t\/\/brdf += 0.02;\n\t\tcol = brdf;\n        col*=(1.0-res.x*.11);\n        \n    \t\/\/col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    #ifdef MIRROR\n    p.x = -abs(p.x);\n    #endif\n\t\t \n\tfloat time = 15.0 + iGlobalTime*.5;\n\tfloat camDist = 5.;\n\t\/\/ camera\t\n\tvec3 ro = vec3(cos(time)*camDist,0.,sin(time)*camDist);\n    \/\/vec3( -0.5+camDist*cos(0.1*time), 5.0, 0.5 + camDist*sin(0.1*time) );\n\tvec3 ta = vec3( -0.001, -0., -0. );\n\t\n\t\/\/ camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, time );\n    \n    \/\/ ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.5) );\n\n    float bg =  q.y*.2+.1;\n    \/\/ render\t\n    vec3 col = render( ro, rd,bg );\n    col = vec3(mix(col.r,bg,1.0-col.r));\n\n    col *= 1.-length((q*2.-1.))*.3;\n    #ifdef COLOR\n    col = sin(col*vec3(10.,6.,15.)*(sin(time*.35)*.5+2.)+time)*.5+.5;\n    #endif\n    \n\tcol = pow( col, vec3(1.2545) );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}