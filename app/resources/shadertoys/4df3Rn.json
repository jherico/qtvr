{"Shader":{"ver":"0.1","info":{"id":"4df3Rn","date":"1358124981","viewed":2657,"name":"Mandelbrot - smooth","username":"iq","description":"A zoom in the Mandelbrot set, that showcases the difference between the regular iteration count coloring and the smooth iteration count coloring.","likes":20,"published":3,"flags":0,"tags":["2d","fractal","mandelbrot"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ increase this if you have a very fast GPU\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n#if AA>1\n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n        vec2 p = (-iResolution.xy + 2.0*(fragCoord.xy+vec2(float(m),float(n))\/float(AA)))\/iResolution.y;\n        float w = float(AA*m+n);\n        float time = iGlobalTime + 0.5*(1.0\/24.0)*w\/float(AA*AA);\n#else    \n        vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n        float time = iGlobalTime;\n#endif\n    \n        float zoo = 0.62 + 0.38*cos(.07*time);\n        float coa = cos( 0.15*(1.0-zoo)*time );\n        float sia = sin( 0.15*(1.0-zoo)*time );\n        zoo = pow( zoo,8.0);\n        vec2 xy = vec2( p.x*coa-p.y*sia, p.x*sia+p.y*coa);\n        vec2 c = vec2(-.745,.186) + xy*zoo;\n\n        float l = 0.0;\n\t    vec2 z  = vec2(0.0);\n        for( int i=0; i<256; i++ )\n        {\n            \/\/ z = z*z + c\t\t\n    \t\tz = vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y ) + c;\n\t\t\n    \t\tif( dot(z,z)>(256.0*256.0) ) break;\n\n    \t\tl += 1.0;\n        }\n\n    \t\/\/ ------------------------------------------------------\n        \/\/ smooth interation count\n    \t\/\/ float sco = co - log2(log(length(z))\/log(256.0));\n\t\n        \/\/ equivalent optimized smooth interation count\n    \tfloat sl = l - log2(log2(dot(z,z))) + 4.0;\n        \n    \t\/\/ ------------------------------------------------------\n\t\n        float al = smoothstep( -0.1, 0.0, sin(0.5*6.2831*iGlobalTime ) );\n        l = mix( l, sl, al );\n\n        col += 0.5 + 0.5*cos( 3.0 + l*0.15 + vec3(0.0,0.6,1.0));\n#if AA>1\n    }\n    col \/= float(AA*AA);\n#endif\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}