{"Shader":{"ver":"0.1","info":{"id":"Md2SDc","date":"1416911167","viewed":790,"name":"A Quad's Life","username":"poljere","description":"It is all about quads!","likes":1,"published":3,"flags":0,"tags":["2d","quads"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Returns 1.0 when the uv is inside the quad\n\/\/ Parameter pos indicates the center of the rect\nfloat rect(vec2 uv, vec2 pos, vec2 size)\n{\n    return 1.0 - clamp(length(max(abs(uv - pos)-size, 0.0))*800.0, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Let's work with Y=0 on top and a space [0.0, 1.0]\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv.y = 1.0 - uv.y;\n    \n    \/\/ Correct Aspect Ration    \n    uv.x *= iResolution.x \/ iResolution.y;    \n    vec3 col = vec3(0.0);\n    \n    \/\/ Calculate rectangles    \n    float i = floor(uv.x \/ 0.3);\n    float j = floor(uv.y \/ 0.35);   \n    \n    \/\/ Calculate if the pixel belongs to the rect or not    \n    vec2 center    = vec2(0.14, 0.16) + vec2(0.3, 0.33) * vec2(i,j);\n    vec2 size1     = vec2(0.12);\n    vec2 size2     = max(vec2(0.02,0.02), size1 * 0.9 * (0.5 + 0.5 * sin(iGlobalTime * 0.2 * center.x + center.x)));\n    float rect1    = rect(uv, center, size1);\n    float rect2    = rect(uv, center, size2);\n    \n    \/\/ Calculate the final color\n    vec3  col1     = 0.5 + 0.5*cos(iGlobalTime * 0.1 + 5.5*(center.x+center.y) + vec3(1.57, 0.0, 3.14) );\n    vec3  col2     = 0.5 + 0.5*cos(iGlobalTime * 0.5  + 5.5*(center.x) + vec3(1.57, 0.0, 3.14) );\n    col += mix(col1 * (rect1), col2, (rect1 * rect2));\n    \n    \/\/ Add background color\n    col += step(col, vec3(0.0)) * vec3(0.9);\n    \n    \/\/ Output the color to screen\n    fragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}}