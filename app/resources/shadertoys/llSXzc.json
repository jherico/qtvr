{"Shader":{"ver":"0.1","info":{"id":"llSXzc","date":"1445386472","viewed":3198,"name":"Sand Sparkling Irregular in Sun ","username":"Retrotation","description":"www.mattolick.com<br\/><br\/>Use the mouse cursor to change light position (could be mapped to the player's camera)","likes":1,"published":3,"flags":0,"tags":["noise","gradient","shine","sand","sparkle","shining","glisten","glistening"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ defining Blending functions\n#define Blend(base, blend, funcf) \t\tvec4(funcf(base.r, blend.r), funcf(base.g, blend.g), funcf(base.b, blend.b), funcf(base.a, blend.a))\n#define BlendAddthird(base, blend) \t\tmin(base + (blend*0.3), vec4(1.0))\n#define BlendAddtenth(base, blend) \t\tmin(base + (blend*0.06), vec4(1.0))\n\n\n\/\/ distance calculation between two points on the Y-plane\nfloat dist(vec2 p0, vec2 pf){\n     return sqrt((pf.y-p0.y)*(pf.y-p0.y));\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\n\/\/ FRAGMENT SHADER\n\nvoid mainImage( out vec4 color, in vec2 fragCoord )\n{\n\n\/\/ solid color for the background  \n    vec4 sandcolor = vec4(0.9606, 0.6601, 0.1445, 1.0);\n  \n\/\/ textured noise, greyscale at a low resolution 64x64 pixels\n    vec4 sandtexture = texture2D(iChannel1, fragCoord  \/ iResolution.xy);\n\n\/\/ specular noise, colored at a higher resolution 256x256 pixels\n    vec4 sandspecular = texture2D(iChannel0, fragCoord  \/ iResolution.xy);\n    \n\/\/ make extra specular maps and push their UVs around, to create a jittered fade between chunks of overlapping RGB colors.\n    vec2 plusuv = floor(fragCoord-sin(iMouse.yy*0.03));\n\tvec2 reverseuv = floor(fragCoord+cos(iMouse.yy*0.018));\n    vec4 sandspecular2 = texture2D(iChannel0, reverseuv  \/ iResolution.xy);\n    vec4 sandspecular3 = texture2D(iChannel0, plusuv  \/ iResolution.xy);\n\n\/\/ bump highlights on sand specular where RBG values meet, and cut out the rest\n\tsandspecular.xyz = sandspecular.xxx*sandspecular3.yyy*sandspecular2.zzz*vec3(2,2,2);\n\n\/\/ calculate the distance between: the current pixel location, and the mouse position\n    float d = dist(fragCoord.xy,iMouse.xy);\n        \n\/\/ reduce the scale to a fraction\n    d = d*0.003;\n    \n\/\/ control the falloff of the gradient with a power\/exponent\n    d = pow(d,0.6);\n  \n\/\/ clamp the values of 'd', so that we cannot go below a 0 value\n    d = min(d,1.0);\n     \n\/\/ blend together the sand color with a low opacity on the sand texture\n    vec4 sandbase = BlendAddtenth(sandcolor,sandtexture);\n    \n\/\/ let's prep the glistening specular FX, by having it follow the diffuse sand texture\n  \tvec4 darkensand = mix(sandtexture,vec4(0,0,0,0), d);\n    \n\/\/ have the specular map be reduced by the diffuse texture (ingame: replace mouse cursor with player camera)\n    vec4 gradientgen = mix(sandspecular, darkensand, d);\n    \n\/\/ blend the diffuse texture and the mouse-controlled hypothetical-specular gradient together   \n    vec4 finalmix = BlendAddthird(sandbase, gradientgen);\n  \n\/\/ final output     \n    color = finalmix;\n\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/","name":"","description":"","type":"image"}]}}