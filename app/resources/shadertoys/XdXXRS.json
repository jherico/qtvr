{"Shader":{"ver":"0.1","info":{"id":"XdXXRS","date":"1402853180","viewed":842,"name":"trochoids","username":"FabriceNeyret2","description":"Gerstner swell model: surface points displace along stationary circles -> trochoidal wave<br\/>Mouse tune wavelengh (x) and amplitude (y).<br\/>(NB: Computing distance to displacement is not so easy... But I hate coslty iterative scheme ! :-p )","likes":5,"published":3,"flags":0,"tags":["trochoid"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float L = .6,  \t\t  \/\/ wavelength\n\t  A = .2,         \/\/ amplitude  \n\t  C = 1.;         \/\/ wave celerity = omega\/K = 2PI\/TK, with T = period\n\nfloat t = iGlobalTime;\n#define PI 3.1415927\n\n\/\/ === distance to trochoid\n\nfloat trochoid(vec2 uv, float A, float L, float C) {\n\tfloat K=6.28\/L; \/\/ wave number\n\t\n\t\/\/ --- 1st, intersection with uv.y (or closest)\n\tfloat y = uv.y\/A;\n\tif (abs(y)>1.) y \/= abs(y);\n\t\n\t\/\/ solve for x :  y = Asin(phi) with phi = K(x-Ct)\n\tfloat phi = asin(y),\n\t\t\tx = phi\/K+C*t,\n\t\t   x1 = x+A*cos(phi); \/\/ x+A*sqrt(1-y*y)\n\t\n\t\/\/ 2nd solution for asin\n\tphi = PI-phi;\n\tx = phi\/K+C*t;\n\tfloat x2 =  x+A*cos(phi);\n\t\t\n\t\/\/ find branch closest to x,y\n\tx1 = uv.x-x1; \tx1 = min(mod(x1,L), mod(-x1,L));\n\tx2 = uv.x-x2; \tx2 = min(mod(x2,L), mod(-x2,L));\n\tx = min(x1,x2);\n\tif (x1<x2) phi = PI-phi;\n\t\n\t\/\/ --- 2nd, get the tangent line and find the closest sitance to uv\n\tvec2 dP = vec2( 1.-A*K*sin(phi), A*K*cos(phi) ); \n\ty = A*y; \/\/ A*sin(phi)\n\ty = uv.y-y;\n\tvec2 P = vec2(x,y);\n\tfloat l = dot(P,dP)\/dot(dP,dP);\n\t\/\/float d = length(P-l*dP);\n\n\t\/\/ --- still ambiguous for horizontal tangent\n\t\/\/ accounting for curvature should fix it. \n\t\/\/ here, we do half-way to avoid solving degree 3 polynomial\n\tvec2 d2P = -A*K*K* vec2( cos(phi), sin(phi) ); \n\tfloat d = length(P-l*dP-l*l\/10.*d2P);\n\t\n\treturn d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy \/ iResolution.y - vec2(.9,.5));\n\n\t\/\/ --- tuning\n\tvec2 m = iMouse.xy\/iResolution.xy;\n\tif (iMouse.z>0.) {\n\t\tL *= m.x; A *= m.y;\n\t}\n\t\n\t\/\/ === distance to trochoids\n\tfloat d;\n\t\n\td =        trochoid(uv-vec2(0., .5), A,L   ,C);\n\td = min(d, trochoid(uv-vec2(0., .0), A,L*2.,C));\n\td = min(d, trochoid(uv-vec2(0.,-.5), A,L*4.,C));\n\t\n\t\n  \tfloat v = smoothstep(.01,0.,d);\t\n\t\n\tfragColor = vec4(v);\n}","name":"","description":"","type":"image"}]}}