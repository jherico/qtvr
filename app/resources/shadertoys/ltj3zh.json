{"Shader":{"ver":"0.1","info":{"id":"ltj3zh","date":"1426987025","viewed":665,"name":"Gloopy","username":"flypig","description":"Three lumps of lava-lamp style gloop.","likes":0,"published":3,"flags":0,"tags":["lava","liquid","gloop"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n\nCopyright (c) 2015 David Llewellyn-Jones\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*\/\n\nprecision mediump float;\n\n#define M_PI 3.1415926535897932384626433832795\n\n\/\/ (((((x - xc1)**2) + ((y - yc1)**2) - (r1**2)) * (((x - xc2)**2) + ((y - yc2)**2) - (r2**2)))) < (s \/ 1000)\n\nconst vec3 position = vec3(-0.2, 0.2, 1.3);\nconst vec3 diffuseColour = vec3(0.25, 0.25, 0.5);\nconst float diffusePower = 2.0;\nconst vec3 specularColour = vec3(0.5, 0.1, 0.1);\nconst float specularPower = 5.0;\nconst float specularHardness = 5.0;\nconst vec3 ambientColour = vec3(0.4, 0.5, 0.4);\n\nvec3 BlinnPhongLighting(vec3 pos, vec3 viewDir, vec3 normal) {\n\tvec3 lightDir = position - pos;\n\tfloat distance = length (lightDir);\n\tlightDir = lightDir \/ distance;\n\tdistance = distance * distance;\n\n\tfloat NdotL = dot (normal, lightDir);\n\tfloat intensity = clamp (NdotL, 0.0, 1.0);\n\tvec3 diffuse = intensity * diffuseColour * diffusePower \/ distance;\n\tvec3 H = normalize (lightDir + viewDir);\n\tfloat NdotH = dot (normal, H);\n\tintensity = pow (clamp (NdotH, 0.0, 1.0), specularHardness);\n\tvec3 specular = intensity * specularColour * specularPower; \n\n\treturn (diffuse + specular + ambientColour);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vTextureCoord = fragCoord \/ iResolution.xy;\n    float time = (310.0 + iGlobalTime) * 1000.0;\n    float width = iResolution.x;\n    float height = iResolution.y;\n    \n\tconst float stickiness = 0.0050;\n\tconst float r1 = 0.25;\n\tconst float r2 = 0.25;\n\tconst float r3 = 0.25;\n\tvec2 ratio = vec2(width, height) \/ min(width, height);\n\tvec2 pos1 = vec2((1.0 + sin(time \/ 9000.0)) \/ 2.0, (1.0 + sin(time \/ 7100.0)) \/ 2.0) * ratio;\n\tvec2 pos2 = vec2((1.0 + sin(time \/ 8900.0)) \/ 2.0, (1.0 + sin(time \/ 10400.0)) \/ 2.0) * ratio;\n\tvec2 pos3 = vec2((1.0 + sin(time \/ 9650.0)) \/ 2.0, (1.0 + sin(time \/ 91500.0)) \/ 2.0) * ratio;\n\tvec2 pos = vTextureCoord * ratio;\n\n\tfloat d1 = pow((pos.x - pos1.x), 2.0) + pow((pos.y - pos1.y), 2.0) - pow(r1, 2.0);\n\tfloat d2 = pow((pos.x - pos2.x), 2.0) + pow((pos.y - pos2.y), 2.0) - pow(r2, 2.0);\n\tfloat d3 = pow((pos.x - pos3.x), 2.0) + pow((pos.y - pos3.y), 2.0) - pow(r3, 2.0);\n\n\tfloat dist = (stickiness - d1 * d2 * d3);\n\tvec3 position = vec3(pos.x, pos.y, dist);\n\n\tfloat d12 = distance(pos1, pos2);\n\tfloat d13 = distance(pos1, pos3);\n\tfloat d23 = distance(pos2, pos3);\n\tfloat weght12 = 1.0 \/ (1.0 + exp(((distance(pos1, pos) \/ d12) - 0.5) * 8.0));\n\tfloat weght13 = 1.0 \/ (1.0 + exp(((distance(pos1, pos) \/ d13) - 0.5) * 8.0));\n\tfloat weght23 = 1.0 \/ (1.0 + exp(((distance(pos2, pos) \/ d23) - 0.5) * 8.0));\n\n\tvec2 centre12 = (weght12 * pos1) + ((1.0 - weght12) * pos2);\n\tvec2 centre13 = (weght13 * pos1) + ((1.0 - weght13) * pos3);\n\tvec2 centre = (weght23 * centre12) + ((1.0 - weght23) * centre13);\n\n\thighp float up = pow(dist, 0.45);\n\tvec3 normal = normalize(vec3(pos.x - centre.x, pos.y - centre.y, up));\n\n\tvec4 colour = vec4(0.8 * (1.0 - vTextureCoord.y), 0.8 * vTextureCoord.y, 0.8, 1.0);\n\tif (dist > 0.0) {\n\t\tcolour.xyz = BlinnPhongLighting (position, vec3(0.0, 0.0, 1.0), normal);\n\t}\n\n\tfragColor = colour;\n}\n","name":"","description":"","type":"image"}]}}