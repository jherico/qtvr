{"Shader":{"ver":"0.1","info":{"id":"MsXXW7","date":"1402254568","viewed":977,"name":"Bloodbath","username":"mu6k","description":"Bloodbath","likes":9,"published":3,"flags":8,"tags":["bloodbath"],"hasliked":0},"renderpass":[{"inputs":[{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":25,"src":"\/presets\/cube03_0.png","ctype":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*by mu6k, Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*\/\n\/\/2D texture based 4 component 1D, 2D, 3D noise\nvec4 noise(float p){return texture2D(iChannel0,vec2(p*float(1.0\/256.0),.0));}\nvec4 noise(vec2 p){return texture2D(iChannel0,p*vec2(1.0\/256.0));}\nvec4 noise(vec3 p){float m = mod(p.z,1.0);float s = p.z-m; float sprev = s-1.0;if (mod(s,2.0)==1.0) { s--; sprev++; m = 1.0-m; };return mix(texture2D(iChannel0,p.xy*vec2(1.0\/256.0) + noise(sprev).yz*21.421),texture2D(iChannel0,p.xy*vec2(1.0\/256.0) + noise(s).yz*14.751),m);}\nvec4 noise(vec4 p){float m = mod(p.w,1.0);float s = p.w-m; float sprev = s-1.0;if (mod(s,2.0)==1.0) { s--; sprev++; m = 1.0-m; };return mix(noise(p.xyz+noise(sprev).wyx*3531.123420),\tnoise(p.xyz+noise(s).wyx*4521.5314),\tm);}\n\n\/\/functions that build rotation matrixes\nmat2 rotate_2D(float a){float sa = sin(a); float ca = cos(a); return mat2(ca,sa,-sa,ca);}\nmat3 rotate_x(float a){float sa = sin(a); float ca = cos(a); return mat3(1.,.0,.0,    .0,ca,sa,   .0,-sa,ca);}\nmat3 rotate_y(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,.0,sa,    .0,1.,.0,   -sa,.0,ca);}\nmat3 rotate_z(float a){float sa = sin(a); float ca = cos(a); return mat3(ca,sa,.0,    -sa,ca,.0,  .0,.0,1.);}\n\n\nfloat t;\n\nvec3 flare(vec2 uv, vec2 pos, float seed, float size)\n{\n\tvec4 gn = noise(seed-1.0);\n\tgn.x = size;\n\tvec3 c = vec3(.0);\n\tvec2 p = pos;\n\tvec2 d = uv-p;\n\t\n\t\n\tc += (0.01+gn.x*.2)\/(length(d));\n\t\n\tc += vec3(noise(atan(d.x,d.y)*256.9+pos.x*2.0).y*.25)*c;\n\t\n\tfloat filter = length(uv);\n\tfilter = (filter*filter)*.5+.5;\n\tfilter = min(filter,1.0);\n\t\n\t\n\treturn c;\n}\n\nfloat df(vec3 p)\n{\n\tvec2 m = mod(p.xz,vec2(1.0));\n\tvec2 i = p.xz-m;\n\tm=m-vec2(.5); m*=2.0;\n\tm = m*m;\n\tvec3 q = p;\n\tq.y+=t*4.0;\n\tq.x+=t*.1;\n\tq.z+=t*.1;\n    float wave_amp = sin(t*.1)*.5+.5;\n    p.y+=sin(p.x*.3+p.z*.1+t)*.25*wave_amp;\n    p.y+=sin(p.z*.1-p.x*.15+t)*.5*wave_amp;\n\tfloat amount = sin(t)*.1+.1;\n\tfloat pillars = noise(p.xz).y-amount;\n\tfloat waves = sin(pillars*8.0-t*2.0+p.x*.5+p.z*.7)*.1\/(pillars+.7);\n\treturn min(p.y+3.0+waves,noise(p.xz).y-.1)+noise(q.xyz*vec3(4.0,1.0,4.0)*2.0).x*.1-.05;\n}\n\nvec3 nf(vec3 p)\n{\n\tvec2 e = vec2(.1,.0);\n\tfloat c = df(p);\n\treturn normalize(vec3(c-df(p+e.xyy),c-df(p+e.yxy),c-df(p+e.yyx)));\n}\n\nvec3 background(vec3 d)\n{\n\treturn d.y*vec3(.2,.4,.8)*.5+.5;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    t = (iGlobalTime+noise(gl_FragCoord.xy).x*(1.0\/24.0));\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.yy - vec2(.9,.5);\n\t\n\tfloat t=iGlobalTime;\n\tvec3 p = vec3(.0);\n\tp.z+=t;\n\tvec3 turb = (noise(t*10.0).xyz*noise(t*22.0).xyz)*((sin(t*.1)+sin(t*3.10)+sin(t*7.10)-3.0)\/6.0)*.2;\n\tturb*=1.0-cos(t*.2);\n\tturb*=sin(t*.793)*.5+.5;\n\tmat3 rot = rotate_x(.1+turb.x*.15) * rotate_y(turb.y*.15);\n\tvec3 d = normalize(vec3(uv,.9-pow(length(uv),4.0)*.2+(sin(t*.5)-sin(t*.52))*.1));\n\td*=rot;\n\tfloat td = .0;\n\tfor (int i=0; i<100; i++)\n\t{\n\t\tfloat dd = df(p);\n\t\tp += d*dd;\n\t\ttd+=dd;\n\t\tif (dd>100.0||abs(dd)<.01) break;\n\t\t\n\t}\n\t\n\tvec3 l = -normalize(vec3(.4,.2,.8));\n\tvec3 n = nf(p);\n\tvec3 color = (dot(l,n)*.5+.5)*vec3(.4,.026,.013)*.5;\n    float oa = min(abs(df(p-n)),abs(df(p-n*.5)*2.0));\n    float od = min(abs(df(p-l)),abs(df(p-l*.5)*2.0));\n    color = color*od*oa;\n    vec3 r = reflect(d,n);\n    float fr = dot(d,r)*.5+.5;\n    fr*=fr;\n    color += pow(dot(d,-r)*.5+.5,64.0)*oa*od*2.0;\n    color += pow(textureCube(iChannel1,r).xyz,vec3(2.0))*oa*fr*.5;\n    \n    color = color\/(1.0+td*td*.01);\n    \n   \tcolor += flare(uv*2.0,vec2(.0,1.5),0.010,10.0)*.02;\n    color *=1.0-length(uv)*.5;\n    \n\tfragColor = vec4(pow(color,vec3(1.0\/2.2)),1.0);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"\nfloat w(float x)\n{\n    return x - floor(x);\n}\n\nfloat timbre(float x)\n{\n    return w(x*.99)-w(x*1.03+41.51)+w(x+.7);\n}\n\n\nvec2 mainSound(float time)\n{\n    float s = .0;\n    for (int i=0; i<20; i++)\n    {\n        float fi = float(i);\n        s += timbre((sin(fi+sin(time*.05131)*1.0)*(sin(time*.04197)*.5+.5)+1.0)*100.0*time);\n    }\n    s = min(max(-.1,s*.009),.1)*2.0;\n    return vec2(s);\n}","name":"","description":"","type":"sound"}]}}