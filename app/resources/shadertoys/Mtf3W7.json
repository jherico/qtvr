{"Shader":{"ver":"0.1","info":{"id":"Mtf3W7","date":"1422418644","viewed":727,"name":"kali-traps b","username":"bergi","description":"variation of https:\/\/www.shadertoy.com\/view\/MtX3DM<br\/>called \"patients is rewarded\"","likes":4,"published":3,"flags":0,"tags":["3d","fractal","volume","kali","surface","hybrid","neon"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\tkali-traps by bergi in 2015\n\t\n\tonly cruising around here, what a fractal\n\tpraise kalibob\n\n\tforked from https:\/\/www.shadertoy.com\/view\/MtX3DM, now\n\tLicense Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. \n*\/\n\n\n\/\/ needs some more iters - lowered for webgl\nconst int  NUM_ITERS = \t\t\t45;\n\nconst vec3 KALI_PARAM = \t\tvec3(.5, .396, 1.5007);\n\/\/const vec3 KALI_PARAM = \t\tvec3(.4993, .4046, 1.5);\n\/\/const vec3 KALI_PARAM = \t\tvec3(.47);\nconst int  KALI_ITERS = \t\t33;\n\n\/\/ animation time\nfloat ti = iGlobalTime * 0.02 + 140.;\n\n\n\n\/** kali set as usual. \n\treturns last magnitude step and average *\/\nvec4 average;\nfloat kali(in vec3 p)\n{\n    average = vec4(0.);\n\tfloat mag;\n    for (int i=0; i<KALI_ITERS; ++i)\n    {\n        mag = dot(p, p);\n        p = abs(p) \/ mag;\n        average += vec4(p, mag);\n        p -= KALI_PARAM;\n    }\n\taverage \/= 32.;\n    return mag;\n}\n\n\/\/ steps from pos along dir and samples the cloud\n\/\/ stp is 1e-5 - 1e+?? :)\nvec3 ray_color(vec3 pos, vec3 dir, float stp)\n{\n    vec3 p, col = vec3(0.);\n\tfloat t = 0.;\n\tfor (int i=0; i<NUM_ITERS; ++i)\n\t{\n\t\tp = pos + t * dir;\n\t\tfloat d = kali(p);\n\n\t\t\/\/ define a surface and get trapped\n\t\td = (1.3-100.*t) - abs(1.33 - d);\n\t\t\n\t\t\/\/ always step within a certain range\n\t\tt += max(0.001, min(0.01, d )) * (stp + 3. * t);\n\n\t\t\/\/ some color\n\t\tcol += (.5+.5*sin(average.rgb*vec3(3.+col.g,5,7)*4.)) \n\t\t\/\/ by distance to surface\n            \/ (1. + d * d * 400.);\n\t}\n    \n    return clamp(col \/ float(NUM_ITERS) * 3., 0., 1.);\n}\n\n\/\/ by David Hoskins https:\/\/www.shadertoy.com\/view\/XlfGWN\nfloat hash(in vec2 uv)\n{\n\tvec3 p  = fract(vec3(uv,ti) \/ vec3(3.07965, 7.1235, 4.998784));\n    p += dot(p.xy, p.yx+19.19);\n    return fract(p.x * p.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ ray stepsize - or focus scale \n    float foc = 0.004 + 0.001*sin(ti*0.9);\n\n    \/\/ some position\n\t\/\/ - a circular path depending on the stepsize\n    float rti = ti * 0.5;\n\tfloat rad = 0.04;\n    \n    if (iMouse.z > .5) {\n        foc = pow(iMouse.y \/ iResolution.y, 2.)\/6.;\n\t\t\/\/rad = iMouse.x \/ iResolution.x;\n    }\n    \n\tvec3 pos = (vec3(-2.3, 1.19, -3.4)\n\t\t\t\t+ (0.001+rad)*vec3(2.*sin(rti),cos(rti),0.2*sin(rti\/4.)) );\n    \n\tvec2 uv = (fragCoord.xy - iResolution.xy*.5) \/ iResolution.y * 2.;\n    vec3 dir = normalize(vec3(uv, 2.5-length(uv))).xzy;\n    rti = ti * 4.;\n    dir.xz = vec2(sin(rti)*dir.x-cos(rti)*dir.z, cos(rti)*dir.x+sin(rti)*dir.z);\n    \n    pos += dir * hash(uv*1114.+ti) * 0.05 * foc;\n\t\n    vec3 col = ray_color(pos, dir, foc)\n\/\/\t\t\t+ 1.5 * ray_color(pos, dir, 0.04)\n        ;\n\n\tfragColor = vec4(pow(col,vec3(1.\/1.8)), 1.);\t\n}\n","name":"","description":"","type":"image"}]}}