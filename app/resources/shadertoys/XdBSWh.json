{"Shader":{"ver":"0.1","info":{"id":"XdBSWh","date":"1411149092","viewed":906,"name":"Circles-intersections","username":"Doublefresh","description":"This shader shows a nice way to find the intersection points between two circles.","likes":9,"published":3,"flags":0,"tags":["circles","intersections"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float Circle(vec2 pix, vec3 C){\n    float r = length(C.xy - pix);\n    float d = abs(r - C.z);  \n    return smoothstep(0.03, 0.015, d) + 0.5*smoothstep(0.1, 0.0, r - C.z);\n}\n\nfloat Point(vec2 pix, vec2 X){\n    float r = length(X - pix);\n    return smoothstep(0.04, 0.00, r);\n}\n\n\/* xy : first intersection point\n   zw : second intersection point *\/\nvec4 IntersectCircles(vec3 c1, vec3 c2)\n{\n    \/\/ set c1 to the origin\n    c2.xy -= c1.xy; \n    float z = dot(c2.xy, c2.xy);\n    \n    vec3 l = vec3(c1.z*c1.z, c2.z*c2.z, z);\n    float a = l.x - l.y + l.z;\n    float b = sqrt(dot(l, 2.0*l.zxy-l));\n    \n    vec2 j1 = a*c2.xy + b*vec2(-c2.y, c2.x);\n    vec2 j2 = a*c2.xy - b*vec2(-c2.y, c2.x);\n          \n    return vec4(c1.xy, c1.xy) + vec4(j1,j2)\/(2.0*z);\n}\n\nvec3 Background(vec2 p){\n \treturn length(p) * vec3(0.4 + 0.1*p.y, 0.2 + 0.2*p.y, 0.15*p.x);   \n}\n\nvec2 Mouse(){\n    vec2 r = (2.0 * iMouse.xy \/ iResolution.xy) - 1.0;\n    r.x *= iResolution.x \/ iResolution.y;\n    return r;\n}\n\nvec3 Scene(vec2 pix){\n \tvec3 col = Background(pix);\n    \n    vec3 circle1 = vec3(0.0, -0.3, 0.5);\n    vec3 circle2 = vec3(0.2, 0.2, 0.7);   \n    circle1.xy = Mouse();\t\n    circle1.z = 0.7 + abs(0.1*sin(0.3*iGlobalTime));\n    \n    col += vec3(0.1, 0.2, 0.7) * Circle(pix, circle1);\n    col += vec3(0.7, 0.0, 0.3) * Circle(pix, circle2);\n\n    vec4 iC = IntersectCircles(circle1, circle2);\n    col -= (0.7*col-vec3(0.1, 0.9, 0.7)) * (Point(pix, iC.xy) + Point(pix, iC.zw));\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = 2.0 * (fragCoord.xy \/ iResolution.xy) - 1.0;\n    p.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 col = Scene(p);\n\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}}