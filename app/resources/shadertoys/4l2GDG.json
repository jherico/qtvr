{"Shader":{"ver":"0.1","info":{"id":"4l2GDG","date":"1432023714","viewed":230,"name":"Stromboli","username":"dr2","description":"A 3-D volcano.","likes":4,"published":3,"flags":0,"tags":["raymarching","volcano"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Stromboli\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 6; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\n#define NROCK 16\nvec4 rkPos[NROCK];\nvec3 moonDir, moonCol, waterDisp, cloudDisp, flmCylPos;\nfloat tCur, qRad, flmCylRad, flmCylLen;\nint idObj;\nconst float dstFar = 100.;\nconst int nRock = NROCK;\n\nfloat WaterHt (vec3 p)\n{\n  float ht, w;\n  const float wb = 1.414;\n  p *= 0.03;\n  w = wb;\n  p += waterDisp;\n  ht = 0.;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    p += waterDisp;\n    ht += w * abs (Noisefv3a (p) - 0.5);\n  }\n  return 0.2 * ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyGrndCol (vec3 ro, vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.02, 0.02, 0.04),\n     sCol1 = vec3 (0.06, 0.04, 0.02), sCol2 = vec3 (0.1, 0.1, 0.15),\n     mBrite = vec3 (0.5, 0.4, -0.77), gCol = vec3 (0.005, 0.01, 0.005);\n  const float moonRad = 0.02;\n  vec3 col, bgCol, vn, rds;\n  vec2 p;\n  float cloudFac, bs, cs, ts, dDotS, w, f;\n  bool mHit;\n  if (rd.y > 0.) {\n    ro.xz += cloudDisp.xz;\n    p = 0.02 * (rd.xz * (150. - ro.y) \/ rd.y + ro.xz);\n    w = 0.8;\n    f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.3, 0., 1.);\n  } else cloudFac = 0.;\n  bgCol = 0.3 * clamp (sbCol - 0.12 * rd.y * rd.y, 0., 1.) +\n     sCol1 * pow (clamp (dot (rd, moonDir), 0., 1.), 30.);\n  col = bgCol;\n  mHit = false;\n  bs = - dot (rd, moonDir);\n  cs = dot (moonDir, moonDir) - moonRad * moonRad;\n  ts = bs * bs - cs;\n  if (ts > 0.) {\n    ts = - bs - sqrt (ts);\n    if (ts > 0.) {\n      vn = normalize ((ts * rd - moonDir) \/ moonRad);\n      mHit = true;\n    }\n  }\n  if (mHit) col += 1.4 * moonCol * clamp (dot (mBrite, vn) *\n       (0.3 + Noisefv3a (5. * vn)), 0., 1.);\n  else {\n    rds = rd;\n    rds = (rds + vec3 (1.));\n    for (int j = 0; j < 14; j ++)\n       rds = 11. * abs (rds) \/ dot (rds, rds) - 3.;\n    col += min (1., 1.5e-6 * pow (min (16., length (rds)), 4.5)) *\n       vec3 (1., 1., 0.6);\n  }\n  col = mix (col, sCol2, cloudFac) + bgCol;\n  if (rd.y > 0. && rd.y < 0.005 + 0.01 * Fbm1 (20. * rd.x - 0.05 * tCur))\n     col = gCol;\n  return col;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    q = ro + dHit * rd - flmCylPos;\n    d = PrCylDf (q.xzy, flmCylRad, flmCylLen);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat MountDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, aa, r, hd;\n  q = p;\n  a = atan (q.z, q.x) \/ (2. * pi) + 0.5;\n  aa = a;\n  if (aa > 0.5) aa = 1. - aa;\n  r = length (q.xz);\n  d = PrCylDf (q.xzy, 2., 0.75);\n  d = max (d, - PrCylDf (q.xzy, 0.15, 0.8));\n  q.y -= 0.75;\n  hd = PrSphDf (q, 0.35) - 0.03 * (Fbm2 (vec2 (22. * aa, 13. * r)) - 0.5);\n  d = max (d, - hd);\n  hd = 0.02 * (1. + sin (64. * pi * a) + sin (25. * pi * a)) *\n     SmoothBump (0.5, 1.8, 0.3, r);\n  hd += 0.15 * (Fbm2 (vec2 (33. * aa, 7. * r)) - 0.5) *\n     SmoothBump (0.1, 2., 0.2, r);\n  q.y -= 1.2 + hd;\n  d = max (d, - PrTorusDf (q.xzy, 2.8, 2.8));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return 0.5 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  dMin = MountDf (p, dMin);\n  for (int j = 0; j < nRock; j ++) {\n    d = PrSphDf (p - rkPos[j].xyz, rkPos[j].w);\n    if (d < dMin) { dMin = d;  idObj = 2;  qRad = rkPos[j].w; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid SetRocks ()\n{\n  vec3 bv0, bp0, bp;\n  float a, tm, fj;\n  for (int j = 0; j < nRock; j ++) {\n    fj = float (j);\n    a = 2. * pi * Hashff (100.11 * fj);\n    bv0.xz = 0.7 * vec2 (cos (a), sin (a));\n    bv0.y = 1.4 + 0.3 * Hashff (11.11 * fj);\n    bp0.xz = 0.1 * bv0.xz;  bp0.y = 0.5;\n    tm = mod (tCur + 0.15 * (fj + 0.6 * Hashff (fj)), 3.);\n    bp = bp0 + bv0 * tm;  bp.y -= 0.6 * tm * tm;\n    rkPos[j] = vec4 (bp, 0.04 - 0.035 * tm \/ 3.);\n  }\n}\n\nfloat FlmAmp (vec3 ro, vec3 rd, float dHit)\n{\n  vec3 p, q, dp;\n  float g, s, fh, fr, f, hs;\n  p = ro + dHit * rd - flmCylPos;\n  hs = min (p.y \/ flmCylLen, 1.);\n  dp = (flmCylRad \/ 20.) * rd;\n  g = 0.;\n  for (int i = 0; i < 20; i ++) {\n    p += dp;\n    s = distance (p.xz, flmCylPos.xz);\n    q = 4. * p;  q.y -= 6. * tCur;\n    fh = 0.5 * max (1. - (p.y - flmCylPos.y) \/ flmCylLen, 0.);\n    fr = max (1. - s \/ flmCylRad, 0.);\n    f = Fbm3 (q);\n    q = 7. * p;  q.y -= 8.5 * tCur;\n    f += Fbm3 (q);\n    g += max (0.5 * fr * fr * fh * (f * f - 0.6), 0.);\n    q = 23. * p;  q.y -= 11. * tCur;\n    g += 1000. * pow (abs (Noisefv3a (q) - 0.11), 64.);\n    if (s > flmCylRad || p.y < flmCylPos.y - 0.99 * flmCylLen || g > 1.) break;\n  }\n  g = clamp (0.9 * g, 0., 1.);\n  if (hs > 0.) g *= 1. - hs * hs;\n  return g;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstHit, dw, htWat, dstFlm, dstFlmR, intFlm, bgFlm, reflFac, cy;\n  int idObjT;\n  moonDir = normalize (vec3 (-0.5, 0.1, 0.2));\n  moonCol = vec3 (1., 0.9, 0.5);\n  cloudDisp = 10. * tCur * vec3 (1., 0., 1.);\n  waterDisp = 0.002 * tCur * vec3 (-1., 0., 1.);\n  htWat = -0.65;\n  SetRocks ();\n  flmCylPos = vec3 (0., 0.9, 0.);\n  flmCylRad = 0.4;\n  flmCylLen = 1.3;\n  reflFac = 1.;\n  dstFlm = TransObjRay (ro, rd);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  bgFlm = (0.7 + 0.6 * Noiseff (10. * tCur));\n  intFlm = (dstFlm < dstHit) ? FlmAmp (ro, rd, dstFlm) : 0.;\n  if (rd.y < 0.) {\n    dw = - (ro.y - htWat) \/ rd.y;\n    if (dstHit >= min (dw, dstFar)) {\n      ro += dw * rd;\n      rd = reflect (rd, WaterNf (ro, dw));\n      ro += 0.01 * rd;\n      dstFlmR = TransObjRay (ro, rd);\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      if (idObj < 0) dstHit = dstFar;\n      if (dstFlmR < dstFlm) {\n        intFlm = (dstFlmR < dstHit) ? FlmAmp (ro, rd, dstFlmR) : 0.;\n        dstFlm = dstFlmR;\n      }\n      reflFac = 0.8;\n    }\n  }\n  if (dstHit >= dstFar) col = SkyGrndCol (ro, rd);\n  else {\n    ro += dstHit * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      cy = clamp (ro.y \/ 1.2 + 0.6, 0., 1.);\n      col = reflFac * (0.5 + 0.7 * bgFlm * cy) * vec3 (0.3 + 0.1 * (1. - cy),\n         0.2 + 0.2 * (1. - cy), 0.1);\n      col = col * (0.6 + 0.4 * max (dot (vn, moonDir), 0.));\n    } else if (idObj == 2) {\n      col = mix (vec3 (1., 0., 0.), vec3 (0.1, 0.3, 0.1),\n         1. - (qRad - 0.005) \/ 0.03);\n      vn = VaryNf (200. * ro, vn, 10.);\n      col = col * (0.6 + 0.4 * max (dot (vn, vec3 (0., 0.5, 0.)), 0.));\n    }\n  }\n  if (intFlm > 0.) col = mix (col, bgFlm * mix (vec3 (1., 0.1, 0.1),\n     vec3 (1., 1., 0.5), 0.5 * intFlm), 1.2 * intFlm);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * (fragCoord - 0.5 * iResolution.xy) \/ iResolution.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  float az, el, dist;\n  vec3 rd, ro, ca, sa;\n  dist = 8. - 3. * sin (0.1 * tCur);\n  az = 0.03 * tCur;\n  el = 0.4 * (11. - dist) \/ 5.;\n  ca = cos (vec3 (el, az, 0.));\n  sa = sin (vec3 (el, az, 0.));\n  vuMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = - vec3 (0., 0., dist) * vuMat;\n  rd = normalize (vec3 (uv, 3.5)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}