{"Shader":{"ver":"0.1","info":{"id":"MtlXDS","date":"1439459977","viewed":815,"name":"Asa no ha","username":"Xender","description":"An ancient pattern, known in Japan as \u9ebb\u306e\u8449.","likes":5,"published":3,"flags":0,"tags":["2d","distancefield","static","pattern","symmetry","p6m","asanoha","japanese"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Domain (space) warp\n\n\/\/ http:\/\/wiki.inkscape.org\/wiki\/index.php\/Tiled-Clones\n\/\/ https:\/\/en.wikipedia.org\/wiki\/Wallpaper_group\n\nvec2 p2mm_symmetry(vec2 uv)\n{\n\treturn abs(uv);\n}\n\nvec2 p6m_symmetry(vec2 uv)\n{\n\tfloat s = 0.5;\n\tfloat c = sqrt(3.0) \/ 2.0;\n\n\tmat2 rot = mat2(c, s, -s, c);\n\n\tuv = p2mm_symmetry(uv);\n\tuv = p2mm_symmetry(rot*uv);\n\tuv = p2mm_symmetry(rot*uv);\n\n\treturn uv;\n}\n\n\nvec2 tile(vec2 uv, vec2 dimensions)\n{\n    return mod(uv, dimensions) - dimensions \/ 2.0;\n}\n\n\n\/\/ Primitives\n\nfloat dist_capsule(vec2 p, vec2 a, vec2 b, float r)\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\n\treturn length( pa - ba*h ) - r;\n}\n\n\n\/\/ Compound objects\n\nfloat dist_star_fragment(vec2 uv, float r)\n{\n\treturn min(\n\t\tdist_capsule(uv, vec2(0.0, 0.0), vec2(0.0,             0.5), r),\n\t\tdist_capsule(uv, vec2(0.0, 0.0), vec2(sqrt(3.0) \/ 6.0, 0.5), r)\n\t);\n}\n\nfloat dist_star(vec2 uv, float r)\n{\n\treturn dist_star_fragment(\n\t\tp6m_symmetry(uv),\n\t\tr\n\t);\n}\n\nfloat dist_tiled_stars(vec2 uv, float r)\n{\n\treturn dist_star(\n\t\ttile(uv, vec2(sqrt(3.0), 1.0)),\n\t\tr\n\t);\n}\n\nfloat dist_asa_no_ha(vec2 uv, float r)\n{\n\treturn min(\n\t\tdist_tiled_stars(uv,                              r),\n\t\tdist_tiled_stars(uv + vec2(sqrt(3.0) \/ 2.0, 0.5), r)\n\t);\n}\n\n\n\/\/ Main scene\n\nvec3 scene(vec2 uv, float AA_epsilon)\n{\n\tfloat dist = dist_asa_no_ha(uv, 0.01);\n\tfloat mask = smoothstep(0.0, AA_epsilon, -dist);\n\n\tvec3 col_bg = vec3(0.1, 0.1, 0.8);\n\tvec3 col_fg = vec3(0.8, 0.8, 0.8);\n\n\treturn mix(col_bg, col_fg, mask);\n}\n\n\n\/\/ Entry point\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\t\/\/ Assuming that pixels are square (pixel aspect ratio = iResolution.z == 1.0\n\n\tfloat uv_divisor = min(iResolution.x, iResolution.y);\n\tfloat pixel_size = 2.0 \/ uv_divisor;\n\n\tvec2 uv = (fragCoord.xy - iResolution.xy \/ 2.0) * 2.0 \/ uv_divisor;\n\n\tfloat scale = 1.7;\n\tuv                           *= scale;\n\tfloat AA_epsilon = pixel_size * scale;\n\n\tfragColor = vec4(scene(uv, AA_epsilon), 1.0);\n}\n","name":"","description":"","type":"image"}]}}