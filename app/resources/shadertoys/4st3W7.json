{"Shader":{"ver":"0.1","info":{"id":"4st3W7","date":"1450113057","viewed":262,"name":"Gnihihihi Balls","username":"DrLuke","description":"Just some Raymarching balls","likes":3,"published":3,"flags":0,"tags":["raymarching","spheres","balls"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":" #define MARCHLIMIT 70\n\nvec3 camPos = vec3(0.0, 0.0, -1.0);\nvec3 ld = vec3(0.0, 0.0, 1.0);\nvec3 up = vec3(0.0, 1.0, 0.0);\nvec3 right = vec3(1.0, 0.0, 0.0);\nvec3 lightpos = vec3(1.5, 1.5, 1.5);\n\n\n\/\/ Smooth HSV to RGB conversion \nvec3 hsv2rgb_smooth( in vec3 c )\n{\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\n\trgb = rgb*rgb*(3.0-2.0*rgb); \/\/ cubic smoothing\t\n\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec4 range(vec3 p)\n{\n    \/\/ Sphere with Radius\n    vec3 spherepos = vec3(0.0, 0.0, 0.0);\n    float radius = log(sin(iGlobalTime*0.1)*0.05+1.0)+0.1;\n\t\n    \/\/ Sinewave effect\n    \/\/\t\t\t\t\t\t\t\t\t\t  V this cosine with floor acts as a toggle \n    float xampl = sin(iGlobalTime*1.3)*0.4*floor(cos(iGlobalTime*0.4)+1.0);\n    float yampl = sin(iGlobalTime*1.3)*0.4-(floor(-cos(iGlobalTime*0.4)+1.0)*0.3);\n    \n    p.x += cos((max(-2.0+p.z-camPos.z,0.)))*xampl-xampl;\n    p.y += sin((max(-2.0+p.z-camPos.z,0.)))*yampl;\n    \n    \/\/ Pulsating effect\n    p.x *= -min(+2.0+p.z-camPos.z,0.)*sin(iGlobalTime*3.0)*0.1 + 1.0;\n    p.y *= -min(+2.0+p.z-camPos.z,0.)*sin(iGlobalTime*3.0)*0.1 + 1.0;\n    \n    p = mod(p + vec3(0.5,0.5,0.5), vec3(1.0,1.0,1.0)) - vec3(0.5,0.5,0.5);\n    spherepos = mod(spherepos + vec3(0.5,0.5,0.5), vec3(1.0,1.0,1.0)) - vec3(0.5,0.5,0.5);\n    \n    vec3 diff = p - spherepos;\n    \n    vec3 normal = normalize(diff);\n\n    \n    return vec4(normal, length(diff)-radius);\n}\n\n\/\/ Basic linear interpolation (Only used in the fresnel effect\nvec3 lerp(vec3 a, vec3 b, float p)\n{\n    p = clamp(p,0.,1.);\n \treturn a*(1.0-p)+b*p;   \n}\n\n\nvec4 march(vec3 cam, vec3 n)\n{\n    \n    float len = 1.0;\n    vec4 ret;\n    \n    for(int i = 0; i < MARCHLIMIT; i++)\n    {\n        ret = range(camPos + len*n)*0.5;\n\t\tlen += ret.w;\n    }\n    \n\treturn vec4(ret.xyz, len);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy*1.0) \/ iResolution.xy - vec2(0.5, 0.5);\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float rotangle = iGlobalTime*0.08;\n    vec2 newuv;\n    newuv.x = uv.x*cos(rotangle)-uv.y*sin(rotangle);\n    newuv.y = uv.x*sin(rotangle)+uv.y*cos(rotangle);\n    uv = newuv;\n    \n    camPos = vec3(0.5, 0.5, iGlobalTime*1.0);\n\n    ld = normalize(vec3(0.0, sin(iGlobalTime*0.8)*0.1, cos(iGlobalTime*0.8)*0.5));\n    \n    \/\/ This is the raymarching vector. It is calculated by interpreting the uv coordinates as angles, and thus rotating\n    \/\/ the ld (lookdirection) vector by the given angle. It is then used as the direction for the ray to march in.\n    \/\/ With this projection you can see the full 360\u00b0 around you. Try changing the zoom to something like 1.5\n    float zoom = 0.6;\n    vec3 n = normalize(vec3(sin(uv.x*3.1415*zoom),sin(uv.y*3.1415*zoom) ,ld.z*cos(uv.x*3.1415*zoom)*cos(uv.y*3.1415*zoom)));\n    \n    vec4 rangeret = march(camPos, n); \/\/ March rays from the camera in the direction of n\n    \n    float d = log(rangeret.w \/ 1.0 + 1.0);\t\/\/ Take logarithm of distance to make transition more smooth for further away objects\n    vec3 normal = rangeret.xyz;\t\/\/ Extract normal from return vector\n    \n    \/\/ Calculate angle between the raymarching ray and normal (I think this is broken, but it looks good)\n    vec3 p = camPos + n*d;\n    float angle = acos(dot(normal, n)\/length(normal)*length(n));\n    \n    \/\/                | I'm Using the HSV colorspace for fancy colors \n    \/\/                |               | Interpolation between normal color and reflection color depending on the angle of the normal\n    \/\/                |               |    | Fade through colors depending on distance and time (H), also fade to black in the distance (V), (S) stays fixed to 2\n    \/\/                |               |    |                                                         | reflection color is just a color from the current time +120second\n    \/\/                |               |    |                                                         |                                                                   | parameter used for lerp\n\tfragColor = vec4(hsv2rgb_smooth(lerp(vec3(d*0.1 + iGlobalTime*0.01, 2.0, max(1.0 - log(d),0.0)),vec3(d*0.1 + (iGlobalTime+120.0)*0.01 , 2.0, max(1.0 - log(d),0.0)),cos(angle\/10.0))),1.0);\n}","name":"","description":"","type":"image"}]}}