{"Shader":{"ver":"0.1","info":{"id":"MlX3Wj","date":"1425126720","viewed":757,"name":"Flake Ball","username":"aiekick","description":"Flake Ball<br\/>mouse control","likes":3,"published":3,"flags":0,"tags":["ball","flake"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ voronoi based on iq shader https:\/\/www.shadertoy.com\/view\/ldl3W8\n    \n#define displaceOffset 0.095\n#define USE_SPHERE_OR_BOX\n\n\/\/\/\/\/\/2D FUNC TO MODIFY\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n#define m2pi 6.2831\nvec3 effect(vec2 v) \n{\n   \tvec2 c0 = vec2(30.,20.);\n    vec2 c1 = vec2(10.,40.);\n    \n    vec2 n=floor(v);\n    vec2 f=fract(v);\n    \n    vec3 col;col.x=10.;\n    \n    for( float j=-1.; j<=1.; j+=1. )\n    {\n        for( float i=-1.; i<=1.; i+=1. )\n        {\n            vec2 g = vec2( i, j);\n            \n            vec2 ng = n+g;\n            float ng0 = dot(ng,c0);\n            float ng1 = dot(ng,c1);\n            vec2 ng01 = vec2(ng0,ng1);\n            vec2 hash = fract(cos(ng01)*iGlobalTime*0.2);\n            \n            vec2 o=sin(m2pi*hash)*.5+.5;\n            \n            vec2 r=g+o-f;\n            \n            float d=dot(r,r);\n            \n            if( d < col.x ) \n                col = vec3 (d, r);\n        }\n    }\n     \n    return col.xzz;\n}\n\n\/\/\/\/\/\/\/FRAMEWORK\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 displacement(vec3 p)\n{\n    vec3 col = effect(p.xz); \/\/ p.xz\n    \n    float dist = dot(col, vec3(displaceOffset));\n    \n    dist = clamp(dist, 0., 1.);\n    \n    return vec4(dist,col*1.5);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n   \tfloat scale = 3.;\n    float dist = 0.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n    #ifdef USE_SPHERE_OR_BOX\n        dist = osphere(p, +5.-y);\n    #else    \n        if ( p.y > 0. ) dist = obox(p, vec3(x,1.-y,z));\n        else dist = obox(p, vec3(x,1.,z));\n\t#endif\n    \n    return vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.1, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd)\n{\n    float s = rmPrec, so;\n    float d = 0.;\n    vec3 p  = ro;\n    const int iter = 40;\n    for(int i=0;i<iter;i++)\n    {      \n        if (s<rmPrec||s>maxd) break;\n        s = map(p).x * 0.5;\n        d += abs(s);\n        p = ro+rd*d;   \n    }\n    return d;\n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.3;\n    float cam_a = time; \/\/ angle z\n    \n    #ifdef USE_SPHERE_OR_BOX\n        float cam_e = 5.52; \/\/ elevation\n        float cam_d = 1.88; \/\/ distance to origin axis\n   \t#else\n        float cam_e = 1.; \/\/ elevation\n        float cam_d = 1.8; \/\/ distance to origin axis\n    #endif\n    \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.0001; \/\/ ray marching precision\n    float maxd = 10.; \/\/ ray marching distance max\n    float refl_i = 0.45; \/\/ reflexion intensity\n    float refr_a = 0.7; \/\/ refraction angle\n    float refr_i = 0.8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n     \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n    vec2 s = iResolution.xy;\n\tvec2 uv = (2.*fragCoord.xy -s)\/s.y;\n        \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, prec, maxd);\n    \n    if (d<maxd)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 refrRay = refract(rd, n, refr_a);\n        \n        vec3 cubeRefl = textureCube(iChannel0, reflRay).rgb * refl_i;\n        vec3 cubeRefr = textureCube(iChannel0, refrRay).rgb * refr_i;\n        \n        col = cubeRefl + cubeRefr + pow(b, 15.);\n        \n       \t\/\/ lighting        \n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, reflRay.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( reflRay, lig ), 0.0, 1.0 ),16.0);\n        \n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00);\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00);\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25);\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00);\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n        \n       \tcol = mix(col, map(p).yzw, 0.5);\n    }\n    else\n    {\n        b+=0.1;\n        col = textureCube(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}