{"Shader":{"ver":"0.1","info":{"id":"4tsSWl","date":"1440610992","viewed":1049,"name":"Subliminal prayer for IQ :-p","username":"FabriceNeyret2","description":"(try stop\/start)<br\/>Hope: Accessing the previous frame through a \"backbuffer\" input texture.<br\/>Nirvana description: Persistant states through frames -> programming simulations, games. <br\/>(prev)Frame-in-texture: cheap access to complex environment, blur, compo","likes":11,"published":3,"flags":0,"tags":["illusion","glypth"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n#define rnd(p) fract(4e4*sin(dot(p,vec2(12.45,57.78))+17.4))\n\n\/\/ glyphs code from https:\/\/www.shadertoy.com\/view\/XlXSWB\n\nfloat LOOP_DURATION, time_remapped;\n\nvec2 cursor_pos = vec2(4.);\nfloat line_appear_time = 0.;\nfloat new_lat = 1000.;\n#define MAX_GLYPHS 37\nvec4 glyphs[MAX_GLYPHS];\nfloat glyph_count = 0.;\n\nvec4 _sp = vec4(0);\nvec4 _A = vec4(0xc3c3c3,0xffffc3,0xe7c3c3,0x183c7e);\nvec4 _B = vec4(0xe37f3f,0x7fe3c3,0xc3e37f,0x3f7fe3);\nvec4 _C = vec4(0xe77e3c,0x303c3,0xc30303,0x3c7ee7);\nvec4 _D = vec4(0xe37f3f,0xc3c3c3,0xc3c3c3,0x3f7fe3);\nvec4 _E = vec4(0x3ffff,0x3f0303,0x3033f,0xffff03);\nvec4 _F = vec4(0x30303,0x3f0303,0x3033f,0xffff03);\nvec4 _G = vec4(0xe77e3c,0xf3c3c3,0xc303f3,0x3c7ee7);\nvec4 _H = vec4(0xc3c3c3,0xffc3c3,0xc3c3ff,0xc3c3c3);\nvec4 _I = vec4(0x187e7e,0x181818,0x181818,0x7e7e18);\nvec4 _J = vec4(0x637f3e,0x606063,0x606060,0xf0f060);\nvec4 _K = vec4(0x73e3c3,0xf1f3b,0x3b1f0f,0xc3e373);\nvec4 _L = vec4(0x3ffff,0x30303,0x30303,0x30303);\nvec4 _M = vec4(0xc3c3c3,0xdbc3c3,0xffffdb,0xc3c3e7);\nvec4 _N = vec4(0xc3c3c3,0xf3e3c3,0xcfdffb,0xc3c3c7);\nvec4 _O = vec4(0xe77e3c,0xc3c3c3,0xc3c3c3,0x3c7ee7);\nvec4 _P = vec4(0x30303,0x3f0303,0xc3e37f,0x3f7fe3);\nvec4 _Q = vec4(0x77fedc,0xc3dbfb,0xc3c3c3,0x3c7ee7);\nvec4 _R = vec4(0x73e3c3,0x3f1f3b,0xc3e37f,0x3f7fe3);\nvec4 _S = vec4(0xe77e3c,0x7ce0c3,0xc3073e,0x3c7ee7);\nvec4 _T = vec4(0x181818,0x181818,0x181818,0xffff18);\nvec4 _U = vec4(0xe77e3c,0xc3c3c3,0xc3c3c3,0xc3c3c3);\nvec4 _V = vec4(0x7e3c18,0xc3c3e7,0xc3c3c3,0xc3c3c3);\nvec4 _W = vec4(0xff7e24,0xdbdbdb,0xc3c3db,0xc3c3c3);\nvec4 _X = vec4(0xc3c3c3,0x3c7ee7,0xe77e3c,0xc3c3c3);\nvec4 _Y = vec4(0x181818,0x7e3c18,0xc3c3e7,0xc3c3c3);\nvec4 _Z = vec4(0x3ffff,0x1c0e07,0xe07038,0xffffc0);\nvec4 _gt = vec4(0x1c0e06,0xe07038,0x3870e0,0x60e1c);\nvec4 _ap = vec4(0x0,0x0,0x60000,0x60606);\nvec4 _co = vec4(0xc0e06,0xc,0x0,0x0);\nvec4 _es = vec4(0x001818,0x181818,0x181818,0x181818);\nvec4 _eq = vec4(0,0xffff,0xffff,0);\nvec4 _hy = vec4(0,0xff0000,0x0000ff,0);\n\nvec2 glyph_spacing = vec2(10., 14.);\n\nfloat get_bit(float data, float bit) {\n    return step(1., mod(data \/ exp2(bit), 2.));\n}\n\nvec4 glyph(vec4 data, float glyph_number, float scale, vec2 fragCoord) {\n    fragCoord \/= scale;\n    fragCoord.x -= glyph_number * glyph_spacing.x;\n    fragCoord -= vec2(8);\n    \n    float transition_fac = smoothstep(new_lat - .1, new_lat, time_remapped);\n    float alpha = step(abs(fragCoord.x - 4.), 6.) * step(fragCoord.y, 14.) * step(transition_fac * glyph_spacing.y - 2., fragCoord.y);;\n    fragCoord.y -= transition_fac * glyph_spacing.y;\n    fragCoord = floor(fragCoord);\n    \n    float bit = fragCoord.x + fragCoord.y * 8.;\n    \n    float bright;\n    bright =  get_bit(data.x, bit      );\n    bright += get_bit(data.y, bit - 24.);\n    bright += get_bit(data.z, bit - 48.);\n    bright += get_bit(data.w, bit - 72.);\n    bright *= 1. - step(8., fragCoord.x);\n    bright *= step(0., fragCoord.x);\n    \n    return vec4(vec3(bright), alpha);\n}\n\nvec3 draw_glyphs(vec2 fragCoord, float scale, float a, inout vec3 col) {\n    vec3 total = vec3(0.);\n    float total_alpha = 0.;\n    for(int i = 0; i < MAX_GLYPHS; i++) {\n        float i_float = float(i);\n        vec4 glyphcol = glyph(glyphs[i], i_float, scale, fragCoord);\n        float alpha = step(line_appear_time + .05 * i_float, time_remapped);\n        alpha *= glyphcol.a;\n        alpha *= step(i_float, glyph_count - 1.);\n        total = mix(total, glyphcol.rgb, alpha);\n        total_alpha = max(total_alpha, alpha);\n    }\n    \/\/ col = mix(col, total, total_alpha * a);\n    return total*total_alpha;\n    \/\/ return (1.-total)*total_alpha;\n}\n\nvoid mainImage(out vec4 fragColor, vec2 uv) {\n\n    LOOP_DURATION = iResolution.y>200.? 30. : 38.;\n    \n    float time = iGlobalTime;\n    time_remapped = mod(time,LOOP_DURATION);\n   \n    glyphs[0] = _I;\n    glyphs[1] = _Q;\n    glyphs[2] = _co;\n    glyphs[3] = _sp;\n    glyphs[4] = _W;\n    glyphs[5] = _E;\n    glyphs[6] = _sp;\n    glyphs[7] = _W;\n    glyphs[8] = _A;\n    glyphs[9] = _N;\n    glyphs[10] = _T;\n    glyphs[11] = _sp;\n    glyphs[12] = _A;\n    glyphs[13] = _sp;\n    glyphs[14] = _B;\n    glyphs[15] = _A;\n    glyphs[16] = _C;\n    glyphs[17] = _K;\n    glyphs[18] = _B;\n    glyphs[19] = _U;\n    glyphs[20] = _F;\n    glyphs[21] = _F;\n    glyphs[22] = _E;\n    glyphs[23] = _R;\n    glyphs[24] = _sp;\n    glyphs[25] = _T;\n    glyphs[26] = _E;\n    glyphs[27] = _X;\n    glyphs[28] = _T;\n    glyphs[29] = _U;\n    glyphs[30] = _R;\n    glyphs[31] = _E;\n    glyphs[32] = _es;\n    glyphs[33] = _sp;\n    glyphs[34] = _B;\n    glyphs[35] = _hy;\n    glyphs[36] = _P;\n\n    glyph_count = 37.;\n    \n    line_appear_time = -1e9;\n    \n\n    float txt = mod(floor(uv.x)+floor(uv.y)+floor(time*30.),2.);\n    uv *= 360.\/iResolution.y;\n    vec3 col = vec3(rnd(uv));\n    uv.x += 200.*time_remapped - (iResolution.y>200.?600.:2400.);\n\n    txt *= draw_glyphs(uv, 14., 1., col).x;\n    if (txt>.5) col = 1.-col;   \n\tfragColor = vec4(col, 1.);\n}","name":"","description":"","type":"image"}]}}