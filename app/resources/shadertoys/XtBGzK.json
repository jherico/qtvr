{"Shader":{"ver":"0.1","info":{"id":"XtBGzK","date":"1430171170","viewed":723,"name":"Psyche Nimix II","username":"xbe","description":"Same as previous \"Pysche Nimix\" but using a set of presets and a shutter to cycle between preset change.<br\/><br\/>Credits: \"Overly Satisfying\" by Nimitz, also reusing adapted part of \"The power of sin\" by antonOTI.<br\/>","likes":4,"published":3,"flags":0,"tags":["2d","noise","cheap","psyche","shutter"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Xavier Benech\n\/\/ Psyche Nimix II\n\/\/\n\/\/ Credits:\n\/\/ \"Overly Satisfying\" from Nimitz: https:\/\/www.shadertoy.com\/view\/Mts3zM\n\/\/ \"The power of sin\" by antonOTI: https:\/\/www.shadertoy.com\/view\/XdlSzB\n\/\/\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define PI 3.14159265\n#define NUM 10.\n#define PALETTE vec3(1.5, 2.9, 3.5)\n\n#define MIRROR\n#define SHUTTERED\n\nfloat aspect = iResolution.x\/iResolution.y;\nfloat delta = 0.01 + 0.0625*exp(-0.00325*iResolution.x);\n\nmat2 rotate(in float a)\n{\n    float c = cos(a), s = sin(a);\n    return mat2(c,-s,s,c);\n}\n\nfloat tri(in float x)\n{\n    return abs(fract(x)-.5);\n}\n\nvec2 tri2(in vec2 p)\n{\n    return vec2(tri(p.x+tri(p.y*2.)),tri(p.y+tri(p.x*2.)));\n}\n\nmat2 trinoisemat = mat2( 0.970,  0.242, -0.242,  0.970 );\n\nfloat triangleNoise(in vec2 p)\n{\n    float z=1.5;\n    float z2=1.5;\n\tfloat rz = 0.;\n    vec2 bp = p;\n\tfor (float i=0.; i<=3.; i++ )\n\t{\n        vec2 dg = tri2(bp*2.)*.8;\n        dg *= rotate(iGlobalTime*.8);\n        p += dg\/z2;\n\n        bp *= 1.6;\n        z2 *= .6;\n\t\tz *= 1.8;\n\t\tp *= 1.2;\n        p*= trinoisemat;\n        \n        rz+= (tri(p.x+tri(p.y)))\/z;\n\t}\n\treturn rz;\n}\n\nfloat arc(in vec2 plr, in float radius, in float thickness, in float la, in float ha)\n{\n    \/\/ clamp arc start\/end\n    float res = step(la, plr.y) * step(plr.y, ha);\n    \/\/ smooth outside\n    res *= smoothstep(plr.x, plr.x+delta,radius+thickness);\n    \/\/ smooth inside\n    float f = radius - thickness;\n    res *= smoothstep( f, f+delta, plr.x);\n    \/\/ smooth start\n    res *= smoothstep( la, la+delta, plr.y);\n    \/\/ smooth end\n    res *= 1. - smoothstep( ha-delta, ha, plr.y);\n    return res;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n \tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 q = uv*2.-1.;\n\tq.x *= aspect;\n\n#ifdef MIRROR\n    vec2 p = 1.85*q;\n    p.x = abs(p.x);\n    p.y = abs(p.y);\n#else\n    vec2 p = 1.23*q;\n#endif\n    \n#ifdef SHUTTERED\n    float k = clamp(exp(1.-abs(sin(0.5*iGlobalTime)))-exp(0.5), 0., 1.);\n    float shutter = 1.0 - smoothstep( 0., 1., 10.*(k-0.75) );\n#endif\n    \n#ifdef SHUTTERED\n    k = clamp(fract(iGlobalTime\/(10.*PI)), 0.,1.);\n    float sum = step(k, 0.2)+step(k, 0.4)+step(k, 0.6)+step(k, 0.8);\n    float k0 = 60. + 90.*sum;\n    float k1 = 15.*sum;\n    float k2 = 2.-sum;\n    if (k2==0.) {\n        k2 = 1.;\n        k0 = 120.;\n    }\n    p *= rotate(PI*(k0 + k1*cos(0.5*iGlobalTime + texture2D( iChannel0, vec2(0.123, 0.0015*iGlobalTime)).x))\/180.);\n    p.y = 2. - ( 0.2 + k2 )*(1.-exp(-abs(p.y)));\n#else\n    p *= rotate(2.*PI*cos(0.1*iGlobalTime + texture2D( iChannel0, vec2(0.123, 0.0015*iGlobalTime)).x));\n    p.y = 2. - ( 0.2 + 2.0 * sin(0.5*iGlobalTime) )*(1.-exp(-abs(p.y)));\n#endif\n    \n    float lp = length(p);\n    float id = floor(lp*NUM+.5)\/NUM;\n    vec4 n = texture2D( iChannel0, vec2(id, 0.0025*iGlobalTime));\n            \n    p *= rotate(2.72 * PI * n.x);\n    p.y = abs(p.y); \n    \n    \/\/polar coords\n    vec2 plr = vec2(lp, atan(p.y, p.x));\n    \n    \/\/Draw concentric arcs\n    float rz = arc(plr, id, clamp(1.2*n.w, 0.,1.)*0.5\/NUM, 0., PI*n.y);\n    \n    rz *= step(1.\/NUM, id);\n    \n    float m = rz;\n    rz *= (triangleNoise(p)*0.9+0.4);\n    vec3 col = (sin(PALETTE+id*10.+5.*iGlobalTime)*0.5+0.65)*rz;\n        \n    \/\/ Background\n\tvec3 bkg = vec3(0.32,0.36,0.4) + q.y*0.1;\n\tcol += 0.5*bkg*(1.-m);\n\t\/\/ Vignetting\n\tvec2 r = -1.0 + 2.0*(uv);\n\tfloat vb = max(abs(r.x), abs(r.y));\n\tcol *= (0.15 + 0.85*(1.0-exp(-(1.0-vb)*30.0)));\n    \n    col *= 1.2;\n#ifdef SHUTTERED\n    col *= shutter;\n#endif\n\tfragColor = vec4(col,1.0);\n}\n","name":"","description":"","type":"image"}]}}