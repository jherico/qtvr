{"Shader":{"ver":"0.1","info":{"id":"4tBSW3","date":"1446702896","viewed":996,"name":"Glowing Stone","username":"834144373","description":"move the mouse to change the color,choose the color which you like,but it's not perfect,<br\/>here you can get a good look:<a href=\"http:\/\/www.glslsandbox.com\/e#28740.0\" class=\"regular\" target=\"_blank\">http:\/\/www.glslsandbox.com\/e#28740.0<\/a>and<a href=\"http:\/\/www.glslsandbox.com\/e#28669.0\" class=\"regular\" target=\"_blank\">http:\/\/www.glslsandbox.com\/e#28669.0<\/a>","likes":21,"published":3,"flags":0,"tags":["raymarch","glow","stone","density"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/Created by 834144373  2015\/11\/5\n\nfloat noise(vec3 p) \/\/from Las of the \"Mercury\"\n{\n  vec3 i = floor(p);\n  vec4 a = dot(i, vec3(1., 57., 21.)) + vec4(0., 57., 21., 78.);\n  vec3 f = cos((p-i)*acos(-1.))*(-.5)+.5;\n  a = mix(sin(cos(a)*a),sin(cos(1.+a)*(1.+a)), f.x);\n  a.xy = mix(a.xz, a.yw, f.y);\n  return mix(a.x, a.y, f.z);\n}\n\n#define time iGlobalTime*0.3\n\/\/..........................................................\nvec3 roty(vec3 p,float angle){\n  float s = sin(angle),c = cos(angle);\n    mat3 rot = mat3(\n      c, 0.,-s,\n        0.,1., 0.,\n        s, 0., c\n    );\n    return p*rot; \n}\n\/\/............................................................\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/raymaching step I for normal obj\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obj(vec3 pos){\n    pos -= vec3(0.,0.13,0.);\n    float  n = noise(pos);\n    \/\/ float res =  length(max(abs(pos)-vec3(0.8,0.4,0.4)-n,0.0))-0.1;\n  \n    float res = length(pos)-(1.- 0.3*n);\n    return res;\n}\n\n\/\/raymarching step I\n\/\/find object\nfloat disobj(vec3 pointpos,vec3 dir){\n    float dd = 1.;\n    float d = 0.;\n    for(int i = 0;i<30;++i){\n      vec3 sphere = pointpos + dd*dir;\n          d = obj(sphere);\n      dd += d;\n      if(d<0.02)break;\n    }\n    return dd;\n}\n\n\/\/ramarching step for normal\n\/*\nvec3 normal(vec3 surface){\n  vec2 offset = vec2(0.01,0.);\n    vec3 nDir = vec3(\n      obj(surface+offset.xyy),\n        obj(surface+offset.yxy),\n        obj(surface+offset.yyx)\n    ) - obj(surface);\n    return normalize(nDir);\n}\n*\/\n\n\/\/\/\/\/\/raymarching step II for detail obj\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/here is form guil https:\/\/www.shadertoy.com\/view\/MtX3Ws\n\/\/vec2 csqr( vec2 a )  { return vec2( a.x*a.x - a.y*a.y, 2.*a.x*a.y  ); }\nfloat objdetal(in vec3 p) {\n  \tfloat res = 0.;\n    vec3 c = p;\n  \tfor (int i = 0; i < 10; ++i) {\n        p =1.7*abs(p)\/dot(p,p) -0.8;\n        \/\/p.yz= csqr(p.yz);\n        p=p.zxy;\n        res += exp(-20. * abs(dot(p,c)));        \n  }\n  return res\/2.;\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/raymarching step II \nvec4 objdensity(vec3 pointpos,vec3 dir,float finaldis){\n  vec4 color;\n    float den = 0.;\n    vec3 sphere = pointpos + finaldis*dir;\n    \/\/vec3 nDir = normal(sphere);\n    float dd = 0.;\n    \/\/if(dot(nDir,dir)<0.){\n        for(int j = 0;j<45;++j){\n            vec4 col;\n            col.a = objdetal(sphere);\n      \n            \/\/col.rgb = smoothstep(vec3(0.1,0.2,0.1),vec3(0.7,0.2,0.6),col.aaa);\n            \/\/col.rgb *= col.a;\n            float c = col.a\/200.;\n            col.rgb = vec3(c,c,c*c);\n            col.rgb *= col.a;\n            col.rgb *= float(j)\/20.;\n            dd = 0.01*exp(-2.*col.a);\n            \/\/float dd = max(0.1,col.a);\n            sphere += dd*dir;\n\n            color += col*0.8;\n            \/\/if(color.a\/200.>.9 || dd>200.)break;\n        }\n    \/\/}\n    return color*4.5;\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = (fragCoord.xy \/ iResolution.xy-0.5)*2.;\n  \n    uv.x *= iResolution.x\/iResolution.y;\n    \n    vec2 mouse = (iMouse.xy\/iResolution.xy-0.5)*2.2;\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    vec3 dir = normalize(vec3(uv,2.));\n      dir = roty(dir,time);\n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    vec3 campos = vec3(0.,0.,-2.8);\n      campos = roty(campos,time);\n    \/\/raymarching step I\n    float finaldis = disobj(campos,dir);\n    vec4 col = vec4(0.061,0.06,0.061,1.);\n    if(finaldis < 40.){\n      \t\/\/col.r = 1.;\n        col = objdensity(campos,dir,finaldis);\n        col += 0.6*col*vec4(0.7+mouse.x,0.8+mouse.y,0.5,1.);\n    }\n    \n    fragColor = vec4(col.rgb,1.0);\n}","name":"","description":"","type":"image"}]}}