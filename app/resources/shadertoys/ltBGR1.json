{"Shader":{"ver":"0.1","info":{"id":"ltBGR1","date":"1426812249","viewed":983,"name":"[NV15] Xor - Space","username":"Xor","description":"3D Space scene.","likes":6,"published":3,"flags":1,"tags":["3d","sun","lighting","space","planet","xor","vr","nv15","asteroids"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define sund normalize(vec3(-1.0,0.2,0.4))\n#define sunc vec3(1.0,0.5,0.25)\n#define sund2 normalize(vec3(0.4,0.5,-1.0))\n#define sunc2 vec3(0.125,0.5,0.75)\n#define p1 normalize(vec3(1.0,0.3,0.5))\nfloat s(float n)\n{\n \treturn smoothstep(0.0,1.0,n);\n}\nfloat rand(vec3 p)\n{\n \treturn fract(abs(cos(dot(p,vec3(84.53,93.38,65.26)))*46.35));\n}\nfloat srand(vec3 p)\n{\n \tvec3 f = floor(p);\n    vec3 s = smoothstep(vec3(0.0),vec3(1.0),fract(p));\n    \n    return mix(mix(mix(rand(f),rand(f+vec3(1.0,0.0,0.0)),s.x),\n           mix(rand(f+vec3(0.0,1.0,0.0)),rand(f+vec3(1.0,1.0,0.0)),s.x),s.y),\n           mix(mix(rand(f+vec3(0.0,0.0,1.0)),rand(f+vec3(1.0,0.0,1.0)),s.x),\n           mix(rand(f+vec3(0.0,1.0,1.0)),rand(f+vec3(1.0,1.0,1.0)),s.x),s.y),s.z);\n}\nfloat model(vec3 p)\n{\n \treturn (srand(p*2.0)*0.05+srand(p)*0.2+srand(p\/4.0)*0.4+srand(p\/8.0))-0.5;\n}\nvec3 background(vec3 d)\n{\n    float sun = pow(dot(d,sund)*0.5+0.5,64.0+srand(vec3(iGlobalTime*4.0))*8.0);\n    float sun2 = min(pow(dot(d,sund2)*0.3+0.75,8.0),1.0);\n    sun2 *= sun2*sun2*sun2;\n    float stars = pow(srand(d*64.0)*srand(d*96.0)*srand(d*128.0)+0.2,8.0)*2.0;\n    float planet = float(-dot(d,p1)>0.995)*pow(sun,1.0\/4.0)*(srand(d*48.0)*0.2+0.8)*8.0;\n    \n    return pow(vec3(sun),1.0\/sunc)+stars*ceil(0.05-planet)+planet*vec3(0.5,0.3,0.2)\n        +pow(vec3(sun2),1.0\/sunc2);\n}\nvec3 color(vec3 p,vec3 norm)\n{\n    float s = srand(p\/4.0)*0.25+srand(p*8.0)*0.125+srand(p*16.0)*0.125;\n    vec3 n = normalize(norm+cos(vec3(s*254.0,s*234.0-436.0,s*267.0))*0.2);\n    vec3 l = mix(vec3(0.5),sunc,pow(dot(n,sund)*0.5+0.75,2.0));\n    l = mix(l,l+sunc2,pow(dot(n,sund2)*0.5+0.5,4.0));\n    vec3 t = texture2D(iChannel0,p.zy*0.25).rgb*0.5+0.25;\n \treturn s*t*l;  \n}\nfloat dist(vec3 p, vec3 d)\n{\n    float h = 1.0;\n    float r = 1.0;\n    float dis = -1.0;\n    for(int i = 0;i<80;i++)\n    {\n\t    h = model( p+d*r );\n        r += h*4.8;\n        if (h < 0.0 || r > 40.0 ) break; \n    }\n    if( r < 40.0 ) dis = r;\n    return dis;\n}\nmat3 calcLookAtMatrix(vec3 ro, vec3 ta, float roll)\/\/Function by Iq\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = ( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = ( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 calcNormal(vec3 pos )\/\/Also by Iq\n{\n    const float eps = 0.002;\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*model( pos + v1*eps ) + \n\t\t\t\t\t  v2*model( pos + v2*eps ) + \n\t\t\t\t\t  v3*model( pos + v3*eps ) + \n\t\t\t\t\t  v4*model( pos + v4*eps ) );\n}\nvec3 scene(vec3 p, vec3 d)\n{\n    float r = dist(p,d);\/\/Ray distance\n    vec3 c = background(d);\/\/Background Color\n    if (r>0.0)\n    {\n    \tc = mix(color(p+d*r,calcNormal(p+d*r)),c,pow(r\/40.0,16.0));\/\/Material color and fade\n    }\n    return c;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 f = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\/\/2D Position\n    vec3 p = vec3(iGlobalTime*2.0,0.0,0.0);\/\/3D Position\n    float t = s(s(s(s(fract(iGlobalTime\/32.0)))))*6.2831;\/\/Time\n    vec3 m = vec3(-cos(t),0.0,-sin(t));\/\/Motion direction\n    mat3 cm = calcLookAtMatrix(p,p+m,0.0);\/\/Camera matrix\n    vec3 d = normalize( cm * vec3(f.xy,2.0) );\/\/Ray direction\n    \n    vec3 c = scene(p,d);\n\tfragColor = vec4(c,1.0);\n}\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 p = fragRayOri + vec3( 1.0, 0.0, 1.0 );\n    vec3 d = fragRayDir;\n    vec3 c = scene( p, d);\n    \n\tfragColor = vec4( c, 1.0 );\n}","name":"","description":"","type":"image"}]}}