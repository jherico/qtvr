{"Shader":{"ver":"0.1","info":{"id":"4slSWf","date":"1407382465","viewed":4341,"name":"Bender","username":"iq","description":"Bender distance field (partial, only what's visible to camera). Take control of the mouse and swipe in order to change for regular lighting to cartoon. Music will come soon ^_^","likes":61,"published":3,"flags":0,"tags":["procedural","3d","raymarching","distancefield","cartoon"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/========================================================================================\n\/\/ noises\n\/\/========================================================================================\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*157.0;\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m2*p*2.02;\n    f += 0.2500*noise( p ); p = m2*p*2.03;\n    f += 0.1250*noise( p ); p = m2*p*2.01;\n    f += 0.0625*noise( p );\n    return f\/0.9375;\n}\n\n\/\/========================================================================================\n\/\/ distance primitives\n\/\/========================================================================================\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nvec2 sdSegment( vec3 a, vec3 b, vec3 p )\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n    vec2 q = vec2( length(p.xz), p.y );\n\treturn max( max( dot(q,c.xy), p.y), -p.y-c.z );\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  return min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nfloat det( vec2 a, vec2 b ) { return a.x*b.y-b.x*a.y; }\nvec3 getClosest( vec2 b0, vec2 b1, vec2 b2 ) \n{\n\t\n  float a =     det(b0,b2);\n  float b = 2.0*det(b1,b0);\n  float d = 2.0*det(b2,b1);\n  float f = b*d - a*a;\n  vec2  d21 = b2-b1;\n  vec2  d10 = b1-b0;\n  vec2  d20 = b2-b0;\n  vec2  gf = 2.0*(b*d21+d*d10+a*d20); gf = vec2(gf.y,-gf.x);\n  vec2  pp = -f*gf\/dot(gf,gf);\n  vec2  d0p = b0-pp;\n  float ap = det(d0p,d20);\n  float bp = 2.0*det(d10,d0p);\n  float t = clamp( (ap+bp)\/(2.0*a+b+d), 0.0 ,1.0 );\n  return vec3( mix(mix(b0,b1,t), mix(b1,b2,t),t), t );\n}\n\nvec2 sdBezier( vec3 a, vec3 b, vec3 c, vec3 p, in float thickness )\n{\n\tvec3 w = normalize( cross( c-b, a-b ) );\n\tvec3 u = normalize( c-b );\n\tvec3 v = normalize( cross( w, u ) );\n\n\tvec2 a2 = vec2( dot(a-b,u), dot(a-b,v) );\n\tvec2 b2 = vec2( 0.0 );\n\tvec2 c2 = vec2( dot(c-b,u), dot(c-b,v) );\n\tvec3 p3 = vec3( dot(p-b,u), dot(p-b,v), dot(p-b,w) );\n\n\tvec3 cp = getClosest( a2-p3.xy, b2-p3.xy, c2-p3.xy );\n\n\treturn vec2( 0.85*(sqrt(dot(cp.xy,cp.xy)+p3.z*p3.z) - thickness), cp.z );\n}\n\n\/\/========================================================================================\n\/\/ distance operators\n\/\/========================================================================================\n\nfloat opU( float d2, float d1 ) { return min( d1,d2); }\nfloat opS( float d2, float d1 ) { return max(-d1,d2); }\nvec3  opU( vec3  d2, vec3  d1 ) { return ( d2.x<d1.x)? d2:d1; }\nvec3  opS( vec3  d2, vec3  d1 ) { return (-d1.x>d2.x)?-d1:d2; }\n\n\/\/========================================================================================\n\/\/========================================================================================\n\/\/ Bender\n\/\/========================================================================================\n\/\/========================================================================================\n\nvec4 map( vec3 p )\n{\n\tvec3 q = vec3( abs(p.x), p.yz );\n\n    \/\/ head and body\n\tfloat d1;\n    d1 =          sdSegment(     vec3(0.0,1.8,0.0), vec3(0.0,0.7,0.0), p ).x - 0.5;\n    d1 = opU( d1, sdCone(      p-vec3(0.0,2.8,0.0), vec3( normalize(vec2(0.9,0.1)), 0.5 ) ) );\n    d1 = opS( d1, sdCylinder( (p-vec3(0.0,1.0,0.4)).zxy, vec2(0.2,1.0) ) );\n    d1 = opU( d1, sdCylinder( (p-vec3(0.0,-0.32,0.0)), vec2(0.93,0.7) ) );\n    d1 = opU( d1, sdCone(     (p-vec3(2.2,1.7,1.0))*vec3(1.0,-1.0,-1.0), vec3( normalize(vec2(0.8,0.4)), 0.5 ) ) );\n    \n    \/\/ neck and fingers    \n    vec3 d3;\n    d3 =          vec3( udRoundBox( p-vec3(0.0,1.55,0.30), vec3(0.35,0.1,0.3)-0.03, 0.12 ), 1.0, 5.0 );\n    d3 = opS( d3, vec3( udRoundBox( p-vec3(0.0,1.55,0.35), vec3(0.35,0.1,0.5)-0.04, 0.10 ), 0.0, 5.0) );\n    d3 = opU( d3, vec3( sdCone(     p-vec3(0.0,1.08,0.00), vec3(0.60,0.8,0.7) ), 1.0, 6.0) );\n    d3 = opU( d3, vec3( sdSphere(   p-vec3(0.0,2.70,0.00), 0.08 ), 1.0, 7.0) );\n    d3 = opU( d3, vec3( sdSphere(   p-vec3(0.0,2.20,0.00), 0.15 ), 1.0, 8.0) );\n    d3 = opU( d3, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.2,2.35,0.8), q ).x - 0.08, 0.8,  9.0) );\n\td3 = opU( d3, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.4,2.35,1.2), q ).x - 0.08, 0.8, 10.0) );\n\td3 = opU( d3, vec3( sdSegment( vec3(2.2,2.10,1.0), vec3(2.0,2.35,1.2), q ).x - 0.08, 0.8, 11.0) );\n    d3 = opU( d3, vec3( sdSegment( vec3(2.2,2.35,0.8), vec3(2.2,2.40,0.8), q ).x - 0.08, 0.8,  9.0) );\n\td3 = opU( d3, vec3( sdSegment( vec3(2.4,2.35,1.2), vec3(2.4,2.50,1.1), q ).x - 0.08, 0.8, 10.0) );\n\td3 = opU( d3, vec3( sdSegment( vec3(2.0,2.35,1.2), vec3(2.0,2.50,1.1), q ).x - 0.08, 0.8, 11.0) );\n\n    \/\/ eyes and mouth\n    vec3 d2;\n    d2 =          vec3( sdSphere(   p-vec3( 0.18,1.55,0.48), 0.18           ), 1.0, 12.0 );\n    d2 = opU( d2, vec3( sdSphere(   p-vec3(-0.18,1.55,0.48), 0.18           ), 1.0, 13.0 ) );\n    d2 = opU( d2, vec3( sdCylinder( p-vec3( 0.00,1.00,0.00), vec2(0.47,0.4) ), 1.0, 14.0 ) );\n\n    \/\/ arms\n    vec3 d4;\n    d4 =          vec3( sdSphere( q-vec3( 0.88,0.15,0.0), 0.19 ), 0.0, 15.0 );\n    d4 = opU( d4, vec3( sdBezier( vec3(0.9,0.15,0.0), vec3(2.0,-0.5,0.0), vec3(2.2,2.0,1.0), q, 0.13 ), 16.0) );\n    \n    vec4             res = vec4( d1,  1.0, 0.0, 0.0 );\n    if( d2.x<res.x ) res = vec4( d2.x,2.0, d2.yz );\n    if( d3.x<res.x ) res = vec4( d3.x,3.0, d3.yz );\n    if( d4.x<res.x ) res = vec4( d4.x,0.0, d4.yz );\n\n\n    return res;\n}\n\n\/\/========================================================================================\n\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n#if 1\n\tconst float maxd = 10.0;\n\tconst float precis = 0.001;\n    float h = precis*2.0;\n    float t = 0.0;\n    vec4 res = vec4(-1.0);\n    for( int i=0; i<64; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n        t += h;\n\t    vec4 tmp = map( ro+rd*t );\n        h = tmp.x;\n        res = vec4(t,tmp.yzw);\n    }\n\n    if( t>maxd ) res = vec4(-1.0);\n    return res;\n#else\n    \n    vec4 res = vec4(-1.0);\n    \n    float t = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n\t    vec4 h = map( ro+rd*t );\n        if( h.x<0.001 ) {res=vec4(t,h.yzw); break; }\n        t += h.x;\n        if( t>10.0 ) break;\n    }\n\n    return res;\n    \n#endif\n}\n\n\/\/\n\/\/ 6 tap cross is the traditional methid\n\/\/ 4 tap tetrahedron is faster and expands into less code (from P_Malin and TekF)\n\/\/\nvec3 calcNormal( in vec3 pos )\n{\n#if 0\n    vec3 eps = vec3(0.005,0.0,0.0);\n\treturn normalize( vec3( map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n                            map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n                            map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n#else   \n    vec2 e = vec2(-1.0,1.0) * 0.005;   \n\treturn normalize( e.yxx*map( pos + e.yxx ).x + \n\t\t\t\t\t  e.xxy*map( pos + e.xxy ).x + \n\t\t\t\t\t  e.xyx*map( pos + e.xyx ).x + \n\t\t\t\t\t  e.yyy*map( pos + e.yyy ).x );    \n#endif\n    \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<48; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, k*h\/t );\n\t\tt += clamp( h, 0.005, 0.5 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float h = 0.01 + 0.3*float(i)\/4.0;\n        float d = map( pos + h*nor ).x;\n        totao += clamp(h-d,0.0,1.0)*sca;\n        sca *= 0.9;\n    }\n    return clamp( 1.0 - 2.0*totao, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(0.8,0.6,0.3));\n\nvoid generateRay( out vec3 resRo, out vec3 resRd, in vec3 po, in vec3 ta, in vec2 pi )\n{\n\tvec2 p = (-iResolution.xy + 2.0*pi)\/iResolution.y;\n        \n    \/\/ camera matrix\n    vec3 ww = normalize( ta - po );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t\/\/ create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.2*ww );\n\n    resRo = po;\n    resRd = rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n\t\n    float sep = iResolution.x * smoothstep( 0.5, 0.8, cos(1.57+0.25*6.2831*iGlobalTime));\n    if( iMouse.z>0.0 ) sep = iMouse.x;\n    float doCartoon = step( sep, fragCoord.x ); \n    \n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    float an = 5.7 + 0.62831*iGlobalTime;\n\tvec3 po = vec3(1.0 + 3.5*sin(an),0.6,3.5*cos(an));\n    vec3 ta = vec3(1.0,1.5,0.0);\n\n    vec3 ro,  rd;  generateRay( ro,  rd,  po, ta, fragCoord.xy );\n    vec3 ro2, rd2; generateRay( ro2, rd2, po, ta, fragCoord.xy+vec2(2.0,0.0) );\n    vec3 ro3, rd3; generateRay( ro3, rd3, po, ta, fragCoord.xy+vec2(0.0,2.0) );\n\n    \n    \/\/-----------------------------------------------------\n\t\/\/ sky\n    \/\/-----------------------------------------------------\n    \n    float gra = smoothstep(-0.3,0.6,rd.y);                    \n\n    vec3 sky = vec3(0.4,0.7,1.0)*0.2;\n    float h = (1000.0-ro.y)\/rd.y;\n    if( h>0.0 )\n    {\n        vec2 uv = ro.xz + rd.xz*h;\n        float cl = smoothstep( 0.5, 0.9, fbm( 0.003*uv*vec2(1.0,0.2) ) );\n\n        cl = mix( cl, clamp( floor(cl*3.0)\/(3.0-1.0), 0.0, 1.0 ), doCartoon );\n\n        sky = mix( sky, vec3(0.9,0.6,0.3), 0.4*cl*gra );\n    }\n\n    vec3 col = mix( 0.6*vec3(0.6,0.9,1.0), sky, gra );\n\n    \/\/-----------------------------------------------------\n\t\/\/ bender\n    \/\/-----------------------------------------------------\n\n    \/\/ raymarch\n    vec4 tmat  = intersect(ro ,rd );\n    if( tmat.y>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        \/\/ materials\n\t\tvec3 mate = vec3(0.0);\n\t\tif( tmat.y<0.5 )\n\t\t{\n\t\t\tmate = vec3(0.1,0.12,0.15);\n            mate *= smoothstep( -0.95, -0.94, sin(40.0*tmat.z) );\n\t\t}\n\t\telse if( tmat.y<1.5 )\n\t\t{\n\t\t\tmate = vec3(0.13,0.17,0.24);\n            mate *= clamp( 200.0*udRoundBox( pos-vec3(0.0,1.55,0.35), vec3(0.35,0.1,0.5)-0.04, 0.1 ), 0.0, 1.0 );\n\n\t\t}\n\t\telse if( tmat.y<2.5 )\n\t\t{\n\t\t\tmate = vec3(0.7,0.68,0.4);\n            vec3 qos = vec3( abs(pos.x), pos.yz );\n            \n            mate *= clamp( 100.0 * sdBox(qos-vec3(0.18+0.05*sign(pos.x),1.55+0.05,0.5),vec3(0.04,0.04,0.5) ), 0.0, 1.0 );\n\n            float teeth = min( sdBox(qos-vec3(0.0,1.08,0.5),vec3(1.0,0.01,0.3) ),\n                               sdBox(qos-vec3(0.0,0.92,0.5),vec3(1.0,0.01,0.3) ) );\n\n            teeth = min( teeth, sdBox( vec3(mod(qos.x+0.09,0.18),qos.yz) -vec3(0.0,1.0,0.5),vec3(0.01,0.3,0.3) ) );\n\n            mate *= clamp( 100.0 * teeth, 0.0, 1.0 );\n            \n\t\t}\n\t\telse if( tmat.y<3.5 )\n\t\t{\n            mate = vec3(0.25,0.29,0.34) * tmat.z;\n\t\t}\n\n\n        vec3 brdf1 = vec3( 0.0 );\n        vec3 brdf2 = vec3( 0.0 );\n        \n\t\tfloat dif = max(dot(nor,lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.0005, 32.0 );\n\n        {\n\t\t\/\/ lighting 1\n\t\tfloat occ = 0.25 + 0.75*calcOcc(pos,nor);\n        float amb = 0.5;\n        float bac = max(0.3 + 0.7*dot(nor,-lig),0.0);\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 3.0 );\n        float spe = max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), 1.0 ) );\n\t\t\n        brdf1 += 3.0*dif*vec3(1.00,1.00,1.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tbrdf1 += 2.0*amb*vec3(0.30,0.30,0.30)*occ;\n\t\tbrdf1 += 2.0*bac*vec3(0.40,0.30,0.25)*occ;\n        brdf1 *= 0.5;\n        brdf1 += 1.0*fre*vec3(1.00,1.00,1.00)*2.0*(0.5+0.5*dif*sha)*occ;\n\t\tbrdf1 += 2.0*(spe+1.0*pow(spe,8.0))*vec3(1.0)*occ*sha;\n        }\n        \n        {\n\t\t\/\/ lighting 2\n        float amb = 0.5;\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 5.0 );\n\t\t\n        brdf2 += 1.5*vec3(1.00,1.00,1.00)*sha;\n\t\tbrdf2 += 1.5*vec3(0.50,0.50,0.50);\n        brdf2 += 0.7*smoothstep(0.1,0.15,fre*sha);\n        }\n        \n        vec3 brdf = mix( brdf1, brdf2, doCartoon );\n\t\t\/\/ surface-light interacion\n\t\tcol = mate.xyz* brdf;\n\t}\n\n    \/\/ cartoon edges\n    vec4 tmat2 = intersect(ro2,rd2); \/\/ raytrace right pixel\n    vec4 tmat3 = intersect(ro3,rd3); \/\/ raytrace top pixel too\n    float e = clamp( 1.0 - 10.0*max(abs(tmat.w-tmat2.w),abs(tmat.w-tmat3.w)), 0.0, 1.0 );\n    col *= mix( 1.0, e, doCartoon );\n\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n    \n\t\/\/ vigneting\n    col *= 0.4 + 0.6*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    \n    \/\/ separator\n    col *= smoothstep( 1.0, 2.0, abs(fragCoord.x-sep) );\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}