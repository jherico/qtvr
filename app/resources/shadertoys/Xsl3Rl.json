{"Shader":{"ver":"0.1","info":{"id":"Xsl3Rl","date":"1378947554","viewed":2650,"name":"Jelly thing","username":"iq","description":"Again, some moving 3d noise + cosines.  ","likes":17,"published":3,"flags":0,"tags":["procedural","3d","raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":2,"src":"\/presets\/tex01.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":27,"src":"\/presets\/cube05_0.png","ctype":"cubemap","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec3 texturize( sampler2D sa, in vec3 p, in vec3 n )\n{\n\tvec3 x = texture2D( sa, p.yz ).xyz;\n\tvec3 y = texture2D( sa, p.zx ).xyz;\n\tvec3 z = texture2D( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvec4 disp( vec3 p )\n{\n\tp.z -= 4.0*(-1.0+2.0*noise( 0.05*p - 0.25*iGlobalTime)) * cos(2.0*iGlobalTime);\n\t\n\tfloat off = iGlobalTime*0.5 + 0.4*sin(iGlobalTime*2.0);\n\t\n\tvec3 q = p*0.15*vec3(1.0,0.4,1.0);\n    float f = 0.0;\t\n\tf += 0.500*noise( q ); q *= 2.1; q.y += off;\n\tf += 0.250*noise( q ); q *= 2.0; q.y += off;\n\tf += 0.125*noise( q );\n\t\n\treturn vec4( f, q );\n}\n\nvec3 map( in vec3 p )\n{\n\tvec4 dd = disp( p );\n\t\n\tfloat f = dd.x;\n\n\tdd.yzw *= 4.0;\n\tfloat g = sin(dd.y)*sin(dd.z)*sin(dd.w) * (1.0-smoothstep( -5.0, 20.0, p.y ));\n\tf += f*0.2*g;\n\t\n\tfloat d = p.x - 20.0*f;\n\n\td *= 0.2;\n\n\treturn vec3( d, f, g );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tvec3 res = vec3(1e10,-1.0, -1.0);\n\n\tfloat maxd = 200.0;\n\tfloat precis = 0.002;\n    float h = 1.0;\n    float t = 0.0;\n    float m = -1.0;\n    float g = -1.0;\n    for( int i=0; i<128; i++ )\n    {\n        if( h<precis||t>maxd ) continue;\/\/break;\n\t    vec3 res = map( ro+rd*t );\n        h = res.x;\n\t\tm = res.y;\n\t\tg = res.z;\n        t += h;\n    }\n\tif( t<maxd ) res=vec3(t,m,g);\n\n\treturn res;\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.01;\n\tfloat h = 1.0;\n    for( int i=0; i<64; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, max(k*h\/t,0.0) );\n\t\tt += clamp( h, 0.02, 0.1 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec3 shade( vec3 pos, vec3 nor, vec3 rd, float occ, float di, float t )\n{\n    \/\/ materual\n\tvec3  ref = reflect(rd,nor);\n\tvec4  rr  = 16.0*disp( pos );\n    float f   = smoothstep( -5.0, 20.0, pos.y );\n\tfloat cm = smoothstep(-0.5,1.0,di+f);\n\tvec3 col = mix( vec3(1.0,0.95,0.65), 0.9*vec3(1.0,0.6,0.2 ), cm );\n\tcol *= mix( vec3(1.0), 0.2+1.0*texturize( iChannel1, 0.001*rr.yzw, nor ), 0.25+0.75*f );\n\t\n\t\/\/ lighting\n\tocc *= pos.x\/10.0;\n\tfloat sss = clamp(1.5*(occ*occ*0.5+0.5*occ), 0.0, 1.0 );\n\tfloat rha = softshadow( pos+0.1*nor, ref, 4.0 );\n    vec3  lin =  0.3*pow(textureCube( iChannel3, nor ).xyz,vec3(2.0))*occ;\t\n          lin += 1.0*sss*vec3(1.1,0.90,0.7);\n\n    \/\/ combine\t\n\tcol = lin*col;\n    col += (0.2+0.8*cm)*0.15*rha*pow(textureCube( iChannel2, reflect(rd,nor)).xyz,vec3(2.0));\n\t\n\treturn col * exp(-0.0001*t*t);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.1,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.7);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\tfloat an = 1.0 - 1.4*(m.x-0.7);\n\tvec3 ro = 40.0*vec3(sin(an),0.0,cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    \/\/ camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t\/\/ create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n    vec3 res = \tintersect(ro,rd);\n    float t = res.x;\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 col = shade( pos, nor, rd, res.y, res.z, t );\n\n    \/\/ to screen\t \n\tcol = clamp( col, 0.0, 1.0 );\n\tcol = pow( col, vec3(0.45) ); \n\n    \/\/-----------------------------------------------------\n\t\/\/ post\n    \/\/-----------------------------------------------------\n\tcol = col*col*(3.0-2.0*col);\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}