{"Shader":{"ver":"0.1","info":{"id":"ll2Gzh","date":"1426986396","viewed":672,"name":"Distorted rings","username":"flypig","description":"A very 2D pattern: a distorted grid of rings, twisted across the canvas, and with a light shadow effect for some semblance of depth.<br\/><br\/>This is an example shader developed for use with shaderback.js","likes":0,"published":3,"flags":0,"tags":["2d","flat","rings","distorted"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n\nCopyright (c) 2015 David Llewellyn-Jones\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and\/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n*\/\n\nprecision highp float;\n\n#define M_PI 3.1415926535897932384626433832795\n\n\/\/ (((((x - xc1)**2) + ((y - yc1)**2) - (r1**2)) * (((x - xc2)**2) + ((y - yc2)**2) - (r2**2)))) < (s \/ 1000)\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 vTextureCoord = fragCoord \/ iResolution.xy;\n    float width = iResolution.x;\n    float height = iResolution.y;\n    float time = iGlobalTime * 1000.0;\n\n\tvec2 ratio = vec2(width, height) \/ width;\n\tvec2 pos = vTextureCoord * ratio;\n\tfloat scale = (3.0 + sin(time \/ 25000.0)) \/ 5.0;\n\tpos += vec2(sin(time \/ 3500.0), sin(time \/ 3650.0)) * 0.1;\n\tvec2 centre = vec2(0.1 * scale, 0.1 * scale);\n\n\tfloat radius1 = distance(vec2(mod(sin(sin((0.5 * M_PI * pos.y) + time \/ 3800.0) + pos.x * M_PI), 0.2 * scale),\n\t\tmod(sin(cos((0.5 * M_PI * pos.x) + time \/ 4100.0) + pos.y * M_PI), 0.2 * scale)), centre);\n\n\tfloat angle1 = atan (pos.x - 0.5, pos.y - 0.5);\n\n\tfloat angle2 = atan (mod(sin(sin((0.5 * M_PI * pos.y) + time \/ 3800.0) + pos.x * M_PI), 0.2 * scale) - centre.x, \n\t\tmod(sin(cos((0.5 * M_PI * pos.x) + time \/ 4100.0) + pos.y * M_PI), 0.2 * scale) - centre.y);\n\n\tfloat red = 0.0;\n\tfloat green = 0.0;\n\tfloat blue = 0.0;\n\tif ((radius1 < 0.09 * scale) && (radius1 > 0.06 * scale)) {\n\t\tred = 1.0 - (sin ((time \/ 3300.0) + angle2 * 3.0) + 1.0) \/ 3.0;\n\t\tgreen = (sin ((time \/ 3200.0) + angle2 * 3.0) + 1.0) \/ 2.0;\n\t\tblue = (sin ((time \/ 3200.0) + angle1 * 3.0) + 1.0) \/ 2.0;\n\t}\n\telse {\n\t\tred = 1.0;\n\t\tgreen = 1.0;\n\t\tblue = 0.5;\n\n\t\tvec2 shadow = vec2(+0.005, -0.005);\n\t\tfloat radius1 = distance(vec2(mod(sin(sin((0.5 * M_PI * (pos.y - shadow.y)) + time \/ 3800.0) + (pos.x - shadow.x) * M_PI), 0.2 * scale),\n\t\tmod(sin(cos((0.5 * M_PI * (pos.x - shadow.x)) + time \/ 4100.0) + (pos.y - shadow.y) * M_PI), 0.2 * scale)), centre);\n\n\t\tif ((radius1 < 0.09 * scale) && (radius1 > 0.06 * scale)) {\n\t\t\tfloat darkness = cos(M_PI * (((radius1 \/ scale) - 0.075) \/ 0.03));\n\t\t\tred = 1.0 - 0.5 * darkness;\n\t\t\tgreen = 1.0 - 0.5 * darkness;\n\t\t\tblue = 0.5 - 0.5 * darkness;\n\t\t}\n\n\t}\n\n\tvec4 colour = vec4(red, green, blue, 1.0);\n\n\tfragColor = colour;\n}\n","name":"","description":"","type":"image"}]}}