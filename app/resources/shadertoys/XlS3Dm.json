{"Shader":{"ver":"0.1","info":{"id":"XlS3Dm","date":"1429355417","viewed":732,"name":"ColorfulCubes","username":"0x17de","description":"cubes are rotating around the center and themselfes, some background animations and scanlines","likes":4,"published":3,"flags":0,"tags":["grid","scanlines","colorful","cubes","rotating"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec3 circ(float aspect, vec2 uv, float size, vec3 color, float angle) {\n    float powF = 10.0;\n    vec2 xy;\n    xy[0] = uv[0] - 0.5;\n    xy[1] = uv[1] - 0.5;\n    xy[1] \/= aspect;\n    xy[0] -= 0.1*sin(angle);\n    xy[1] += 0.1*cos(angle);\n    xy *= 20.0 * size;\n    \n    float pow1 = pow(abs(xy[0] * sin(angle) + xy[1] * cos(angle)),powF);\n    float pow2 = pow(abs(xy[1] * sin(angle) - xy[0] * cos(angle)),powF);\n    \n    float outColor = 1.0-clamp(\n        pow1+pow2\n        , 0.0, 1.0);\n    \n    return color * outColor;\n}\n\nvec3 bg(float aspect, vec2 uv, float size, float angle) {\n    float powF = -10.0;\n    vec2 xy;\n    xy[0] = uv[0] - 0.5;\n    xy[1] = uv[1] - 0.5;\n    xy[1] \/= aspect;\n    xy[0] -= 0.5*sin(angle);\n    xy[1] += 0.5*cos(angle);\n    xy *= 20.0 * size;\n    \n    \n    float pow1 = pow(abs(xy[0] * sin(angle) + xy[1] * cos(angle)),powF);\n    float pow2 = pow(abs(xy[1] * sin(angle) - xy[0] * cos(angle)),powF);\n\n    float outColor = clamp(\n        pow1+pow2\n        , 0.0, 1.0);\n\n    return vec3(outColor);\n}\n\nvec3 scanline(vec2 uv, float angle, vec3 color, float size, float strength) {\n    uv[1] -= 0.5 + 0.5 * cos(mod(angle,3.14*2.0) \/ 2.0);\n    uv[1] *= 1000.0 * size;\n    float col = pow(uv[1],-1.0);\n   \tfloat damp = clamp(pow(abs(uv[0]), 10.0)+pow(abs(1.0-uv[0]), 10.0), 0.0, 1.0);\n\tcol-= damp * 0.2;\n    col = clamp(col, 0.0, strength);\n    return color * col;\n}\n\nfloat vignetting(vec2 uv, float aspect) {\n    float powF = 3.5;\n    \n    vec2 xy;\n    xy[0] = uv[0] - 0.5;\n    xy[1]\/= aspect;\n    xy[1] = uv[1] - 0.5;\n\txy *= 1.8;\n\n    xy[0] = pow(abs(xy[0]), powF)-0.1;\n    xy[1] = pow(abs(xy[1]), powF)-0.1;\n\n    return clamp(1.0-(xy[0] + xy[1]), 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float aspect = iResolution.x \/ iResolution.y;\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\n    float bgFactor = sin(uv[0]) * cos(uv[1]);\n    vec3 backgroundColor = vec3(0.3, 1.0, 1.0) * bgFactor;\n    \n    vec3 red = vec3(1.0, 0.0, 0.0);\n    vec3 green = vec3(0.0, 1.0, 0.0);\n    vec3 blue = vec3(0.0, 0.0, 1.0);\n    vec3 purple = vec3(0.5, 0.0, 1.0);\n    vec3 yellow = vec3(1.0, 1.0, 0.0);\n    vec3 topColor = (\n        circ(aspect, uv, 1.0, red, iGlobalTime + 3.14) +\n        circ(aspect, uv, 2.0, green, iGlobalTime - 1.56) +\n        circ(aspect, uv, 3.0, blue, iGlobalTime) +\n        circ(aspect, uv, 4.0, yellow, iGlobalTime + 1.56)\n    );\n    float colorFactor = ceil(dot(topColor, topColor));\n    vec3 outColor = backgroundColor * (1.0-colorFactor) + topColor * colorFactor;\n\n    float slowTime = iGlobalTime\/3.0;\n    outColor \/= 1.0-bg(aspect, uv, 1.0, slowTime + 3.14);\n    outColor \/= 1.0-bg(aspect, uv, 2.0, slowTime - 1.56);\n    outColor \/= 1.0-bg(aspect, uv, 3.0, slowTime);\n    outColor \/= 1.0-bg(aspect, uv, 4.0, slowTime + 1.56);\n    \n    outColor += scanline(uv, iGlobalTime, green, 1.0, 0.3);\n    outColor += scanline(uv, iGlobalTime-0.1, purple, 0.2, 0.2);\n    outColor += scanline(uv, iGlobalTime*0.7+1.3, green, 1.0, 0.1);\n    outColor += scanline(uv, iGlobalTime*0.7+1.3, purple, 0.2, 0.08);\n    \n    outColor = clamp(outColor, 0.0, 1.0);\n    \n    outColor *= vec3(vignetting(uv, aspect));\n\n    fragColor = vec4(outColor, 1.0);\n}","name":"","description":"","type":"image"}]}}