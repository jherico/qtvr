{"Shader":{"ver":"0.1","info":{"id":"XssGRl","date":"1376992964","viewed":2571,"name":"Sculpture I","username":"iq","description":"Some weird sculpture. It's made of three spheres distorted with noise.","likes":19,"published":3,"flags":0,"tags":["3d","raymarching","noise","distancefield"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ define this for higher quality nosie\n\/\/#define HQ_NOISE\n\n\/\/ Uncomment the following for 3D!\n\/\/#define STEREO \n\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n#ifndef HQ_NOISE\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n#else\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg = mix( mix( texture2D( iChannel0, (uv+ vec2(0.5,0.5))\/256.0, -100.0 ).yx,\n\t\t\t\t        texture2D( iChannel0, (uv+ vec2(1.5,0.5))\/256.0, -100.0 ).yx, f.x ),\n\t\t\t\t   mix( texture2D( iChannel0, (uv+ vec2(0.5,1.5))\/256.0, -100.0 ).yx,\n\t\t\t\t        texture2D( iChannel0, (uv+ vec2(1.5,1.5))\/256.0, -100.0 ).yx, f.x ), f.y );\n\n#endif\t\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\/\/=====================================================\n\nvec3 texturize( sampler2D sa, vec3 p, vec3 n )\n{\n\tvec3 x = texture2D( sa, p.yz ).xyz;\n\tvec3 y = texture2D( sa, p.zx ).xyz;\n\tvec3 z = texture2D( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n\/\/----------------------------------------------------------------\n\n\nvec2 map( vec3 p )\n{\n\tp.y -= 1.5;\n\t\n\tvec3 q = p;\n\n    vec2 res = vec2( 1e10, 0.0 );\n\t\n\tfloat it = floor( iGlobalTime\/6.0 );\n\tfloat ft = fract( iGlobalTime\/6.0 );\n\tfloat tt = it + 1.0 - pow(1.0-ft,5.0);\n\tfloat id = 0.0;\n\tfor( int k=0; k<3; k++ )\n\t{\n\t    vec3 off = -1.0*tt*sin( float(k)*vec3(11.0,3.1,5.5)+vec3(0.0,1.0,2.0));\n\n\t\tp.xz += 2.0*(-1.0 + 2.0*noise( p  + off));\n\t\tp.y += 0.2;\n\n\t\tfloat d = length( p ) - 1.8;\n\n\t\tif( d<res.x ) res=vec2(d,1.0+float(k));\n\t\t\n\t\tp = p.yzx;\n\t}\n\t\n\tres.x *= 0.1*0.5;\n\n\tfloat di = sin(30.0*q.x)*sin(30.0*q.y)*sin(30.0*q.z);\n\tdi = di*di;\n\tres.x += 0.005*di;\n\n\treturn res;\n}\n\nfloat map2( in vec3 p )\n{\n\treturn min( map(p).x, p.y );\n}\n\nvec2 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 8.0;\n\tvec2 res = vec2(1e10,-1.0);\n\n    \/\/ intersect ground plane\t\n\tfloat tp = (0.0-ro.y)\/rd.y;\n    if( tp>0.0 ) {res = vec2(tp,0.0), maxd=min(maxd,tp); }\n\n    \/\/ intersect sculpture\t\n\tfloat precis = 0.001;\n    float h = 1.0;\n    float t = 1.0;\n    float m = -1.0;\n    for( int i=0; i<256; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t\tm = res.y;\n        t += h;\n    }\n\tif( t<maxd && t<res.x ) res=vec2(t,m);\n\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.01,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.01;\n\tfloat h = 1.0;\n    for( int i=0; i<64; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, max(k*h\/t,0.0) );\n\t\tt += clamp( h, 0.02, 0.1 );\n\t\tif( h<0.0001 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, in vec2 pix )\n{\n\tfloat off = 0.1*dot( pix, vec2(1.2,5.3) );\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<16; aoi++ )\n    {\n\t\tvec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47 + off);\n\t\taopos = aopos*aopos*aopos;\n\t\taopos *= sign( dot(aopos,nor) );\n        float dd = clamp( map2( pos + nor*0.05 + aopos )*48.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\ttotao \/= 16.0;\n\t\n    return clamp( totao*totao*1.0, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(0.8,0.4,0.2));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n\t#ifdef STEREO\n\tfloat eyeID = mod(fragCoord.x + mod(fragCoord.y,2.0),2.0);\n    #endif\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\t\n\tfloat an = 10.5 + 0.12*iGlobalTime - 7.0*m.x;\n\n\tvec3 ro = vec3(4.5*sin(an),2.0,4.5*cos(an));\n    vec3 ta = vec3(0.0,1.9,0.0);\n    float cr = 0.2*cos(0.1*an);\n    \/\/ camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(cr),cos(cr),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\t\/\/ create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\t#ifdef STEREO\n\tvec3 fo = ro + rd*7.0; \/\/ put focus plane behind Mike\n\tro -= 0.1*uu*eyeID;    \/\/ eye separation\n\trd = normalize(fo-ro);\n    #endif\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n    float sun = clamp( dot(rd,lig), 0.0, 1.0 );\n\tvec3 bg = mix( 0.6*vec3(0.98,0.99,0.8), 0.8*vec3(0.8,0.6,0.3), pow(1.0-max(0.0,rd.y),4.0) );\n\tvec3 col = bg;\n\tcol += vec3(1.0,0.8,0.4)*1.0*pow( sun, 50.0 );\n\n\t\/\/ raymarch\n    vec2 tmat = intersect(ro,rd);\n    if( tmat.y>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n        vec3 tex = vec3(0.0);\n\t\t\n        float di = sin(30.0*pos.x)*sin(30.0*(pos.y-1.5))*sin(30.0*pos.z);\n\n        \/\/ materials\n\t\tvec4 mate = vec4(0.0);\n\t\tvec2 mate2 = vec2(0.0,1.0);\n\t\tif( tmat.y<0.5 )\n\t\t{\n\t\t\tmate.xyz = vec3(0.5,0.3,0.1);\n\t\t\tmate.xyz = 1.2*vec3(0.8,0.65,0.2);\n\t\t\t\n\t\t\tmate2.x = 1.0;\n            mate2.y = 1.0 - 0.75*(5.0\/(5.0+dot(pos.xz,pos.xz)));\n\t\t\tnor = vec3(0.0,1.0,0.0);\n\t\t\t\n\t\t\ttex = texture2D( iChannel3, pos.xz*0.15 ).xyz;\n\t\t    mate.xyz *= tex;\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n            mate2.x = 1.0;\n\t\t\tmate = vec4(0.3,0.3,0.3,0.8);\n\t\t\tmate.xyz = 0.5 + 0.5*cos( tmat.y*vec3(1.0) + 2.0 + vec3(0.0,0.5,0.8) );\n\t\t\t\n\t\t    tex = texturize( iChannel3, 0.2*pos*vec3(1.0,4.0,1.0), nor ).xyz;\n\t\t    mate.xyz *= tex.xyz;\n\n\t\t    mate.xyz = mix( mate.xyz, vec3(0.2,0.2,0.1)*0.5, 0.6*smoothstep(0.0,1.0,nor.y) );\n\t\t\t\n\t\t\tfloat hh = sin(30.0*pos.y);\n\t\t\t\n\t\t\tmate.xyz += 0.1*(1.0-smoothstep(-0.8,-0.5,hh))*(1.0-clamp((tmat.y-1.0)*4.0,0.0,1.0));\n            mate2.y *= 1.0-0.85*di*di;\t\t\n\t\t\t\n\t\t}\n\n\t\t\/\/ lighting\n\t\tfloat occ = mate2.y  * calcAO( pos, nor, fragCoord );\n\t\t\n\t\t\n        float sky = 0.6 + 0.4*nor.y;\n\t\tfloat bou = clamp(-nor.y,0.0,1.0)*1.0*clamp(1.0-pos.y\/8.0,0.0,1.0);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n        float bac = max(0.3 + 0.7*dot(nor,normalize(vec3(-lig.x,0.0,-lig.z))),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 256.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n        float spe = tex.x*max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), mate2.x*tex.x*2.0 ) );\n\n\t\t\/\/ lights\n\t\tvec3 lin  = 2.9*dif*vec3(1.0,0.90,0.70)*sha*(0.8+0.2*occ);\n\t\t     lin += 0.6*bac*vec3(0.5,0.40,0.25)*occ;\n\t\t     lin += 0.6*sky*vec3(0.6,1.00,1.50)*occ;\n\t\t     lin += 0.6*bou*vec3(0.5,0.45,0.25)*occ;\n             lin += 0.6*fre*vec3(1.0,0.95,0.70)*2.0*mate.w*(0.1+0.9*occ*dif*sha);\n             lin += 4.0*spe*vec3(1.0,1.00,1.00)*occ*(0.2+0.8*fre);\n\t\t\n\t\t\/\/ surface-light interacion\n\t\tcol = mate.xyz * lin;\n\t\tcol += pow(spe,8.0)*0.25*sha*occ;\n\t\t\n\t\tcol = mix( col, bg, 1.0-exp(-0.002*tmat.x*tmat.x) );\n\t}\n\n\t\/\/ sun glow\n    col += vec3(1.0,0.6,0.2)*0.15*pow( sun, 4.0 );\n\n\t\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t\/\/ contrast\n\tcol = col*0.6 + 0.4*col*col*(3.0-2.0*col);\n\n\t\/\/ vigneting\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n    #ifdef STEREO\t\n    col *= vec3( eyeID, 1.0-eyeID, 1.0-eyeID );\t\n\t#endif\n\n    fragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}