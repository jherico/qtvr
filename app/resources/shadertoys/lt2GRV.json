{"Shader":{"ver":"0.1","info":{"id":"lt2GRV","date":"1430584454","viewed":932,"name":"Light Fields","username":"mu6k","description":"Took my terrain from rocket science and added some glowing spheres.","likes":13,"published":3,"flags":0,"tags":["reflection","terrain","raymarch","volumetric","glow"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/* by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License. *\/\n\/* synced to this: https:\/\/www.youtube.com\/watch?v=0NKUpo_xKyQ *\/\n\n\/\/#define motion_blur\n\n#ifdef motion_blur\nfloat time = iGlobalTime + texture2D(iChannel0,gl_FragCoord.xy\/256.0).x\/24.0;\n#else\nfloat time = iGlobalTime;  \/\/i hate the name in the uniforms\n#endif\n\nvoid angularRepeat(const float a, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    v = vec2(cos(an),sin(an))*len;\n}\n\n\nvoid angularRepeat(const float a, const float offset, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    an+=offset;\n    v = vec2(cos(an),sin(an))*len;\n}\n\nfloat mBox(vec3 p, vec3 b)\n{\n\treturn max(max(abs(p.x)-b.x,abs(p.y)-b.y),abs(p.z)-b.z);\n}\n\nfloat mSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\n\nvec2 frot(const float a, in vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n    return v;\n}\n\nvoid rotate(const float a, inout vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n}\n\nfloat dfTerraHills(vec3 p)\n{\n    p.y-=1.0;\n    vec3 pm = p;\n    pm.xz = mod(pm.xz+vec2(8.0),16.0)-vec2(8.0);\n    pm = abs(pm);\n    return (p.y*.8+3.0+pm.x*.1+pm.z*.1);\n}\n\nfloat dfTerra(vec3 p)\n{\n    p.y+=.1;\n    vec3 p2 = p;\n    float height = (sin(p.x*.1)+sin(p.z*.1))*1.5;\n    rotate(.6,p2.xz);\n    return max(dfTerraHills(p2),dfTerraHills(p))+height;\n}\n\n\nfloat dfBalls(vec3 p)\n{\n    vec2 pm = mod(p.xz+5.0,10.0)-5.0;\n    vec2 id = p.xz-pm;\n    float h = dfTerra(vec3(id.x,.0,id.y));\n    h+=sin(id.x*7.1+id.y*17.841+time*sin(id.x*9.1+id.y))*.5;\n    p.y+=h;\n    \n    return length(vec3(pm.x,p.y,pm.y))-.3;\n}\n\nfloat df(vec3 p)\n{\n    return min(dfTerra(p),dfBalls(p));\n}\n\nvec3 nf(vec3 p)\n{\n    vec2 e = vec2(0,0.005);\n    return normalize(vec3(dfTerra(p+e.yxx),dfTerra(p+e.xyx),dfTerra(p+e.xxy)));\n}\n\nvec3 cf(vec2 p)\n{\n    return texture2D(iChannel0,p*.00005).xyz;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float ctime = time*.125+32.0;\n    float stime = ctime - mod(ctime,1.0);\n    float cs0 = sin(stime*141.123);\n    float cs1 = sin(stime*51.124);\n    cs0 = cs0*cs0*cs0*cs0*cs0*4.0;\n    cs1 = cs1*cs1;\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) \/ iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy*.5) \/ iResolution.yy;\n    if (iMouse.w>.2) mouse*=.0;;\n    \n    vec3 pos = vec3(.1,.1,-5);\n    \/\/vec3 dir = normalize(vec3(uv,1.0));\n    vec3 dir = normalize(vec3(uv,1.0));\n    \n    pos.z += time*8.0*cs1+stime*8.0;\n    rotate(.3,pos.xz);\n    rotate(-.1+sin(time*.071*cs0+stime*2.0)*.2,dir.yz);\n    rotate(.3+sin(sin(time*.05*cs0+stime*2.0)*2.0+time*.1*cs0+stime*2.0),dir.xz);\n    \n    \n    float dist,tdist = .0;\n    vec3 fog = vec3(.0);\n    \n    for (int i=0; i<120; i++)\n    {\n        float db, df;\n        dist = min(df = dfTerra(pos),db = dfBalls(pos));\n     \t\/\/dist = df(pos);\n        fog += vec3(0.01\/(1.0+db*db))*dist*cf(pos.xz);\n       \tpos += dist*dir;\n        tdist+=dist;\n        if (dist<0.0001||dist>200.0)break;\n    }\n    \n    vec3 light = normalize(vec3(1,2,3));\n    \n    \n    vec3 skyColor = vec3(.1,.1,.1)*.7;\n    \n    vec3 ambientColor = skyColor*.07;\n    vec3 materialColor = vec3(.5,.5,.5);\n    vec3 emissiveColor = vec3(.0,.0,.0);\n    vec3 reflection = vec3(.0);\n    float diffuse = 1.0;\n    \n    if (dfBalls(pos)<dfTerra(pos))\n    {\n     \tmaterialColor= vec3(.0);\n        emissiveColor = cf(pos.xz)*2.0;\n    }\n    else\n    {\n        diffuse = 1.0\/(1.0+dfBalls(pos));\n        vec3 noi = texture2D(iChannel0,pos.xz).xyz;\n        vec3 col = cf(pos.xz);\n        materialColor = col*noi;\n        vec3 rpos = pos;\n        vec3 rdir = reflect(dir,nf(pos));\n        rdir += (noi.xyz-vec3(.5))*9.0;\n        rdir = normalize(rdir);\n        float dist = .0;\n        for (int i=0; i<10; i++)\n        {\n            dist = dfBalls(rpos);\n            rpos += dist*rdir;\n        }\n        if (dist<.1)\n            reflection = col*noi.x*.5;\n    }\n  \n    \n   \n    float value = \n        df(pos+light)+\n        df(pos+light*.5)*2.0+\n        df(pos+light*.25)*4.0+\n        df(pos+light*.125)*8.0+\n        df(pos+light*.06125)*16.0;\n    \n    value=value*.2+.04;\n    value=min(value,1.0);\n    value=max(.0,value);\n    \n    vec3 normal = nf(pos);\n   \n    vec3 ref = reflect(dir,nf(pos));\n    \/\/float ro = min(max(min(min(df(pos+ref),df(pos+ref*0.25)*4.0), df(pos+ref*.5)*2.0)*.5,.0),1.0);\n   \tfloat ro=1.0;\n    \n    float ao = df(pos+normal*.125)*8.0 +\n        df(pos+normal*.5)*2.0 +\n    \tdf(pos+normal*.25)*4.0 +\n    \tdf(pos+normal*.06125)*16.0;\n    \n    ao=ao*.125+.5;\n    \n    \n    float fres = pow((dot(dir,nf(pos))*.5+.5),2.0);\n    \n    vec3 color = (value*vec3(dot(nf(pos),light)*.5+.5)*.5+ambientColor*ao)*materialColor*diffuse +reflection*fres;\n    color += emissiveColor;\n    \/\/color = vec3(fres);\n    vec3 cSky = skyColor*(1.0-dir.y);\n    if (dist>0.5) color = cSky*.1;\n    \/*else color = mix(cSky,color,1.0\/(1.0+tdist*.005));*\/\n   \t\n    color += fog;\n    \/\/color = fog;\n    \/\/color = reflection;\n    \n    color*=1.3; \/\/boost\n    ;\n    color *= (1.0-pow(length(uv),2.0)*.9);\n    color *= min(time*.1,1.0);\n    color *= 1.5\/(.5+mod(time,8.0)*.125);\n    color = mix(color,vec3(length(color)),length(color)*.5-.1);\n    \n\tfragColor = vec4(pow(color,vec3(1.0\/2.2)),1.0)+texture2D(iChannel0,fragCoord.xy\/256.0)\/128.0;\n    \/\/fragColor = vec4(ro);\n    \/\/fragColor = vec4(ao);\n    \/\/fragColor = vec4(value);\n}","name":"","description":"","type":"image"}]}}