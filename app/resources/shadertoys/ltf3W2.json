{"Shader":{"ver":"0.1","info":{"id":"ltf3W2","date":"1425165856","viewed":808,"name":"smooth minimums","username":"TinyTexel","description":"Smooth minimum functions. When properly adjusted, SMin2 and SMin3 behave similar. SMin1 features a relatively broad 'region of smoothness'.","likes":4,"published":3,"flags":0,"tags":["function","smooth","minimum"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\nfloat Curve(float x, float y)\n{\n    return clamp(1.0 - abs(x-y) * 200.0, 0.0, 1.0);\n}\n\n\n\n\n\/\/float SRamp1(float x, float k)\n\/\/{\n\/\/    return 0.5 * (x - sqrt(k) * rsqrt(k \/ (x * x + k)));\n\/\/}    \n\n\/\/ thingy\nfloat SAbs(float x, float k)\n{\n    return sqrt(x * x + k);\n}\n\nfloat SRamp1(float x, float k)\n{\n    return 0.5 * (x - SAbs(x, k));\n}\n\nfloat SMin1(float a, float b, float k)\n{\n    return a + SRamp1(b - a, k);\n}\n\n\n\/\/ exponential\nfloat SRamp2(float x, float k)\n{\n    return x \/ (1.0 - exp2(x * k));\n}\n\nfloat SMin2(float a, float b, float k)\n{\n    return a + SRamp2(b - a, k);\n}\n\n\n\/\/ polynomial\nfloat SRamp3(float x, float k)\n{\n   float xp = clamp(-x * k + 0.5, 0.0, 1.0);\n   \n   float xp2 = xp * xp;\n    \n   return min(x, xp2 * (xp2 * 0.5 - xp) \/ k);\n}\n\nfloat SMin3(float a, float b, float k)\n{\n    return a + SRamp3(b - a, k);\n}\n\n\n\nfloat FuncA(float x)\n{\n    float a = x * 2.0 - 1.0;\n    \n    return a * a + 0.1;\n}\n\nfloat FuncB(float x)\n{\n    float a = x * 0.25;\n    \n    a *= 0.75 * sin(iGlobalTime);\n    \n    return a + 0.5;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord \/ iResolution.xy;\n    \n    float x = uv.x;\n    float y = uv.y;\n    \n    \n    float ref = Curve(FuncA(x), y) + Curve(FuncB(x), y);\n    \n    vec3 res1 = Curve(SMin1(FuncA(x), FuncB(x), 0.02), y) * vec3(1.0, 0, 0);\n    vec3 res2 = Curve(SMin2(FuncA(x), FuncB(x), 20.0), y) * vec3(0, 1.0, 0);\n    vec3 res3 = Curve(SMin3(FuncA(x), FuncB(x), 2.8), y)  * vec3(0, 0, 1.0);\n\n    \n    fragColor = vec4(res1*1.0 + res2*1.0 + res3*1.0 + ref * 0.25, 1.0);\n}","name":"","description":"","type":"image"}]}}