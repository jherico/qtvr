{"Shader":{"ver":"0.1","info":{"id":"4lSGRR","date":"1451343146","viewed":159,"name":"Testshader B","username":"ambi","description":"Nice swirling colors","likes":5,"published":3,"flags":0,"tags":["fractal","colors"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/Basic fractal by @paulofalcao\n\/\/ modified by ambi\n\nconst int maxIterations=7;\/\/a nice value for fullscreen is 8\n\nfloat circleSize=1.0\/(3.0*pow(2.0,float(maxIterations)));\n\n\/\/generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t\/\/normalize stuff\n\tvec2 uv=iResolution.xy;uv=-.5*(uv-2.0*fragCoord.xy)\/uv.x;\n    float pi = 3.14159265358979323846264;\n\n\t\/\/global rotation and zoom\n\t\/\/uv=rot(uv,iGlobalTime);\n    uv*=2.4;\n\t\n\t\/\/mirror, rotate and scale 6 times...\n\tfloat s=0.3;\n    vec4 col=vec4(1.0,0.0,0.5,1.0);\n\tfor(int i=0;i<maxIterations;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv,iGlobalTime);\n\t\ts=s\/(1.6+sin(iGlobalTime*0.3)*0.3);\n        float m=float(i)*pi;\n        float cl=pow(length(vec2(0.5,0.5)-uv),0.2);\n        col=vec4((0.5+sin((m*1.0 + iGlobalTime)*2.337 +uv.x*m*5.0))*cl,\n                 (0.5+cos((m*2.3 + iGlobalTime)*1.000 +uv.y*m*5.0))*cl,\n                 (0.5+sin((m*0.5 + iGlobalTime)*3.995 -uv.x*m*5.0))*cl,1.0);\n\t}\n\t\n\t\/\/draw a circle\n    float l=length(uv);\n\tfloat c=l-0.1>circleSize?0.0:pow(1.0-l*3.0,2.0);\t\n\n\tfragColor = vec4(c,c,c,1.0)*col;\n}","name":"","description":"","type":"image"}]}}