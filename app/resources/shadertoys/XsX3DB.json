{"Shader":{"ver":"0.1","info":{"id":"XsX3DB","date":"1377969882","viewed":2810,"name":"Banished","username":"Dave_Hoskins","description":"[*RE-WIND TO  SYNC AUDIO*] In the dog house again... .. . Should to be full-screen to see the rain effect properly. <img src=\"\/img\/emoticonHappy.png\"\/> Mouse drag to look.<br\/>Press rewind to sync the audio correctly.<br\/><br\/>","likes":47,"published":3,"flags":8,"tags":["3d","raymarching","banished","dog"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":3,"src":"\/presets\/tex02.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Banished. By David Hoskins. August 2013.\n\/\/ Back in the Dog House again!... .. . *sigh*\n\nfloat\tsigh;\nmat3\tturn;\nvec3\tlightning;\nfloat\tnose;\n\n\/\/----------------------------------------------------------------------------------------\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel3, (uv+ 0.5)\/256.0, -99.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat  Sphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat Roof( vec3 p)\n{\n\tvec3 b = vec3(1.3, .05, 1.0);\n\tp.x = abs(p.x);\n  \tp.y += p.x*.75;\n\treturn length(max(abs(p)-b,0.0))-.03;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat AboveRoof(vec3 p)\n{\n\tp.x = abs(p.x);\n  \tp.y += p.x*.75;\n\treturn -p.y+1.97;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat RoundBox( vec3 p, vec3 b)\n{\n\treturn length(max(abs(p)-b,0.0))-.02;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat Torus( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length(p.xz)-t.x,p.y);\n  return length(q)-t.y;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat Capsule( vec3 p, vec3 a, vec3 b, float r )\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\t\n\treturn length( pa - ba*h ) - r;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat Conk( vec3 p, vec2 h )\n{\n    vec3 q = abs(p);\n    float d = max(q.z-h.y*8.6,max(q.x*.3466025+p.y*.5,p.y*.5)-h.x*.55);\n\td = mix(Capsule(p, vec3(0.0,-.5,-0.4), vec3(.0,0.4,1.2), 0.2), d, .4);\n\treturn d;\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\n\/\/----------------------------------------------------------------------------------------\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\n\/\/----------------------------------------------------------------------------------------\nvec2 Map( in vec3 pos )\n{\t\/\/ Floor...\n    vec2 res = vec2( pos.y, -1.0);\n\t\/\/ Dog...\n\tvec3 p = turn * pos;\n\tres = opU( res, vec2(Conk( p-vec3(0.0,.95+sigh, .0), vec2(0.25,0.05) ), 1.0 ));\n\tres = opU(res, vec2(Sphere(p-vec3(0.0, .58+sigh+nose, -.4),  .165), 5.0));\n\t\/\/ House...\n\tres = opU( res, vec2(Roof(pos-vec3(0.0, 2.4, .5)), 2.0 ));\n\tfloat d = RoundBox(pos-vec3(0.0, 0.5, -.3), vec3(1.2, 2.5, .05));\n\td = opS(d, Sphere(pos-vec3(0.0, 0.8, -.3), .7));\n\td = opS(d, RoundBox(pos-vec3(0.0, 0.3, -.3), vec3(.675, .5, .2)));\n\td = opS(d, AboveRoof(pos-vec3(0.0, 0.5, -.3)));\n\tres = opU(res, vec2(d, 3.0));\n\tres = opU(res, vec2(RoundBox(pos-vec3(-1.2, .26, .52), vec3(.03, 1.1, .9)), 3.0));\n\tres = opU(res, vec2(RoundBox(pos-vec3(+1.2, .26, .52), vec3(.03, 1.1, .9)), 3.0));\n\tres = opU(res, vec2(-pos.z+1.5, 4.0));\n\t\n\t\/\/ Bone on front...\n\td = Capsule(pos, vec3(-.2, 1.65, -.3), vec3(.2, 1.65, -.3), .092);\n\t\/\/ Spheres for bone ends are one sphere reflected into four...\t\n\tp = vec3(abs(pos.xy-vec2(0.0, 1.65)), pos.z);\n\td = min(d, Sphere(p- vec3(0.23, .04, -.28), .115));\n\t\/\/ Now slice the front off bone...\n\td = opS(d, pos.z+.38);\n\tres = opU(res, vec2(d, 6.0));\n\t\n    return res;\n}\n\n\/\/----------------------------------------------------------------------------------------\nvec2 RayMarch( in vec3 ro, in vec3 rd)\n{\n\tfloat precis = 0.01;\n\tfloat t = 2.0;\n\t\n\tvec2 res = vec2(precis*2.0, -1.0);\n    for( int i = 0; i < 40; i++ )\n    {\n        if(res.x > precis)\n\t\t{\n\t\t\tt += res.x*.65;\n\t\t\tres = Map( ro+rd*t );\n\t\t}\n    }\n\treturn vec2( t, res.y);\t\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat Shadow( in vec3 ro, in vec3 rd, in float maxt)\n{\n\tfloat res = 1.0;\n    float dt = 0.04;\n    float t = .02;\n    for( int i=0; i < 20; i++ )\n    {\n        float h = Map( ro + rd*t ).x;\n        res = min( res, 2.0*h\/t );\n        t += max( 0.15, dt );\n    }\n    return res;\n}\n\n\/\/----------------------------------------------------------------------------------------\nvec3 Normal( in vec3 pos )\n{\n\tvec2 eps = vec2( 0.0005, 0.0);\n\tvec3 nor = vec3(\n\t    Map(pos+eps.xyy).x - Map(pos-eps.xyy).x,\n\t    Map(pos+eps.yxy).x - Map(pos-eps.yxy).x,\n\t    Map(pos+eps.yyx).x - Map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\/\/----------------------------------------------------------------------------------------\nfloat WoodBump( in vec2 pos )\n{\n    float y = mod( pos.y*3.0, 1.0 );\n    float f = smoothstep( 0.0, 0.05, y ) - smoothstep( 0.95, 1.0, y );\n    return f-.5;\n}\n\n\/\/----------------------------------------------------------------------------------------\nmat3 RotMat(vec3 v, float angle)\n{\n\tv = normalize(v);\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\t\n\treturn mat3(c + (1.0 - c) * v.x * v.x, (1.0 - c) * v.x * v.y - s * v.z, (1.0 - c) * v.x * v.z + s * v.y,\n\t\t(1.0 - c) * v.x * v.y + s * v.z, c + (1.0 - c) * v.y * v.y, (1.0 - c) * v.y * v.z - s * v.x,\n\t\t(1.0 - c) * v.x * v.z - s * v.y, (1.0 - c) * v.y * v.z + s * v.x, c + (1.0 - c) * v.z * v.z\n\t\t);\n}\n\n\/\/----------------------------------------------------------------------------------------\nvec3 Render( in vec3 ro, in vec3 rd )\n{ \n\tvec3 col;\n\tlightning = vec3(0.0);\n\tvec2 res = RayMarch(ro, rd);\n\tfloat t = res.x;\n\tfloat m = res.y;\n\t\n   \tvec3 pos = ro + t*rd;\n\tvec3 nor = Normal( pos );\n\tfloat shiny = 0.0;\n\tif (m < .5)\n\t{\n\t\t\/\/ Ground...\n\t\tcol = texture2D(iChannel2, pos.xz*vec2(.2)+.5).xxx*.4+vec3(.04);\n\t\tcol = col*col;\n\t}else if (m < 1.5)\n\t{\n\t\t\/\/ Dog fur...\n\t\tcol = mix(vec3(.5, 0.5, 0.5), vec3(.3), Noise(pos*vec3(114.0, 13.0, 114.0)));\n\t\tshiny = .5;\n\t}else if (m < 2.5)\n\t{\n\t\t\/\/ Roof...\n\t\tcol = mix(vec3(.4, 0.0, 0.0), vec3(.15, 0., 0.0), min(pow(abs(Noise(pos*14.0)), 10.0)*40.0, .5));\n\t\tshiny = 1.5;\n\t}else if (m < 3.5)\n\t{\n\t\t\/\/ Wood...\n\t\tcol = texture2D(iChannel1, pos.xy*vec2(.5, 1.15)).xyz+vec3(.0, .1, 0.1);\n\t\tnor.y += WoodBump(pos.xy)*.5;\n\t\tnor = normalize(nor);\n\t\tshiny = .5;\n\t}else if (m < 4.5)\n\t{\n\t\t\/\/ Wall...\n\t\tcol = texture2D(iChannel0, pos.xy*vec2(.2, .5)).xyz;\n\t\tcol *= col*col*2.5;\n\t\tnor += col;\n\t\tshiny = 1.5;\n\t}else if (m < 5.5)\n\t{\n\t\tcol = vec3(.01, 0.01, 0.0);\n\t\tshiny = .8;\n\t}else\n\t{\n\t\tcol = vec3(.7);\n\t}\n\t\/\/ Rain washing down noise...\n\tfloat f = Noise(pos*vec3(50.0, 5.0, 50.0)+vec3(0.0, iGlobalTime*7.0, 0.0));\n\tcol += f * .07;\n\tshiny *= f*.25;\n\tvec3 lig = normalize( vec3(-0.3, 1.3, -0.5) );\n       float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n\tfloat sh = Shadow( pos, lig, 10.0);\n\tdif *= sh;\n\t\n\tvec3 brdf = 1.50*dif*vec3(1.00,0.90,0.70);\n\t\n\tfloat ti = mod(iGlobalTime, 12.0);\n\tf = 0.0;\n\tfor (int i = 0; i < 4; i++)\n\t{\n\t\tf+=.25;\n\t\tif (i == 2) f-=.1;\n\t\tlightning = smoothstep(1.3+f,1.35+f, ti) * smoothstep(1.8+f,1.4+f, ti)*vec3(1.9, 1.9, 3.7)*sh;\n\t\tbrdf += lightning;\n\t\tshiny += lightning.x;\n\t\tshiny = clamp(shiny, 0.0, 1.0);\n\t}\n\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\tfloat spe = sh*pow(max(pp, 0.0),2.0)*shiny;\n\n\tcol = (col*brdf + spe) * exp(-0.0005*t*t*t*t);\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\n\/\/----------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    vec2 mo = iMouse.xy;\n\t\/\/ Lift head...\n\tsigh = cos(iGlobalTime*1.2+1.5)*.03 + sin(iGlobalTime*.746)*.03;\n\t\/\/ Sniff stuff...\n\tfloat ti = mod(iGlobalTime, 9.0);\n\tfloat f = floor(mod(iGlobalTime\/9., 2.0));\n\tfloat r = (smoothstep(2.0, 3.0, ti) * smoothstep(8.0, 5.0, ti)) * .4;\n\t\/\/ Left or right rotation...\n\tif (f == 0.0)\n\t\tturn = RotMat(vec3(.1, 0.5, .0), r);\n\telse\n\t\tturn = RotMat(vec3(.1, -0.5, .0), r);\n\t\/\/ Do nose stuff... snff, sniff, sniiiff...\n\tnose = smoothstep(3.0, 3.1, ti)* smoothstep(3.2, 3.1, ti)*.007;\n\tnose += smoothstep(3.2, 3.3, ti)* smoothstep(3.5, 3.3, ti)*.01;\n\tnose += smoothstep(3.7, 3.9, ti)* smoothstep(4.4, 3.8, ti)*.02;\n\tsigh += nose*.75;\n\tmo = (mo \/ iResolution.xy) - .5;\n\t\n\tif (iMouse.z == 0.0)\n\t\tmo = vec2(.25,.0);\n\n\t\/\/ Camera...\n\tvec3 origin = vec3(6.0*mo.x, 3.0 + 4.0*mo.y, -4.0);\n\tvec3 target = vec3( 0.0, 0.8, 1.2 );\n\t\n\tvec3 cw = normalize( target-origin);\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = ( cross(cu,cw) );\n\tvec3 ray = normalize( p.x*cu + p.y*cv + 2.5*cw );\n\n\t\/\/ Do the pixel colours...\t\n    vec3 col = Render(origin, ray);\n\t\n\t\/\/ Tweek the colour...\n\tcol = pow( abs(col), vec3(.5));\n\t\/\/ Ye olde vignette fx...\n\tcol *= pow( abs(65.0*q.x*q.y*(1.0-q.x)*(1.0-q.y)), .4 );\n\t\n\t\/\/ Rain & Lightning together... \n\tvec2 st =  p * vec2(.5, .01)+vec2(iGlobalTime*.3-q.y*.6*-cw.x, iGlobalTime*.3);\n\t\/\/ I'm adding two parts of the texture to stop repetition...\n\tf = texture2D(iChannel3, st).y * texture2D(iChannel3, st*.773).x * 1.55;\n\tf = clamp(pow(abs(f), 23.0) * 13.0, 0.0, q.y*.14) * (lightning.x*.7+1.0);\n\tcol += f;\n\t\/\/ Fade in...\n\tcol *= min(iGlobalTime, 1.0);\n    fragColor=vec4(clamp(col, 0.0, 1.0), 1.0 );\n\t\n}\n\n\/\/----------------------------------------------------------------------------------------","name":"","description":"","type":"image"},{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/======================================================================================================\nvec2 Rain(float n)\n{\n    \/\/ Splattering on roof sound mixed with ambient noise.\n    float vary = sin(n * .1) * .5;\n    vec2 pos = vec2(n * (5.7331+vary), n * (43.66927 - vary));\n    \/\/ High pass the sound by subtracting a lower mipmap...\n    vec2 top = (texture2D( iChannel0, pos, -100.0).xy) * 2.0;\n    vec2 bot = (texture2D( iChannel0, pos,   -5.7).xy) * 2.0;\n    \n\treturn top-bot + (texture2D( iChannel1, pos,   -100.0).xy-.5)* .5;\n}\n\n\/\/======================================================================================================\nvec2 Thunder(float n, float pitch, float time)\n{\n    vec2 top = (texture2D( iChannel0, vec2(n*pitch*4.88238+time, n*pitch*3.834181), -100.0).xz-.5)* 2.0;\n\treturn top;\n}\n\n\/\/======================================================================================================\nfloat Noise(float n)\n{\n    return (texture2D( iChannel1, vec2(n*343.88238, n*153.834181), -100.0).x-.5)* 2.0;\n}\n\n\/\/======================================================================================================\nvec2 mainSound(float time)\n{\n    vec2 audio = Rain(time) * .6;\n    \n    float ti  = mod(time - .4, 12.0);\n\tfloat lightning = smoothstep(1.5, 2.2, ti) * smoothstep(9.0, 2.2, ti);\n    audio += Thunder(ti, lightning + .75, time) * lightning;\n    \n    ti = mod(time, 9.0);\n\tfloat nose = smoothstep(3.0, 3.1, ti)* smoothstep(3.2, 3.1, ti)*.6;\n\tnose += smoothstep(3.2, 3.3, ti)* smoothstep(3.5, 3.3, ti)*.3;\n\tnose += smoothstep(3.7, 3.9, ti)* smoothstep(4.4, 3.8, ti)*.7;\n    float sniff = Noise(time) * nose;\n  \taudio += vec2(sniff);\n\n    return clamp(audio, -1.0, 1.0) * (smoothstep(0.0, 3.0, time) * smoothstep(60.0, 50.0, time));\n}","name":"","description":"","type":"sound"}]}}