{"Shader":{"ver":"0.1","info":{"id":"MtBGRt","date":"1434685452","viewed":1228,"name":"Solines","username":"poljere","description":"One more reactive shader in my little collection, in this case just playing around with color and simple shapes.<br\/> * Yellow Manipus <a href=\"https:\/\/www.shadertoy.com\/view\/ltB3RK\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/ltB3RK<\/a><br\/> * Twisted Rings <a href=\"https:\/\/www.shadertoy.com\/view\/Xtj3DW\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/Xtj3DW<\/a>","likes":19,"published":3,"flags":4,"tags":["2d","sound","music","audio","microphone"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":32,"src":"\/presets\/mic.png","ctype":"mic","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Pol Jeremias - pol\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define SOUND_MULTIPLIER 1.0\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy \/ iResolution.xy);\n    uv -= vec2(0.5);\n    uv.x *= iResolution.x\/iResolution.y;\n    \n    \/\/ Calculate polar coordinates\n    float r = length(uv);\n    float a = atan(uv.y, uv.x);\n       \n    \/\/ Draw the lines\n    const float it = 5.0;\n    float c = 0.0;\n    for( float i = 0.0 ; i < it ; i += 1.0 )\n    {\n        float i01 = i \/ it;\n        float rnd = texture2D( iChannel0, vec2(i01)).x;\n        float react = SOUND_MULTIPLIER * texture2D( iChannel1, vec2(i01, 0.0) ).x;    \n        \n        float c1 = (uv.x + 1.1 + react) * 0.004 * abs( 1.0 \/ sin( (uv.y +0.25) +\n                                                         sin(uv.x * 4.0 * rnd + rnd * 7.0 + iGlobalTime * 0.75) *\n                                                                 (0.01 + 0.15*react)) );\n        c = clamp(c + c1, 0.0, 1.0);\n    }\n    \n    float s = 0.0;\n    const float it2 = 20.0;\n    for( float i = 0.0 ; i < it2 ; i += 1.0 )\n    {\n        float i01 = i \/ it2;       \n        float react = SOUND_MULTIPLIER * texture2D( iChannel1, vec2(i01, 0.0) ).x;  \n        vec2 rnd = texture2D( iChannel0, vec2(i01)).xy;\n        vec2 rnd2 = rnd - 0.5;\n      \n        rnd2 = vec2(0.85*sin(rnd2.x * 200.0 + rnd2.y * iGlobalTime * 0.1), \n                    -0.1 - 0.15 * sin(rnd2.x * rnd2.x * 200.0 + iGlobalTime  * rnd2.x * 0.25));\n        \n        float r1 = 1.0 - length(uv - rnd2);\n        float rad = ( 1.0 - clamp(0.03 * rnd.y + react * 0.05, 0.0, 1.0) );\n\n        r1 = smoothstep(rad, rad + 0.015, r1);\n        s += r1;\n    }\n    \n    \n    \/\/ Calculate the final color mixing lines and backgrounds\n    vec3 bg = mix( vec3(0.93, 0.71, 0.62), vec3(0.9, 0.44, 0.44), r);\n    bg = mix(bg, vec3(0.9, 0.91, 0.62), c);\n    bg = mix(bg, vec3(0.9, 0.91, 0.82), s);\n    \n    fragColor = vec4(bg, 1.0);\n}","name":"","description":"","type":"image"}]}}