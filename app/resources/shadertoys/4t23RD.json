{"Shader":{"ver":"0.1","info":{"id":"4t23RD","date":"1427323378","viewed":744,"name":"Plummer galaxy twist","username":"davidjonsson","description":"Use the mouse and animation to get different whirl patterns. Stars have a Plummer speed distribution, mid cross section ( proof read if you wish, line 61). Mouse.x is time multiplier. Mouse.y is the characteristic radius of the Plummer sphere. ","likes":3,"published":3,"flags":0,"tags":["galaxy","whirl","starlight","plummersphere"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Galaxy rotation of a Plummer mass distribution by davidjonsson, based on beautypi\/2012\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Plummer sphere PHI = -GM\/sqrt(r^2+a^2)\n\/\/ Toomre-Kuzmin disk PHI = -GM\/sqrt(omega^2+(a+|z|)^2)\n\/\/ galactic rotation curve v(r) = (r dPHI\/dr)^.5\n\n#define GM 1.0\n\nmat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nvec2 mouse = iMouse.xy\/iResolution.xy;\nvec2 mouseDown = iMouse.zw\/iResolution.xy;\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0;\n\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    return res;\n}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.50000*noise( p ); p = m*p*2.02;\n    f += 0.25000*noise( p ); p = m*p*2.03;\n    f += 0.12500*noise( p ); p = m*p*2.01;\n    f += 0.06250*noise( p ); p = m*p*2.04;\n    f += 0.03125*noise( p );\n\n    return f\/0.984375;\n}\n\nfloat length2( vec2 p )\n{\n    float ax = abs(p.x);\n    float ay = abs(p.y);\n\n    return pow( pow(ax,4.0) + pow(ay,4.0), 1.0\/4.0 );\n}\n\nfloat timeOscillation() {\n\treturn .5*(1. + sin(1.1 * iGlobalTime));\n}\n\nfloat v(in float a, in float r) {\n\t\/\/Plummer \n    return r*sqrt(GM) * pow(a*a + r*r, -0.75);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n\n    float r = length( p );\n    float a = atan( p.y, p.x );\n\n    a += v(mouse.y*10., r) * mouse.x*5. * iGlobalTime * 10.;\n\n    vec3 col = vec3( 0.3, 0.3, 0.1);\n\n    float f = fbm(vec2(sin(2. * a), r));\n\n\/\/\/\/ white in the middle    \n    col = mix( col, vec3(1.,1.,1.), 1.0-smoothstep(0.05,.6,r) );\n\n    col = mix( col, vec3(1.0,1.0,1.0), f );\n\/\/\/\/ darker edge \n    col = mix( col, vec3(0.,0.,0.), 1.0-smoothstep(1.3,.4,r) );\n \n\tfragColor = vec4(col,1.0);\n}\n\n\n","name":"","description":"","type":"image"}]}}