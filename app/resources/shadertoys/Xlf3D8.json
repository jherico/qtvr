{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "Xlf3D8",
				"date": "1421287180",
				"viewed": 116,
				"name": "scifi",
				"username": "bergi",
				"description": "More explorations of the Kali set. <br\/>Watch for at least 5 hours, or play with the offset in line 39.",
				"likes": 3,
				"published": 3,
				"tags": 
				[
					"raymarching",
					"space",
					"alien",
					"science"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						
					],

					"outputs": 
					[
						
					],

					"code": "/*  i like artefacts\n \n Another nice island in the absdot world\n https://www.shadertoy.com/view/4tX3W8\n (lengthy fractal forums url ommitted for style)\n\n aGPL3 / (c) 2014 stefan berke\n\n Watch for at least 5 hours, or play with the offset in line 39.\n But beware, this is like those Planetarium shows where the camera \n travels with approximately 1000 light years per second to show us \n the beauty of the milky way.\n It's not related to our daily experience. \n The Kali set gets really interesting when we zoom in on a particular\n spot. We just need the coordinates!\n */\n\n#pragma vr\n\n#define PATH 3        // 1-3\n#define NUM_ITER 19      // very depended value\n#define NUM_TEX_ITER 60    // iterations for texture\n#define NORM_EPS 0.002  \n#define NUM_TRACE 100\n#define PRECISSION 0.1\n#define FOG_DIST 0.05\n#define DIMENSIONS 3    // 3 or 4 - complexity switch\n\n#if DIMENSIONS == 3\n// 3 coordinates to navigate through the sets\n// be careful! this is probably where arthur dent lost fenchurch.\n#define MAGIC_PARAM vec3(-.4+0.3*sin(sec/7.), -.8, -1.5 + 0.01*sin(sec/3.))\n\n#elif DIMENSIONS == 4\n// a 4 dimensional key to our three-dimensional space\n#define MAGIC_PARAM vec4(-.4+0.3*sin(sec/17.), -.31, -1.5 + 0.01*sin(sec/13.3), -0.5)\n#endif\n\n// shader-local global animation time\n// add an offset to jump to other places\nfloat sec = iGlobalTime / 5. + 124.;\n\n// -------------------------- fractal -----------------------------\n\n#if DIMENSIONS == 3\n// kali set\n// position range depending on parameters\n// but usually at least +/- 0.01 to 2.0 or even (even much) larger\n// check the camera path's in main(), it's tiny!\nfloat duckball_s(in vec3 p)\n{\n  float mag;\n  for (int i = 0; i < NUM_ITER; ++i)\n  {\n    mag = dot(p, p);\n    p = abs(p) / mag + MAGIC_PARAM;\n  }\n  return mag;\n}\n\n// same as above but in 'some' color\nvec3 duckball_color(in vec3 p)\n{\n  vec3 col = vec3(0.);\n  float mag;\n  for (int i = 0; i < NUM_TEX_ITER; ++i)\n  {\n    mag = dot(p, p);\n    p = abs(p) / mag + MAGIC_PARAM;\n    col += p;\n  }\n  return min(vec3(1.), 2.0 * col / float(NUM_TEX_ITER));\n}\n\n#elif DIMENSIONS == 4\n\nfloat duckball_s(in vec3 pos)\n{\n  vec4 p = vec4(pos, 0.1);\n  float mag;\n  for (int i = 0; i < NUM_ITER; ++i)\n  {\n    mag = dot(p, p);\n    p = abs(p) / mag + MAGIC_PARAM;\n  }\n  // it seems much more crowded in 4d\n  // so increase the distance to surfaces\n  return mag * 2.7;\n}\n\nvec3 duckball_color(in vec3 pos)\n{\n  vec4 p = vec4(pos, 0.1), col = vec4(0.);\n  float mag;\n  for (int i = 0; i < NUM_TEX_ITER; ++i)\n  {\n    mag = dot(p, p);\n    p = abs(p) / mag + MAGIC_PARAM;\n    col += p;\n  }\n  return min(vec3(1.), col.xyz / float(NUM_TEX_ITER));\n}\n\n#endif\n\n// ---- canonical shader magic ----\n\nfloat scene_d(in vec3 p)\n{\n  return min(50.1+50.*sin(sec/12.), duckball_s(p)*0.01-0.004);\n}\n\nvec3 scene_n(in vec3 p)\n{\n  const vec3 e = vec3(NORM_EPS, 0., 0.);\n  return normalize(vec3(\n          scene_d(p + e.xyy) - scene_d(p - e.xyy),\n          scene_d(p + e.yxy) - scene_d(p - e.yxy),\n          scene_d(p + e.yyx) - scene_d(p - e.yyx) ));\n}\n\nvec3 scene_color(in vec3 p)\n{\n  vec3 ambcol =\n  vec3(0.9,0.5,0.1) * (0.2+duckball_color(p));\n\n  // lighting\n  float dull = max(0., dot(vec3(1.), scene_n(p)));\n  return ambcol * (0.3+0.7*dull);\n}\n\nvec3 sky_color(in vec3 pos, in vec3 dir)\n{\n  vec3 c = vec3(0.2,0.6,0.9);\n  return c * 0.5 + 0.1 * duckball_color(dir + 0.3 * pos);\n}\n\nvec3 traceRay(in vec3 pos, in vec3 dir)\n{\n  vec3 p;\n  float t = 0.;\n  for (int i=0; i<NUM_TRACE; ++i)\n  {\n    p = pos + t * dir;\n    float d = scene_d(p);\n\n    // increase distance for too close surfaces\n    d += 0.01*(1. - smoothstep(0.01, 0.011, t));\n\n    //  if (d < 0.001)\n    //    break;\n\n    t += d * PRECISSION;\n  }\n\n  return mix(scene_color(p), sky_color(p, dir), min(2.6, t/FOG_DIST));\n}\n\n// ---------- helper --------\n\nvec2 rotate(in vec2 v, float r)\n{\n  float s = sin(r), c = cos(r);\n  return vec2(v.x * c - v.y * s, v.x * s + v.y * c);\n}\n\nvoid main(void) {\n  vec2 uv = gl_FragCoord.xy / iResolution.xy * 2. - 1.;\n  uv.x *= float(iResolution.x) / float(iResolution.y);\n\n  // ray direction (cheap sphere section)\n  vec3 dir = normalize(iDir);\n\n  vec3 pos = vec3(0. + 0.25 * sin(sec / 47.), 0. + 0.85 * sin(sec / 17.),\n      1. + 0.95 * sin(sec / 20.));\n  dir.xy = rotate(dir.xy, sec * 0.7 + sin(sec * 0.41));\n  dir.xz = rotate(dir.xz, sec * 0.6);\n\n  // run\n  vec3 col = traceRay(pos, dir);\n\n  gl_FragColor = vec4(traceRay(pos, dir), 1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}