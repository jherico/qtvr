{"Shader":{"ver":"0.1","info":{"id":"MtfXDN","date":"1436835063","viewed":857,"name":"Blob eat blob Reduced (251c)","username":"aiekick","description":"Reduced version of <a href=\"https:\/\/www.shadertoy.com\/view\/ldjSWD\"  class=\"regular\" target=\"_blank\">Blob eat blob<\/a><br\/><br\/>1092c to 258c","likes":1,"published":3,"flags":0,"tags":["blob","eat"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\/\/ 215 by coyote\n#define k(o) 1. - dot(V=v-f.o,V)\/dot(f,f)\nvoid mainImage( out vec4 f, vec2 v ) {\n\n    f = iResolution.xyzz;\n    vec2 V = v - .5*f.xy; float r=length(V);\n    r = abs(V.x\/r - cos(r*.1 + iDate.w * 5.));    \n    f = r<.5 ? f-f : r*.5*vec4( k(z)+k(zy), k(xy)+k(zy), k(xz), 1);\n}\n\n\/* 227 by FabriceNeyret2\n#define k(o) vec2(0, 1. - dot(V=v-f.o,V)\/dot(f,f) ).\n\nvoid mainImage( out vec4 f, vec2 v ) {\n\n    f.xyz = iResolution; \n\tvec2 V = v - .5*f.xy; float r=length(V);\n    \n   \tr = abs(V.x\/r - cos(r*.1 + iDate.w * 5.));    \n    f = k(z)yxxy +\tk(xz)xxyy + k(xy)xyxy + k(zy)yyxy;\n    f *= r < .5 ? 0. : r*.5;\n}\n*\/\n    \n\/* 251 by 104\n#define k(o) (1. - dot(d=v-f.o,d)\/r) * vec2(0,1).\nvoid mainImage( out vec4 f, vec2 v )\n{\n    f.xyz = iResolution; \/\/ iResolution.z = 0. for the moment :)\n\tvec2 V = v - (f.xy * .5),d;\n    \n    float r = dot(f, f);\n    \n    f = k(z)yxxy +\tk(xz)xxyy + k(xy)xyxy + k(zy)yyxy;\n\t\n   \tr = abs(cos(atan(V.y, V.x)) - cos((length(V)*.1 + iDate.w * 5.)))*.5;\n    \n    f *= r < .25?0.:r;\n}\n*\/\n\n\/* 258 by me\n#define k(o) (1. - dot(d=v-R.o,d)\/r) * c.\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec3 R = iResolution; \/\/ iResolution.z = 0. for the moment :)\n\tvec2 V = v - (R.xy * .5),d,c=vec2(0,1);\n    \n    float r = dot(R, R);\n    \n    f = k(z)yxxy +\tk(xz)xxyy + k(xy)xyxy + k(zy)yyxy;\n\t\n    r = abs(cos(atan(V.y, V.x)) - cos((length(V)\/10. + iDate.w * 5.)));\n\n    f *= (r < .5)?0.:r*.5;\n}\n*\/\n\n\/* 454c chars by me\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy,d,c=vec2(0,1);\n\tvec2 uv = v - (iResolution.xy * 0.5);\n    \n    float rem = abs(cos(atan(uv.y, uv.x)) - cos((length(uv) + iDate.w * 50.) \/ 10.));\n\n\tfloat tar = dot(R, R);\/\/toal area\n\n    vec4 res = (tar - dot(v, v)) \/ tar * vec4(1, 0, 0, 1);\n    res += (tar - dot((d= v - vec2(R.x, 0)), d)) \/ tar * vec4(0, 0, 1, 1);\n    res += (tar - dot((d= v -  R), d)) \/ tar * vec4(0, 1, 0, 1);\n    res += (tar - dot((d= v - vec2(0, R.y)), d)) \/ tar * vec4(1, 1, 0, 1);\n\n    f = res * 0.5;\n    \n\tif (rem < 0.5) \n\t\tf *= vec4(vec3(0), 1.0);\n\telse\n\t\tf *= vec4(vec3(rem), 1.0);\n}\n*\/\n\n\/* original 1092 chars\n#define alpha 0.0\n#define beta 10.0\n\nvec4 getCornerColors(vec2 coord)\n{\n    vec4 cornerColors[4];\n\t\n    cornerColors[0] = vec4(1.0, 0, 0, 1.0);\n    cornerColors[1] = vec4(0, 0, 1.0, 1.0);\n    cornerColors[2] = vec4(0, 1.0, 0.0, 1.0);\n    cornerColors[3] = vec4(1.0, 1.0, 0.0, 1.0);\n        \n    vec2 cornerCoords[4];\n    cornerCoords[0] = vec2(0);\n    cornerCoords[1] = vec2(1, 0);\n    cornerCoords[2] = vec2(1);\n    cornerCoords[3] = vec2(0, 1);\n\n    \n\tvec4 result = vec4(0.0);\n\n\tfloat totalArea = dot(iResolution.xy, iResolution.xy);\n\n\tfor(int i = 0; i < 4; i++)\n\t{\n\t\tvec2 cCoord = cornerCoords[i] * iResolution.xy;\n\n\t\tvec2 diff = coord - cCoord;\n\n\t\tfloat area = dot(diff, diff);\n\n\t\tresult += ((totalArea - area) \/ totalArea) * cornerColors[i];\n\t}\n\n\treturn result;\n}\n\nvec4 spiral4(vec2 coord)\n{\t\n\tfloat alpha_t = alpha - iGlobalTime * 50.0;\n\n\tfloat x = coord.x;\n\tfloat y = coord.y;\n\n\tfloat r = sqrt(dot(coord, coord));\n\n\tfloat phi = atan(y, x);\n\n\tfloat phi_r = (r - alpha_t) \/ beta;\n\n\tfloat r_phi = alpha_t + (beta * phi);\n\n\tfloat remainder = abs(cos(phi) - cos(phi_r));\n\n\tif (remainder < 0.5)\n\t{\n\t\treturn vec4(vec3(0), 1.0);\n\t}\n\telse\n\t{\n\t\treturn vec4(vec3(remainder), 1.0);\n\t}\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy - (iResolution.xy * 0.5);\n\t\/\/fragColor = spiral4(uv) * vec4(uv,0.5+0.5*sin(iGlobalTime),1.0);\n    fragColor = spiral4(uv) * (getCornerColors(fragCoord.xy) * 0.5);\n}*\/","name":"","description":"","type":"image"}]}}