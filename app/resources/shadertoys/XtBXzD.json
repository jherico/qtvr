{"Shader":{"ver":"0.1","info":{"id":"XtBXzD","date":"1441856794","viewed":874,"name":"arc segment","username":"makoConstruct","description":"Renders smoothed arc segments.","likes":2,"published":3,"flags":0,"tags":["circle","arc","smoothed"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\nfloat sq(float a){ return a*a; }\nfloat clampUnit(float a){ return clamp(a,0.0,1.0); }\nvec2 orthoCloc(vec2 b){ return vec2(b.y, -b.x); }\nvec2 orthoCoun(vec2 b){ return vec2(-b.y, b.x); }\n\nfloat circleOpacity(vec2 uv, float pixelSize, float innerRadius, vec2 angleUnit){\n\tvec2 relToCenter = (uv - vec2(0.5,0.5))*2.0;\n\tfloat distSquared = dot(relToCenter,relToCenter);\n\tfloat fringeSpan = 2.8*pixelSize;\n\tfloat halfFringeSpan = fringeSpan\/2.0;\n\tfloat outerInnerEdge = sq(1.0 - halfFringeSpan); \n    float innerFade = (max(distSquared, sq(fringeSpan)) - sq(innerRadius - halfFringeSpan))\/(sq(innerRadius + halfFringeSpan) - sq(innerRadius - halfFringeSpan));\n    float outerFade =  1.0 - (distSquared - outerInnerEdge)\/((1.0 + halfFringeSpan) - outerInnerEdge);\n    float angleFade;\n    float distFromAngleUnit = 1.0 - dot(orthoCloc(relToCenter),angleUnit)\/fringeSpan;\n    float distFromXAxis = (relToCenter.y + fringeSpan)\/fringeSpan;\n    if(angleUnit.y > 0.0){\n        angleFade = min(distFromAngleUnit, distFromXAxis);\n    }else{\n        angleFade = max(distFromAngleUnit, distFromXAxis);\n    }\n\treturn clampUnit(min(min(innerFade, outerFade), angleFade));\n}\n\n\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord){\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfloat pixelSize = 1.0\/max(iResolution.x, iResolution.y);\n    float mouseLen;\n    vec2 mouseNormal;\n    \n    \/\/mousing in lower left corner gets you presets\n    if(iMouse.x < 10.0 && iMouse.y < 10.0){ \/\/shadertoy's default position is a special case\n        mouseLen = 0.8;\n        mouseNormal = vec2(-0.5,-0.5);\n    }else if(iMouse.x < 10.0 && iMouse.y < 20.0){\n        mouseLen = 0.0;\n        mouseNormal = vec2(1.0,0.0);\n    }else{\n        vec2 mouseRelCenter = (iMouse.xy\/iResolution.xy - vec2(0.5,0.5))*2.0;\n        mouseLen = length(mouseRelCenter);\n        mouseNormal = normalize(mouseRelCenter);\n  \t}\n    \n    fragColor = vec4(1.0,1.0,1.0, circleOpacity(\n        uv,\n        pixelSize,\n        mouseLen,\n        mouseNormal\n    ));\n\t\/\/then alpha blend with black, cause shadertoy don't\n\tfragColor = vec4(mix(vec3(0.0,0.0,0.0), fragColor.rgb, fragColor.a), 1.0);\n}","name":"","description":"","type":"image"}]}}