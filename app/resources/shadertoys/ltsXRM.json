{"Shader":{"ver":"0.1","info":{"id":"ltsXRM","date":"1435506484","viewed":720,"name":"weaved Vorono\u00ef","username":"FabriceNeyret2","description":"2 interweaved Vorono\u00ef meshes.","likes":4,"published":3,"flags":0,"tags":["procedural","voronoi"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const float scale = 5.; \nfloat time = iGlobalTime;\n#define PI 3.14159\n\n\/\/ --- noise functions from https:\/\/www.shadertoy.com\/view\/XslGRr\n\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst float seed1 =  43758.5453, seed2 = 7682.1234;\nfloat seed = seed1;\n\nfloat hash( float n ) {\n    return fract(sin(n)*seed);\n}\n\n\/\/ --- End of: Created by inigo quilez --------------------\n\n\/\/ more 2D noise\n\nvec2 hash12( float n ) {\n    return fract(sin(n+vec2(1.,12.345))*seed);\n}\nfloat hash21( vec2 n ) {\n    return hash(n.x+10.*n.y);\n}\nvec2 hash22( vec2 n ) {\n    return hash12(n.x+10.*n.y);\n}\nfloat cell;   \/\/ id of closest cell\nvec2  center; \/\/ center of closest cell\nfloat dist;   \/\/ diss to closest cell\n\nvec3 worley( vec2 p , float k) {\n    vec3 d = vec3(1e15);\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n\n                vec2 p0 = ip+vec2(i,j);\n                if (mod(p0.x+p0.y+k,2.)<.5) continue;\n            \tfloat a0 = hash21(p0), a=5.*a0*time+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n                float d0 = dot(c,c);\n                if      (d0<d.x) { d.yz=d.xy; d.x=d0; cell=hash21(p0); center=c+p;}\n                else if (d0<d.y) { d.z =d.y ; d.y=d0; }\n                else if (d0<d.z) {            d.z=d0; }  \n            }\n\tdist = d.x;\n    return sqrt(d);\n}\n\n\/\/ distance to Voronoi borders, as explained in https:\/\/www.shadertoy.com\/view\/ldl3W8 \nfloat worleyD( vec2 p, float k) {\n    float d = 1e15;\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n            vec2 p0 = ip+vec2(i,j);\n            if (mod(p0.x+p0.y+k,2.)<.5) continue;\n            float a0 = hash21(p0), a=5.*a0*time+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n            vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n            float d0 = dot(c,c);\n \t    \tfloat c0 = dot(center+c,normalize(c-center));\n        \td=min(d, c0);\n    \t}\n\n    return .5*d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.*(fragCoord.xy \/ iResolution.y -vec2(.9,.5));\n    p += vec2(cos((.7*time)+.5*sin(.4*time))\/1.5, (sin(.6*time)+.5*cos(.25*time))\/1.5); \n    p *= 1.+.5*cos(.3*time);\n    vec2 ip = floor(scale*p); \n    float k = cos(3.1415*(p.x+p.y)*scale);\n    \n\tvec3 w1 = scale*worley(scale*p,0.),\n         w2 = scale*worley(scale*p,1.);\n    \/\/float b1 = scale*worleyD(scale*p,0.),\n    \/\/      b2 = scale*worleyD(scale*p,1.);\n    float d1 =  1.\/(1.\/(w1.y-w1.x)+1.\/(w1.z-w1.x)),\n          d2 =  1.\/(1.\/(w2.y-w2.x)+1.\/(w2.z-w2.x)), d ;\n\n    vec3 n1 = vec3(dFdx(d1*d1),dFdy(d1*d1),0)\/1.,\n         n2 = vec3(dFdx(d2*d2),dFdy(d2*d2),0)\/1.;\n    n1.z = sqrt(1.-dot(n1.xy,n1.xy)); n2.z = sqrt(1.-dot(n2.xy,n2.xy)); \n    n1 = reflect(vec3(0,0,1),n1); n2 = reflect(vec3(0,0,1),n2); \n\n    d1 = smoothstep(.4,1.5,d1),  d2 = smoothstep(.4,1.5, d2);\n    vec3 col = (min(d1,d2-.5*k)==d1) \n                  ? (1.-d1)*vec3(1,.8,.8)*(.3+.7*textureCube(iChannel0,n1).rgb)+d1*vec3(0.)\n                  : (1.-d2)*vec3(.8,.8,1)*(.3+.7*textureCube(iChannel0,n2).rgb)+d2*vec3(0.);\n   fragColor = vec4(1.8*col,1.);\n}","name":"","description":"","type":"image"}]}}