{"Shader":{"ver":"0.1","info":{"id":"MdKGWz","date":"1454087554","viewed":85,"name":"Ice Cream","username":"elias","description":"Yummy. Inspired by: https:\/\/www.shadertoy.com\/view\/ldy3WR","likes":6,"published":3,"flags":0,"tags":["ice","cream"],"hasliked":0},"renderpass":[{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define S 256   \/\/ Steps\n#define P 0.001 \/\/ Precision\n#define R 2.    \/\/ Marching substeps\n#define D 20.   \/\/ Max distance\n#define K 8.    \/\/ Shadow softness\n\n#define T iGlobalTime\n#define PI 3.1415926\n#define TAU (PI*2.0)\n\nstruct Ray { vec3 o, d; };\nstruct Camera { vec3 p, t; };\nstruct Hit { vec3 p; float t, d; };\n\nvec2 _uv;\nbool _normalMarch = false;\nCamera _cam = Camera(vec3(0,1,-2.5), vec3(0,0.2,0));\nfloat _d, _chocolateBar, _dcone, _dcream;\n\nmat3 rotX(float a){float c=cos(a),s=sin(a);return mat3(1,0,0,0,c,-s,0,s,c);}\nmat3 rotY(float a){float c=cos(a),s=sin(a);return mat3(c,0,-s,0,1,0,s,0,c);}\nmat3 rotZ(float a){float c=cos(a),s=sin(a);return mat3(c,-s,0,s,c,0,0,0,1);}\n\n\/\/ http:\/\/www.iquilezles.org\/www\/articles\/smin\/smin.htm\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat length(vec3 v,float e)\n{\n    v = pow(abs(v),vec3(e));\n    return pow(v.x+v.y+v.z,1.\/e);\n}\n                                        \nfloat sdLine(vec3 p, vec3 a, vec3 b, float r, float e)\n{\n    vec3 ab = b-a, ap = p-a;\n    return length(ap-ab*clamp(dot(ap,ab)\/dot(ab,ab),0.,1.),e)-r;\n}\n\nfloat scene(vec3 p)\n{\n    p *= rotY(-T);\n    \n    vec3 q = p;\n    \n    _d = 1e10;\n\n\t_dcone = max(\n        sdLine(p,vec3(0),vec3(0,-2,0),0.3*(2.-abs(p.y))+0.05,2.0),\n       -sdLine(p,vec3(0),vec3(0,-2,0),0.33*(2.-abs(p.y-0.3))+0.05,2.0)\n    );\n\n    if (_normalMarch == true) { q -= texture2D(iChannel0,p.xz).x*0.001; }\n    _chocolateBar = sdLine(q,vec3(0,0,0),vec3(0,1.5,0.5),0.1,8.0);\n    \n    q = p; q.y -= 0.9;\n    q *= rotX(max(q.y*0.5,0.0));\n    \n    if (_normalMarch == true) { q.y -= texture2D(iChannel0,p.xz).x*0.01; }\n    \n    _dcream = sdLine(q*rotY(q.y*TAU),vec3(0,0,0),vec3(0,1,0),0.45*(1.-q.y)+(1.-q.y*10.)*0.01,3.0);\n\t_dcream = smin(_dcream,_chocolateBar,0.05);\n    \n    _d = min(_d,_dcream);\n    _d = min(_d,_dcone);\n    _d = min(_d,_chocolateBar);\n    \n    return _d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    _normalMarch = true;\n\n\tvec2 e = vec2(P,0);\n    \n\treturn normalize(vec3(\n\t\tscene(p+e.xyy)-scene(p-e.xyy),\n\t\tscene(p+e.yxy)-scene(p-e.yxy),\n\t\tscene(p+e.yyx)-scene(p-e.yyx)\n\t));\n}\n\nHit march(Ray r)\n{\n    float t = 0.0, d;\n    \n    for(int i = 0; i < S; i++)\n    {\n        d = scene(r.o+r.d*t);\n        t += d\/R;\n        \n        if (d < P || t > D) { break; }\n    }\n    \n    return Hit(r.o+r.d*t, t, d);\n}\n\nRay lookAt(Camera cam, vec2 uv)\n{\n    vec3 dir = normalize(cam.t-cam.p);\n    vec3 right = normalize(cross(dir, vec3(0,1,0)));\n    vec3 up = cross(right, dir);\n\n    return Ray(cam.p, normalize(right*uv.x + up*uv.y + dir));\n}\n\nfloat getSSAO(Hit h) \n{    \n\tvec2 e = vec2(1.\/iResolution.x,0);\t\n\t\n\tfloat d = pow(abs(\n\t\t(h.t-march(lookAt(_cam,_uv+e.xy)).t)+\n\t\t(h.t-march(lookAt(_cam,_uv-e.xy)).t)+\n\t\t(h.t-march(lookAt(_cam,_uv+e.yx)).t)+\n\t\t(h.t-march(lookAt(_cam,_uv-e.yx)).t)\n\t),2.);\n\n\treturn clamp(1.-d*100.,0.,1.);\n}\n\nvec3 getColor(Hit h)\n{\n    if (h.d > P) { return vec3(0.5); }\n    \n    vec3 n = getNormal(h.p);\n    vec3 col = vec3(0);\n    vec3 light = _cam.p;\n\n    if(_d == _dcream)\n    {\n        float diff = max(dot(normalize(light-h.p),n),0.0);\n        float spec = pow(max(dot(normalize(reflect(h.p-_cam.p,n)),n),0.0),50.);\n        col = vec3(0.5+getSSAO(h)*0.5);\n    }\n    \n    if (_d == _dcone)\n    {\n        h.p *= rotY(-T);\n        \n        float a = atan(h.p.x,h.p.z);\n        float f = pow(abs(sin((a+h.p.y*2.)*9.)*sin((a-h.p.y*2.)*9.)),0.5)*max(ceil(dot(n,vec3(0,-1,0))),0.0);\n        \n        h.p -= n*f;\n        \n        float diff = max(dot(normalize(light-h.p),n),0.0);\n        float spec = pow(max(dot(normalize(reflect(h.p-_cam.p,n)),n),0.0),10.)*0.2;\n        \n        col = mix(vec3(190,128,57),vec3(252,199,106),f)\/256.*diff+spec;\n    }\n    \n    if (_d == _chocolateBar)\n    {      \n        float diff = max(dot(normalize(light-h.p),n),0.0);\n        float spec = pow(max(dot(normalize(reflect(h.p-_cam.p,n)),n),0.0),100.);\n        \n        col = vec3(0.4,0.2,0)*diff+spec;\n    }\n    \n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    _uv = (2.0*fragCoord.xy-iResolution.xy)\/iResolution.yy;\n    vec2 uvm = (2.0*iMouse.xy-iResolution.xy)\/iResolution.yy;\n    \n    if (iMouse.y < 10.) { uvm.y =  0.1; }\n    if (iMouse.x < 10.) { uvm.x = -0.45; }\n    \n    _cam.p *= rotX(-uvm.y)*rotY(uvm.x*PI);\n    \n    float f = 1.-length((2.0*fragCoord.xy-iResolution.xy)\/iResolution.xy)*0.5;\n    fragColor = vec4(getColor(march(lookAt(_cam,_uv))), 1.0)*f;\n}","name":"","description":"","type":"image"}]}}