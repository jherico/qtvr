{"Shader":{"ver":"0.1","info":{"id":"ltl3DB","date":"1424996209","viewed":937,"name":"Animation Test","username":"Flyguy","description":" Testing some smooth animation stuff. Change ANIM_FUNC to see the other animation functions.","likes":10,"published":3,"flags":0,"tags":["animation","shapes"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define polar(a) vec2(cos(a),sin(a))\n#define rotate(a) mat2(cos(a),sin(a),-sin(a),cos(a));\n\n#define ANIM_FUNC Quart\n\nfloat pi = atan(1.0)*4.0;\n\n\/\/--- 2D Shapes ---\nvec2 hex0 = polar((1.0 * pi) \/ 6.0);\nvec2 hex1 = polar((3.0 * pi) \/ 6.0);\nvec2 hex2 = polar((5.0 * pi) \/ 6.0);\n\nfloat hexagon(vec2 uv,float r)\n{\n    return max(max(abs(dot(uv,hex0)),abs(dot(uv,hex1))),abs(dot(uv,hex2))) - r;\n}\n\nfloat circle(vec2 uv,float r)\n{\n    return length(uv) - r;\n}\n\/\/-----------------\n\n\/\/--- Animation Functions ---\n\nfloat OverShoot(float s,float e,float t)\n{\n    return smoothstep(s,e,t) + sin(smoothstep(s,e,t)*pi) * 0.5;\n}\n\nfloat Spring(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return 1.0 - cos(t*pi*6.0) * exp(-t*6.5);\n}\n\nfloat Bounce(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return 1.0 - abs(cos(t*pi*4.0)) * exp(-t*6.0);\n}\n\nfloat Quart(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return 1.0-pow(1.0 - t,4.0);\n}\n\nfloat Linear(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return t;\n}\n\nfloat QuartSine(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return sin(t * pi\/2.0);\n}\n\nfloat HalfSine(float s,float e,float t)\n{\n    t = clamp((t - s) \/ (e - s),0.0,1.0);\n    return 1.0 - cos(t * pi)*0.5+0.5;\n}\n\/\/---------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    uv -= res\/2.0;\n    \n    float time = iGlobalTime;\n    time = mod(time,10.0);\n    \n    float hexrad = ANIM_FUNC(0.0,1.0,time) - ANIM_FUNC(8.0,9.0,time);\n    \n    hexrad = 0.1 * hexrad + 0.1;\n    \n    float df = hexagon(uv,hexrad);\n    \n    vec2 dirs[6];\n    dirs[0] = hex0;\n    dirs[1] = hex1;\n    dirs[2] = hex2;\n    dirs[3] = -hex0;\n    dirs[4] = -hex1;\n    dirs[5] = -hex2;\n    \n    float coff = 0.0;\n    \n    uv *= rotate(ANIM_FUNC(3.0,6.0,time)*pi*2.0)\n    \n    for(int i = 0;i < 6;i++)\n    {\n        float open = 1.2 + 0.2 * float(i);\n        float close = 6.0 + 0.2 * float(i);\n        \n        coff = ANIM_FUNC(open,open+0.2,time) - ANIM_FUNC(close,close+0.2,time);\n    \tcoff = coff * 0.35;\n        \n        df = min(df,circle(uv-dirs[i]*coff,0.075));\n    }\n    \n    vec3 color = vec3(0);\n    \n    color = vec3(smoothstep(0.005,0.0,df) * 0.5 + 0.25);\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}}