{"Shader":{"ver":"0.1","info":{"id":"MllGW2","date":"1425401000","viewed":772,"name":"Experiment  terrain lighting","username":"heyx3","description":"Experimenting with a new idea for lighting terrain without any extra sampling of heightmaps.","likes":1,"published":3,"flags":0,"tags":["3d","raymarching","terrain","diffuselighting"],"hasliked":0},"renderpass":[{"inputs":[{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/If this token is defined, lighting will be based on the difference in height on the last march step.\n\/\/Otherwise, it will be based on the average height difference of every step,\n\/\/    with special weight placed on the later steps.\n\/\/Comment this out to use a less accurate but smoother approximation of the surface brightness.\n#define USE_SIMPLER_LIGHTING\n\n\n#define SAMPLE_NOISE(coords, offsetX, offsetY, scale) texture2D(iChannel0, (coords * scale) + vec2(offsetX, offsetY)).x\nfloat getHeight(vec2 inPos)\n{\n    const float baseScale = 0.002;\n    const float terrainHeight = 30.0;\n    const float terrainHeightPullDown = 2.0;\n    return terrainHeight *\n              pow(\/\/0.50 * SAMPLE_NOISE(inPos, 0.0, 0.0, baseScale * \t\t\t0.125) +\n           \t      0.25 * SAMPLE_NOISE(inPos, 0.253, 0.8812, baseScale *     0.25) +\n                  0.125 * SAMPLE_NOISE(inPos, 0.01, 0.9999, baseScale *\t    0.5) +\n                  0.0625 * SAMPLE_NOISE(inPos, 0.363, 0.346346, baseScale * 1.5),\n                  terrainHeightPullDown);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    \n    \/\/Cam data.\n    const float camSpeed = 0.5;\n    float camHorzPos = iGlobalTime * camSpeed;\n    vec2 chp = vec2(camHorzPos);\n    vec3 camPos = vec3(chp, getHeight(chp) + 3.0),\n         camForward = normalize(vec3(1.0, 1.0, -0.5)),\n         camUp = vec3(0.0, 0.0, 1.0),\n         camSide = cross(camForward, camUp);\n    camUp = cross(camSide, camForward);\n    \n    \n    \/\/Ray data.\n    const float fovScale = 1.0;\n    vec2 uvNormalized = -1.0 + (2.0 * uv);\n    vec3 rayStart = camPos + (camForward * fovScale) +\n        \t\t\t(camSide * uvNormalized.x) +\n        \t\t\t(camUp * uvNormalized.y * (iResolution.y \/ iResolution.x));\n    vec3 rayDir = normalize(rayStart - camPos);\n    \n    \n    \/\/Ray marching.\n    \n    #define MAX_ITERATIONS 500\n    #define MAX_ITERATIONS_F float(MAX_ITERATIONS)\n    #define STEP_DISTANCE 0.04\n    \n    float distCounter = 0.0;\n    vec3 rayCounter = rayStart;\n    \n    \/\/Track how much the height changes during iterations..\n    \/\/Used for approximating lighting.\n    float lastHeight = 0.0;\n    float heightChange = 0.0;\n    \n    for (int i = 0; i < MAX_ITERATIONS; ++i)\n    {\n        float nextHeight = getHeight(rayCounter.xy);\n        \n        \n#ifdef USE_SIMPLER_LIGHTING\n    \t#define MAX_HEIGHT_CHANGE 0.03\n        heightChange = nextHeight - lastHeight;\n#else\n    \t#define MAX_HEIGHT_CHANGE 0.005\n        \/\/Values closer to the intersection with the terrain are worth more.\n        #define DIST_COUNTER_IMPORTANCE 0.5\n        heightChange += pow(distCounter, DIST_COUNTER_IMPORTANCE) *\n            \t\t\t(nextHeight - lastHeight);\n#endif\n        \n        if (nextHeight >= rayCounter.z)\n        {\n            break;\n        }\n        \n        lastHeight = nextHeight;\n        \n        rayCounter += (rayDir * STEP_DISTANCE);\n        distCounter += STEP_DISTANCE;\n    }\n    \n#ifndef USE_SIMPLER_LIGHTING\n    heightChange \/= MAX_ITERATIONS_F;\n#endif\n    \n    \n    \/\/Calculate fog.\n    #define FOG_DROPOFF 1.0\n    #define FOG_COLOR vec3(1.0, 0.8, 0.3)\n    float fog = pow(distCounter \/ (MAX_ITERATIONS_F * STEP_DISTANCE),\n                    FOG_DROPOFF);\n    \n    \/\/Calculate surface brightness.\n    #define AMBIENT_LIGHT 0.0\n    #define DIFFUSE_LIGHT (1.0 - AMBIENT_LIGHT)\n    float diffuseFactor = min(heightChange, MAX_HEIGHT_CHANGE) \/ MAX_HEIGHT_CHANGE;\n    float brightness = AMBIENT_LIGHT +\n        \t\t\t   (DIFFUSE_LIGHT * diffuseFactor);\n    \n    \/\/Calculate surface color.\n    \/\/Choose either a flat color to accentuate the lighting stuff, or a textured color to look nicer.\n    #define SURFACE_TEX_SCALE 0.25\n#if 1\n    vec3 surfaceColor = vec3(0.9, 0.5, 0.2) *\n        \t\t\t\ttexture2D(iChannel1, rayCounter.xy * SURFACE_TEX_SCALE).xyz;\n#else\n    vec3 surfaceColor = vec3(0.9, 0.5, 0.2);\n#endif\n    \n    \n    \/\/Output final color.\n    fragColor = vec4(mix(surfaceColor * brightness, FOG_COLOR, fog),\n                     1.0);\n    \n    \n    \/\/Debug coloring.\n    \/\/fragColor = vec4(getHeight(uv), 0.0, 0.0, 1.0);\n    \/\/fragColor = vec4(camForward, 1.0);\n}","name":"","description":"","type":"image"}]}}