{"Shader":{"ver":"0.1","info":{"id":"MlBGz3","date":"1430817203","viewed":295,"name":"Bird Flock","username":"dr2","description":"Searching for all those fish","likes":3,"published":3,"flags":0,"tags":["raymarching","replication"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Bird Flock\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nint idObj;\nmat3 birdMat;\nvec3 qHit, sunDir, waterDisp, cloudDisp;\nfloat tCur, birdLen, vbOff, wngAng, wngAngL;\nbool lastRow, isColr, qIsColr;\nconst float dstFar = 100.;\nconst int idWing = 21, idBdy = 22, idEye = 23, idBk = 24;\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.1, 0.1, 0.6);\n  vec3 col;\n  col = sbCol + 0.2 * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const float skyHt = 150.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro += cloudDisp;\n    vec2 p = 0.01 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.65;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (5. * (f - 0.5) * rd.y + 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  float s = max (dot (rd, sunDir), 0.);\n  col = SkyBg (rd) + (0.35 * pow (s, 6.) + 0.65 * min (pow (s, 256.), 0.3));\n  col = mix (col, vec3 (0.75), cloudFac);\n  return col;\n}\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.05;\n  p += waterDisp;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = wb;\n  for (int j = 0; j < 6; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x) + 10. * waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  float ht = WaterHt (p);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nfloat BirdWingDf (vec3 p, float dMin)\n{\n  vec3 q, qh;\n  float d, dd, a, wr;\n  float wSegLen = 0.15 * birdLen;\n  float wChord = 0.3 * birdLen;\n  float wSpar = 0.03 * birdLen;\n  float fTap = 8.;\n  float tFac = (1. - 1. \/ fTap);\n  q = p - vec3 (0., 0., 0.3 * birdLen);\n  q.x = abs (q.x) - 0.1 * birdLen;\n  float wf = 1.;\n  a = lastRow ? wngAngL : wngAng;\n  d = dMin;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x \/ (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar,\n         wr * wChord), - q.x));\n    }\n    if (dd < d) { d = dd;  qh = q; }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idWing;  qHit = qh;\n     qIsColr = isColr; }\n  return dMin;\n}\n\nfloat BirdBodyDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, wr;\n  float bkLen = 0.2 * birdLen;\n  q = p;\n  wr = q.z \/ birdLen;\n  float tr, u;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * birdLen, birdLen);\n  if (d < dMin) {\n    dMin = d;  idObj = idBdy;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= birdLen * vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009 * birdLen, 0.2 * birdLen);\n  if (d < dMin) { dMin = min (dMin, d);  idObj = idBdy;  qHit = q; }\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04 * birdLen);\n  if (d < dMin) { dMin = d;  idObj = idEye;  qHit = q; }\n  q = p;  q -= birdLen * vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z \/ bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.2 * wr * bkLen, 0.2 * wr * bkLen, bkLen);\n  if (d < dMin) { dMin = d;  idObj = idBk;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 g, q;\n  float szArray, exArray, hGap, bb;\n  szArray = 7.;\n  exArray = floor (szArray \/ 2.);\n  hGap = 1.;\n  bb = PrBoxDf (p, vec3 (szArray * hGap, 4. * hGap, szArray * hGap));\n  g.xz = floor ((p.xz + hGap) \/ (2. * hGap));\n  p.xz -= g.xz * 2. * hGap;\n  p.y += vbOff * mod (g.x + g.z, 2.);\n  lastRow = (g.x == exArray || g.z == exArray);\n  isColr = (g.x == 0. && g.z == 0.);\n  p.xz += 0.2 * vbOff * mod (g.xz, 2.);\n  q = birdMat * p;\n  return max (0.8 * BirdBodyDf (q, BirdWingDf (q, dstFar)), bb);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec3 col, nn;\n  float spec;\n  spec = 0.2;\n  if (idObj == idWing) {\n    float gw = 0.15 * birdLen;\n    float w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col = qIsColr ? mix (vec3 (1., 0., 0.), vec3 (0., 1., 0.), w) :\n       mix (vec3 (1.), vec3 (0.1), w);\n  } else if (idObj == idEye) {\n    col = vec3 (0., 0., 0.6);\n    spec = 0.7;\n  } else if (idObj == idBdy) {\n    nn = birdMat * n;\n    col = mix (mix (vec3 (1., 0.8, 0.8), vec3 (0.05, 0.2, 0.05),\n       smoothstep (0.5, 1., nn.y)), vec3 (0., 0., 0.8),\n       1. - smoothstep (-1., -0.3, nn.y));\n  } else if (idObj == idBk) {\n    col = vec3 (1., 0.4, 0.1);\n  }\n  return vec4 (col, spec);\n}\n\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.01;\n  for (int i = 0; i < 50; i++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.01;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 vn, col;\n  float dstHit, reflFac, htWat, dw, bk, sh;\n  int idObjT;\n  htWat = -2.5;\n  reflFac = 1.;\n  col = vec3 (0.);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (rd.y < 0. && dstHit >= dstFar) {\n    dw = - (ro.y - htWat) \/ rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    reflFac *= 0.7;\n  }\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit >= dstFar) col = reflFac * SkyCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col4 = BirdCol (vn);\n    sh = ObjSShadow (ro, sunDir);\n    bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n    col = reflFac * (col4.rgb * (0.3 + 0.2 * bk +\n       0.7 * sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * (fragCoord - 0.5 * iResolution.xy) \/ iResolution.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  vec3 ro, rd, ori, ca, sa;\n  sunDir = normalize (vec3 (cos (0.031 * tCur), 0.5, sin (0.031 * tCur)));\n  waterDisp = 0.005 * tCur * vec3 (-1., 0., -1.);\n  cloudDisp = 10. * tCur * vec3 (-1., 0., -1.);\n  birdLen = 0.4;\n  vbOff = 0.8 * birdLen * cos (0.3 * tCur);\n  wngAng = -0.1 + 0.2 * sin (7. * tCur);\n  wngAngL = -0.1 + 0.25 * sin (12. * tCur);\n  ori = vec3 (0., 0.75 * pi, 0.25 * sin (0.77 * tCur));\n  ca = cos (ori);\n  sa = sin (ori);\n  birdMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ori = vec3 (0.1 + 0.2 * cos (0.07 * tCur), -0.25 * pi - 0.033 * tCur, 0.);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., 0., - 15. - 6. * cos (0.1 * tCur)) * vuMat;\n  rd = normalize (vec3 (uv, 4.5)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}