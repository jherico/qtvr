{"Shader":{"ver":"0.1","info":{"id":"Xd3GRf","date":"1451196159","viewed":221,"name":"Optimized Ashima SimplexNoise3D","username":"Makio64","description":"Hello! I'm trying to optimize the ashima simplexNoise3D, I did some basic optim but can't find more, do you have suggestions? Thanks!","likes":6,"published":3,"flags":0,"tags":["noise","noise3d","simplexnoise","ashima"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Optimized AshimaSimplexNoise by @makio64\n\/\/ Original : https:\/\/github.com\/ashima\/webgl-noise\/blob\/master\/src\/noise3D.glsl\n\nvec4 permute(vec4 x){return mod(x*x*34.+x,289.);}\n\nfloat snoise(vec3 v){\n  const vec2 C = 1.\/vec2(6,3);\n  const vec4 D = vec4(0,.5,1,2);\n  vec3 i  = floor(v + dot(v, C.yyy));\n  vec3 x0 = v - i + dot(i, C.xxx);\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1. - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n  vec3 x1 = x0 - i1 + C.x;\n  vec3 x2 = x0 - i2 + C.y;\n  vec3 x3 = x0 - D.yyy;\n  i = mod(i,289.);\n  vec4 p = permute( permute( permute(\n\t  i.z + vec4(0., i1.z, i2.z, 1.))\n\t+ i.y + vec4(0., i1.y, i2.y, 1.))\n\t+ i.x + vec4(0., i1.x, i2.x, 1.));\n  vec3 ns = .142857142857 * D.wyz - D.xzx;\n  vec4 j = p - 49. * floor(p * ns.z * ns.z);\n  vec4 x_ = floor(j * ns.z);\n  vec4 x = x_ * ns.x + ns.yyyy;\n  vec4 y = floor(j - 7. * x_ ) *ns.x + ns.yyyy;\n  vec4 h = 1. - abs(x) - abs(y);\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n  vec4 sh = -step(h, vec4(0));\n  vec4 a0 = b0.xzyw + (floor(b0)*2.+ 1.).xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + (floor(b1)*2.+ 1.).xzyw*sh.zzww ;\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n  vec4 norm = inversesqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  vec4 m = max(.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.);\n  return .5 + 12. * dot( m * m * m, vec4( dot(p0,x0), dot(p1,x1),dot(p2,x2), dot(p3,x3) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 pos = uv;\n    if(uv.x < .5){\n        pos*=20.;\n    } else {\n        pos*=0.5;\n    }\n    if(uv.y < .5){\n        pos*=5.;\n    } else {\n        pos*=20.;\n    }\n    float noise = snoise(vec3(-pos.x,pos.y,0.5*iGlobalTime));\n\tfragColor = vec4(vec3(noise),1.0);\n}","name":"","description":"","type":"image"}]}}