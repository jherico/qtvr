{"Shader":{"ver":"0.1","info":{"id":"ld3GWr","date":"1452086217","viewed":228,"name":"Chocobo Music","username":"tsone","description":"Chocobo music from Final Fantasy III (NES). Used FamiTracker module tracked by InstantTrain: https:\/\/www.youtube.com\/watch?v=GWFojEru0C8","likes":15,"published":3,"flags":8,"tags":["audio","nes","final","fantasy","ff3","chocobo"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n\nCopyright 2016 Valtteri \"tsone\" Heikkil\u00e4\n\nThis work is licensed under the Creative Commons Attribution 4.0 International License.\nTo view a copy of this license, visit http:\/\/creativecommons.org\/licenses\/by\/4.0\/\n\n*\/\n\n\/*\nAnimation frames (16x16) were converted with following Python script:\n\n# Input must be 4-color paletted image (ex. PNG)\nimport sys\nfrom PIL import Image\nim = Image.open(sys.argv[1])\nj = 0\nfor iy in range(0, im.size[1], 2):\n  for ix in range(0, im.size[0], 4):\n    k = 0\n    for y in range(iy, iy+2):\n      for x in range(ix, ix+4):\n        k = (k << 2) + im.getpixel( (x,y) )\n    print \"    if (i==%d.) b=%.32g;\" % (j, k \/ 2.**14)\n    j = j + 1\n\n*\/\n\nfloat Frame1(float i)\n{\n    float b=1.3330078125;\n    if (i==1.) b=0.0103759765625;\n    if (i==2.) b=0.01165771484375;\n    if (i==3.) b=1.32940673828125;\n    if (i==4.) b=1.15869140625;\n    if (i==5.) b=3.9097900390625;\n    if (i==6.) b=3.00299072265625;\n    if (i==7.) b=1.33331298828125;\n    if (i==8.) b=0.6275634765625;\n    if (i==9.) b=0.91668701171875;\n    if (i==10.) b=3.09014892578125;\n    if (i==11.) b=1.333251953125;\n    if (i==12.) b=0.50421142578125;\n    if (i==13.) b=0.05169677734375;\n    if (i==14.) b=0.32940673828125;\n    if (i==15.) b=1.301513671875;\n    if (i==16.) b=1.333251953125;\n    if (i==17.) b=0.99993896484375;\n    if (i==18.) b=3.07733154296875;\n    if (i==19.) b=0.812255859375;\n    if (i==20.) b=1.31768798828125;\n    if (i==21.) b=3.9881591796875;\n    if (i==22.) b=2.74481201171875;\n    if (i==23.) b=3.77764892578125;\n    if (i==24.) b=0.080078125;\n    if (i==25.) b=0.7265625;\n    if (i==26.) b=2.6251220703125;\n    if (i==27.) b=0.26611328125;\n    if (i==28.) b=1.1612548828125;\n    if (i==29.) b=0.3359375;\n    if (i==30.) b=1.2506103515625;\n    if (i==31.) b=2.5234375;\n    return b;\n}\n\nfloat Frame2(float i)\n{\n    float  b=1.3330078125;\n    if (i==1.) b=0.0103759765625;\n    if (i==2.) b=0.01165771484375;\n    if (i==3.) b=1.32940673828125;\n    if (i==4.) b=1.15869140625;\n    if (i==5.) b=3.9097900390625;\n    if (i==6.) b=3.00299072265625;\n    if (i==7.) b=1.33331298828125;\n    if (i==8.) b=0.6275634765625;\n    if (i==9.) b=0.91668701171875;\n    if (i==10.) b=3.09014892578125;\n    if (i==11.) b=1.33306884765625;\n    if (i==12.) b=0.50421142578125;\n    if (i==13.) b=0.04779052734375;\n    if (i==14.) b=0.32940673828125;\n    if (i==15.) b=1.20611572265625;\n    if (i==16.) b=1.31756591796875;\n    if (i==17.) b=3.99993896484375;\n    if (i==18.) b=0.26263427734375;\n    if (i==19.) b=3.21783447265625;\n    if (i==20.) b=1.302001953125;\n    if (i==21.) b=3.9205322265625;\n    if (i==22.) b=0.99603271484375;\n    if (i==23.) b=3.07940673828125;\n    if (i==24.) b=1.33331298828125;\n    if (i==25.) b=0.9102783203125;\n    if (i==26.) b=2.75030517578125;\n    if (i==27.) b=1.33331298828125;\n    if (i==28.) b=1.333251953125;\n    if (i==29.) b=1.2506103515625;\n    if (i==30.) b=2.02587890625;\n    if (i==31.) b=1.32818603515625;\n    return b;\n}\n\nvec3 Pal(float j)\n{\n    if (j < 1.) return vec3(.023);\n    if (j >= 3.) return vec3(1.,1.,.992);\n    if (j >= 2.) return vec3(.867,.549,.192);\n    return vec3(.82);\n}\n\nfloat Decode4x2Block(float i, float v)\n{\n    return mod(v * pow(4.,i), 4.);\n}\n\nvec3 Eval(in vec2 p, bool frame)\n{\n    vec2 q = floor(p \/ vec2(4.,2.));\n    vec2 f = p - q*vec2(4.,2.);\n    float i = 4.*q.y + q.x;\n    float fi = 4.*f.y + f.x;\n    float b = frame ? Frame1(i) : Frame2(i);\n    return Pal(Decode4x2Block(fi, b));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 p = (2.*fragCoord.xy - iResolution.xy) \/ iResolution.y;\n    bool frame = mod(iGlobalTime, 16.\/60.) >= 8.\/60.;\n    if (frame) p.x += 1.\/10.;\n    p = floor(10.*p + 8.);\n    p.y = 15. - p.y;\n    if (p.x < 0. || p.x > 15. || p.y < 0. || p.y > 15.) p = vec2(0.);\n    fragColor = vec4(Eval(p, frame), 1.);\n}\n","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n\nCopyright 2016 Valtteri \"tsone\" Heikkil\u00e4\n\nThis work is licensed under the Creative Commons Attribution 4.0 International License.\nTo view a copy of this license, visit http:\/\/creativecommons.org\/licenses\/by\/4.0\/\n\n*\/\n\n\/\/ Lowpass filter amount.\n#define LOWPASS_AMOUNT 2 \/\/ Valid range: 0..3\n\n\/*\nFamiTracker module (.txt export) was converted with following Python script:\n\n# NOTE: This script has *extreme* limitations. For example:\n# - Order table must contain incrementing patterns, ex. 0,0,1,2,3 etc.\n# - Only works with pulse and triangle channels. Noise and DPCM will not work!\n# - Instrument data (volume, envelopes, etc.) are not converted.\nimport sys, math \n\nPATT_LEN = 64 # Valid range: 1..N\nNUM_CHNS = 3  # Valid range: 2..4\nNOTES = ( 'C-','C#','D-','D#','E-','F-','F#','G-','G#','A-','A#','B-' )\n\n# List of patterns in the format:\n#   pattern: [chn0, chn1, ...]\n#   chnN: [note0, note1, ...]\n#   noteN: [rowidx, noteidx, instrumentidx]\npatterns = []\n\n# List of song orders in the format:\n#   order: [chn0pati, chn1pati, ...]\norders = []\n\ndef note2Idx(note):\n    return NOTES.index(note[:2]) + 12*int(note[2])\n\ndef parseChn(pati, rowi, chni, chn):\n    vals = chn.split()\n    rowi = rowi + PATT_LEN*pati\n    if vals[0] == '---' or vals[0] == '===': # Note stop\/sustain.\n        patterns[pati][chni].append( ( rowi, -1, 0 ) )\n    elif vals[0] != '...': # Note row(?)\n        patterns[pati][chni].append( ( rowi, note2Idx(vals[0]), int(vals[1], 16) ) )\n    return # Empty row\/unknown.\n\n# Parse a row in pattern of channels: \"pulse1 : pulse2 : tri : noise : dpcm\"\ndef parseRow(pati, rowi, row):\n    for chni, c in enumerate(row.split(':')):\n        parseChn(pati, rowi, chni, c.strip())\n\n# Inputs must contain integers: [time, notei, insti]. Allocated bits: time:9, notei:6, insti:6\n# Negative sign indicates note stop\/sustain.\ndef encodeNote(note):\n    c = ( 1.0 + abs(note[1])\/64. + note[0]\/(64.*512.) ) * (2.**note[2])\n    return math.copysign(c, note[1])\n\ndef parseInput(infn):\n    global patterns, orders\n    inf = open(infn, 'rb')\n    for line in inf.readlines():\n        if line[:6] == 'ORDER ':\n            orders.append( tuple( int(o, 16) for o in line[10:].split()[:NUM_CHNS] ) )\n        if line[:8] == 'PATTERN ':\n            pati = int(line[8:10], 16)\n            patterns.append( [ [] for _ in range(NUM_CHNS) ] )\n        elif line[:4] == 'ROW ':\n            parseRow(pati, int(line[4:6], 16), line[8:])\n    inf.close()\n\ndef writeOutput():\n    print \"\/\/\/\/ GENERATED BEGIN \/\/\/\/\\n\"\n    print \"#define PATT_LEN %d. \/\/ Pattern length in rows\" % (PATT_LEN)\n    print \"#define SONG_LEN %d. \/\/ Song length in patterns\" % (len(orders))\n    # TODO: 10.375 only matches tempo with FF3 Chocobo song...\n    print \"#define TM %g \/\/ Time multiplier, secs (decimal) -> rows\\n\" % (10.375)\n\n    # Write channel-pattern functions.\n    for chni in range(NUM_CHNS):\n        print \"float Chn%d(float t)\\n{\" % (chni)\n        print \"    float x=-1.;\"\n        pati_memo = set() # Remember written patterns per channel\n        for o in orders:\n            pati = o[chni]\n            if pati in pati_memo: continue\n            pati_memo.add(pati)\n\n            notes = patterns[pati][chni]\n            for note in notes:\n                encoded = '%.32g' % ( encodeNote(note) )\n                if not '.' in encoded and not 'e' in encoded: encoded += '.'\n                print \"    if (t>=%d.) x=%s;\" % (note[0], encoded)\n        print \"    return x;\\n}\\n\"\n\n    # Write channel-pattern selector function.\n    print \"vec%d PatSel(float o)\\n{\" % (NUM_CHNS)\n    for oi, o in enumerate(orders):\n        s = \",\".join( str(pati)+'.' for pati in o )\n        print \"    if (o==%d.) return vec%d(%s);\" % (oi, NUM_CHNS, s)\n    print \"    return vec%d(0.);\\n}\\n\" % (NUM_CHNS)\n\n    print \"\/\/\/\/ GENERATED END \/\/\/\/\"\n\nparseInput(sys.argv[1])\nwriteOutput()\n\n*\/\n\n\/\/\/\/ GENERATED BEGIN \/\/\/\/\n\n#define PATT_LEN 64. \/\/ Pattern length in rows\n#define SONG_LEN 5. \/\/ Song length in patterns\n#define TM 10.375 \/\/ Time multiplier, secs (decimal) -> rows\n\nfloat Chn0(float t)\n{\n    float x=-1.;\n    if (t>=0.) x=-1.015625;\n    if (t>=62.) x=3.4725341796875;\n    if (t>=68.) x=6.94580078125;\n    if (t>=70.) x=6.696044921875;\n    if (t>=72.) x=6.5087890625;\n    if (t>=74.) x=7.134033203125;\n    if (t>=76.) x=6.94677734375;\n    if (t>=78.) x=6.697021484375;\n    if (t>=80.) x=6.947265625;\n    if (t>=84.) x=6.69775390625;\n    if (t>=88.) x=1.737060546875;\n    if (t>=94.) x=6.823974609375;\n    if (t>=96.) x=6.69921875;\n    if (t>=98.) x=1.67486572265625;\n    if (t>=99.) x=1.706146240234375;\n    if (t>=100.) x=6.69970703125;\n    if (t>=102.) x=6.574951171875;\n    if (t>=104.) x=1.675048828125;\n    if (t>=110.) x=6.575927734375;\n    if (t>=112.) x=6.701171875;\n    if (t>=114.) x=1.67535400390625;\n    if (t>=115.) x=1.737884521484375;\n    if (t>=116.) x=7.13916015625;\n    if (t>=118.) x=7.264404296875;\n    if (t>=120.) x=1.831787109375;\n    if (t>=126.) x=3.4764404296875;\n    if (t>=132.) x=6.95361328125;\n    if (t>=134.) x=6.703857421875;\n    if (t>=136.) x=6.5166015625;\n    if (t>=138.) x=7.141845703125;\n    if (t>=140.) x=6.95458984375;\n    if (t>=142.) x=6.704833984375;\n    if (t>=144.) x=6.955078125;\n    if (t>=148.) x=6.70556640625;\n    if (t>=152.) x=1.739013671875;\n    if (t>=158.) x=6.831787109375;\n    if (t>=160.) x=6.70703125;\n    if (t>=162.) x=1.67681884765625;\n    if (t>=163.) x=1.708099365234375;\n    if (t>=164.) x=6.70751953125;\n    if (t>=166.) x=6.582763671875;\n    if (t>=168.) x=1.677001953125;\n    if (t>=174.) x=6.583740234375;\n    if (t>=176.) x=6.708984375;\n    if (t>=178.) x=1.67730712890625;\n    if (t>=179.) x=1.739837646484375;\n    if (t>=180.) x=7.14697265625;\n    if (t>=182.) x=7.272216796875;\n    if (t>=184.) x=1.833740234375;\n    if (t>=190.) x=3.5428466796875;\n    if (t>=196.) x=7.02392578125;\n    if (t>=198.) x=6.836669921875;\n    if (t>=200.) x=6.6494140625;\n    if (t>=202.) x=6.837158203125;\n    if (t>=204.) x=7.02490234375;\n    if (t>=206.) x=7.275146484375;\n    if (t>=208.) x=7.150390625;\n    if (t>=212.) x=7.46337890625;\n    if (t>=216.) x=1.787841796875;\n    if (t>=222.) x=6.964599609375;\n    if (t>=224.) x=7.02734375;\n    if (t>=228.) x=6.84033203125;\n    if (t>=230.) x=6.653076171875;\n    if (t>=232.) x=6.4033203125;\n    if (t>=234.) x=6.653564453125;\n    if (t>=236.) x=6.84130859375;\n    if (t>=238.) x=7.029052734375;\n    if (t>=240.) x=6.966796875;\n    if (t>=242.) x=1.74176025390625;\n    if (t>=243.) x=1.757415771484375;\n    if (t>=244.) x=6.96728515625;\n    if (t>=246.) x=6.842529296875;\n    if (t>=248.) x=1.741943359375;\n    if (t>=254.) x=3.5467529296875;\n    if (t>=260.) x=7.03173828125;\n    if (t>=262.) x=6.844482421875;\n    if (t>=264.) x=6.6572265625;\n    if (t>=266.) x=6.844970703125;\n    if (t>=268.) x=7.03271484375;\n    if (t>=270.) x=7.282958984375;\n    if (t>=272.) x=7.158203125;\n    if (t>=276.) x=7.47119140625;\n    if (t>=280.) x=1.789794921875;\n    if (t>=286.) x=6.972412109375;\n    if (t>=288.) x=6.84765625;\n    if (t>=290.) x=1.71197509765625;\n    if (t>=291.) x=1.743255615234375;\n    if (t>=292.) x=6.84814453125;\n    if (t>=294.) x=6.723388671875;\n    if (t>=296.) x=1.712158203125;\n    if (t>=302.) x=6.724365234375;\n    if (t>=304.) x=6.849609375;\n    if (t>=306.) x=1.71246337890625;\n    if (t>=307.) x=1.743743896484375;\n    if (t>=308.) x=7.03759765625;\n    if (t>=310.) x=7.162841796875;\n    if (t>=312.) x=7.2880859375;\n    if (t>=316.) x=1.8533935546875;\n    return x;\n}\n\nfloat Chn1(float t)\n{\n    float x=-1.;\n    if (t>=0.) x=-1.015625;\n    if (t>=4.) x=6.37548828125;\n    if (t>=10.) x=6.251220703125;\n    if (t>=14.) x=6.251708984375;\n    if (t>=18.) x=6.377197265625;\n    if (t>=22.) x=6.377685546875;\n    if (t>=28.) x=6.25341796875;\n    if (t>=36.) x=6.37939453125;\n    if (t>=42.) x=6.255126953125;\n    if (t>=46.) x=6.255615234375;\n    if (t>=50.) x=6.381103515625;\n    if (t>=54.) x=6.381591796875;\n    if (t>=60.) x=6.25732421875;\n    if (t>=68.) x=6.38330078125;\n    if (t>=74.) x=6.259033203125;\n    if (t>=78.) x=6.259521484375;\n    if (t>=82.) x=6.385009765625;\n    if (t>=86.) x=6.385498046875;\n    if (t>=92.) x=6.26123046875;\n    if (t>=100.) x=6.38720703125;\n    if (t>=106.) x=6.262939453125;\n    if (t>=110.) x=6.263427734375;\n    if (t>=114.) x=6.388916015625;\n    if (t>=118.) x=6.389404296875;\n    if (t>=124.) x=6.26513671875;\n    if (t>=196.) x=6.27392578125;\n    if (t>=202.) x=6.274658203125;\n    if (t>=206.) x=6.275146484375;\n    if (t>=210.) x=6.400634765625;\n    if (t>=214.) x=6.401123046875;\n    if (t>=218.) x=6.401611328125;\n    if (t>=222.) x=6.402099609375;\n    if (t>=228.) x=6.27783203125;\n    if (t>=234.) x=6.278564453125;\n    if (t>=238.) x=6.279052734375;\n    if (t>=242.) x=6.404541015625;\n    if (t>=246.) x=6.405029296875;\n    if (t>=250.) x=6.405517578125;\n    if (t>=254.) x=6.406005859375;\n    if (t>=260.) x=6.28173828125;\n    if (t>=266.) x=6.282470703125;\n    if (t>=270.) x=6.282958984375;\n    if (t>=274.) x=6.408447265625;\n    if (t>=278.) x=6.408935546875;\n    if (t>=282.) x=6.409423828125;\n    if (t>=286.) x=6.409912109375;\n    if (t>=290.) x=6.285400390625;\n    if (t>=294.) x=6.285888671875;\n    if (t>=298.) x=6.286376953125;\n    if (t>=302.) x=6.286865234375;\n    if (t>=306.) x=6.287353515625;\n    if (t>=308.) x=6.53759765625;\n    if (t>=310.) x=6.725341796875;\n    if (t>=312.) x=6.8505859375;\n    if (t>=316.) x=1.7127685546875;\n    return x;\n}\n\nfloat Chn2(float t)\n{\n    float x=-1.;\n    if (t>=0.) x=6.6875;\n    if (t>=4.) x=6.93798828125;\n    if (t>=6.) x=6.688232421875;\n    if (t>=8.) x=1.640869140625;\n    if (t>=10.) x=6.813720703125;\n    if (t>=14.) x=6.814208984375;\n    if (t>=16.) x=1.67236328125;\n    if (t>=18.) x=6.939697265625;\n    if (t>=20.) x=1.6724853515625;\n    if (t>=22.) x=6.940185546875;\n    if (t>=24.) x=6.5654296875;\n    if (t>=28.) x=6.81591796875;\n    if (t>=30.) x=6.566162109375;\n    if (t>=32.) x=6.69140625;\n    if (t>=36.) x=6.94189453125;\n    if (t>=38.) x=6.692138671875;\n    if (t>=40.) x=1.641845703125;\n    if (t>=42.) x=6.817626953125;\n    if (t>=46.) x=6.818115234375;\n    if (t>=48.) x=1.67333984375;\n    if (t>=50.) x=6.943603515625;\n    if (t>=52.) x=1.6734619140625;\n    if (t>=54.) x=6.944091796875;\n    if (t>=56.) x=6.5693359375;\n    if (t>=60.) x=6.81982421875;\n    if (t>=62.) x=6.570068359375;\n    if (t>=192.) x=6.2734375;\n    if (t>=196.) x=1.6309814453125;\n    if (t>=198.) x=6.274169921875;\n    if (t>=200.) x=6.3994140625;\n    if (t>=202.) x=6.837158203125;\n    if (t>=206.) x=1.66253662109375;\n    if (t>=208.) x=1.67822265625;\n    if (t>=210.) x=6.963134765625;\n    if (t>=212.) x=1.6627197265625;\n    if (t>=214.) x=6.963623046875;\n    if (t>=216.) x=1.631591796875;\n    if (t>=218.) x=6.964111328125;\n    if (t>=220.) x=1.6004638671875;\n    if (t>=222.) x=6.964599609375;\n    if (t>=224.) x=6.27734375;\n    if (t>=228.) x=1.6319580078125;\n    if (t>=230.) x=6.278076171875;\n    if (t>=232.) x=6.4033203125;\n    if (t>=234.) x=6.841064453125;\n    if (t>=238.) x=1.66351318359375;\n    if (t>=240.) x=1.67919921875;\n    if (t>=242.) x=6.967041015625;\n    if (t>=244.) x=1.6793212890625;\n    if (t>=246.) x=6.967529296875;\n    if (t>=248.) x=1.648193359375;\n    if (t>=250.) x=6.968017578125;\n    if (t>=252.) x=1.6014404296875;\n    if (t>=254.) x=6.968505859375;\n    if (t>=256.) x=6.28125;\n    if (t>=260.) x=1.6329345703125;\n    if (t>=262.) x=6.281982421875;\n    if (t>=264.) x=6.4072265625;\n    if (t>=266.) x=6.844970703125;\n    if (t>=270.) x=1.66448974609375;\n    if (t>=272.) x=1.68017578125;\n    if (t>=274.) x=6.970947265625;\n    if (t>=276.) x=1.6646728515625;\n    if (t>=278.) x=6.971435546875;\n    if (t>=280.) x=1.633544921875;\n    if (t>=282.) x=6.971923828125;\n    if (t>=284.) x=1.6024169921875;\n    if (t>=286.) x=6.972412109375;\n    if (t>=288.) x=1.6494140625;\n    if (t>=291.) x=-1.024505615234375;\n    if (t>=292.) x=1.6339111328125;\n    if (t>=295.) x=-1.024627685546875;\n    if (t>=296.) x=1.602783203125;\n    if (t>=299.) x=-1.024749755859375;\n    if (t>=300.) x=1.5716552734375;\n    if (t>=303.) x=-1.024871826171875;\n    if (t>=304.) x=1.52490234375;\n    if (t>=307.) x=-1.024993896484375;\n    if (t>=308.) x=6.85009765625;\n    if (t>=310.) x=6.725341796875;\n    if (t>=312.) x=6.6630859375;\n    if (t>=316.) x=1.6033935546875;\n    return x;\n}\n\nvec3 PatSel(float o)\n{\n    if (o==0.) return vec3(0.,0.,0.);\n    if (o==1.) return vec3(1.,1.,0.);\n    if (o==2.) return vec3(2.,1.,0.);\n    if (o==3.) return vec3(3.,3.,3.);\n    if (o==4.) return vec3(4.,4.,4.);\n    return vec3(0.);\n}\n\n\/\/\/\/ GENERATED END \/\/\/\/\n\n\n\/\/ NES DAC circuit. Based on information by Blargg:\n\/\/ http:\/\/wiki.nesdev.com\/w\/index.php\/APU_Mixer\n\/\/ This version ignores noise and DMC channels (set to silent).\n\/\/ Input c: volume levels (0-15) as vec3(pulse1, pulse2, tri)\n\/\/ Returns mono mix result in [0,1] range.\nfloat Mixer(vec3 c)\n{\n    float pulse_out = c[0] + c[1]; \/\/ pulse1 + pulse2\n    pulse_out = (pulse_out == 0.0) ? 0. : 95.88 \/ (100. + 8128.0\/pulse_out);\n    float tnd_out = c[2] \/ 8227.0;\n    tnd_out = (c[2] == 0.0) ? 0. : 159.79 \/ (100. + 1.0\/tnd_out);\n    return pulse_out + tnd_out;\n}\n\n\/\/ Convert note index to approximated NES APU output frequency.\n\/\/ Output frequency depends on the possible oscillator counter values.\n\/\/ See: http:\/\/wiki.nesdev.com\/w\/index.php\/APU_Pulse\nfloat Idx2Freq(int idx)\n{\n    float f = 440. * exp2(float(idx-45) \/ 12.);\n    return 111860.8125 \/ floor(111860.8125\/f + .5); \/\/ NTSC CPU\n}\n\nivec3 Decode(float v)\n{\n    float s = sign(v);\n    v = abs(v);\n    float e = floor(log2(v));\n    float c = v \/ exp2(e) - 1.0;\n    ivec3 r;\n    c *= 64.0;\n    r[0] = int(c); \/\/ = notei\n    c = (c-float(r[0])) * 512.0;\n    r[1] = int(c); \/\/ = rowi\n    r[2] = int(e); \/\/ = insti\n    if (s < 0.0) {\n        r[0] = -1; \/\/ = notei = -1 (rest note)\n    }\n    return r;\n}\n\nfloat Pulse125(float f, float x, float v)\n{\n    return (fract(f * x) < 0.125) ? v : 0.0;\n}\n\nfloat Tri(float f, float x)\n{\n    float p = fract(floor((f*x+0.75) * 32.0) \/ 32.0);\n    return floor(30.0 * abs(p-0.5) + 0.5);\n}\n\nfloat Inst01(ivec3 note, float x)\n{    \n    \/\/ TODO: Instruments are hard-coded right now.\n    int notei = note[0];\n    float vol = (x >= 1.0\/10.0) ? floor(8.125*exp2(-0.288 * (x-1.0\/10.0))) : 0.0;\n    if (note[2] == 1) {\n        notei += int(min(1.4 * x, 3.0));\n        if (x >= 3.0) {\n            vol = 0.0;\n        }\n    }\n    if (note[2] == 2 && x > 1.0) {\n        vol = 0.0;\n    }\n    \n    float freq = Idx2Freq(notei);\n    float y = Pulse125(freq, x \/ TM, vol);\n    return (note[0] == -1) ? 0.0 : y;\n}\n\nfloat Inst2(ivec3 note, float x)\n{\n    float freq = Idx2Freq(note[0] - 12);\n    float y = Tri(freq, x \/ TM);\n    if (note[2] == 2) {\n        y *= clamp(4.0 - 3.0*x, 0.0, 1.0);\n    }\n    return (note[0] == -1) ? 0.0 : y;\n}\n\nfloat Eval(float t)\n{\n    float rowt = TM * t;\n    float ordi = floor(rowt \/ PATT_LEN);\n    float patrowt = rowt - ordi*PATT_LEN;\n    \n    vec3 p = PatSel(mod(ordi, SONG_LEN));\n    vec3 pt = patrowt + p*PATT_LEN;\n    \n    ivec3 p0 = Decode(Chn0(pt[0]));\n    ivec3 p1 = Decode(Chn1(pt[1]));\n    ivec3 p2 = Decode(Chn2(pt[2]));\n    ivec3 p2b = Decode(Chn2(pt[2] - 1.)); \n    \n    vec4 xs = vec4(pt, pt[2]) - vec4(p0[1], p1[1], p2[1], p2b[1]);\n    \n    \/\/ For click removal in tri channel. \n    float trit = sqrt(clamp((240.0\/TM) * xs[2], 0.0, 1.0));\n    \n    vec3 c = vec3(\n        Inst01(p0, xs[0]),\n        Inst01(p1, xs[1]),\n        \/\/ Remove clicks in tri channel (slight fade w\/ prev note).\n        mix(Inst2(p2b, xs[3]), Inst2(p2, xs[2]), trit)\n    );\n\n    return Mixer(c);\n}\n\nvec2 mainSound(float time)\n{\n    float dt = 1.0 \/ iSampleRate;\n    time = floor(time\/dt) * dt;\n\n    \/\/ Approximate NES audio output lowpass (around ~14kHz).\n    \/\/ For this to work, iSampleRate should be 44100Hz or 48kHz.\n    \/\/ Filter coefficients taken from 'Filters for Common Resampling Tasks'\n    \/\/ http:\/\/www.realitypixels.com\/turk\/computergraphics\/ResamplingFilters.pdf\n#if LOWPASS_AMOUNT == 1\n    \/\/ Around -7dB at iSampleRate\/2 Hz. (Gaussian, 1\/2 base)\n    float y = (\n              Eval(time-2.0*dt)\n        + 8. *Eval(time-dt)\n        + 16.*Eval(time)\n        + 8. *Eval(time+dt)\n        +     Eval(time+2.0*dt)\n    ) \/ 34.;\n#elif LOWPASS_AMOUNT == 2\n    \/\/ Approx. average between options 1 and 2 (literally).\n    float y = (\n              Eval(time-3.0*dt)\n        + 8. *Eval(time-2.0*dt)\n        + 32.*Eval(time-dt)\n        + 54.*Eval(time)\n        + 32.*Eval(time+dt)\n        + 8. *Eval(time+2.0*dt)\n        +     Eval(time+3.0*dt)\n    ) \/ 136.;\n#elif LOWPASS_AMOUNT == 3\n    \/\/ Around -15dB at iSampleRate\/2 Hz. (Gaussian, 1\/sqrt(2) base)\n    float y =\n          0.015*Eval(time-3.0*dt)\n        + 0.083*Eval(time-2.0*dt)\n        + 0.235*Eval(time-dt)\n        + 0.333*Eval(time)\n        + 0.235*Eval(time+dt)\n        + 0.083*Eval(time+2.0*dt)\n        + 0.015*Eval(time+3.0*dt)\n    ;\n#else\n    float y = Eval(time);\n#endif\n\n    y = 2.*y - 1.;\n    y *= exp(-max(time - 53., 0.)); \/\/ Fade out from 0:53.\n    return vec2(y);\n}\n","name":"","description":"","type":"sound"}]}}