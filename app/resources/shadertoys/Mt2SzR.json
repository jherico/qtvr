{"Shader":{"ver":"0.1","info":{"id":"Mt2SzR","date":"1441164166","viewed":988,"name":"Perlin Water Noise","username":"jackdavenport","description":"I was trying to write the Pixelshader's noise functions from memory and I created this REALLY cool water effect accidentally! I would love to see someone use this in a shader and make something totally awesome <img src=\"\/img\/emoticonLaugh.png\"\/>","likes":7,"published":3,"flags":0,"tags":["noise","perlin","water","mask"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float random(float x) {\n \n    return fract(sin(x) * 10000.);\n          \n}\n\nfloat noise(vec2 p) {\n\n    return random(p.x + p.y * 10000.);\n            \n}\n\nvec2 sw(vec2 p) { return vec2(floor(p.x), floor(p.y)); }\nvec2 se(vec2 p) { return vec2(ceil(p.x), floor(p.y)); }\nvec2 nw(vec2 p) { return vec2(floor(p.x), ceil(p.y)); }\nvec2 ne(vec2 p) { return vec2(ceil(p.x), ceil(p.y)); }\n\nfloat smoothNoise(vec2 p) {\n\n    vec2 interp = smoothstep(0., 1., fract(p));\n    float s = mix(noise(sw(p)), noise(se(p)), interp.x);\n    float n = mix(noise(nw(p)), noise(ne(p)), interp.x);\n    return mix(s, n, interp.y);\n        \n}\n\nfloat fractalNoise(vec2 p) {\n\n    float x = 0.;\n    x += smoothNoise(p      );\n    x += smoothNoise(p * 2. ) \/ 2.;\n    x += smoothNoise(p * 4. ) \/ 4.;\n    x += smoothNoise(p * 8. ) \/ 8.;\n    x += smoothNoise(p * 16.) \/ 16.;\n    x \/= 1. + 1.\/2. + 1.\/4. + 1.\/8. + 1.\/16.;\n    return x;\n            \n}\n\nfloat movingNoise(vec2 p) {\n \n    float x = fractalNoise(p + iGlobalTime);\n    float y = fractalNoise(p - iGlobalTime);\n    return fractalNoise(p + vec2(x, y));   \n    \n}\n\n\/\/ call this for water noise function\nfloat nestedNoise(vec2 p) {\n    \n    float x = movingNoise(p);\n    float y = movingNoise(p + 100.);\n    return movingNoise(p + vec2(x, y));\n    \n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float n = nestedNoise(uv * 6.);\n    \n\tfragColor = vec4(mix(vec3(.4, .7, 1.), vec3(.2, .5, 1.), n), 1.);\n}","name":"","description":"","type":"image"}]}}