{"Shader":{"ver":"0.1","info":{"id":"4dt3WB","date":"1452052821","viewed":265,"name":"2016\/01\/06","username":"hughsk","description":"Could still use some polish, but fun all the same \u2728","likes":10,"published":3,"flags":96,"tags":["godrays"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":563,"src":"https:\/\/soundcloud.com\/rezdubstep\/rez-the-lost-world","ctype":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define SAMPLES 30\n#define DENSITY 0.365\n#define WEIGHT 0.95\n#define DECAY 0.84\n\nfloat random(vec2 co) {\n   return fract(sin(dot(co.xy,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 pass = texture2D(iChannel0, uv);\n    vec3 color = pass.rgb + pass.a;\n    vec2 glowOrigin = vec2(0.0);\n    \n    vec2 dUV = (uv * 2.0 - 1.0) - glowOrigin;\n    dUV *= 1.0 \/ float(SAMPLES) * DENSITY;\n    \n    vec2 sUV = uv;\n    float decay = 1.0;\n    float glow = 0.0;\n    float amp = max(\n        texture2D(iChannel1, vec2(0.6, 0.25)).r,\n        texture2D(iChannel1, vec2(0.2, 0.25)).r\n    );\n    \n    for (int i = 0; i < SAMPLES; i++) {\n      sUV -= dUV;\n      float data = texture2D(iChannel0, sUV).a;\n      data *= decay * WEIGHT;\n      glow += data * mix(0.4, 1.0, random(sUV + sin(iGlobalTime)));\n      decay *= DECAY;\n    }\n    \n    color += amp * glow * vec3(1.3, 1.2, 1);\n    color = pow(color, vec3(1.1));\n    color += vec3(0.05 + uv.x * 0.11, 0.08, 0.11);\n    color.r = smoothstep(0.0, 0.9, color.r);\n    color.b = smoothstep(-0.1, 0.9, color.b);\n    color *= 1.0 - dot(uv = uv * 2. - 1., uv) * vec3(0.05, 0.15, -0.05);\n    color += (random(uv + sin(iGlobalTime)) * 2.0 - 1.0) * 0.01;\n\tfragColor = vec4(color, 1);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec2 doModel(vec3 p);\n\nvec2 calcRayIntersection(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 90; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection(vec3 rayOrigin, vec3 rayDir) {\n  return calcRayIntersection(rayOrigin, rayDir, 20.0, 0.001);\n}\n\nvec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n  return a + b * sin(6.28318 * (c * t + d));  \n}\n\n\nvec3 bg(vec3 ro, vec3 rd) {\n  float t = clamp(rd.y * 0.25, -1., 1.);\n  return max(vec3(0.0),pow(palette(t, vec3(0.5), vec3(0.5), vec3(1.0, 0.7, 0.4), vec3(0.05, 0.15, 0.20)), vec3(3)) * 0.7 - 0.6).grb;\n}\n\nvec3 calcNormal(vec3 pos, float eps) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps ).x +\n                    v2 * doModel( pos + v2*eps ).x +\n                    v3 * doModel( pos + v3*eps ).x +\n                    v4 * doModel( pos + v4*eps ).x );\n}\n\nvec3 calcNormal(vec3 pos) {\n  return calcNormal(pos, 0.002);\n}\n\nfloat orenNayarDiffuse(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo \/ (sigma2 + 0.13) + 0.5 \/ (sigma2 + 0.33));\n  float B = 0.45 * sigma2 \/ (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s \/ t) \/ 3.14159265;\n}\n\nfloat gaussianSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta \/ shininess;\n  return exp(-w*w);\n}\n\nvec2 squareFrame(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy \/ screenSize.xy) - 1.0;\n  position.x *= screenSize.x \/ screenSize.y;\n  return position;\n}\n\nmat3 calcLookAtMatrix(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\nvec3 getRay(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix(origin, target, 0.0);\n  return getRay(camMat, screenPos, lensLength);\n}\n\nvoid orbitCamera(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection,\n  in vec2 coord\n) {\n  vec2 screenPos = squareFrame(screenResolution, coord);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\nvec2 doModel(vec3 p) {\n  float d1 = length(p) - 1.2;\n  float d2 = max(d1, 1.0 - length(p) + sin(cos(p.z) * p.y * p.x * 5. + iGlobalTime) * 0.3);\n  float id = 0.0;\n  \n  \/\/d2 += sin(p.x * 15.0 + iGlobalTime) * 0.005;\n  \n  float d3 = length(p) - 0.9;\n\n  return d3 < d2 ? vec2(d3, 1.0) : vec2(d2, 0.0);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 ro, rd;\n\n  float rotation = iGlobalTime + sin(iGlobalTime * 0.15) * 5.;\n  float height   = sin(iGlobalTime * 0.25) * 2.;\n  float dist     = 6.0 + cos(iGlobalTime * 0.13 + 0.3);\n  orbitCamera(rotation, height, dist, iResolution.xy, ro, rd, fragCoord);\n\n  vec3 color = bg(ro, rd);\n    \n  vec2 t = calcRayIntersection(ro, rd);\n  if (t.x > -0.5) {\n    vec3 dir = vec3(0, 1, 0);\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal(pos);\n    vec3 mat = vec3(0.3);\n    vec3 col = vec3(0.8, 0.85, 1.0);\n    float dif = orenNayarDiffuse(dir, -rd, nor, 0.4, 0.9) * 0.8 + 0.1;\n    float spc = gaussianSpecular(dir, -rd, nor, 0.3) * 0.4;\n    \n    color = (dif * mat + spc) * col;\n    color += (orenNayarDiffuse(normalize(-pos), -rd, nor, 0.4, 0.9) * 3. * vec3(0.3, 0.25, 0.15));\n    color += bg(pos, reflect(rd, nor)) * 0.2;\n  }\n\n  fragColor.rgb = color;\n  fragColor.a   = max(0.0, t.y);\n}","name":"","description":"","type":"buffer"}]}}