{"Shader":{"ver":"0.1","info":{"id":"lss3zr","date":"1361993376","viewed":3064,"name":"Volume raycasting","username":"XT95","description":"Simple raycasting into a cloud with one pass of light scattering.","likes":35,"published":3,"flags":0,"tags":["3d","raycasting","lightscattering","cloud"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/-----------------------------------------------------------------------------\n\/\/ Maths utils\n\/\/-----------------------------------------------------------------------------\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p );\n    return f;\n}\n\n\n\/\/-----------------------------------------------------------------------------\n\/\/ Main functions\n\/\/-----------------------------------------------------------------------------\nfloat scene(vec3 p)\n{\t\n\treturn .1-length(p)*.05+fbm(p*.3);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 v = -1.0 + 2.0*q;\n    v.x *= iResolution.x\/ iResolution.y;\n\n\t#if 0\n    vec2 mo = -1.0 + 2.0*iMouse.xy \/ iResolution.xy;\n    #else\n\tvec2 mo = vec2(iGlobalTime*.1,cos(iGlobalTime*.25)*3.);\n\t#endif\n\n    \/\/ camera by iq\n    vec3 org = 25.0*normalize(vec3(cos(2.75-3.0*mo.x), 0.7-1.0*(mo.y-1.0), sin(2.75-3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n    vec3 ww = normalize( ta - org);\n    vec3 uu = normalize(cross( vec3(0.0,1.0,0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 dir = normalize( v.x*uu + v.y*vv + 1.5*ww );\n\tvec4 color=vec4(.0);\n\t\n\t\n\t\n\tconst int nbSample = 64;\n\tconst int nbSampleLight = 6;\n\t\n\tfloat zMax         = 40.;\n\tfloat step         = zMax\/float(nbSample);\n\tfloat zMaxl         = 20.;\n\tfloat stepl         = zMaxl\/float(nbSampleLight);\n    vec3 p             = org;\n    float T            = 1.;\n    float absorption   = 100.;\n\tvec3 sun_direction = normalize( vec3(1.,.0,.0) );\n    \n\tfor(int i=0; i<nbSample; i++)\n\t{\n\t\tfloat density = scene(p);\n\t\tif(density>0.)\n\t\t{\n\t\t\tfloat tmp = density \/ float(nbSample);\n\t\t\tT *= 1. -tmp * absorption;\n\t\t\tif( T <= 0.01)\n\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\t\n\t\t\t \/\/Light scattering\n\t\t\tfloat Tl = 1.0;\n\t\t\tfor(int j=0; j<nbSampleLight; j++)\n\t\t\t{\n\t\t\t\tfloat densityLight = scene( p + normalize(sun_direction)*float(j)*stepl);\n\t\t\t\tif(densityLight>0.)\n                \tTl *= 1. - densityLight * absorption\/float(nbSample);\n                if (Tl <= 0.01)\n                    break;\n\t\t\t}\n\t\t\t\n\t\t\t\/\/Add ambiant + light scattering color\n\t\t\tcolor += vec4(1.)*50.*tmp*T +  vec4(1.,.7,.4,1.)*80.*tmp*T*Tl;\n\t\t}\n\t\tp += dir*step;\n\t}    \n\n    fragColor = color;\n\n}\n","name":"","description":"","type":"image"}]}}