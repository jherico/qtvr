{"Shader":{"ver":"0.1","info":{"id":"4t2Xzt","date":"1445899916","viewed":649,"name":"Subluminic 3","username":"aiekick","description":"Subluminic 3","likes":28,"published":3,"flags":0,"tags":["3","subluminic"],"hasliked":0},"renderpass":[{"inputs":[{"id":13,"src":"\/presets\/mzk00.mp3","ctype":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ Tuned via XShade (http:\/\/www.funparadigm.com\/xshade\/)\n\n\/* \n\tthe cloudy famous tech come from the shader of duke : https:\/\/www.shadertoy.com\/view\/MljXDw\n        Himself a Port of a demo by Las => http:\/\/www.pouet.net\/topic.php?which=7920&page=29&x=14&y=9\n*\/\n\nvec4 freqs;\nfloat t;\n\n#define uTex2D iChannel0\nfloat pn( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D(uTex2D, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nvec2 path(float t, float k, float c)\n{\n\treturn vec2(cos(t\/k), sin(t\/k))*c;\n}\n\nfloat df(vec3 p)\n{\n\tfloat pnNoise = pn(p*0.7)*1.7 + pn(p*0.8)*2.2 + pn(p*3.1)*0.6;\n\tp.z += pnNoise;\n\tp.xy += path(p.z, 5., 10.);\n\tfloat serpentA = length(p.xy) - 2.;\n\tp.xy += path(p.z, 1., 10.);\n\tfloat serpentB = length(p.xy\/(freqs.xy+.1)) - 2.;\n\treturn min(serpentA, serpentB);\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv, float fov)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u = normalize(cross(cu, rov));\n    vec3 v = normalize(cross(rov, u));\n    vec3 rd = normalize(rov + fov * u * uv.x + fov * v * uv.y);\n    return rd;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy) - df(p-e.xyy),\n\t\tdf(p+e.yxy) - df(p-e.yxy),\n\t\tdf(p+e.yyx) - df(p-e.yyx)\n\t\t);\n    return normalize(n);\n}\n\nvec3 march(vec3 f, vec3 ro, vec3 rd, float st)\n{\n\tvec3 s = vec3(1), h = vec3(.16,.008,.032), w = vec3(0);\n\tfloat d=1.,dl=0., td=0.;\n\tvec3 p = ro;\n\tfor(float i=0.;i<100.;i++)\n\t{      \n\t\tif(s.x<0.01||d>400.||td>.95) break;\n        s = df(p) * .1 * i\/vec3(107,160,72);\n\t\tw = (1.-td) * (h-s) * i\/vec3(61,27,54)* freqs.yzw * 4. * step(s,h);\n\t\tf += w;\n\t\ttd += w.x + .01;\n\t\tdl += 0.05;\t\n\t\ts = max(s, st);\n\t\td +=s.x; \n\t\tp =  ro+rd*d;\t\n   \t}\n\tdl += 0.5;\n\tf \/= dl\/15.;\n\tf = mix( f, vec3(0), 1. - exp( -.0002*d*d) ); \/\/ iq fog\n\treturn f;\n}\n\n#define uTime iGlobalTime\n#define uScreenSize iResolution.xy\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    \/\/ from CubeScape : https:\/\/www.shadertoy.com\/view\/Msl3Rr\n    freqs.x = texture2D( iChannel1, vec2( 0.01, 0.25 ) ).x;\n\tfreqs.y = texture2D( iChannel1, vec2( 0.07, 0.25 ) ).x;\n\tfreqs.z = texture2D( iChannel1, vec2( 0.15, 0.25 ) ).x;\n\tfreqs.w = texture2D( iChannel1, vec2( 0.30, 0.25 ) ).x;\n    \n\tt = uTime*2.5;\n\tf = vec4(0,0.15,0.32,1);\n    vec2 si = uScreenSize;\n\tvec2 q = g\/si;\n\tfloat z = t * 5.;\n    vec3 ro = vec3(path(z,5.,5.+(sin(t*.5)*.5+.5)*5.), z );\n\tvec2 uv = (2.*g-uScreenSize)\/uScreenSize.y;\n\tvec3 rd = cam(uv, ro, vec3(path(z,10.,10.),0), ro+vec3(0,0,1), 3.5);\n\tf.rgb = march(f.rgb, ro, rd, 0.2);\n\tuv*= uScreenSize * 10.;\n\tfloat k = fract( cos(uv.y * 0.0001 + uv.x) * 500000.);\n\tf.rgb = mix(f.rgb, vec3(1), pow(k, 50.));\n\tf.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 ); \/\/ vignette\n}\n","name":"","description":"","type":"image"}]}}