{"Shader":{"ver":"0.1","info":{"id":"4sXGDr","date":"1366969146","viewed":754,"name":"DF 2D visualization","username":"Xender","description":"Illustration of distance fields raymarching\/spheretracing principle in 2D. Use mouse to shoot the ray.<br\/>\/\/little edit - isolated CSG funtions to make code more verbose and fixed sign of the field - now red is [+] and blue [-].","likes":3,"published":3,"flags":0,"tags":["distancefield","raymarch","educational"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ ----- SHAPES\n\nfloat circle(vec2 p, float s)\n{\n\treturn length(p) - s;\n}\n\nfloat line(vec2 p, vec3 line)\n{\n\tvec2 normal = line.xy; \/\/ line.xy must be normalized\n\tfloat dist = line.z;\n\treturn dot(p, normal) - dist;\n}\n\n\/\/ ----- OPERATORS\n\nfloat csg_union(float a, float b)\n{\n\treturn min(a, b);\n}\n\nfloat csg_intersect(float a, float b)\n{\n\treturn max(a, b);\n}\n\nfloat csg_difference(float a, float b)\n{\n    return max(a, -b);\n}\n\n\/\/ ----- FIELD\n\nfloat field(vec2 uv)\n{\n\treturn\n\t\tcsg_difference\n\t\t(\n\t\t\tline(uv, vec3(\n\t\t\t\tnormalize(vec2(-1.0, -0.2)),\n\t\t\t\t0.0)),\n\t\t\tcsg_union\n\t\t\t(\n\t\t\t\tcircle(uv, 1.0),\n\t\t\t\tcircle(uv + vec2(-1.5, 0.0), 1.5)\n\t\t\t)\n\t\t);\n}\n\nvec3 visualize_dist(vec2 uv, float dist)\n{\n\tconst float scale = 0.3;\n\tvec3 col = vec3(dist, 0.0, -dist) * scale;\n\n\tfloat line = float(abs(dist) < 0.01);\n\n\treturn col + vec3(0.0, line * 0.5, 0.0);\n}\n\nvec3 visualize_region(vec2 uv, float dist, vec2 mouse)\n{\n\tfloat mouse_circle = float(circle(uv - mouse, abs(dist)) < 0.0);\n\treturn vec3(0.0, mouse_circle * 0.3, 0.0);\n}\n\nvec3 raymarch_visualize(vec2 ro, vec2 rd, vec2 uv)\n{\n\t\/\/ro - ray origin\n\t\/\/rd - ray direction\n\n\tvec3 ret_col = vec3(0.0);\n\n\tconst float epsilon = 0.001;\n\tfloat t = 0.0;\n\tfor(int i = 0; i < 10; ++i)\n\t{\n\t\tvec2 coords = ro + rd * t;\n\t\tfloat dist = field(coords);\n\t\tret_col += visualize_region(uv, dist, coords);\n\t\tt += dist;\n\t\tif(abs(dist) < epsilon)\n\t\t\tbreak;\n\t}\n\n\t\/\/return t;\n\treturn ret_col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy * 0.5) \/ 50.0;\n\tvec2 mo = (abs(iMouse.zw)  - iResolution.xy * 0.5) \/ 50.0; \/\/ mouse origin\n\tvec2 md = (iMouse.xy       - iResolution.xy * 0.5) \/ 50.0; \/\/ mouse destination\n\n\tvec3 dist_col =\n\t\tvisualize_dist(\n\t\t\tuv,\n\t\t\tfield(uv)\n\t);\n\n\t\/*vec3 region_col =\n\t\tvisualize_region(\n\t\t\tuv,\n\t\t\tfield(mouse),\n\t\t\tmouse\n\t);*\/\n\n\tvec3 raymarch_vis_col =\n\t\traymarch_visualize(mo, normalize(md - mo), uv);\n\n\tfragColor = vec4(dist_col \/*+ region_col*\/ + raymarch_vis_col, 1.0);\n}\n","name":"","description":"","type":"image"}]}}