{"Shader":{"ver":"0.1","info":{"id":"MtfXRN","date":"1435472211","viewed":740,"name":"Tile Mosaic","username":"codywatts","description":"This is my first shader. It's simple, but I had fun making it.","likes":10,"published":3,"flags":0,"tags":["newbie","pixelate","pixelize"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"USE_TILE_BORDER\" creates a border around each tile.\n\/\/ \"USE_ROUNDED_CORNERS\" gives each tile a rounded effect.\n\/\/ If neither are defined, it is a basic pixelization filter.\n#define USE_TILE_BORDER\n\/\/#define USE_ROUNDED_CORNERS\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float minTileSize = 1.0;\n\tconst float maxTileSize = 32.0;\n\tconst float textureSamplesCount = 3.0;\n\tconst float textureEdgeOffset = 0.005;\n\tconst float borderSize = 1.0;\n\tconst float speed = 1.0;\n\n\tfloat time = pow(sin(iGlobalTime * speed), 2.0);\n\tfloat tileSize = minTileSize + floor(time * (maxTileSize - minTileSize));\n\ttileSize += mod(tileSize, 2.0);\n\tvec2 tileNumber = floor(fragCoord \/ tileSize);\n\n\tvec4 accumulator = vec4(0.0);\n\tfor (float y = 0.0; y < textureSamplesCount; ++y)\n\t{\n\t\tfor (float x = 0.0; x < textureSamplesCount; ++x)\n\t\t{\n\t\t\tvec2 textureCoordinates = (tileNumber + vec2((x + 0.5)\/textureSamplesCount, (y + 0.5)\/textureSamplesCount)) * tileSize \/ iResolution.xy;\n\t\t\ttextureCoordinates.y = 1.0 - textureCoordinates.y;\n\t\t\ttextureCoordinates = clamp(textureCoordinates, 0.0 + textureEdgeOffset, 1.0 - textureEdgeOffset);\n\t\t\taccumulator += texture2D(iChannel0, textureCoordinates);\n\t   }\n\t}\n\t\n\tfragColor = accumulator \/ vec4(textureSamplesCount * textureSamplesCount);\n\n#if defined(USE_TILE_BORDER) || defined(USE_ROUNDED_CORNERS)\n\tvec2 pixelNumber = floor(fragCoord - (tileNumber * tileSize));\n\tpixelNumber = mod(pixelNumber + borderSize, tileSize);\n\t\n#if defined(USE_TILE_BORDER)\n\tfloat pixelBorder = step(min(pixelNumber.x, pixelNumber.y), borderSize) * step(borderSize * 2.0 + 1.0, tileSize);\n#else\n\tfloat pixelBorder = step(pixelNumber.x, borderSize) * step(pixelNumber.y, borderSize) * step(borderSize * 2.0 + 1.0, tileSize);\n#endif\n\tfragColor *= pow(fragColor, vec4(pixelBorder));\n#endif\n}","name":"","description":"","type":"image"}]}}