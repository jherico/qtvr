{"Shader":{"ver":"0.1","info":{"id":"ld2GzR","date":"1382941070","viewed":983,"name":"IFS - dragon","username":"iq","description":"IFS Dragon. Iterating the IFS and gathering pixel colors is the most inefficient way to render an IFS ever <img src=\"\/img\/emoticonSad.png\"\/>","likes":5,"published":3,"flags":0,"tags":["2d","fractal","ifs"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Dragon fractal: http:\/\/en.wikipedia.org\/wiki\/Dragon_curve\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)\/iResolution.y;\n\n\tuv = 0.8*uv + vec2( 0.5, 0.0 );\n\t\n\tfloat p = sin( dot(fragCoord.xy,vec2(13.1,17.1)) );\n\n    float m = 1e10;\t\n\tfloat d = 0.0;\n    vec2 z = vec2( 0.0 );\n    for( int i=0; i<768; i++ ) \n    {\n\t\tp = fract( p*8.13 ); \/\/ random number\n\t\t\n        z = vec2( z.x - z.y, z.x + z.y ) * 0.5;\n\t\tz = vec2( step( 0.5, p ), 0.0 ) - z*sign(p-0.5);\n\t\t\n        d = max( d, exp( -2500.0*dot(uv-z,uv-z) ) );\n\t\tm = min( m, dot(z-uv,z-uv) );\n    }\n\tm = 1.0 - exp( -2.0*sqrt(m) );\n\t\n\tvec3 col = d*vec3(1.0,0.7,0.2) + m*vec3(0.6,1.0,1.0);\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}