{"Shader":{"ver":"0.1","info":{"id":"MsXGzM","date":"1365838258","viewed":4204,"name":"Voronoi - rocks","username":"iq","description":"3D Voronoi (very slow!)","likes":45,"published":3,"flags":0,"tags":["procedural","3d","voronoi","distancefield","marching","worley"],"hasliked":0},"renderpass":[{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat fbm( vec3 p, vec3 n )\n{\n\tp *= 0.15;\n    n = abs(n);\n\tfloat x = texture2D( iChannel3, p.yz ).x;\n\tfloat y = texture2D( iChannel3, p.zx ).x;\n\tfloat z = texture2D( iChannel3, p.xy ).x;\n\n\treturn (x*n.x + y*n.y + z*n.z);\n}\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 random3f( vec3 p )\n{\n#if 1\n\treturn texture2D( iChannel0, (p.xy + vec2(3.0,1.0)*p.z+0.5)\/256.0, -100.0 ).xyz;\n#else\n    return fract(sin(vec3( dot(p,vec3(1.0,57.0,113.0)), \n                           dot(p,vec3(57.0,113.0,1.0)),\n                           dot(p,vec3(113.0,1.0,57.0))))*43758.5453);\n#endif\t\n}\nvec3 voronoi( in vec3 x )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    vec2 res = vec2( 100.0 );\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + random3f( p + b );\n        float d = dot( r, r );\n\n        if( d < res.x )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = vec2( d, res.x );\t\t\t\n        }\n        else if( d < res.y )\n        {\n            res.y = d;\n        }\n    }\n\n    return vec3( sqrt( res ), abs(id) );\n}\n\nvec3 map( in vec3 p )\n{\n\tvec3 q = vec3( 4.0*fract(0.5+p.x\/4.0)-2.0, p.y, 4.0*fract(0.5+p.z\/4.0)-2.0 );\n\tvec2 id = floor( 0.5+p.xz\/4.0 );\n    q.xz += 0.5*(-1.0+2.0*vec2(hash(id.x+113.0*id.y),hash(13.0*id.x+57.0*id.y)));\n\tq.y -= 0.5;\n\tfloat d1 = length(q) - 1.0;\n\n\tfloat d2 = p.y;\n    d1 = min( d1, d2 );\n\td1 = min( d1, length(q.xz)-0.1 );\n#if 0\n    return vec3( d1, 1.0, 0.0 );\n#else\n\tfloat h = 0.5+0.5*clamp(1.0-p.y,0.0,1.0);\n\t\/\/p.y += 0.2*iGlobalTime;\n\tvec3 v = voronoi(2.0*p);\n\tfloat f = clamp( 3.5*(v.y-v.x), 0.0, 1.0 );\n\td1 -= 0.2*f*h;\n\t\n    return vec3( 0.5*d1, mix(1.0,f,h), v.z );\n#endif\t\n}\n\nfloat map2( in vec3 p )\n{\n\tvec3 q = vec3( 4.0*fract(0.5+p.x\/4.0)-2.0, p.y, 4.0*fract(0.5+p.z\/4.0)-2.0 );\n\tvec2 id = floor( 0.5+p.xz\/4.0 );\n    q.xz += 0.5*(-1.0+2.0*vec2(hash(id.x+113.0*id.y),hash(13.0*id.x+57.0*id.y)));\n\tq.y -= 0.5;\n\n\treturn length(q.xz) - 1.1;\n\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tfloat maxd = 20.0;\n\tfloat precis = 0.0001;\n    float h = 1.0;\n    float t = 0.0;\n    float m = -1.0;\n\tfloat o = 0.0;\n    for( int i=0; i<64; i++ )\n    {\n        if( h<(precis*t)||t>maxd ) break;\n        t += h;\n\t    vec3 res = map( ro+rd*t );\n        h = res.x;\n\t\to = res.y;\n\t    m = res.z;\n    }\n\n    if( t>maxd ) m=-1.0;\n    return vec3( t, o, m );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat calcCurvature( in vec3 pos, in vec3 nor )\n{\n\tfloat totao = 0.0;\n    for( int aoi=0; aoi<4; aoi++ )\n    {\n\t\tvec3 aopos = normalize(hash3(float(aoi)*213.47));\n\t\taopos = aopos - dot(nor,aopos)*nor;\n\t\taopos = pos + aopos*0.05;\n        float dd = clamp( map( aopos ).x*300.0, 0.0, 1.0 );\n        totao += dd;\n    }\n\t\n    return smoothstep( 0.2, 1.0, totao\/4.0 );\n}\n\nvec3 doBumpMap( in vec3 pos, in vec3 nor, float amount )\n{\n    float e = 0.001;\n    float b = 0.01;\n    \n\tfloat ref = fbm( 48.0*pos, nor );\n    vec3 gra = -b*vec3( fbm(48.0*vec3(pos.x+e, pos.y, pos.z),nor)-ref,\n                        fbm(48.0*vec3(pos.x, pos.y+e, pos.z),nor)-ref,\n                        fbm(48.0*vec3(pos.x, pos.y, pos.z+e),nor)-ref )\/e;\n\n\tamount *= 0.2 + 0.8*smoothstep( 0.3, 0.45, fbm(4.0*pos,nor) );\n\n\tvec3 tgrad = gra - nor * dot ( nor , gra );\n    return normalize ( nor - amount*tgrad );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = iMouse.xy\/iResolution.xy;\n\t\n    \/\/ camera\n    float r2 = p.x*p.x*0.32 + p.y*p.y;\n    p *= 0.5 + 0.5*(7.0-sqrt(37.5-11.5*r2))\/(r2+1.0);\n\tfloat an = 0.04*iGlobalTime - 7.0*m.x;\n    vec3 ro = 3.1*normalize(vec3(sin(an),0.1+0.6-0.4*m.y, cos(an)));\n    vec3 ta = vec3( 0.0, 0.75, 0.0 );\n\tfloat rl = 0.5*sin(0.35*an);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(rl),cos(rl),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 1.5*ww );\n\n\t\/\/ render\n    vec3 col = vec3(0.0);\n\n\t\/\/ raymarch\n    vec3 tmat = intersect(ro,rd);\n    if( tmat.z>-0.5 )\n    {\n        \/\/ geometry\n        vec3  pos = ro + tmat.x*rd;\n        vec3  nor = calcNormal(pos);\n        float cur = calcCurvature(pos,nor);\n\n\t\t\/\/ occlusion (rock to rock)\n\t\tfloat occ = clamp(pow(tmat.y,5.0)*3.0,0.0,1.0);\n\t\t\/\/ occlusion (between balls and floor)\n\t\tif( pos.y<0.2 ) \n\t\t\tocc *= clamp( map2(pos), 0.0, 0.6 )\/0.6;\n\t\telse\n\t\t    occ *= clamp((pos.y-0.2)\/1.2,0.0,1.0);\n\t\t\n        \/\/ material\n\t\tvec3 qpos = pos;\n\t\t\/\/qpos.y += 0.2*iGlobalTime;\n\t\tvec3 snor = nor;;\n\t\tnor = doBumpMap( 0.2*qpos, nor, 0.5 );\n\t\tvec4 mate = vec4(0.7,0.57,0.5,1.0);\n\t\tmate.xyz *= fbm( 15.0*qpos, nor );\n\t\tmate.xyz += 0.08*sin( tmat.z*10.0 + vec3(0.0,0.5,1.0) );\n\t\tmate.xyz *= 0.8 + 0.4*hash(tmat.z);\n\t\tmate *= smoothstep( 0.0, 1.0, fbm( 4.0*qpos, nor ) );\n        float ru = cur*smoothstep( 0.4, 0.7, fbm(4.0*qpos,snor) );\n        mate = mix( mate, vec4(1.4,1.3,1.2,0.0), ru );\n        vec3 green = 0.5*vec3(0.4,0.25,0.0);\n\t\tgreen += 0.025*sin( 10.0*texture2D(iChannel3,0.03*qpos.xz).x + vec3(3.0,1.0,2.0) );\n\t\tmate.xyz = mix( mate.xyz, green, smoothstep(0.7,1.0,nor.y)*smoothstep(0.4,0.5,fbm( 0.1*qpos.zyx, nor ))*smoothstep(0.1,0.9,fbm( 10.0*qpos.zyx, nor )) );\n\t\t\n\t\t\/\/ lighting\n        float amb = clamp(0.4+0.6*nor.y,0.0,1.0);\n        float spe = pow(clamp(dot(-rd,nor),0.0,1.0),16.0);\n\t\tcol = mate.xyz*2.0*amb*(0.05+0.95*occ) + mate.w*spe*occ*vec3(0.8);\n\t    col *= vec3(1.0,1.0,0.95);\n\n        \/\/ fog\n\t\tcol *= 3.0*exp( -0.4*tmat.x );\n\t}\n\n\t\/\/ gamma\n\tcol = pow( col, vec3(0.45) );\n\n\t\/\/ vigneting\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.15 );\n\n    fragColor = vec4( col,1.0 );\n}","name":"","description":"","type":"image"}]}}