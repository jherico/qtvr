{"Shader":{"ver":"0.1","info":{"id":"Mll3W4","date":"1422183507","viewed":370,"name":"Temple of the Waves","username":"dr2","description":"Somewhere in the ocean; use the mouse to investigate.","likes":11,"published":3,"flags":0,"tags":["raymarching","reflection","architecture"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Temple of the Waves\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nint idObj;\nvec3 qHit, sunDir, cloudDisp, waterDisp;\nfloat tCur;\nconst float dstFar = 150.;\nconst int idBaseW = 10, idBase = 11, idCol = 12, idColEnd = 13, idTop = 14,\n   idAltr = 15, idRBall = 16;\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.2, 0.3, 0.55);\n  vec3 col;\n  vec2 p;\n  float sd, w, f;\n  col = sbCol + 0.25 * pow (1. - max (rd.y, 0.), 8.);\n  sd = max (dot (rd, sunDir), 0.);\n  rd.y = abs (rd.y);\n  ro += cloudDisp;\n  p = 0.1 * (rd.xz * (50. - ro.y) \/ rd.y + ro.xz);\n  w = 0.8;\n  f = 0.;\n  for (int j = 0; j < 4; j ++) {\n    f += w * Noisefv2 (p);\n    w *= 0.5;\n    p *= 2.;\n  }\n  col += 0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n  return mix (col, vec3 (0.85), clamp (0.8 * f * rd.y + 0.1, 0., 1.));\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.25;  wAmp = 0.25;  pRough = 5.;\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 5; j ++) {\n    t2 = 1.1 * tCur * vec2 (1., -1.);\n    t4 = vec4 (q2 + t2.xx, q2 + t2.yy) * wFreq;\n    t2 = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + abs (cos (t4)));\n    v2 = pow (1. - sqrt (v4.xz * v4.yw), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.25;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = 0.;\n    sLo = 0.;\n    for (int j = 0; j < 100; j ++) {\n      p = ro + s * rd;\n      h = p.y - WaveHt (p);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.3, h) + 0.005 * s;\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = 0; j < 5; j ++) {\n\ts = 0.5 * (sLo + sHi);\n\tp = ro + s * rd;\n\th = step (0., p.y - WaveHt (p));\n\tsLo += h * (s - sLo);\n\tsHi += (1. - h) * (s - sHi);\n      }\n      dHit = sHi;\n    }\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  float ht = WaveHt (p);\n  return normalize (vec3 (ht - WaveHt (p + e.xyy), e.x, ht - WaveHt (p + e.yyx)));\n}\n\nfloat BldgDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, da, db, wr;\n  p.y -= 0.5;\n  q = p;\n  q.y -= -0.2;\n  d = PrBoxDf (q, vec3 (8.6, 0.301, 10.6));\n  if (d < dHit) { dHit = d;  idObj = idBaseW;  qHit = q; }\n  q.y -= 0.35;\n  d = PrBoxDf (q, vec3 (8.4, 0.101, 10.4));\n  q.y -= 0.15;\n  d = min (d, PrBoxDf (q, vec3 (8.2, 0.101, 10.2)));\n  if (d < dHit) { dHit = d;  idObj = idBase;  qHit = q; }\n  q.y -= 5.52;\n  d = max (PrBoxDf (q, vec3 (7.55, 0.05, 9.55)),\n     - PrBoxDf (q, vec3 (4.45, 0.4, 6.45)));\n  q.xz = mod (q.xz + vec2 (1.), 2.) - 1.;\n  d = max (d, - PrBoxDf (q, vec3 (0.45, 0.4, 0.45)));\n  if (d < dHit) { dHit = d;  idObj = idTop;  qHit = q; }\n  q = p;  q.y -= 3.1;\n  db = max (PrBoxDf (q, vec3 (8., 5., 10.)),\n     - PrBoxDf (q, vec3 (4., 5., 6.)));\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y -= 3.1;\n  wr = q.y \/ 2.5;\n  d = max (PrCylDf (q.xzy, 0.3 * (1.05 - 0.05 * wr * wr), 2.55), db);\n  if (d < dHit) { dHit = d;  idObj = idCol;  qHit = q; }\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y = abs (q.y - 3.1) - 2.5;\n  d = PrCylDf (q.xzy, 0.4, 0.07);\n  q.y -= 0.14;\n  d = max (min (d, PrBoxDf (q, vec3 (0.5, 0.07, 0.5))), db);\n  if (d < dHit) { dHit = d;  idObj = idColEnd;  qHit = q; }\n  q = p;  q.y -= 0.4;\n  d = PrCylDf (q.xzy, 1.1, 0.2);\n  q = p;  q.y -= 1.;\n  q.xz = abs (q.xz) - 0.4;\n  d = min (d, PrCylDf (q.xzy, 0.15, 0.8));\n  if (d < dHit) { dHit = d;  idObj = idAltr;  qHit = q; }\n  q = p;  q.y -= 2.9;  \n  d = PrSphDf (q, 1.5);\n  if (d < dHit) { dHit = d;  idObj = idRBall;  qHit = q; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = dstFar;\n  dHit = 0.95 * BldgDf (p, dHit);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjCol (vec3 n)\n{\n  vec3 col;\n  float sn = Noisefv3a (110. * qHit);\n  if (idObj == idBase ||idObj == idTop) col = vec3 (0.7, 0.7, 0.6);\n  else if (idObj == idBaseW) col =\n     mix (vec3 (0.7, 0.7, 0.6), vec3 (0.1, 0.4, 0.3) * sn,\n        clamp (0.6 - 2. * qHit.y, 0., 1.));\n  else if (idObj == idCol || idObj == idColEnd) col = vec3 (0.6, 0.7, 0.5);\n  else if (idObj == idAltr) col = vec3 (0.6, 0.5, 0.2);\n  col *= 0.7 + 0.3 * sn;\n  return col;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.05;\n  for (int i = 0; i < 60; i ++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 30. * h \/ d);\n    d += 0.15;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, rdd, vn, vnw;\n  float dstHit, dstWat, dif, sh, a;\n  int idObjT;\n  bool objRefl, waterRefl;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  objRefl = false;\n  if (idObj == idRBall && dstHit < dstFar) {\n    ro += rd * dstHit;\n    rd = reflect (rd, ObjNf (ro));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    objRefl = true;\n  }\n  dstWat = WaveRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstHit));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    vnw = WaveNf (ro, dstWat);\n    rdd = rd;\n    rd = reflect (rd, vnw);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    if (idObj == idRBall && dstHit < dstFar) {\n      ro += rd * dstHit;\n      rd = reflect (rd, ObjNf (ro));\n      ro += 0.01 * rd;\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      objRefl = true;\n    }\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idCol) {\n      a = 0.5 - mod (12. * (atan (qHit.x, qHit.z) \/ (2. * pi) + 0.5), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a));\n    }\n    if (idObj == idBase || idObj == idBaseW) vn = VaryNf (10. * qHit, vn, 1.);\n    else vn = VaryNf (20. * qHit, vn, 0.5);\n    objCol = ObjCol (vn);\n    sh = ObjSShadow (ro, sunDir);\n    dif = max (dot (vn, sunDir), 0.);\n    col = objCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) + \n       max (0., dif) * (0.2 + 0.8 * sh) *\n       (1. + 0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    if (objRefl) col = 0.7 * col;\n  } else col = SkyCol (ro, rd);\n  if (waterRefl) col = mix (vec3 (0, 0.07, 0.08), 0.5 * col,\n     0.8 * pow (1. - abs (dot (rdd, vnw)), 4.));\n  return sqrt (clamp (col, 0., 1.));\n\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ iResolution.xy - 0.5;\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  float dist, az, f;\n  sunDir = normalize (vec3 (0.8, 1., -0.8));\n  cloudDisp = 1.5 * tCur * vec3 (1., 0., -1.);\n  waterDisp = 0.2 * tCur * vec3 (-1., 0., 1.);\n  if (mPtr.z <= 0.) {\n    dist = 35.;\n    az = 0.25 * pi + 0.01 * tCur;\n  } else {\n    dist = max (2., 17. - 30. * mPtr.y);\n    az = 2.2 * pi * mPtr.x;\n  }\n  ro = dist * vec3 (sin (az), 0., cos (az));\n  ro.y = 5.;\n  vd = normalize (vec3 (0., 3., 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 4.));\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}