{"Shader":{"ver":"0.1","info":{"id":"4dG3R1","date":"1453416222","viewed":421,"name":"2D Cloth","username":"iq","description":"Verlet integrated cloth. Next step, 3D","likes":30,"published":3,"flags":32,"tags":["2d","verlet"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash1( vec2 p ) { float n = dot(p,vec2(127.1,311.7)); return fract(sin(n)*153.4353); }\n\nfloat sdSegment( in vec2 p, in vec2 a, in vec2 b )\n{\n\tvec2 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvec4 getParticle( vec2 id )\n{\n    return texture2D( iChannel0, (id+0.5)\/iResolution.xy );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord\/iResolution.y;\n    \n    vec3 f = vec3(0.0);\n    for( int j=0; j<10; j++ )\n    for( int i=0; i<10; i++ )\n    {\n        vec2 id = vec2( float(i), float(j) );\n        vec4 p = getParticle( id );\n\n        float d = 1.0;\n        \n        #if 1\n        if( i<9 )        d = min(d, sdSegment( uv, p.xy, getParticle( id+vec2(1.0,0.0) ).xy ));\n        if( j<9 )        d = min(d, sdSegment( uv, p.xy, getParticle( id+vec2(0.0,1.0) ).xy ) );\n        if( i<9 && j<9 ) d = min(d, sdSegment( uv, p.xy, getParticle( id+vec2(1.0,1.0) ).xy ));\n        if( i>0 && j<9 ) d = min(d, sdSegment( uv, p.xy, getParticle( id+vec2(-1.0,1.0) ).xy ) );\n        f = mix( f, vec3(0.4,0.6,0.8), 1.0-smoothstep( 0.0, 0.005, d ) );\n        #endif\n        \n        d = length(uv-p.xy)-0.035;\n        vec3 col = 0.6 + 0.4*sin( hash1(id)*30.0 + vec3(0.0,1.0,2.0) );\n        col *= 0.8 + 0.2*smoothstep( -0.1, 0.1, sin(d*400.0) );\n        f = mix( f, col, 1.0-smoothstep( -0.001, 0.001, d ) );\n            \n    }\n    \n    fragColor = vec4(f,1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash1( vec2  p ) { float n = dot(p,vec2(127.1,311.7)); return fract(sin(n)*43758.5453); }\n\nvec4 getParticle( vec2 id )\n{\n    return texture2D( iChannel0, (id+0.5)\/iResolution.xy);\n}\n\nvec4 react( in vec4 p, in vec2 qid, float rl )\n{\n    vec4 q = getParticle( qid );\n    \n    vec2 di = q.xy - p.xy;\n    \n    float l = length(di);\n    \n    p.xy += 0.1*(l-rl)*(di\/l);\n    \n    return p;\n}\n\nvec4 solveContrainsts( in vec2 id, in vec4 p )\n{\n    if( id.x > 0.5 )  p = react( p, id + vec2(-1.0, 0.0), 0.1 );\n    if( id.x < 8.5 )  p = react( p, id + vec2( 1.0, 0.0), 0.1 );\n    if( id.y > 0.5 )  p = react( p, id + vec2( 0.0,-1.0), 0.1 );\n    if( id.y < 8.5 )  p = react( p, id + vec2( 0.0, 1.0), 0.1 );\n\n    if( id.x > 0.5 && id.y > 0.5)  p = react( p, id + vec2(-1.0, -1.0), 0.14142 );\n    if( id.x > 0.5 && id.y < 8.5)  p = react( p, id + vec2(-1.0,  1.0), 0.14142 );\n    if( id.x < 8.5 && id.y > 0.5)  p = react( p, id + vec2( 1.0, -1.0), 0.14142 );\n    if( id.x < 8.5 && id.y < 8.5)  p = react( p, id + vec2( 1.0,  1.0), 0.14142 );\n\n    return p;\n}    \n\nvec4 move( in vec4 p, in vec2 id )\n{\n    const float g = 0.6;\n\n    \/\/ acceleration\n    p.xy += iTimeDelta*iTimeDelta*vec2(0.0,-g);\n    \n\n    \/\/ colide screen\n    if( p.x< 0.00 ) p.x = 0.00;\n    if( p.x> 1.77 ) p.x = 1.77;\n    if( p.y< 0.00 ) p.y = 0.00;        \n    if( p.y> 1.00 ) p.y = 1.00;\n\n    \/\/ constrains\n    p = solveContrainsts( id, p );\n        \n    #if 1\n    if( id.y > 8.5 ) p.xy = 0.05 + 0.1*id;\n    #endif\n    \n    \/\/ innertia\n    vec2 np = 2.0*p.xy - p.zw;\n    p.zw = p.xy;\n    p.xy = np;\n\n    return p;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 id = floor( fragCoord-0.4 );\n    \n    if( id.x>9.5 || id.y>9.5 ) discard;\n    \n    vec4 p = getParticle(id);\n    \n    if( iFrame==0 )\n    {\n        p.xy = 0.05 + id*0.1;\n        p.zw = p.xy - 0.01*vec2(0.5+0.5*hash1(id),0.0);\n    }\n    else\n    {\n    \tp = move( p, id );\n    }\n\n    fragColor = p;\n}","name":"","description":"","type":"buffer"}]}}