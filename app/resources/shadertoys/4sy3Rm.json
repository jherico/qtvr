{"Shader":{"ver":"0.1","info":{"id":"4sy3Rm","date":"1453648020","viewed":104,"name":"Pseudo Billiards","username":"dr2","description":"Colliding elastic balls","likes":6,"published":3,"flags":32,"tags":["dynamics","collisions"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Pseudo Billiards\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/*\nColliding elastic balls (no rolling) with some friction. Based on \"Puck Dynamics\".\n\nThe white ball is hit in a random direction; the rest is simple dynamics.\n\nThe game restarts automatically, or with a mouse click. (There are no pockets, so\nno scores.)\n*\/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\n\nvec3 ltDir;\nvec2 pBall[nMol];\nfloat dstFar, hbLen;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int n = 0; n < nMol; n ++) {\n    q = p;\n    q.xz -= pBall[n];\n    d = PrSphDf (q, 0.46);\n    if (d < dMin) { dMin = d;  idObj = 10 + n; }\n  }\n  q = p;\n  d = PrBoxDf (q, vec3 (hbLen, 0.4, hbLen));\n  q.y -= -0.3;\n  d = max (PrBoxDf (q, vec3 (hbLen + 0.2, 0.5, hbLen + 0.2)), - d);\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, vn;\n  float dstHit, spec, c;\n  int idObjT;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      objCol = vec3 (0.1, 0.3, 0.);\n      for (int n = 0; n < nMol; n ++) {\n        c = length (ro.xz - pBall[n]);\n        if (c < 0.5) {\n          objCol *= 0.7 + 0.3 * smoothstep (0.2, 0.5, c);\n          break;\n        }\n      }\n      spec = 0.1;\n    } else {\n      c = float (idObj - 10);\n      if (c == 0.) objCol = vec3 (1.);\n      else {\n        c -= 1.;\n        objCol = HsvToRgb (vec3 (mod (c \/ float (nMol), 1.),\n           1. - 0.3 * mod (c, 3.), 1. - 0.3 * mod (c, 2.)));\n      }\n      spec = 0.5;\n    }\n    col = objCol * (0.3 + 0.7 * max (dot (vn, ltDir), 0.) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.));\n  } else col = vec3 (0.4, 0.25, 0.1);\n  return clamp (col, 0., 1.);\n}\n\nvoid GetMols ()\n{\n  for (int n = 0; n < nMol; n ++) pBall[n] = Loadv4 (2 * n).xy;\n  hbLen = Loadv4 (2 * nMol).y - 0.45;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 rd, ro;\n  vec2 ori, ca, sa;\n  float tCur;\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (1., 3., 1.));\n  ori = vec2 (0.8 + 0.3 * sin (2. * pi * 0.07 * tCur), 0.1 * tCur);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  rd = normalize (vec3 (uv, 4.)) * vuMat;\n  ro = vec3 (0., 0., -35.) * vuMat;\n  GetMols ();\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Pseudo Billiards\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\nfloat hbLen, dt, tCur;\nbool running;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec2 r, out vec2 v)\n{\n  vec2 rn, dr, f;\n  float fOvlap, fric, rSep;\n  fOvlap = 1000.;\n  fric = 0.1;\n  r = Loadv4 (2 * mId).xy;\n  f = vec2 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rn = Loadv4 (2 * n).xy;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec2 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr;\n  v = Loadv4 (2 * mId + 1).xy;\n  f -= fric * v;\n  if (running) {\n    v += dt * f;\n    r += dt * v;\n  }\n}\n\nvoid Init (int mId, out vec2 r, out vec2 v)\n{\n  float a, vel;\n  r.y = float (mId \/ nMolEdge);\n  r.x = float (mId) - float (nMolEdge) * r.y;\n  r = 1.2 * (r - 0.5 * float (nMolEdge - 1));\n  a = 2. * pi * Hashff (mod (1.11 * tCur, 1.));\n  v = (mId == 0) ? 10. * vec2 (cos (a), sin (a)) : vec2 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p;\n  vec2 r, v;\n  int mId, pxId;\n  tCur = iGlobalTime;\n  vec2 kv = floor (fragCoord);\n  bool doInit;\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol) discard;\n  mId = pxId \/ 2;\n  doInit = false;\n  dt = 0.03;\n  if (iFrame < 5) {\n    hbLen = 1.2 * float (nMolEdge) + 0.6;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    running = (stDat.x > 100.);\n    if (mId < nMol) {\n      Step (mId, r, v);\n      p = vec4 (((pxId == 2 * mId) ? r : v), 0., 0.);\n    }\n    if (mPtr.z > 0. && stDat.x > 50. || stDat.x > 1300.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) {\n    Init (mId, r, v);\n    p = vec4 (((pxId == 2 * mId) ? r : v), 0., 0.);\n  }\n  Savev4 (pxId, ((pxId < 2 * nMol) ? p : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Pseudo Billiards\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\nfloat hbLen, dt, tCur;\nbool running;\nconst float pi = 3.14159;\n\nvoid Step (int mId, out vec2 r, out vec2 v)\n{\n  vec2 rn, dr, f;\n  float fOvlap, fric, rSep;\n  fOvlap = 1000.;\n  fric = 0.1;\n  r = Loadv4 (2 * mId).xy;\n  f = vec2 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rn = Loadv4 (2 * n).xy;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec2 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr;\n  v = Loadv4 (2 * mId + 1).xy;\n  f -= fric * v;\n  if (running) {\n    v += dt * f;\n    r += dt * v;\n  }\n}\n\nvoid Init (int mId, out vec2 r, out vec2 v)\n{\n  float a, vel;\n  r.y = float (mId \/ nMolEdge);\n  r.x = float (mId) - float (nMolEdge) * r.y;\n  r = 1.2 * (r - 0.5 * float (nMolEdge - 1));\n  a = 2. * pi * Hashff (mod (1.11 * tCur, 1.));\n  v = (mId == 0) ? 10. * vec2 (cos (a), sin (a)) : vec2 (0.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p;\n  vec2 r, v;\n  int mId, pxId;\n  tCur = iGlobalTime;\n  vec2 kv = floor (fragCoord);\n  bool doInit;\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol) discard;\n  mId = pxId \/ 2;\n  doInit = false;\n  dt = 0.03;\n  if (iFrame < 5) {\n    hbLen = 1.2 * float (nMolEdge) + 0.6;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    running = (stDat.x > 100.);\n    if (mId < nMol) {\n      Step (mId, r, v);\n      p = vec4 (((pxId == 2 * mId) ? r : v), 0., 0.);\n    }\n    if (mPtr.z > 0. && stDat.x > 50. || stDat.x > 1300.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) {\n    Init (mId, r, v);\n    p = vec4 (((pxId == 2 * mId) ? r : v), 0., 0.);\n  }\n  Savev4 (pxId, ((pxId < 2 * nMol) ? p : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"}]}}