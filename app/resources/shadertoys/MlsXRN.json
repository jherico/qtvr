{"Shader":{"ver":"0.1","info":{"id":"MlsXRN","date":"1435053499","viewed":677,"name":"Collatz Conjecture Plot","username":"krazykylep","description":"This is a plot of the Collatz Conjecture. Each \"tower\" of pixels represents the journey that value took to get to 1. (The x pixel value defines the starting number.) The heat of the color (sort of) defines how close the number is to 1.","likes":0,"published":3,"flags":0,"tags":["math","plot","collatzconjecture","collatz","conjecture"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define LIMIT 800\n\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat cam(float f) {\n    float tt = mod(f, 25.0) * 4.0;\n\tfloat go = smoothstep(10.0, 45.0, tt) - smoothstep(60.0, 95.0, tt);\n    return go * 100000.0;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float t = iGlobalTime;\n    float x = floor(fragCoord.x) + floor(cam(t));\n    float y = floor(fragCoord.y);\n    \/\/float wtf = 2.0 * floor(mod(t*10.0, x*tan(t\/y))) + 1.0;\n    \/\/float wtf = 2.0 * floor(mod(t*2.0, 10.0)) + 1.0;\n    float wtf = 1.0;\n    float c = 0.0;\n    \/\/float maxx = 0.0;\n    float bgOff = 1.0;\n    \/\/x = x * x;\n    for (int k = 0; k < LIMIT; k++) {\n        c++;\n        if (x <= 1.0) {\n            c = 0.0;\n            \/\/maxx = 0.0;\n            bgOff = 0.0;\n        \tbreak;   \n        }\n        if (c >= y \/ (0.0025 * iResolution.y)) {\n        \tbreak;   \n        }\n        if (mod(x,  2.0) == 0.0) {\n            x = x \/ 2.0;\n        } else {\n            x = x * 3.0 + wtf;\n            if (x <= wtf * 4.0) {\n            \tx = 1.0;   \n            }\n        }\n        \/\/maxx = max(maxx, x);\n    }\n    float bgOn = (1.0 - bgOff);\n    float bg1 = sin(t)*bgOn*0.1;\n    float bg2 = sin(t + (3.14159) \/ 2.0)*bgOn*0.1;\n    fragColor = vec4(hsv2rgb(vec3(mod(x\/10.0, 360.0) \/ 360.0, 1.0, 0.5 * bgOff)), 1.0) + vec4(bg1, bg2, (0.1-bg1-bg2)*bgOn, 0.0);\n}","name":"","description":"","type":"image"}]}}