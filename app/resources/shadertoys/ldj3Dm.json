{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "ldj3Dm",
				"date": "1389735599",
				"viewed": 7469,
				"name": "Fish swimming",
				"username": "iq",
				"description": "Swimming fish",
				"likes": 73,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching",
					"distancefield",
					"fish"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 7,
							"src": "\/presets\/tex06.jpg",
							"ctype": "texture",
							"channel": 3
						},

						{
							"id": 8,
							"src": "\/presets\/tex07.jpg",
							"ctype": "texture",
							"channel": 1
						},

						{
							"id": 10,
							"src": "\/presets\/tex09.jpg",
							"ctype": "texture",
							"channel": 0
						},

						{
							"id": 15,
							"src": "\/presets\/tex10.png",
							"ctype": "texture",
							"channel": 2
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n//-----------------------------------------------------------------------------------\n#pragma vr\n\nfloat hash1(float n) {\n  return fract(sin(n) * 43758.5453123);\n}\n\nfloat noise1( in float x )\n{\n  float p = floor(x);\n  float f = fract(x);\n  f = f*f*(3.0-2.0*f);\n  return mix( hash1(p+0.0), hash1(p+1.0), f );\n}\n\n//-----------------------------------------------------------------------------------\n\nvec2 sd2Segment(vec3 a, vec3 b, vec3 p) {\n  vec3 pa = p - a;\n  vec3 ba = b - a;\n  float t = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n  vec3 v = pa - ba * t;\n  return vec2(dot(v, v), t);\n}\n\nfloat sdBox(vec3 p, vec3 b) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) / k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\n//-----------------------------------------------------------------------------------\n\nvec3 fishPos;\nfloat fishTime;\n\nvec3 sdFish(vec3 p) {\n  vec3 res = vec3(1000.0, 0.0, 0.0);\n\n  p -= fishPos;\n\n  if (dot(p, p) > 16.0)\n    return vec3(5.0);\n\n  p *= vec3(1.2, 0.8, 1.2);\n  vec3 q = p;\n\n  vec3 a = vec3(0.0, 0.0, 0.0);\n  a.x -= 0.25 * sin(8.0 * 0.2 * fishTime);\n  vec3 oa = a;\n\n  float or = 0.0;\n  float th = 0.0;\n  float hm = 0.0;\n\n#define NUMI 7\n#define NUMF 7.0\n  vec3 p1 = a;\n  vec3 d1 = vec3(0.0);\n  vec3 p2 = a;\n  vec3 d2 = vec3(0.0);\n  vec3 mp = a;\n  for (int i = 0; i < NUMI; i++) {\n    float ih = float(i) / NUMF;\n\n    float an = or + 1.0*(0.2+0.8*ih)*sin(3.0*ih - 2.0*fishTime);\n    float ll = 0.26;\n    if (i == (NUMI - 1))\n      ll = 0.4;\n    vec3 b = a + ll * vec3(sin(an), 0.0, cos(an)) * (16.0 / NUMF);\n\n    vec2 dis = sd2Segment(a, b, p);\n\n    if (dis.x < res.x) {\n      res = vec3(dis.x, ih + dis.y / NUMF, 0.0);\n      mp = a + (b - a) * dis.y;\n    }\n\n    if (i == 1) {\n      p1 = a;\n      d1 = b - a;\n    }\n\n    a = b;\n  }\n  float h = res.y;\n  float ra = 0.04 + h * (1.0 - h) * (1.0 - h) * 2.7;\n\n  // tail\n  p.y /= 1.0 + 14.0 * (1.0 - smoothstep(0.0, 0.13, 1.0 - h));\n  p.z += 0.08 * (1.0 - clamp(abs(p.y) / 0.075, 0.0, 1.0))\n      * (1.0 - smoothstep(0.0, 0.1, 1.0 - h));\n  res.x = 0.75 * (distance(p, mp) - ra);\n\n  // mouth\n  float d3 = 0.75 * (length((p - oa) * vec3(0.5, 2.0, 1.0)) - 0.12);\n  res.x = max(-d3, res.x);\n\n  // upper central fin\n  float fh = smoothstep(0.15, 0.2, h) - smoothstep(0.25, 0.8, h);\n  fh -= 0.2 * pow(0.5 + 0.5 * sin(210.0 * h), 0.2) * fh;\n  d3 = length(p.xz - mp.xz) - 0.01;\n  d3 = max(d3, p.y - (mp.y + ra + 0.2 * fh));\n  d3 = max(d3, -p.y - 0.0);\n  res.x = min(res.x, d3);\n\n  // fins\n  d1.xz = normalize(d1.xz);\n\n  float flap = 0.7 + 0.3 * sin(2.0 * 8.0 * 0.2 * fishTime);\n  vec2 dd = normalize(d1.xz + sign((p - p1).x) * flap * d1.zx * vec2(-1.0, 1.0));\n  mat2 mm = mat2(dd.y, dd.x, -dd.x, dd.y);\n  vec3 sq = p - p1;\n  sq.xz = mm * sq.xz;\n  sq.y += 0.2;\n  sq.x += -0.15;\n  float d = length((sq - vec3(0.5, 0.0, 0.0)) * vec3(1.0, 2.0, 1.0)) - 0.3;\n  d = 0.5 * max(d, sdBox(sq, vec3(1.0, 1.0, 0.01)));\n  if (d < res.x)\n    res.z = smoothstep(0.2, 0.7, sq.x);\n  res.x = smin(d, res.x, 0.05);\n\n  sq = p - p1;\n  sq.xz = mm * sq.xz;\n  sq.y += 0.2;\n  sq.x += 0.15;\n  d = length((sq - vec3(-0.5, 0.0, 0.0)) * vec3(1.0, 2.0, 1.0)) - 0.3;\n  d = 0.5 * max(d, sdBox(sq, vec3(1.0, 1.0, 0.01)));\n  if (d < res.x)\n    res.z = smoothstep(0.2, 0.7, sq.x);\n  res.x = smin(d, res.x, 0.05);\n\n  return res;\n\n}\n\nvec4 map( in vec3 p )\n{\n  float h = 1.0;\n  vec3 q = p;\n  float th = smoothstep( 0.1, 0.4, texture2D( iChannel0, 0.002*q.xz, -100.0 ).x );\n  float rr = smoothstep( 0.2, 0.5, texture2D( iChannel1, 2.0*0.02*q.xz, -100.0 ).y );\n  h = 0.9 + (1.0-0.6*rr)*(1.5-1.0*th) * 0.1*(1.0-texture2D( iChannel0, 0.1*q.xz, -100.0 ).x);\n  h += th*1.25;\n  h -= 0.24*rr;\n  h *= 0.75;\n  vec4 res = vec4( (p.y+h)*0.3, p.x, 0.0, 0.0 );\n\n  vec4 tmp = vec4( sdFish( p ), 1.0 ); if( tmp.x<res.x ) res=tmp;\n\n  return res;\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd )\n{\n  const float maxd = 20.0;\n  const float precis = 0.001;\n  float h = precis*3.0;\n  float t = 0.0;\n  float m = 0.0;\n  float l = 0.0;\n  float r = 0.0;\n  for( int i=0; i<80; i++ )\n  {\n    if( h<precis || t>maxd ) break;\n\n    t += h;\n    vec4 res = map( ro+rd*t );\n    h = res.x;\n    l = res.y;\n    r = res.z;\n    m = res.w;\n  }\n\n  if( t>maxd ) m=-1.0;\n  return vec4( t, l, m, r);\n}\n\nvec3 calcNormal( in vec3 pos, in float e )\n{\n  vec3 eps = vec3(e,0.0,0.0);\n  return normalize( vec3(\n          map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n          map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n          map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n  float res = 1.0;\n  float t = mint;\n  float h = 1.0;\n  for( int i=0; i<40; i++ )\n  {\n    h = map(ro + rd*t).x;\n    res = min( res, smoothstep(0.0,1.0,k*h/t) );\n    t += clamp( h, 0.05, 0.5 );\n    if( h<0.0001 ) break;\n  }\n  return clamp(res,0.0,1.0);\n}\n\nvec3 lig = normalize(vec3(0.9, 0.35, -0.2));\n\nvoid main(void) {\n  vec2 q = gl_FragCoord.xy / iResolution.xy;\n  vec2 p = -1.0 + 2.0 * q;\n  p.x *= iResolution.x / iResolution.y;\n  vec2 m = vec2(0.5);\n  if (iMouse.z > 0.0)\n    m = iMouse.xy / iResolution.xy;\n\n  //-----------------------------------------------------\n  // animate\n  //-----------------------------------------------------\n\n  fishTime = iGlobalTime + 3.5 * noise1(0.2 * iGlobalTime);\n\n  fishPos = vec3(0.0, 0.0, -0.7 * fishTime);\n\n  //-----------------------------------------------------\n  // camera\n  //-----------------------------------------------------\n\n  float an = 1.5 + 0.1 * iGlobalTime - 12.0 * (m.x - 0.5);\n\n  vec3 ta = fishPos - vec3(0.0, 0.0, -2.0);    //vec3(0.0,1.0,2.0);\n  vec3 ro = ta + vec3(4.0 * sin(an), 4.0, 4.0 * cos(an));\n\n  // shake\n  ro += 0.01 * sin(4.0 * iGlobalTime * vec3(1.1, 1.2, 1.3) + vec3(3.0, 0.0, 1.0));\n  ta += 0.01 * sin(4.0 * iGlobalTime * vec3(1.7, 1.5, 1.6) + vec3(1.0, 2.0, 1.0));\n\n  // camera matrix\n  vec3 ww = normalize(ta - ro);\n  vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));\n  vec3 vv = normalize(cross(uu, ww));\n\n  // create view ray\n  p.x += 0.012\n      * sin(\n          3.0 * sin(4.0 * p.y + 0.5 * iGlobalTime) + 4.0 * p.x + 0.5 * iGlobalTime);\n  vec3 rd = normalize(iDir);\n\n  //-----------------------------------------------------\n  // render\n  //-----------------------------------------------------\n\n  vec3 col = vec3(0.4, 0.6, 0.8);\n  vec3 bcol = col;\n\n  float pt = (1.0 - ro.y) / rd.y;\n\n  vec3 oro = ro;\n  if (pt > 0.0)\n    ro = ro + rd * pt;\n\n  // raymarch\n  vec4 tmat = intersect(ro, rd);\n  if (tmat.z > -0.5) {\n    float eps = 0.01 + 0.03 * step(0.5, tmat.z);\n    // geometry\n    vec3 pos = ro + tmat.x * rd;\n    vec3 nor = calcNormal(pos, eps);\n    vec3 ref = reflect(rd, nor);\n\n    // materials\n    vec4 mate = vec4(0.5, 0.5, 0.5, 0.0);\n\n    if (tmat.z < 0.5) {\n      vec3 te = texture2D(iChannel0, 0.1 * pos.xz).xyz;\n      te = 0.05 + te;\n\n      mate.xyz = 0.6 * te;\n      mate.w = 5.0 * (0.5 + 0.5 * te.x);\n\n      float th = smoothstep(0.1, 0.4, texture2D(iChannel0, 0.002 * pos.xz).x);\n      vec3 dcol = mix(vec3(0.1, 0.1, 0.0), 0.4 * vec3(0.65, 0.4, 0.2),\n          0.2 + 0.8 * th);\n\n      mate.xyz = mix(mate.xyz * 0.5, dcol, th * smoothstep(0.0, 1.0, nor.y));\n\n      float rr = smoothstep(0.2, 0.4, texture2D(iChannel1, 2.0 * 0.02 * pos.xz).y);\n      mate.xyz *= mix(vec3(1.0), vec3(0.2, 0.2, 0.2) * 1.5, rr);\n\n      mate.xyz *= 1.5;\n    } else {\n      mate.w = 8.0;\n      mate.xyz = 1.0 * vec3(0.24, 0.17, 0.22);\n\n      vec3 te = 0.8 + 2.2 * texture2D(iChannel0, vec2(2.0 * tmat.y, pos.y)).xyz;\n      mate.xyz *= te;\n\n      // belly/backfin\n      float iscola = smoothstep(0.0, 0.2, 1.0 - tmat.y);\n      mate.xyz = mix(mate.xyz,\n          mix(vec3(te.x * 0.5 + 1.5),\n              mix(1.0 + 0.5 * sin(150.0 * pos.y - sign(pos.y) * tmat.y * 300.0), 1.0,\n                  smoothstep(0.0, 0.1, 1.0 - tmat.y)) * vec3(2.6, 1.5, 1.0) * 0.9\n                  + 1.0 * vec3(2.0, 1.0, 0.5)\n                      * (1.0 - smoothstep(0.0, 0.09, 1.0 - tmat.y)), 1.0 - iscola)\n              * 0.5, smoothstep(-0.4, 0.0, -nor.y));\n\n      // stripes\n      mate.xyz = mix(mate.xyz, (te.x + 0.5) * 1.0 * vec3(0.5),\n          0.75\n              * smoothstep(0.5, 1.0, sin(1.0 * te.x + tmat.y * 100.0 + 13.0 * nor.y))\n              * smoothstep(0.0, 0.5, nor.y));\n\n      // escamas\n      float ll = clamp((tmat.y - 0.2) / (0.8 - 0.2), 0.0, 1.0);\n      float ha = 1.0 - 4.0 * ll * (1.0 - ll);\n      float pa = smoothstep(-1.0 + 2.0 * ha, 1.0, sin(50.0 * pos.y))\n          * smoothstep(-1.0, 0.0, sin(560.0 * tmat.y));\n      pa *= 1.0 - smoothstep(0.1, 0.2, nor.y);\n      mate.xyz *= 0.5 + 0.5 * vec3(1.0) * (1.0 - pa);\n\n      // eye\n      float r = length(vec2(5.0 * tmat.y, pos.y) - vec2(0.5, 0.13));\n      r /= 1.2;\n      mate.xyz = mix(mate.xyz, vec3(1.5) * clamp(1.0 - r * 4.0, 0.0, 1.0),\n          0.5 * (1.0 - smoothstep(0.08, 0.09, r)));\n      mate.xyz *= smoothstep(0.03, 0.05, r);\n      mate.xyz +=\n          vec3(4.0) * (1.0 - smoothstep(0.0, 0.1, r))\n              * pow(\n                  texture2D(iChannel1,\n                      4.0 * vec2(0.2 * fishPos.z + 4.0 * tmat.y, pos.y)).x, 2.0);\n      r = length(vec2(5.0 * tmat.y, pos.y) - vec2(0.48, 0.14));\n      mate.xyz = mix(mate.xyz, vec3(2.0), (1.0 - smoothstep(0.0, 0.02, r)));\n\n      // mouth\n      vec3 oa = fishPos;\n      oa.x -= 0.25 * sin(8.0 * 0.2 * fishTime);\n      mate.xyz *= 0.1\n          + 0.9\n              * step(0.0,\n                  length((pos - oa + vec3(0.0, 0.0, -0.02)) * vec3(1.5, 2.0, 1.0))\n                      - 0.14);\n\n      // top fin\n      float fh = smoothstep(0.15, 0.2, tmat.y) - smoothstep(0.25, 0.8, tmat.y);\n      float ra = 0.04 + tmat.y * (1.0 - tmat.y) * (1.0 - tmat.y) * 2.7;\n      float vv = clamp((pos.y - ra - 0.1) / 0.2, 0.0, 1.0);\n      vec3 fincol = mix(1.0 + 0.5 * sin(520.0 * tmat.y), 1.0, vv)\n          * mix(vec3(0.8, 0.2, 0.2), vec3(1.5, 1.4, 1.5), vv);\n      mate.xyz = mix(mate.xyz, fincol, fh * smoothstep(0.0, 0.05, pos.y - ra - 0.1));\n\n      // side fins\n      float isFin = tmat.w;\n      fincol = 0.5 * vec3(3.0, 2.0, 2.0)\n          * mix(1.0 + 0.2 * sin(150.0 * pos.y), 1.0, 0.0);\n      mate.xyz = mix(mate.xyz, fincol, isFin);\n\n      mate.xyz *= 0.17;\n    }\n\n    // lighting\n    float sky = clamp(nor.y, 0.0, 1.0);\n    float bou = clamp(-nor.y, 0.0, 1.0);\n    float dif = max(dot(nor, lig), 0.0);\n    float bac = max(0.3 + 0.7 * dot(nor, -vec3(lig.x, 0.0, lig.z)), 0.0);\n    float sha = 0.0;\n    if (dif > 0.001)\n      sha = softshadow(pos + 0.01 * nor, lig, 0.0005, 32.0);\n    float fre = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 5.0);\n    float spe = max(0.0, pow(clamp(dot(lig, reflect(rd, nor)), 0.0, 1.0), mate.w))\n        * mate.w;\n    float sss = pow(clamp(1.0 + dot(nor, rd), 0.0, 1.0), 3.0);\n\n    // lights\n    vec3 lin = vec3(0.0);\n    float cc = 0.55\n        * texture2D(iChannel2,\n            1.8 * 0.02 * pos.xz + 0.007 * iGlobalTime * vec2(1.0, 0.0)).x;\n    cc += 0.25\n        * texture2D(iChannel2,\n            1.8 * 0.04 * pos.xz + 0.011 * iGlobalTime * vec2(0.0, 1.0)).x;\n    cc += 0.10\n        * texture2D(iChannel2,\n            1.8 * 0.08 * pos.xz + 0.014 * iGlobalTime * vec2(-1.0, -1.0)).x;\n    cc = 0.6 * (1.0 - smoothstep(0.0, 0.025, abs(cc - 0.4)))\n        + 0.4 * (1.0 - smoothstep(0.0, 0.150, abs(cc - 0.4)));\n    dif *= 1.0 + 2.0 * cc;\n\n    lin += 3.5 * dif * vec3(1.00, 1.00, 1.00) * sha;\n    lin += 3.0 * sky * vec3(0.10, 0.20, 0.35);\n    lin += 1.0 * bou * vec3(0.20, 0.20, 0.20);\n    lin += 2.0 * bac * vec3(0.50, 0.60, 0.70);\n    lin += 2.0 * sss * vec3(0.20, 0.20, 0.20) * (0.2 + 0.8 * dif * sha) * mate.w;\n    lin += 2.0 * spe * vec3(1.0) * sha * (0.3 + 0.7 * fre);\n\n    // surface-light interacion\n    col = mate.xyz * lin;\n\n    // fog\n    tmat.x = max(0.0, tmat.x - 1.3);\n    col *= 0.65;\n    float hh = 1.0 - exp(-0.2 * tmat.x);\n    col = col * (1.0 - hh) * (1.0 - hh) + 1.25 * vec3(0.0, 0.12, 0.2) * hh;\n  }\n\n  // foam  \n  vec2 uv = (oro + rd * pt).xz;\n  float sur = texture2D(iChannel3, 0.06 * uv).x;\n  sur = smoothstep(0.5, 1.0, sur) * 0.5\n      + 0.5 * sur * sur * smoothstep(0.2, 1.0, texture2D(iChannel2, 1.0 * uv).x);\n  col = mix(col, vec3(1.0), 0.5 * sur);\n\n  // sun specular\n  float sun = clamp(dot(lig, reflect(rd, vec3(0.0, 1.0, 0.0))), 0.0, 1.0);\n  col += 0.2 * vec3(1.0, 0.95, 0.9) * pow(sun, 16.0);\n  col += 0.5 * vec3(1.0, 0.95, 0.9) * pow(sun, 96.0);\n\n  //-----------------------------------------------------\n  // postprocessing\n  //-----------------------------------------------------\n\n  col = pow(clamp(col, 0.0, 1.0), vec3(0.45));\n\n  col = mix(col, vec3(dot(col, vec3(0.333))), -0.5);\n\n  col = 0.5 * col + 0.5 * col * col * (3.0 - 2.0 * col);\n\n  col *= 0.2 + 0.8 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.1);\n\n  col *= smoothstep(0.0, 1.0, iGlobalTime);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}