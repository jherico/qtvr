{"Shader":{"ver":"0.1","info":{"id":"MdKGzW","date":"1453557855","viewed":225,"name":"Ragged Cloth","username":"eiffie","description":"Trying to render a 40x40 cloth (1600 points) in 3d with 100 texture calls.<br\/>Now it is getting tricky!<br\/>The original by iq: <a href=\"https:\/\/www.shadertoy.com\/view\/4dG3R1\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/4dG3R1<\/a>","likes":5,"published":3,"flags":32,"tags":["cloth"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Trying to render large clothes in 3d - eiffie\n\/\/This code is based on iq's 2d Cloth at https:\/\/www.shadertoy.com\/view\/4dG3R1\n\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat hash1( vec2 p ) { float n = dot(p,vec2(127.1,311.7)); return fract(sin(n)*43758.5453); }\n\nvec3 getParticle( vec2 id )\n{\n\tid+=vec2(20.0);\n\tid=clamp(id,0.0,39.0);\n    return texture2D( iChannel0, (id+0.5)\/iResolution.xy ).xyz;\n}\n\n\/\/this bit is experimental (well it ALL is) but this tries to find the poly\n\/\/#define TRY_TRIANGLES\n#ifdef TRY_TRIANGLES\n\nstruct Hit{float t,id;vec3 n; vec2 uv;};\n\nvoid iTri(in vec3 ro, in vec3 rd, in vec3 p1, in vec3 p2, in vec3 p3, in float id, inout Hit H){\n\tvec3 e1=p2-p1,e2=p3-p1,pv=cross(rd,e2),tv=ro-p1;\n\tH.n+=normalize(cross(e1,e2));\n\tfloat dd=1.\/dot(e1,pv),u=dot(tv,pv)*dd;\n\tif(u<0.0||u>1.0) return;\n\tvec3 qv=cross(tv,e1);\n\tfloat v=dot(rd,qv)*dd;\n\tif(v<0.0||v>1.0||(u+v)>1.0) return;\n\tfloat t=dot(e2,qv)*dd;\n\tif(t>0.0 && t<H.t){H.t=t;H.id=id;H.uv=vec2(u,v);}\n}\nvoid TriN(in vec3 p1, in vec3 p2, in vec3 p3, inout Hit H){\n\tvec3 e1=p2-p1,e2=p3-p1;\n\tH.n+=normalize(cross(e1,e2));\n}\nvec3 TriNS(vec3 A, vec3 B, vec3 C, vec3 P)\n{\n\tvec3 v0 = C - A;\n\tvec3 v1 = B - A;\n\tvec3 v2 = P - A;\n\n\tfloat dot00 = dot(v0, v0);\n\tfloat dot01 = dot(v0, v1);\n\tfloat dot02 = dot(v0, v2);\n\tfloat dot11 = dot(v1, v1);\n\tfloat dot12 = dot(v1, v2);\n\t\t\n\t\/\/ Compute barycentric coordinates\n\tfloat invDenom = 1. \/ (dot00 * dot11 - dot01 * dot01);\n\tfloat u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n\tfloat v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n\treturn vec3(1.0-u-v,v,u);\n\n}\n#define maxDepth 10.0\nvec4 scene(vec3 ro, vec3 rd, vec4 ids){\n\tHit H; H.t=maxDepth; H.id=0.0; H.n=vec3(0.0);\n\tvec4 idsave=ids;\n\tfor(int i=0;i<4;i++){\n\t\tif(ids.x>-1.0){\n\t\t\tfloat fid=float(i)*4.0;\n\t\t\tvec2 id=vec2(mod(ids.x,40.0),floor(ids.x\/40.0))-vec2(20.0);\n\t\t\tvec3 p1=getParticle(id);\n\t\t\tvec3 p2=getParticle(id+vec2(1.0,0.0));\n\t\t\tvec3 p3=getParticle(id+vec2(0.0,1.0));\n\t\t\tiTri(ro,rd,p1,p2,p3,fid++,H);\n\t\t\tvec3 p4=getParticle(id+vec2(-1.0,0.0));\n\t\t\tiTri(ro,rd,p1,p3,p4,fid++,H);\n\t\t\tp3=getParticle(id+vec2(0.0,-1.0));\n\t\t\tiTri(ro,rd,p1,p4,p3,fid++,H);\n\t\t\tiTri(ro,rd,p1,p3,p2,fid++,H);\n\t\t\tids=ids.yzwx;\n\t\t}\n\t}\n\tids=idsave;\n\tvec4 col=vec4(0.0,0.0,0.0,1.0);\n\tif(H.t<maxDepth){\n\t\tfloat fid=floor(H.id*0.25);\n\t\tfor(int i=0;i<4;i++)if(float(i)<fid)ids=ids.yzwx;\n\t\tvec2 idn[3];\n\t\tidn[0]=vec2(mod(ids.x,40.0),floor(ids.x\/40.0))-vec2(20.0);\n\t\tvec2 o2=vec2(1.0,0.0),o3=vec2(0.0,1.0);\n\t\tfid=mod(H.id,4.0);\n\t\tif(fid>0.5)o2=vec2(-1.0,0.0);\n\t\tif(fid>1.5)o3=vec2(0.0,-1.0);\n\t\tif(fid>2.5)o2=vec2(1.0,0.0);\n\t\tidn[1]=idn[0]+o2;idn[2]=idn[0]+o3;\n\t\tvec3 N[3],P[3];\n\t\t\n\t\t\/\/now recalc the normals for each vertex in the triangle we hit\n\t\tfor(int i=0;i<3;i++){\n\t\t\tvec2 id=idn[i];\n\t\t\tH.n=vec3(0.0);\n\t\t\tvec3 p1=getParticle(id);P[i]=p1;\n\t\t\tvec3 p2=getParticle(id+vec2(1.0,0.0));\n\t\t\tvec3 p3=getParticle(id+vec2(0.0,1.0));\n\t\t\tTriN(p1,p2,p3,H);\n\t\t\tvec3 p4=getParticle(id+vec2(-1.0,0.0));\n\t\t\tTriN(p1,p3,p4,H);\n\t\t\tp3=getParticle(id+vec2(0.0,-1.0));\n\t\t\tTriN(p1,p4,p3,H);\n\t\t\tTriN(p1,p3,p2,H);\n\t\t\tN[i]=normalize(H.n);\n\t\t}\n\t\tvec3 n=TriNS(P[0],P[1],P[2],ro+rd*H.t);\n\t\tn=normalize(N[0]*n.x+N[1]*n.y+N[2]*n.z);\n\t\tvec3 L=normalize(vec3(0.3,1.0,0.6));\n\t\tvec3 scol=vec3(1.0,0.7,0.4)*abs(dot(n,L));\n\t\tcol=vec4(scol,1.0);\n\t}\n\treturn col;\n}\n#endif\nfloat Length(vec3 p, vec3 rd){\/\/p=p-ro\n\tfloat b=dot(p,rd);\n\treturn sqrt(dot(p,p)-b*b);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec3 ro=vec3(0.5,0.5,-1.0);\n    vec3 rd=normalize(vec3((2.0*fragCoord-iResolution.xy)\/iResolution.y,1.75));\n\tvec2 id=vec2(-20.0);\/\/-20 to 20 for ease of addressing\n\t\/\/float h=Length(-ro,rd);\n\t\/\/fragColor=vec4(h);return;\n\tfloat dr=1.0;\/\/direction of search thru x\n\tvec4 idsave=vec4(-1.0);\n\tvec4 mn=vec4(100.0);\n#ifdef TRY_TRAINGLES\n    for(int i=0;i<200;i++){\n#else\n\tfor(int i=0;i<100;i++){\n#endif\n\t\tif(id.y>19.0)break;\/\/we are done marching\n\t\tvec3 p = getParticle( id.xy );\n\t\tfloat d=Length(p-ro,rd);\n\t\tif(d<0.1){\/\/less than rest length\/fudge\n\t\t\tfloat fid=(id.y+20.0)*40.0+id.x+20.0;\n\t\t\tif(d<mn.x){mn=vec4(d,mn.xyz);idsave=vec4(fid,idsave.xyz);}\n#ifdef TRY_TRIANGLES\n\t\t\telse if(d<mn.y){mn=vec4(mn.x,d,mn.yz);idsave=vec4(idsave.x,fid,idsave.yz);}\n\t\t\telse if(d<mn.z){mn=vec4(mn.xy,d,mn.z);idsave=vec4(idsave.xy,fid,idsave.z);}\n\t\t\telse if(d<mn.w){mn.w=d;idsave.w=fid;}\n#endif\n\t\t}\n\t\t\n\t\td=floor(0.8*d\/0.025)+1.0;\/\/scale d back to ID length using rest length (then fudge!)\n\t\tif(abs(id.x+d*dr+0.5)>19.5){\/\/turn around and weave the cloth\n\t\t\tid.y+=1.0;\n\t\t\tid.x-=(d-1.0)*dr;\/\/get a bit of a head start\n\t\t\tdr=-dr;\/\/change direction\n\t\t}else id.x+=d*dr; \/\/march\n\t}\n#ifdef TRY_TRIANGLES\n    fragColor=scene(ro,rd,idsave);\n#else\n\tvec3 f=mix(vec3(0.75),vec3(0.0),smoothstep(0.0,0.01,mn.x));\n\tfragColor=vec4(f,1.0);\n#endif\n\t\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/same as iq's just 40x40 & 3d now - eiffie\n\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat hash1( vec2  p ) { float n = dot(p,vec2(127.1,311.7)); return fract(sin(n)*43758.5453); }\n\nvec3 getParticle( vec2 id )\n{\n    return texture2D( iChannel0, (id+0.5)\/iResolution.xy).rgb;\n}\n\nvec3 react( in vec3 p, in vec2 qid, float rl )\n{\n\trl*=0.25;\/\/i was laxy - eiffie\n    vec3 q = getParticle( qid );\n    \n    vec3 di = q - p;\n    \n    float l = length(di);\n    \n    p += 0.1*(l-rl)*(di\/l);\n    \n    return p;\n}\n\nvec3 solveContrainsts( in vec2 id, in vec3 p )\n{\n    if( id.x > 0.5 )  p = react( p, id + vec2(-1.0, 0.0), 0.1 );\n    if( id.x < 38.5 )  p = react( p, id + vec2( 1.0, 0.0), 0.1 );\n    if( id.y > 0.5 )  p = react( p, id + vec2( 0.0,-1.0), 0.1 );\n    if( id.y < 38.5 )  p = react( p, id + vec2( 0.0, 1.0), 0.1 );\n\n    if( id.x > 0.5 && id.y > 0.5)  p = react( p, id + vec2(-1.0, -1.0), 0.14142 );\n    if( id.x > 0.5 && id.y < 38.5)  p = react( p, id + vec2(-1.0,  1.0), 0.14142 );\n    if( id.x < 38.5 && id.y > 0.5)  p = react( p, id + vec2( 1.0, -1.0), 0.14142 );\n    if( id.x < 38.5 && id.y < 38.5)  p = react( p, id + vec2( 1.0,  1.0), 0.14142 );\n\n    return p;\n}    \n\nvec3 move( in vec3 p, inout vec3 pp, in vec2 id )\n{\n    const float g = 0.0025;\n\n    \/\/ acceleration\n    p.y += iTimeDelta*-g;\n    \n\n    \/\/ colide screen\n    if( p.x< 0.00 ) p.x = 0.00;\n    if( p.x> 1.77 ) p.x = 1.77;\n    if( p.y< 0.00 ) p.y = 0.00;        \n    if( p.y> 1.00 ) p.y = 1.00;\n\n    \/\/ constrains\n    p = solveContrainsts( id, p );\n        \n    #if 1\n    if( id.y > 38.5 ) p = vec3(0.05 + 0.025*id,0.0);\n    #endif\n    \n    \/\/ innertia\n    vec3 np = 2.0*p - pp;\n    pp = p;\n    p = np;\n\n    return p;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 id = floor( fragCoord-0.4 );\n    \n    if( id.x>39.5 || id.y>79.5 ) discard;\n    \n\tif(id.y>39.5)id.y-=40.0;\n    vec3 p = getParticle(id);\n\tvec3 pp = getParticle(id+vec2(0.0,40.0));\n    \n    if( iFrame==0 )\n    {\n        p = vec3(id*0.025,0.0);\n        pp = p - 0.0025*vec3(0.5+0.5*hash1(id),0.0,hash1(id.yx)*0.5);\n    }\n    else\n    {\n    \tp = move( p, pp, id );\n    }\n\tif(fragCoord.y>39.5)fragColor = vec4(pp,1.0);\n\telse fragColor=vec4(p,1.0);\n}","name":"","description":"","type":"buffer"}]}}