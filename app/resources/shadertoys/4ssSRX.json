{"Shader":{"ver":"0.1","info":{"id":"4ssSRX","date":"1422832170","viewed":2575,"name":"Sculpture II","username":"iq","description":"Another weird sculpture. It's one sphere distorted by sine waves.","likes":32,"published":3,"flags":0,"tags":["3d","raymarching","noise","distancefield"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/#define USE_GRADIENTS\n\nvec4 texCube( sampler2D sam, in vec3 p, in vec3 n, in float k )\n{\n\tvec4 x = texture2D( sam, p.yz );\n\tvec4 y = texture2D( sam, p.zx );\n\tvec4 z = texture2D( sam, p.xy );\n    vec3 w = pow( abs(n), vec3(k) );\n\treturn (x*w.x + y*w.y + z*w.z) \/ (w.x+w.y+w.z);\n}\n\nvec4 map2( vec3 p )\n{\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime );\n    p.x += 0.5*sin( 3.0*p.y + iGlobalTime );\n    p.y += 0.5*sin( 3.0*p.z + iGlobalTime );\n    p.z += 0.5*sin( 3.0*p.x + iGlobalTime );\n\n    float d1 = length(p) - 1.0*smoothstep(0.0,2.0,iGlobalTime);;\n    d1 *= 0.02;\t\n\n    return vec4( d1, p );\n}\n\nvec4 map( vec3 p )\n{\n    vec4 res = map2(p);\n    \n    float d2 = p.y + 1.0;\n    if( d2<res.x ) res = vec4( d2, 0.0, 0.0, 0.0 );\n\n\treturn res;\n}\n\nvec4 intersect( in vec3 ro, in vec3 rd, in float maxd )\n{\n    vec3 res = vec3(-1.0);\n\tfloat precis = 0.00005;\n    float t = 1.0;\n    for( int i=0; i<512; i++ )\n    {\n\t    vec4 tmp = map( ro+rd*t );\n        res = tmp.yzw;\n        float h = tmp.x;\n        if( h<precis||t>maxd ) break;\n        t += h;\n    }\n\n    return vec4( t, res );\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n#ifdef USE_GRADIENTS    \n    return normalize( cross(dFdx(pos),dFdy(pos)) );\n#else    \n    vec2 e = vec2(1.0,-1.0)*0.001;\n    return normalize( e.xyy*map( pos + e.xyy ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx ).x );\n#endif    \n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<128; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, k*h\/t );\n        if( res<0.0001 ) break;\n        t += clamp( h, 0.01, 0.05 );\n    }\n    return clamp(res,0.0,1.0);\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n    const float h = 0.2;\n\tfloat ao = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n        \/\/dir = normalize(nor + dir);\n        dir *= sign(dot(dir,nor));\n        float d = map2( pos + h*dir ).x;\n        ao += max(0.0,h-d*2.0);\n    }\n    return clamp( 4.0 - 2.5*ao, 0.0, 1.0 )*(0.5+0.5*nor.y);\n}\n\nvec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n\t\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\t\n\tfloat an = 0.3*iGlobalTime + 7.5 - 5.0*m.x;\n\n\tvec3 ro = vec3(4.5*sin(an),0.5,4.5*cos(an));\n    vec3 ta = vec3(0.0,0.5,0.0);\n\n    \/\/ camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t\/\/ create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = vec3(0.0);\n\t\/\/ raymarch\n    const float maxd = 9.0;\n    vec4  inn = intersect(ro,rd,maxd);\n    float t = inn.x;\n    if( t<maxd )\n    {\n        vec3 tra = inn.yzw;\n\n        \/\/ geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        \/\/ material\n        col = vec3(0.3,0.3,0.3);\n        if( pos.y>-0.99) col += 0.2*tra;\n        vec3 pat = texCube( iChannel0, 0.5*pos, nor, 4.0 ).xyz;\n        col *= pat;\n        col *= 0.5;\n        \n\t\t\/\/ lighting\n\t\tfloat occ = calcOcc( pos, nor );\n\n        float amb = 0.5 + 0.5*nor.y;\n\t\tfloat dif = max(dot(nor,lig),0.0);\n\t\tfloat bou = max(0.0,-nor.y);\n        float bac = max(0.2 + 0.8*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.0005, 128.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 3.0 );\n        float spe = 15.0*pat.x*max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), 16.0 ) )*dif*sha*(0.04+0.96*fre);\n\t\t\n\t\t\/\/ lights\n\t\tvec3 lin = vec3(0.0);\n\n        lin += 3.5*dif*vec3(6.00,4.00,3.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tlin += 1.0*amb*vec3(0.30,0.30,0.30)*occ;\n\t\tlin += 1.0*bac*vec3(0.80,0.50,0.20)*occ;\n\t\tlin += 1.0*bou*vec3(1.00,0.30,0.20)*occ;\n        lin += 4.0*fre*vec3(1.00,0.80,0.70)*(0.3+0.7*dif*sha)*occ;\n        lin += spe*2.0;\n\n        \/\/ surface-light interacion\n\t\tcol = col*lin + spe;\n\n        col *= min(200.0*exp(-1.5*t),1.0);\n        col *= 1.0-smoothstep( 1.0,6.0,length(pos.xz) );\n\t}\n\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\n    \/\/ grading\n    col = pow( col, vec3(0.6,1.0,1.0) );\n    \/\/ vignetting\n    col *= pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}