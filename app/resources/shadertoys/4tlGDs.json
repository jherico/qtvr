{"Shader":{"ver":"0.1","info":{"id":"4tlGDs","date":"1426496916","viewed":930,"name":"Raymarching Attempt 1","username":"Craxic","description":"My first attempt at a very basic ray marcher. I haven't even used a projection matrix :P <br\/>Not sure where to start optimizing though, this shader is SLOW.","likes":11,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define INNER_RADIUS 0.75\n#define OUTER_RADIUS 0.9\n#define SHEET_THICKNESS 0.012\n#define NOISINESS 2.0\n\n#define INNER_COLOR vec4(0.0, 30.0, 30.0, 1.0)\n#define OUTER_COLOR vec4(20.0, 20.0, 30.0, 1.0)\n\n#define NUM_STEPS 128\n\n\/\/ THE FOLLOWING CODE (FROM HERE UNTIL THE END MARKER) WAS BLATANTLY LIFTED FROM \n\/\/ https:\/\/github.com\/ashima\/webgl-noise\/blob\/master\/src\/noise4D.glsl\n\/\/\n\/\/ Description : Array and textureless GLSL 2D\/3D\/4D simplex \n\/\/               noise functions.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/ \n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nfloat mod289(float x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat permute(float x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \n\n  return p;\n  }\n\t\t\t\t\t\t\n\/\/ (sqrt(5) - 1)\/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  \/\/ (5 - sqrt(5))\/20  G4\n                        0.276393202250021,  \/\/ 2 * G4\n                        0.414589803375032,  \/\/ 3 * G4\n                       -0.447213595499958); \/\/ -1 + 4 * G4\n\n\/\/ First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n\/\/ Other corners\n\n\/\/ Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n\/\/  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\/\/  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  \/\/ i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  \/\/  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  \/\/  x1 = x0 - i1  + 1.0 * C.xxxx\n  \/\/  x2 = x0 - i2  + 2.0 * C.xxxx\n  \/\/  x3 = x0 - i3  + 3.0 * C.xxxx\n  \/\/  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n\/\/ Permutations\n  i = mod289(i); \n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute( permute( permute( permute (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n\/\/ Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n\/\/ 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0\/294.0, 1.0\/49.0, 1.0\/7.0, 0.0) ;\n\n  vec4 p0 = grad4(j0,   ip);\n  vec4 p1 = grad4(j1.x, ip);\n  vec4 p2 = grad4(j1.y, ip);\n  vec4 p3 = grad4(j1.z, ip);\n  vec4 p4 = grad4(j1.w, ip);\n\n\/\/ Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt(dot(p4,p4));\n\n\/\/ Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n\/\/\/ THE END MARKER!\n\/\/\/ All the next code was written by yours truly!\n\nvec4 merge_colours(vec4 apply_this, vec4 on_top_of_this)\n{\n    return on_top_of_this * (1.0 - apply_this.a) + apply_this * apply_this.a;\n}\n\nvec4 getdensity(vec3 pos)\n{\n    vec3 samplePos = normalize(pos);\n    float sample = (snoise(vec4(samplePos * NOISINESS, iGlobalTime)) + 1.0) \/ 2.0;\n    sample = clamp(sample, 0.0, 1.0);\n    float innerIncBorder = INNER_RADIUS + SHEET_THICKNESS;\n    float outerIncBorder = OUTER_RADIUS - SHEET_THICKNESS;\n    \n    float radius = innerIncBorder + (outerIncBorder - innerIncBorder) * sample;\n    float dist = distance(pos, vec3(0.0, 0.0, 0.0));\n    if (dist > radius && dist < radius + SHEET_THICKNESS) {\n        return INNER_COLOR + (OUTER_COLOR - INNER_COLOR) * (radius - innerIncBorder) \/ (outerIncBorder - innerIncBorder);\n    } else {\n        return vec4(0.0, 0.0, 0.0, 0.0);\n    }\n}\n\nvec4 raymarch(vec3 start, vec3 end)\n{\n    vec4 retn = vec4(0.0, 0.0, 0.0, 0.0);\n\tvec3 delta = end - start;\n    float stepDistance = length(delta) \/ float(NUM_STEPS);\n    \n    vec4 densityPrevious = getdensity(start);\n    for (int i = 1; i < NUM_STEPS; i++) \n    {\n        vec3 samplePos = start + delta * float(i) \/ float(NUM_STEPS);\n        vec4 density = getdensity(samplePos);\n        \/\/ Integrate the density using linear interpolation\n        \/\/ The colours will be the average of the two weighted by their alpha\n        vec4 densityIntegrated = (density + densityPrevious) \/ 2.0;\n        \/\/ Optimised out to return. densityIntegrated *= stepDistance\n        retn += densityIntegrated;\n        \n        densityPrevious = density;\n    }\n    \n    return retn * stepDistance;\n}\n\nvec4 raymarch_ball(vec2 coord)\n{\n\t\/\/ Now we're going to intersect a ray from the \n    \/\/ position onto two spheres, one inside the \n    \/\/ other (same origin). getdensity is only > 0 \n    \/\/ between these volumes.\n    float d = distance(coord, vec2(0.0, 0.0));\n    if (d > OUTER_RADIUS) {\n        \/\/ No intersection on the spheres.\n\t\treturn vec4(0.0, 0.0, 0.0, 0.0);\n    }\n    float dOuterNormalized = d \/ OUTER_RADIUS;\n    float outerStartZ = -sqrt(1.0 - dOuterNormalized*dOuterNormalized) * OUTER_RADIUS; \/\/ sqrt(1-x*x) = function of a circle :)\n    float outerEndZ = -outerStartZ;\n    if (d > INNER_RADIUS) {\n        \/\/ The ray only intersects the larger sphere, \n        \/\/ so we need to cast from the front to the back\n        return raymarch(vec3(coord, outerStartZ), vec3(coord, outerEndZ));\n    }\n    \n    float dInnerNormalized = d \/ INNER_RADIUS;\n    float innerStartZ = -sqrt(1.0 - dInnerNormalized*dInnerNormalized) * INNER_RADIUS; \/\/ sqrt(1-x*x) = function of a circle :)\n    float innerEndZ = -innerStartZ;\n    \/\/ The ray intersects both spheres.\n    vec4 frontPart = raymarch(vec3(coord, outerStartZ), vec3(coord, innerStartZ));\n    vec4 backPart = raymarch(vec3(coord, innerEndZ), vec3(coord, outerEndZ));\n    \/\/vec4 mr = merge_colours(frontPart, backPart);\n    vec4 final = frontPart + backPart;\n    return final;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy \/ min(iResolution.x, iResolution.y)) * 2.0 - vec2(iResolution.x \/ iResolution.y, 1.0);\n    fragColor = merge_colours(raymarch_ball(uv), vec4(0.0, 0.0, 0.0, 1.0));\n}","name":"","description":"","type":"image"}]}}