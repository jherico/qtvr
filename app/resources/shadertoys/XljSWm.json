{"Shader":{"ver":"0.1","info":{"id":"XljSWm","date":"1444238251","viewed":713,"name":"Menger Star","username":"Klems","description":"Quick 3D fractal I made after reading http:\/\/blog.zacharyabel.com\/2012\/02\/seeing-stars\/ Use the mouse to rotate the camera.","likes":4,"published":3,"flags":0,"tags":["3d","fractal","raymarch","menger"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n#define FRACTAL_ITER 4\n#define STEPS 150\n#define EPSILON 0.004\n\n\/\/ rotation\nmat2 rot( in float a ) {\n\tfloat c = cos(a);\n    float s = sin(a);\n    return mat2(c,s,-s,c);\t\n}\n\n\/\/ distance to a menger sponge of n = 1\nfloat crossDist( in vec3 p ) {\n    vec3 absp = abs(p);\n    \/\/ get the distance to the closest axis\n    float maxyz = max(absp.y, absp.z);\n    float maxxz = max(absp.x, absp.z);\n    float maxxy = max(absp.x, absp.y);\n    float cr = 1.0 - (step(maxyz, absp.x)*maxyz+step(maxxz, absp.y)*maxxz+step(maxxy, absp.z)*maxxy);\n    \/\/ cube\n    float cu = max(maxxy, absp.z) - 3.0;\n    \/\/ remove the cross from the cube\n    return max(cr, cu);\n}\n\n\/\/ menger sponge fractal\nfloat fractal( in vec3 p ) {\n    float scale = 1.0;\n    float dist = 0.0;\n    for (int i = 0 ; i < FRACTAL_ITER ; i++) {\n        dist = max(dist, crossDist(p)*scale);\n        p = fract((p-1.0)*0.5) * 6.0 - 3.0;\n        scale \/= 3.0;\n    }\n    return dist;\n}\n\n\/\/ plane formula\nfloat plane( in vec3 p ) {\n    const vec3 norm = vec3(0.57735);\n    return dot( p, norm )-smoothstep(0.05, 1.0, sin(iGlobalTime*0.0954-2.5248)*0.5+0.5)*6.0;\n}\n\n\/\/ main distance function\nfloat de( in vec3 p ) {\n    return max(fractal(p), plane(p));\n}\n\n\/\/ normal function\nvec3 normal( in vec3 p ) {\n\tconst vec3 e = vec3(0.0, 0.001, 0.0);\n    float dd = de(p);\n\treturn normalize(vec3(\n\t\tdd-de(p-e.yxx),\n\t\tdd-de(p-e.xyx),\n\t\tdd-de(p-e.xxy)));\t\n}\n\n\/\/ put normal vector in, get color out\nvec3 toColor( in vec3 normal ) {\n    vec3 color = normal*0.5+0.5;\n    color *= vec3(0.9, 0.7, 0.6);\n    color.b = cos((color.b)*4.3)*0.2+0.8;\n    return color;\n}\n\n\/\/ used for the background\nvec3 toGray( in vec3 color ) {\n    return vec3((color.r+color.g+color.b)\/3.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy * 2.0 - 1.0;\n\tuv.x *= iResolution.x \/ iResolution.y;\n\t\n\tvec3 from = vec3(-6, 0, 0);\n\tvec3 dir = normalize(vec3(uv*0.6, 1.0));\n\tdir.xz *= rot(3.1415*.5);\n\t\n\tvec2 mouse=(iMouse.xy \/ iResolution.xy - 0.5) * 0.5;\n\tif (iMouse.z < 1.0) mouse = vec2(0.0);\n\t\n\tmat2 rotxz = rot(sin(iGlobalTime*0.0652-0.5)*0.8+mouse.x*5.0+2.5);\n\tmat2 rotxy = rot(0.3-mouse.y*5.0);\n\t\n\tfrom.xy *= rotxy;\n\tfrom.xz *= rotxz;\n\tdir.xy  *= rotxy;\n\tdir.xz  *= rotxz;\n\n\tfloat totdist = 0.0;\n\tbool set = false;\n    float onPlane = 0.0;\n\tvec3 norm = vec3(0);\n\tfloat ao = 0.0;\n    vec3 p = vec3(0);\n    \n\tfor (int steps = 0 ; steps < STEPS ; steps++) {\n\t\tp = from + totdist * dir;\n\t\tfloat fdist = fractal(p);\n        float pdist = plane(p);\n        float dist = max(fdist, pdist);\n        totdist += dist;\n\t\tif (dist < EPSILON) {\n\t\t\tset = true;\n            onPlane = abs(fdist-pdist);\n\t\t\tnorm = normal(p);\n            ao = float(steps) \/ float(STEPS);\n            break;\n\t\t}\n\t}\n    \t\n    if (set) {\n        \/\/ get the color on the surface\n        vec3 surfaceColor = toColor(norm);\n       \tsurfaceColor = mix(surfaceColor, toGray(surfaceColor), 0.2);\n        surfaceColor = surfaceColor * 0.8+0.2;\n        fragColor.rgb = surfaceColor;\n        \/\/ add fog\n        fragColor.rgb -= totdist*0.04;\n        \/\/ ambient occlusion\n        fragColor.rgb -= smoothstep(0.0, 0.3, ao)*0.4;\n        \/\/ add a pulse near the plane\n        fragColor.rgb += (1.0-smoothstep(0.0, 0.02, onPlane))*surfaceColor*0.8;\n    } else {\n        \/\/ get the background color slightly desaturated\n        fragColor.rgb = toColor(-dir);\n        fragColor.rgb = mix(toGray(fragColor.rgb), fragColor.rgb, 0.4)*0.8;\n    }\n    \n    fragColor.rgb = clamp(fragColor.rgb, 0.0, 1.0);\n    fragColor.a = 1.0;\n\t\n}","name":"","description":"","type":"image"}]}}