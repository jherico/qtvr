{"Shader":{"ver":"0.1","info":{"id":"4tSXWt","date":"1447106958","viewed":992,"name":"07","username":"yiwenl","description":"07","likes":3,"published":3,"flags":0,"tags":["raymarch"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":24,"src":"\/presets\/cube02_0.jpg","ctype":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"vec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )\/k;\n}\n\nfloat smin( float a, float b )\n{\n    return smin(a, b, 3.0);\n}\n\nfloat box( vec3 p, vec3 b ) {\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat box(vec3 p, float b) {\n\treturn box(p, vec3(b));\n}\nfloat iSphere(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\n\nfloat map(vec3 pos) {\n    pos.xz = rotate(pos.xz, sin(iGlobalTime*.1)*.5);\n\tpos.yz = rotate(pos.yz, cos(iGlobalTime*.15)*.5);\n    float dBox = box(pos, 2.0);\n    \n    float s1 = box(pos - vec3(sin(iGlobalTime*.55)*1.85, cos(iGlobalTime*.19) * 0.95, sin(iGlobalTime*.91) * 1.21) * 1.0, 2.6451);\n    float s2 = box(pos - vec3(cos(iGlobalTime*.43)*1.55, sin(iGlobalTime*.38) * 1.12, cos(iGlobalTime*.76) * 1.67) * 1.4, 2.564821);\n    float s3 = box(pos - vec3(sin(iGlobalTime*.26)*2.52, cos(iGlobalTime*.57) * 0.56, sin(iGlobalTime*.12) * 1.58) * 1.2, 2.98441);\n    float s4 = box(pos - vec3(sin(iGlobalTime*.97)*1.72, sin(iGlobalTime*.22) * 0.81, cos(iGlobalTime*.34) * 0.97) * 1.5, 2.12373);\n    float s5 = box(pos - vec3(sin(iGlobalTime*.62)*1.47, cos(iGlobalTime*.76) * 0.73, sin(iGlobalTime*.75) * 1.45) * 1.7, 2.2748186);\n    \n    return smin(s1, smin(s2, smin(s3, smin(s4, s5))));\n}\n\nconst float PI = 3.141592657;\nconst vec3 lightDirection = vec3(1.0, 1.0, -1.0);\nconst vec4 lightBlue = vec4(186.0, 209.0, 222.0, 255.0)\/255.0;\n\nfloat diffuse(vec3 normal) {\n    return max(dot(normal, normalize(lightDirection)), 0.0);   \n}\n\nfloat specular(vec3 normal, vec3 dir) {\n\tvec3 h = normalize(normal - dir);\n\treturn pow(max(dot(h, normal), 0.0), 40.0);\n}\n\nvec3 envLight(vec3 normal, vec3 dir) {\n\tvec3 eye = -dir;\n\tvec3 r = reflect( eye, normal );\n    float m = 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) );\n    vec3 color = textureCube( iChannel1, r ).rrr;\n    return color;\n}\n\nfloat ao( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.06*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ ) {\n\t\tfloat h = map( ro + rd*t );\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\nvec3 getColor(vec3 pos, vec3 normal, vec3 dir) {\n    vec3 color = envLight(normal, dir);\n    float _ao = ao(pos, normal);\n    vec3  lig     = normalize( vec3(1.0, 1.0, -1.0) );\n\tfloat shadow  = softshadow(pos, lig, 0.02, 2.5 );\n    shadow = mix(shadow, 1.0, .5);\n    return color * _ao * shadow;\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float focus = 1.25;\n    vec3 pos = vec3(0.0, 0.0, -10.0);\n    vec3 dir = normalize(vec3(uv, focus));\n    \n    vec4 color = vec4(.0);\n    float d;\n    bool hit = false;\n    const int NUM_ITER = 64;\n    for(int i=0; i<NUM_ITER; i++) {\n        d = map(pos);\n        if(d < 0.0001) {\n            hit = true;\n        }\n        \n        pos += d * dir;\n        if(length(pos) > 10.0) break;\n    }\n    \n    if(hit) {\n\t\tvec3 normal = computeNormal(pos);\n\t\tcolor.rgb = getColor(pos, normal, dir);\n\t\tcolor.a = 1.0;\n    }\n    \n    color = color;\n    \n\tfragColor = vec4(color);\n}","name":"","description":"","type":"image"}]}}