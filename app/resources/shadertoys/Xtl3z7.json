{"Shader":{"ver":"0.1","info":{"id":"Xtl3z7","date":"1420301816","viewed":690,"name":"Vorono\u00ef Experiment 2","username":"aiekick","description":"Voronoi Experiment 2<br\/>Mouse axis Y : control ray marchin iterations (Current number in bottom left)<br\/>Mouse axis X : control rugosity density (current number in bottom right)","likes":0,"published":3,"flags":0,"tags":["raymarching","voronoi","mouse","experiment","sphere","blob","mapping","printing"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#define ITERATIONS_MAX 50\n#define RUGOSITY_DENSITY_MAX 50.\n#define RUGOSITY_DENSITY_DEFAULT 20.\n#define ROT_SPEED 0.5\n#define TIME_RATIO iGlobalTime*0.5\n\/\/ GLSL Number Printing - @P_Malin (CCO 1.0)=> https:\/\/www.shadertoy.com\/view\/4sBSWW\nfloat DigitBin(const in int x){\n    if(x==0) return 480599.0; if(x==1) return 139810.0; if(x==2) return 476951.0; if(x==3) return 476999.0;\tif(x==4) return 350020.0;\n    if(x==5) return 464711.0; if(x==6) return 464727.0; if(x==7) return 476228.0; if(x==8) return 481111.0; if(x==9) return 481095.0; return 0.0;}\nfloat PrintValue(const in vec2 vPixelCoords, const in vec2 vFontSize, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces){\n    vec2 vStringCharCoords = (gl_FragCoord.xy - vPixelCoords) \/ vFontSize;\n    if ((vStringCharCoords.y < 0.0) || (vStringCharCoords.y >= 1.0)) return 0.0;\n\tfloat fLog10Value = log2(abs(fValue)) \/ log2(10.0);\n\tfloat fBiggestIndex = max(floor(fLog10Value), 0.0);\n\tfloat fDigitIndex = fMaxDigits - floor(vStringCharCoords.x);\n\tfloat fCharBin = 0.0;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.01)) {\n\t\tif(fDigitIndex > fBiggestIndex) {\n            if((fValue < 0.0) && (fDigitIndex < (fBiggestIndex+1.5))) fCharBin = 1792.0;} \n        else {\t\t\n\t\t\tif(fDigitIndex == -1.0) {\n\t\t\t\tif(fDecimalPlaces > 0.0) fCharBin = 2.0;} \n            else {\n\t\t\t\tif(fDigitIndex < 0.0) fDigitIndex += 1.0;\n\t\t\t\tfloat fDigitValue = (abs(fValue \/ (pow(10.0, fDigitIndex))));\n                float kFix = 0.0001;\n                fCharBin = DigitBin(int(floor(mod(kFix+fDigitValue, 10.0))));} } }\n    return floor(mod((fCharBin \/ pow(2.0, floor(fract(vStringCharCoords.x) * 4.0) + (floor(vStringCharCoords.y * 5.0) * 4.0))), 2.0));}\nvec3 WriteValueToScreenAtPos(float vValue, vec2 vPixelCoord, vec3 vColour, vec2 vFontSize, float vDigits, float vDecimalPlaces, vec3 vColor){\n    float num = PrintValue(vPixelCoord, vFontSize, vValue, vDigits, vDecimalPlaces);\n    return mix( vColour, vColor, num);}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ VORONOI based on IQ shader https:\/\/www.shadertoy.com\/view\/ldl3W8\n\/\/vec2 getHash2BasedTex(vec2 p) {return texture2D( iChannel0, (p+0.5)\/256.0, -100.0 ).xy;}\/\/texture based white noise\nvec2 getHash2BasedProc(vec2 p){return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);}\/\/procedural white noise\nvec3 getVoronoi(vec2 x){\n    vec2 n=floor(x),f=fract(x),mr;\n    float md=5.;\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ ){\n        vec2 g=vec2(float(i),float(j));\n\t\tvec2 o=0.5+0.5*sin(TIME_RATIO+6.2831*getHash2BasedProc(n+g));\/\/animated\n        vec2 r=g+o-f;\n        float d=dot(r,r);\n        if( d<md ) {md=d;mr=r;} }\n    return vec3(md,mr);}\n\/\/ sphere mapping of v2 voronoi\nvec3 voronoiSphereMapping(vec3 n){\n\tvec2 uv=vec2(atan(n.x,n.z),acos(n.y));\n    return getVoronoi(1.5*uv);}\n\/\/ rotate\nfloat RotY=0.0,RotX=0.0;\nvec3 rotateX(vec3 pos, float alpha) {\nmat4 trans= mat4(1.0, 0.0, 0.0, 0.0, 0.0, cos(alpha), -sin(alpha), 0.0, 0.0, sin(alpha), cos(alpha), 0.0, 0.0, 0.0, 0.0, 1.0);\nreturn vec3(trans * vec4(pos, 1.0));}\nvec3 rotateY(vec3 pos, float alpha) {\nmat4 trans2= mat4(cos(alpha), 0.0, sin(alpha), 0.0, 0.0, 1.0, 0.0, 0.0,-sin(alpha), 0.0, cos(alpha), 0.0, 0.0, 0.0, 0.0, 1.0);\nreturn vec3(trans2 * vec4(pos, 1.0));}\n\/\/ sphere + sphere cloud with center points and radius from voronoi\nfloat density=RUGOSITY_DENSITY_DEFAULT;\nfloat map(vec3 p){\n    vec3 rotPX = rotateX(p, RotX*ROT_SPEED);\n    vec3 rotPXY = rotateY(rotPX, RotY*ROT_SPEED);\n    if ( iMouse.z > 0. ) {density=iMouse.x\/iResolution.x * RUGOSITY_DENSITY_MAX;}\n\tfloat rugosity=cos(density*rotPXY.x)*sin(density*rotPXY.y)*sin(density*rotPXY.z)*cos(256.1)*sin(0.8);\n\tfloat disp=length(vec4(voronoiSphereMapping(normalize(p)),1.))*0.4-0.8;\n    return length(p)-1.+disp+rugosity;}\n\/\/ ray-marcher based on sebastien shader https:\/\/www.shadertoy.com\/view\/XtXGzM\nfloat march(vec3 ro,vec3 rd, int iter){\n\tfloat maxd=10.;\n    float tmpDist=1.;\n    float finalDist;\n    for(int i=0;i<ITERATIONS_MAX;i++){\n        if(i>iter)break;\n        if( tmpDist<0.0001||finalDist>maxd) break;\n\t    tmpDist=map(ro+rd*finalDist);\n        finalDist+=tmpDist; }\n    if(finalDist>maxd) finalDist=-1.;\n\treturn finalDist; }\n\/\/ normal calc based on nimitz shader https:\/\/www.shadertoy.com\/view\/4sSSW3\nvec3 normal(const in vec3 p){  \n    vec2 e = vec2(-1., 1.)*0.005;   \n\treturn normalize(e.yxx*map(p + e.yxx) + e.xxy*map(p + e.xxy) + e.xyx*map(p + e.xyx) + e.yyy*map(p + e.yyy) );}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    vec3 vColour = vec3(0.);\n    vec2 uv = fragCoord.xy\/iResolution.xy*2.-1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    RotY = iGlobalTime * ROT_SPEED;\n    RotX = iGlobalTime * ROT_SPEED;    \n    vec3 ro=vec3(0.,0.,1.9),rd=normalize(vec3(uv,-0.8));\n   \tint nIter = ITERATIONS_MAX;\n    if ( iMouse.z > 0. ) {nIter=int(floor(iMouse.y\/iResolution.y * float(nIter)));}\n    float t=march(ro,rd,nIter);\n    if(t>0.){\n        vec3 pos = ro+t*rd;\n        float b=dot(normal(pos),normalize(pos))*0.8;\n        vColour=b*mix(vec3(max(0.,2.3-t)),voronoiSphereMapping(normalize(pos)),0.5)+pow(b,8.0)*(1.0-t*.01); } \n    \/\/ count iteration printing bottom left => Mouse Axis Y\n    vColour = WriteValueToScreenAtPos(float(nIter), vec2(2.), vColour, vec2(8.0, 15.0), 1., 0., vec3(0.9));\n    \/\/ rugosity density printing bottom right => Mouse Axis X\n   \tvColour = WriteValueToScreenAtPos(density, vec2(iResolution.x-16., 2.), vColour, vec2(8.0, 15.0), 1., 0., vec3(0.9));\n    fragColor.rgb = vColour; \n}","name":"","description":"","type":"image"}]}}