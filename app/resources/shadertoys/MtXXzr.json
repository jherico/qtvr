{"Shader":{"ver":"0.1","info":{"id":"MtXXzr","date":"1434042024","viewed":725,"name":"Weird Fractal 5","username":"aiekick","description":"Weird Fractal 5","likes":3,"published":3,"flags":32,"tags":["fractal","weird","5"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/based on my Weird Fractal 4 : https:\/\/www.shadertoy.com\/view\/MtsGzB\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tfragColor = texture2D(iChannel0, fragCoord \/ iResolution.xy);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/based on my Weird Fractal 4 : https:\/\/www.shadertoy.com\/view\/MtsGzB\n\n\/\/ matrix op\nmat3 getRotYMat(float a){return mat3(cos(a),0.,sin(a),0.,1.,0.,-sin(a),0.,cos(a));}\n\nfloat map(in vec3 p, in vec3 q, inout vec3 r, inout float m)\n{\n\tfloat d = 0.;\n    for (int j = 0; j < 3 ; j++)\n    \tr=max(r*=r*=r*=r=mod(q*m+1.,2.)-1.,r.yzx),\n        d=max(d,( 0.29 -length(r)*0.6)\/m)*0.8,\n        m*=1.08;\n    return d;\n}\n\nvec4 fractal(vec2 uv)\n{\n\tvec2 s = iResolution.xy;\n    float t = iGlobalTime*.3, c,d,m,f=0.;\n    vec3 p=vec3(2.*(2.*uv-s)\/s.x,1.),r=p-p,q=r;\n    p*= mat3(0,-1,0,1,0,0,0,0,1);\n    p*=getRotYMat(-t);\n    p.y\/=2.;\n    q.zx += 10.+vec2(sin(t),cos(t))*3.;\n    for (float i=1.; i>0.; i-=.002) \n    {\n   \t\tc=d=0.,m=1.;\n        f+=0.01;\n        d = map(p,q,r,m);\n        q+=p*d;\n        c = i;\n        if(d<0.001) break;\n    }\n    \n    vec3 e = vec3( 0.1, 0., 0. );\n    vec3 n = normalize(vec3(\n    \tmap(p,q+e.xyy,r,m) - map(p,q-e.xyy,r,m),\n        map(p,q+e.yxy,r,m) - map(p,q-e.yxy,r,m),\n        map(p,q+e.yyx,r,m) - map(p,q-e.yyx,r,m) ));\n\n    float k = dot(r,r+.15);\n    vec3 col= vec3(1.,k,k\/c)-vec3(0.86,0.44,0.13);\n    return vec4(col\/f, 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tfragColor = fractal(fragCoord.xy) * 0.8 + texture2D(iChannel0, fragCoord \/ iResolution.xy) * 0.2;\n}","name":"","description":"","type":"buffer"}]}}