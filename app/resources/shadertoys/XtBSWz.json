{"Shader":{"ver":"0.1","info":{"id":"XtBSWz","date":"1442668645","viewed":448,"name":"Sprite Fonts","username":"4rknova","description":"Font rendering.<br\/>Based on FlyGuy's shader: https:\/\/www.shadertoy.com\/view\/llSGRm","likes":9,"published":3,"flags":0,"tags":["fonts"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2015\n\/\/ WTFPL\n\n\/\/ Based on FlyGuy's shader: https:\/\/www.shadertoy.com\/view\/llSGRm\n#define FONTSC_SZ vec2(2.5, 5)     \/\/ Font size\n#define SCREEN_SZ vec2(800, 600) \/\/ Screen size\n#define CHR       vec4(6,7,6.*FONTSC_SZ.x,9.*FONTSC_SZ.y)  \/\/ Character size (xy), spacing(zw)\n#define STR_SZ(c) vec2(c*CHR.zw) \/\/ String size\n#define DWN_SC    2.             \/\/ Downscale\n\n#define C vec2\nC c_spc = C(      0,      0), c_exc = C( 276705,  32776), c_quo = C(1797408,      0)\n, c_hsh = C(  10738,1134484), c_dol = C( 538883,  19976), c_pct = C(1664033,  68006)\n, c_amp = C( 545090, 174362), c_apo = C( 798848,      0), c_lbr = C( 270466,  66568)\n, c_rbr = C( 528449,  33296), c_ast = C(  10471,1688832), c_crs = C(   4167,1606144)\n, c_per = C(      0,   1560), c_dsh = C(      7,1572864), c_com = C(      0,   1544)\n, c_lsl = C(   1057,  67584), c_0   = C( 935221, 731292), c_1   = C( 274497,  33308)\n, c_2   = C( 934929,1116222), c_3   = C( 934931,1058972), c_4   = C( 137380,1302788)\n, c_5   = C(2048263,1058972), c_6   = C( 401671,1190044), c_7   = C(2032673,  66576)\n, c_8   = C( 935187,1190044), c_9   = C( 935187,1581336), c_col = C(    195,   1560)\n, c_scl = C(    195,   1544), c_les = C( 135300,  66052), c_equ = C(    496,   3968)\n, c_grt = C( 528416, 541200), c_que = C( 934929,1081352), c_ats = C( 935285, 714780)\n, c_A   = C( 935188, 780450), c_B   = C(1983767,1190076), c_C   = C( 935172, 133276)\n, c_D   = C(1983764, 665788), c_E   = C(2048263,1181758), c_F   = C(2048263,1181728)\n, c_G   = C( 935173,1714334), c_H   = C(1131799,1714338), c_I   = C( 921665,  33308)\n, c_J   = C(  66576, 665756), c_K   = C(1132870, 166178), c_L   = C(1065220, 133182)\n, c_M   = C(1142100, 665762), c_N   = C(1140052,1714338), c_O   = C( 935188, 665756)\n, c_P   = C(1983767,1181728), c_Q   = C( 935188, 698650), c_R   = C(1983767,1198242)\n, c_S   = C( 935171,1058972), c_T   = C(2035777,  33288), c_U   = C(1131796, 665756)\n, c_V   = C(1131796, 664840), c_W   = C(1131861, 699028), c_X   = C(1131681,  84130)\n, c_Y   = C(1131794,1081864), c_Z   = C(1968194, 133180), c_lsb = C( 925826,  66588)\n, c_rsl = C(  16513,  16512), c_rsb = C( 919584,1065244), c_pow = C( 272656,      0)\n, c_usc = C(      0,     62), c_a   = C(    224, 649374), c_b   = C(1065444, 665788)\n, c_c   = C(    228, 657564), c_d   = C(  66804, 665758), c_e   = C(    228, 772124)\n, c_f   = C( 401543,1115152), c_g   = C(    244, 665474), c_h   = C(1065444, 665762)\n, c_i   = C( 262209,  33292), c_j   = C( 131168,1066252), c_k   = C(1065253, 199204)\n, c_l   = C( 266305,  33292), c_m   = C(    421, 698530), c_n   = C(    452,1198372)\n, c_o   = C(    228, 665756), c_p   = C(    484, 667424), c_q   = C(    244, 665474)\n, c_r   = C(    354, 590904), c_s   = C(    228, 114844), c_t   = C(   8674,  66824)\n, c_u   = C(    292,1198868), c_v   = C(    276, 664840), c_w   = C(    276, 700308)\n, c_x   = C(    292,1149220), c_y   = C(    292,1163824), c_z   = C(    480,1148988)\n, c_lpa = C( 401542,  66572), c_bar = C( 266304,  33288), c_rpa = C( 788512,1589528)\n, c_tid = C( 675840,      0), c_lar = C(   8387,1147904);\n\nvec2 carret = vec2(0);\n\n\/\/ Returns the digit sprite for the given number.\nvec2 digit(float d) {    \n    vec3 r = vec3(0, 0, floor(d));\n         if (r.z == 0.) r.xy = c_0; else if (r.z == 1.) r.xy = c_1;\n    else if (r.z == 2.) r.xy = c_2; else if (r.z == 3.) r.xy = c_3;\n    else if (r.z == 4.) r.xy = c_4; else if (r.z == 5.) r.xy = c_5;\n    else if (r.z == 6.) r.xy = c_6; else if (r.z == 7.) r.xy = c_7;\n    else if (r.z == 8.) r.xy = c_8; else if (r.z == 9.) r.xy = c_9;\n    return r.xy;\n}\n\/\/ Extracts bit\nfloat bit(float n, float b) {\n    b = clamp(b,-1.,22.);\n    return floor(mod(floor(n \/ pow(2.,floor(b))),2.));\n}\n\/\/ Returns the pixel at uv in the given bit-packed sprite.\nfloat spr(vec2 spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv\/ FONTSC_SZ);\n    \/\/Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float b = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    \/\/Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? bit(spr.x, b - 21.0) + bit(spr.y, b) : 0.0;\n}\n\/\/ Prints a character and moves the carret forward by 1 character width.\nfloat print_char(vec2 ch, vec2 uv) { \n    float px = spr(ch, CHR.xy, uv - carret);\n    carret.x += CHR.z;\n    return px;\n}\n\/\/ Prints out the given number starting at pos.\nfloat print_number(float number,vec2 pos, vec2 uv)\n{\n\tvec2 dec_pos = pos;\n    float result = 0.;\n    \n\tfor(int i = 3; i >= -2; --i) {\n        \/\/Clip off leading zeros.\n        float clip = float(abs(number) > pow(10.0, float(i)) || i == 0);        \n        float d = mod(number \/ pow(10., float(i)),10.);\n        \n        if(i == -1) {\n            result += spr(c_per,CHR.xy, uv - dec_pos) * clip;\n            dec_pos.x += CHR.z * clip;\n        }\n        \n        result += spr(digit(d),CHR.xy, uv - dec_pos) * clip;\n        dec_pos.x += CHR.z * clip;\n    }\n    \n    return result;\n}\n\n#define T(x) print_char(x,uv)\nfloat Text(vec2 uv)\n{    \n    vec2 res = iResolution.xy \/ DWN_SC,\n         pos = vec2(150,350.5-2.*CHR.y);\n    \n    carret = pos;\n    \n\tfloat r = 0.;\n    r += T(c_A) + T(c_B) + T(c_C) + T(c_D) + T(c_E) + T(c_F)\n       + T(c_G) + T(c_H) + T(c_I) + T(c_J) + T(c_K) + T(c_L)\n       + T(c_M) + T(c_N) + T(c_O) + T(c_P) + T(c_Q) + T(c_R)\n       + T(c_S) + T(c_T) + T(c_U) + T(c_V) + T(c_W) + T(c_X)\n       + T(c_Y) + T(c_Z);\n    \n    carret = pos + vec2(0, -40.);\n    \n    r += T(c_a) + T(c_b) + T(c_c) + T(c_d) + T(c_e) + T(c_f)\n       + T(c_g) + T(c_h) + T(c_i) + T(c_j) + T(c_k) + T(c_l)\n       + T(c_m) + T(c_n) + T(c_o) + T(c_p) + T(c_q) + T(c_r)\n       + T(c_s) + T(c_t) + T(c_u) + T(c_v) + T(c_w) + T(c_x)\n       + T(c_y) + T(c_z);\n    \n    \n    carret = pos + vec2(0, -80.);\n    r += T(c_0) + T(c_1) + T(c_2) + T(c_3) + T(c_4) + T(c_5)\n       + T(c_6) + T(c_7) + T(c_8) + T(c_9);\n    \n    carret = pos + vec2(0, -120.);\n    r += T(c_exc) + T(c_quo) + T(c_hsh) + T(c_dol) + T(c_pct)\n       + T(c_amp) + T(c_apo) + T(c_lbr) + T(c_rbr) + T(c_ast)\n       + T(c_crs) + T(c_per) + T(c_dsh) + T(c_com) + T(c_lsl)\n       + T(c_col) + T(c_scl) + T(c_les) + T(c_equ) + T(c_grt)\n       + T(c_que) + T(c_ats) + T(c_lsb) + T(c_rsl) + T(c_rsb)\n       + T(c_pow) + T(c_quo) + T(c_usc) + T(c_lpa) + T(c_bar)\n       + T(c_rpa) + T(c_tid) + T(c_lar) + T(c_spc);\n        \n\tr += print_number(iGlobalTime, pos + vec2(1,50), uv);\n    \n    return r;\n}\n\nvoid mainImage(out vec4 c, vec2 p)\n{\n    vec2 uv = p.xy \/ iResolution.xy * SCREEN_SZ;\n\tc = vec4(vec3(1,0,0) * Text(uv),1);\n}","name":"","description":"","type":"image"}]}}