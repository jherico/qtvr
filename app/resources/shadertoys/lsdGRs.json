{"Shader":{"ver":"0.1","info":{"id":"lsdGRS","date":"1450549582","viewed":248,"name":"Android Movie","username":"dr2","description":"Family movies anyone (mouse enabled)?","likes":14,"published":3,"flags":0,"tags":["raymarching","lighting","android","cinema"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Android Movie\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define WALL_ILLUM   \/\/ (undefine to reduce workload)\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrERCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z - 0.5 * h) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 sunDir, qHit, rmSize;\nvec2 scrnSize;\nfloat dstFar, tCur, rAngH, rAngL, rAngA, gDisp, scrnUp;\nint idObj, idObjMv;\nbool walk;\n\nvec3 BgColMv (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    f = Fbm2 (0.05 * (ro.xz + rd.xz * (50. - ro.y) \/ rd.y));\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    sd = - ro.y \/ rd.y;\n    col = mix (vec3 (0.6, 0.5, 0.3),\n       0.9 * (vec3 (0.1, 0.2, 0.4) + 0.2) + 0.1, pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nfloat ObjDfMv (vec3 p)\n{\n  vec3 q, pp;\n  vec2 ip;\n  float dMin, d, bf, hGap, bFac, ah;\n  hGap = 2.5;\n  bf = PrBox2Df (p.xz, vec2 (7. * hGap));\n  pp = p;\n  ip = floor ((pp.xz + hGap) \/ (2. * hGap));\n  pp.xz = pp.xz - 2. * hGap * ip;\n  bFac = (ip.x == 0. && ip.y == 0.) ? 1.6 : 1.;\n  ah = rAngH * (walk ? sign (1.1 - bFac) : - step (1.1, bFac));\n  dMin = dstFar;\n  q = pp;\n  q.y -= 1.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q = pp;\n  q.y -= 0.2;\n  d = min (d, PrERCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  q.x = abs (q.x) - 0.4;\n  q.y -= 1.9;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  d = min (d, PrERCylDf (q.xzy, 0.06, 0.04, 0.4 * (2. * bFac - 1.)));\n  q = pp;\n  q.x = abs (q.x) - 1.05;\n  q.y -= 1.1;\n  q.yz = Rot2D (q.yz, rAngA * (walk ? sign (pp.x) : 1.));\n  q.y -= -0.9;\n  d = min (d, PrERCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = pp;\n  q.x = abs (q.x) - 0.4;\n  q.yz = Rot2D (q.yz, - rAngL * sign (pp.x));\n  q.y -= -0.8;\n  d = min (d, PrERCylDf (q.xzy, 0.25, 0.15, 0.55));\n  d = max (d, bf);\n  if (d < dMin) { dMin = d;  idObjMv = 1; }\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  q.x = abs (q.x) - 0.4;\n  q -= vec3 (0., 1.6 + 0.3 * (bFac - 1.), 0.7 - 0.3 * (bFac - 1.));\n  d = PrSphDf (q, 0.15 * bFac);\n  d = max (d, bf);\n  if (d < dMin) { dMin = d;  idObjMv = 2; }\n  d = p.y + 1.;\n  if (d < dMin) { dMin = d;  idObjMv = 0;  qHit = p; }\n  return dMin;\n}\n\nfloat ObjRayMv (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDfMv (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNfMv (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDfMv (p + e.xxx), ObjDfMv (p + e.xyy),\n     ObjDfMv (p + e.yxy), ObjDfMv (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ChqPat (vec3 p, float dHit)\n{\n  vec2 q, iq;\n  float f, s;\n  p.z += gDisp;\n  q = p.xz + vec2 (0.5, 0.25);\n  iq = floor (q);\n  s = 0.5 + 0.5 * Noisefv2 (q * 107.);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = smoothstep (0., 0.02, abs (fract (q + 0.5) - 0.5));\n  f = dHit \/ dstFar;\n  return s * (1. - 0.9 * exp (-2. * f * f) * (1. - q.x * q.y));\n}\n\nvec3 ObjColMv (vec3 rd, vec3 vn, float dHit)\n{\n  vec3 col;\n  if (idObjMv == 1) col = vec3 (0.65, 0.8, 0.2);\n  else if (idObjMv == 2) col = vec3 (0.8, 0.8, 0.);\n  else col = mix (vec3 (0.4, 0.3, 0.2), vec3 (0.6, 0.5, 0.4),\n     (0.5 + 0.5 * ChqPat (qHit \/ 5., dHit)));\n  return col * (0.3 + 0.7 * max (dot (vn, sunDir), 0.)) +\n     0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n}\n\nfloat ObjSShadowMv (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 15; j ++) {\n    h = ObjDfMv (ro + rd * d);\n    sh = min (sh, 10. * h \/ d);\n    d += 0.2;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[5], rPath, a, r, tC, tL, tWf, tWb;\n  bool rotStep;\n  rPath = 28.;\n  tC = pi * rPath \/ 8.;\n  tL = 2. * rPath \/ 5.;\n  tWf = 4.;\n  tWb = 2.;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tWf;\n  ti[2] = ti[1] + tL;\n  ti[3] = ti[2] + tWb;\n  ti[4] = ti[3] + tC;\n  p.y = 1.;\n  t = mod (t, ti[4]);\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    tr.y = rPath;\n  } else if (t < ti[2]) {\n    tr.y = rPath - 2. * rPath * (t - ti[1]) \/ (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    tr.y = - rPath;\n  } else {\n    rotStep = true;\n    a = 1.5 + (t - ti[3]) \/ (ti[4] - ti[3]);\n    r = rPath;\n  }\n  if (rotStep) {\n    a *= pi;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    p.xz = tr;\n  }\n  p.xz -= 2.5;\n  return p;\n}\n\nvec3 ShowSceneMv (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, c;\n  float dstHit, refl;\n  int idObjT;\n  dstHit = ObjRayMv (ro, rd);\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObjMv;\n    vn = ObjNfMv (ro);\n    col = ObjColMv (rd, vn, dstHit);\n    idObjMv = idObjT;\n    if (idObjMv > 0) {\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      refl = 0.2 + 0.3 * pow (1. - dot (vn, rd), 4.);\n      dstHit = ObjRayMv (ro, rd);\n      if (dstHit < dstFar) {\n        ro += rd * dstHit;\n\tc = ObjColMv (rd, ObjNfMv (ro), dstHit);\n      } else {\n        c = BgColMv (ro, rd);\n      }\n      col = mix (col, c, refl);\n    }\n    col *= (0.8 + 0.2 * ObjSShadowMv (ro, sunDir));\n  } else {\n    col = BgColMv (ro, rd);\n  }\n  return col;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float d, dMin, bf;\n  dMin = dstFar;\n  d = p.y;\n  if (d < dMin) { dMin = d;  idObj = 10; }\n  d = 2. * rmSize.y - p.y;\n  if (d < dMin) { dMin = d;  idObj = 11; }\n  d = rmSize.x - abs (p.x);\n  if (d < dMin) { dMin = d;  idObj = 12; }\n  d = p.z + rmSize.z;\n  if (d < dMin) { dMin = d;  idObj = 13; }\n  d = - p.z + rmSize.z;\n  if (d < dMin) { dMin = d;  idObj = 14; }\n  bf = PrBox2Df (p.xz - vec2 (0., -1.), vec2 (7.5, 6.));\n  q = p;\n  q.xz = mod (q.xz + 1.5, 3.) - 1.5;\n  q.y -= 0.25 * rmSize.y;\n  qq = q;\n  qq.y -= 1.2;\n  d = max (PrSphDf (qq, 0.85), - qq.y);\n  qq = q;\n  qq.y -= 0.2;\n  d = min (d, PrERCylDf (qq.xzy, 0.9, 0.28, 0.7));\n  qq = q;\n  qq.x = abs (qq.x) - 0.4;\n  qq.y -= 1.9;\n  qq.xy = Rot2D (qq.xy, 0.2 * pi);\n  d = min (d, PrERCylDf (qq.xzy, 0.06, 0.04, 0.2));\n  qq = q;\n  qq.x = abs (qq.x) - 1.05;\n  qq.y -= 1.1;\n  qq.yz = Rot2D (qq.yz, 0.1 + 0.85 * rAngA * (walk ? 0. : 1.));\n  qq.y -= -0.9;\n  d = min (d, PrERCylDf (qq.xzy, 0.2, 0.15, 0.6));\n  qq = q;\n  qq.x = abs (qq.x) - 0.4;\n  qq.y -= -0.8;\n  d = min (d, PrERCylDf (qq.xzy, 0.25, 0.15, 0.55));\n  qq = q;\n  qq.x = abs (qq.x) - 0.4;\n  qq -= vec3 (0., 1.6, 0.7);\n  d = min (d, PrSphDf (qq, 0.25));\n  d = max (bf, d);\n  if (d < dMin) { dMin = d;  idObj = 15; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 BrickCol (vec2 p)\n{\n  vec2 q, iq;\n  q = p * vec2 (1.\/62., 1.\/31.);\n  iq = floor (q);\n  if (2. * floor (iq.y \/ 2.) != iq.y) q.x += 0.5;\n  q = smoothstep (0.02, 0.05, abs (fract (q + 0.5) - 0.5));\n  return (0.7 + 0.3 * q.x * q.y) * vec3 (0.6, 0.55, 0.5);\n}\n\nvec3 ObjCol (vec3 p)\n{\n  vec3 col;\n  if (idObj == 10) col = vec3 (0.2, 0.15, 0.1);\n  else if (idObj == 11) col = vec3 (0.8, 0.8, 0.9);\n  else if (idObj == 12) {\n    col = BrickCol (40. * p.zy);\n  } else if (idObj == 13) {\n    col = BrickCol (40. * p.xy);\n  } else if (idObj == 15) col = vec3 (0.6);\n  return col;\n}\n\nvec3 ScrnCol (vec2 w)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  float f;\n  ro = TrackPath (tCur);\n  vd = normalize (vec3 (0., 0.3 * rmSize.y, 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (w \/ scrnSize.y, 3.));\n  return ShowSceneMv (ro, rd);\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p, q;\n  float d;\n  const float e = 1.e-10;\n  p = mix (vec4 (c.bg, vec2 (-1., 2.\/3.)), vec4 (c.gb, vec2 (0., -1.\/3.)),\n     step (c.b, c.g));\n  q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  d = q.x - min (q.w, q.y);\n  return vec3 (abs (q.z + (q.w - q.y) \/ (6. * d + e)), d \/ (q.x + e), q.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec3 ScrnProj (vec3 ro)\n{\n  vec3 vd, col;\n  vd = normalize (vec3 (0., 1., 3.5) * rmSize - ro);\n  ro += vd * (rmSize.z - ro.z) \/ vd.z;\n  ro.y -= rmSize.y + scrnUp;\n  if (abs (ro.x) < scrnSize.x && abs (ro.y) < scrnSize.y) {\n    col = ScrnCol (ro.xy);\n    col = HsvToRgb (vec3 (1., 0.5, 1.) * RgbToHsv (col));\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid SetState ()\n{\n  float tCyc, wkSpd;\n  wkSpd = 0.7;\n  tCyc = mod (wkSpd * tCur, 7.);\n  if (tCyc < 4.) {\n    walk = true;\n    tCyc = mod (tCyc, 1.);\n    gDisp = mod (wkSpd * tCur, 1.);\n    rAngH = -0.7 * sin (2. * pi * tCyc);\n    rAngA = 1.1 * sin (2. * pi * tCyc);\n    rAngL = 0.6 * sin (2. * pi * tCyc);\n  } else {\n    walk = false;\n    tCyc = mod (tCyc, 1.);\n    gDisp = 0.;\n    rAngH = 0.4 * sin (2. * pi * tCyc);\n    rAngA = 2. * pi * (0.5 - abs (tCyc - 0.5)); \n    rAngL = 0.;\n  }\n  rmSize = vec3 (12., 5., 12.);\n  scrnUp = 0.15 * rmSize.y;\n  scrnSize = vec2 (0.85, 0.8) * rmSize.xy;\n  dstFar = 150.;\n  sunDir = normalize (vec3 (1., 2., 1.));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, ltDir, scrCol, refFac;\n  float dHit;\n  int idObjT;\n  idObj = -1;\n  dHit = ObjRay (ro, rd);\n  ro += dHit * rd;\n  vn = ObjNf (ro);\n  col = vec3 (0.);\n  refFac = vec3 (1.);\n  if (idObj == 15) {\n    refFac = vec3 (0.8, 1., 0.8);\n    for (int j = 0; j < 3; j ++) {\n      refFac *= vec3 (0.8, 0.9, 0.8);\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      idObj = -1;\n      dHit = ObjRay (ro, rd);\n      ro += dHit * rd;\n      if (idObj != 15) break;\n    }\n  }\n  idObjT = idObj;\n  vn = ObjNf (ro);\n  idObj = idObjT;\n  if (idObj == 14) {\n    vec2 w = ro.xy;\n    w.y -= rmSize.y + scrnUp;\n    col = (abs (w.x) < scrnSize.x && abs (w.y) < scrnSize.y) ? ScrnCol (w) :\n       vec3 (0.);\n  } else {\n    col = ObjCol (ro);\n#ifdef WALL_ILLUM\n    scrCol = (idObj != 10) ? ScrnProj (ro) : vec3 (0.);\n#else\n    scrCol = vec3 (0.);\n#endif\n    col *= 0.2 * (1. + scrCol * (1. + max (dot (vn,\n       normalize (vec3 (0., scrnUp, rmSize.z))), 0.)));\n  }\n  return clamp (refFac * col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, vd, u;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  SetState ();\n  az = -2. * pi * max (mod (0.011 * tCur, 1.) - 0.1, 0.) \/ 0.9;\n  el = 0.1 * (cos (2. * az) - 1.);\n  if (mPtr.z > 0.) {\n    el += 1. * mPtr.y;\n    az += 8. * mPtr.x;\n  }\n  el = clamp (el, -0.5, 0.5);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = vec3 (0., rmSize.y, -0.99 * rmSize.z) * vuMat;\n  ro.xz = clamp (ro.xz, - 0.98 * rmSize.xz, 0.98 * rmSize.xz);\n  ro.y = clamp (ro.y - 0.2 * rmSize.y, 0.02 * rmSize.y, 1.98 * rmSize.y);\n  rd = normalize (vec3 (uv, 3.)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}