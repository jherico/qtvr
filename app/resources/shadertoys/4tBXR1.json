{"Shader":{"ver":"0.1","info":{"id":"4tBXR1","date":"1441399240","viewed":3487,"name":"Mushroom","username":"iq","description":"A simple mushroom looking thing all alone in the middle of nowhere.","likes":53,"published":3,"flags":0,"tags":["procedural","3d","raymarching","distancefield"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\n\/\/ make higher for higher quality\n#define VIS_SAMPLES 1\n\nvec3 hash3( vec3 n )\n{\n    return fract(sin(n)*vec3(158.5453123,278.1459123,341.3490423));\n}\n\nvec2 hash2( vec2 n )\n{\n    return fract(sin(n)*vec2(158.5453123,278.1459123));\n}\n\nvec2 sdSegment( in vec3 p, vec3 a, vec3 b )\n{\n\tvec3 pa = p - a, ba = b - a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nfloat sdSphere( in vec3 p, in vec4 s )\n{\n    return length(p-s.xyz) - s.w;\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 c, in vec3 r )\n{\n    return (length( (p-c)\/r ) - 1.0) * min(min(r.x,r.y),r.z);\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)\/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 smin( vec2 a, vec2 b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b.x-a.x)\/k, 0.0, 1.0 );\n\treturn vec2( mix( b.x, a.x, h ) - k*h*(1.0-h), mix( b.y, a.y, h ) );\n}\n\nfloat smax( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)\/k, 0.0, 1.0 );\n\treturn mix( a, b, h ) + k*h*(1.0-h);\n}\n\n\/\/---------------------------------------------------------------------------\nvec3 drddx;\nvec3 drddy;\n\nfloat head( in vec3 p )\n{\n    \/\/ top\n    float d3 = sdEllipsoid( p, vec3(0.0,-0.1,0.0),vec3(0.35,0.2,0.35) );\n    d3 -= 0.03*(0.5+0.5*sin(11.0*p.z)*cos(9.0*p.x));\n    \/\/d3 -= 0.05*exp(-128.0*dot(p.xz,p.xz));\n    \n    \/\/ interior\n    float d4 = sdSphere( p, vec4(0.0,-0.45,0.0,0.45) );\n\td4 += 0.005*sin( 20.0*atan(p.x,p.z) );\n\n    \/\/ substract\n    return smax( d3, -d4, 0.02 );\n}\n\nfloat head2( in vec3 p )\n{\n    \/\/ top\n    float d3 = sdEllipsoid( p, vec3(0.0,-0.1,0.0),vec3(0.35,0.2,0.35) );\n    d3 -= 0.03*(0.5+0.5*sin(11.0*p.z)*cos(9.0*p.x));\n    \/\/d3 -= 0.1*exp(-64.0*dot(p.xz,p.xz));\n    \n    \/\/ interior\n    float d4 = sdSphere( p, vec4(0.0,-0.45,0.0,0.48) );\n\n    \/\/ substract\n    return smax( d3, -d4, 0.02 );\n}\n\n\nvec2 map( vec3 p, float t )\n{\n\n    \/\/ ground\n    vec3 s = p;\n    s.y -= 0.1*sin( 0.25*p.z + 0.5*sin(0.25*p.x) );    \n    s.y += 0.1*cos( 0.25*p.z + 0.5*cos(0.25*p.x) );        \n    \n    vec3 dpdx = t*drddx;\n    vec3 dpdy = t*drddy;\n    \n\n    vec3 dsdx = dpdx - 0.1*cos( 0.25*p.z + 0.5*sin(0.25*p.x) )*(0.25*dpdx.z + 0.5*cos(0.25*p.x)*dpdx.x );\n    vec3 dsdy = dpdy + 0.1*sin( 0.25*p.z + 0.5*cos(0.25*p.x) )*(0.25*dpdx.z - 0.5*sin(0.25*p.x)*dpdx.x );\n\n    float d2 = s.y - 0.17;\n    if( d2<2.0 )\n    {\n    \/\/d2 += 0.06*texture2D( iChannel2, 0.15*s.xz ).x;\n    \/\/d2 -= 1.5*pow(texture2D( iChannel3, 0.01*s.xz, -8.0 ).x,0.35) - 0.8;\n    d2 += 0.06*texture2DGradEXT( iChannel2, 0.15*s.xz, 0.15*dsdx.xz, 0.15*dsdy.xz ).x;\n    d2 -= 1.5*pow(texture2DGradEXT( iChannel3, 0.01*s.xz,  0.01*dsdx.xz\/256.0, 0.01*dsdy.xz\/256.0 ).x,0.35) - 0.8;\n    }\n    d2 *= 0.8;\n    vec2 res = vec2(d2,1.0);\n    \n    \n    \/\/ mushroom\n    vec3 d = vec3(0.0,0.95,0.0);\n    vec3 q = p - d;\n   \n    float bb = length(q+vec3(0.0,0.3,0.0))-0.8;\n    if( bb<0.0 )\n    {\n        \/\/ animate\n        \/\/float an = 0.5 + 0.5*cos(2.0*iGlobalTime + 9.0* p.y);\n        \/\/q.xz *= 1.1 - an*0.2*(1.0-smoothstep( 0.0, 0.6, abs(q.y+0.1) ));\n\n        \/\/ stem\n        float h = clamp(q.y+1.0,0.0,1.0);\n        vec3 o = 0.12 * sin( h*3.0 + vec3(0.0,2.0,4.0) );\n        o = o*4.0*h*(1.0-h) * h;\n        float d1 = sdSegment( q + vec3(0.0,1.0,0.0) - o*vec3(1.0,0.0,1.0), vec3(0.0,0.0,0.0), vec3(0.0,1.0,0.0) ).x;\n        d1 -= 0.04;\n        d1 -= 0.1*exp(-16.0*h);\n\n        float d3 = head( q );\n\n        \/\/ mix head and stem\n        d1 = smin( d1, d3, 0.2 );\n        d1 *= 0.75;\n        vec2 res2 = vec2(d1,0.0);\n\n\n        \/\/ balls\n        float ff = 10.0;\n        vec3 id = floor(q*ff);\n        vec3 wr = (id*2.0 + 1.0)\/(2.0*ff);\n        \/\/wr += (-1.0+2.0*hash3(id)) * 0.2\/ff;\n        if( head2( wr )<0.0 )\n        {\n        vec3 r = (fract(q*ff) - 0.5)\/ff;\n        \/\/r += (-1.0+2.0*hash3(id)) * 0.2\/ff;\n        float d5 = (length(r)-0.03);\n        \/\/vec3 n = abs(normalize(wr));\n        \/\/float d5 = sdEllipsoid( r, vec3(0.0), vec3(0.03) );\n        if( d5<res2.x ) res2 = vec2(d5,2.0);\n        }\n        res = smin( res, res2, 0.1 );\n    }\n    else\n    {\n       res = min(res,vec2( bb+0.1, 2.0 ));\n    }\n    \n#if 1\n    vec2 pid = floor( (p.xz+2.0)\/4.0 );\n    p.xz = mod(p.xz+2.0,4.0)-2.0;\n    if( dot(pid,pid)>0.5 )\n    {\n        p.xz += 1.0*(-1.0+2.0*hash2( vec2(313.1*pid.x + 171.4*pid.y,331.8*pid.x + 153.4*pid.y) ));\n        float d3 = sdSphere(p,vec4(0.0,0.0,0.0,0.8));\n        for( int i=0; i<6; i++ )\n        {\n            vec3 sc = -1.0+2.0*hash3( pid.x + pid.y*13.1 + float(i) + vec3(0.0,2.0,4.0) );\n            sc.y = sqrt(abs(sc.y));\n            sc = normalize(sc);\n            float ss = 0.7 - 0.1*sin(pid.y + float(i)*13.1);\n            vec4 pp = vec4(-sc,ss);\n            d3 = smax( d3, -dot(vec4(p,1.0),pp), 0.02 );\n        }\n        d3 -= 0.1*sqrt(texture2DGradEXT( iChannel2, 0.1*s.zy, 0.1*dsdx.zy, 0.1*dsdy.zy ).x);\n        if( d3<res.x  ) res = vec2(d3,3.0);\n    }    \n#endif\n    \n    return res;\n}\n\nvec3 calcNormal( in vec3 pos, in float eps, float t )\n{\n    vec2 e = vec2(1.0,-1.0)*0.5773*eps*t;\n    return normalize( e.xyy*map( pos + e.xyy, t ).x + \n\t\t\t\t\t  e.yyx*map( pos + e.yyx, t ).x + \n\t\t\t\t\t  e.yxy*map( pos + e.yxy, t ).x + \n\t\t\t\t\t  e.xxx*map( pos + e.xxx, t ).x );\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor, float t )\n{\n\tfloat occ = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.005 + 0.25*float(i)\/7.0;\n        vec3 dir = normalize( sin( float(i)*73.4 + vec3(0.0,2.1,4.2) ));\/\/+ gl_FragCoord.x*17.0 + gl_FragCoord.y*13.0 ) );\n        dir = normalize( nor + dir );\n        occ += (h-map( pos + h*dir, t ).x);\n    }\n    return clamp( 1.0 - 9.0*occ\/8.0, 0.0, 1.0 );    \n}\n\nfloat calcSSS( in vec3 pos, in vec3 nor, in float t )\n{\n\tfloat occ = 0.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.002 + 0.1*float(i)\/7.0;\n        vec3 dir = normalize( sin( float(i)*13.0 + vec3(0.0,2.1,4.2) ) );\n        dir *= sign(dot(dir,nor));\n        \n        occ += (h-map( pos - h*dir, t).x);\n    }\n    occ = clamp( 11.0*occ\/8.0, 0.0, 1.0 );    \n    return occ*occ;\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, float k )\n{\n    float res = 1.0;\n    float t = 0.01;\n    for( int i=0; i<32; i++ )\n    {\n        vec3 pos = ro + rd*t;\n        float h = map(pos, length(pos) ).x;\n        res = min( res, smoothstep(0.0,1.0,k*h\/t) );\n        t += clamp( h, 0.04, 0.1 );\n\t\tif( res<0.01 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n, in float k, in vec3 gx, in vec3 gy )\n{\n    vec3 m = pow( abs( n ), vec3(k) );\n\tvec4 x = texture2DGradEXT( sam, p.yz, gx.yz, gy.yz );\n\tvec4 y = texture2DGradEXT( sam, p.zx, gx.yz, gy.zx );\n\tvec4 z = texture2DGradEXT( sam, p.xy, gx.yz, gy.xy );\n\treturn (x*m.x + y*m.y + z*m.z) \/ (m.x + m.y + m.z);\n}\n\nvec3 sunDir = normalize( vec3(-0.5,0.3,0.4) );\n\nvec3 shade( in vec3 ro, in vec3 rd, in float t, in float m )\n{\n    float eps = 0.0015;\n    \n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos, eps, t );\n    float kk;\n\n    vec3 mateD = vec3(0.2,0.16,0.11);\n    vec3 mateS = vec3(0.2,0.12,0.07);\n    float mateK = 0.0;\n\n\n    vec3 dpdx = t*drddx;\n    vec3 dpdy = t*drddy;\n    \n    if( m<0.5 )\n    {\n        vec3 onor = nor;\n        vec3 d = pos - vec3(0.0,1.0,0.0);\n        \n        mateD = vec3(0.15,0.15,0.15)*1.1;\n        mateK = 0.2;\n        \n        mateS = vec3(0.4,0.1,0.1)*1.0;\n        mateD *= 0.05 + 2.0*pow(1.0-texcube( iChannel3, pos*0.25, nor, 1.0, dpdx*0.25, dpdy*0.25 ).xyz, vec3(6.0));\n\n        float h = clamp( pos.y, 0.0, 1.0 );\n        vec3 o = 0.12 * sin( h*3.0 + vec3(0.0,2.0,4.0) );\n        o = o*4.0*h*(1.0-h) * h;\n        d = pos - o*vec3(1.0,0.0,1.0);\n        float an = atan(d.x,d.z);\n        vec2 uv1 = vec2( an*8.0, length(d.xz)*2.0  );\n        vec2 uv2 = vec2( an*1.0, d.y*1.0  );\n  \n        \/\/ bump\n        float bt = smoothstep( 0.7, 0.9, pos.y );\n        vec3 bn1 = 0.1*(-1.0+2.0*texture2D( iChannel1, 0.05*uv1 ).xyz);\n        vec3 bn2 = 0.4*(-1.0+2.0*texture2D( iChannel1, 0.05*uv2 ).xyz);\n        vec3 onn = 0.1*(-1.0+2.0*texcube( iChannel1, pos, nor, 1.0, dpdx, dpdy ).xyz );\n        nor = normalize( nor + mix(bn2,bn1,bt) + onn );\n\n            \n        float isd = smoothstep( 0.5, 0.6, -onor.y );\n        mateD = mix( mateD, vec3(0.25,0.16,0.11), isd );\n\n        mateD = mix( mateD, vec3(0.08,0.08,0.05)*0.2, 0.92*(1.0-smoothstep(0.1,0.5,pos.y)) );\n    }\n\telse if( m<1.5 )\n    {\n        mateD = vec3(0.08,0.08,0.06)*0.55;\n        mateS = vec3(0.0);\n        mateK = 1.0;\n        \n        mateD *= 0.7 + 2.0*texture2D( iChannel2, pos.xz*0.008, -8.0 ).xyz;\n\n        float ll = smoothstep( 0.2, 0.3, texture2DGradEXT(iChannel3,pos.xz*.1, dpdx.xz*0.1, dpdy.xz*0.1).x );\n        ll *= smoothstep(0.5,1.0,nor.y);\n        mateD = mix( mateD, vec3(0.4,0.15,0.15)*0.07, ll);\n    }\n\telse if( m<2.5 )\n    {\n        mateK = 1.0;\n        mateD = vec3(0.11,0.11,0.11);\n        mateS = vec3(0.7,0.3,0.1)*2.0;\n    }\n\telse \/\/if( m<3.5 )\n    {\n        mateS = vec3(0.0,0.0,0.0);\n        mateK = 0.2;\n        \n        mateD = vec3(0.65,0.6,0.45);\n        mateD *= 0.2 + 0.8*texcube( iChannel2, pos*0.07, nor, 1.0, dpdx*0.7, dpdy*0.7 ).x;\n        mateD *= .14;\n    }\n    \n    \n    vec3 hal = normalize( sunDir-rd );\n    float fre = clamp(1.0+dot(nor,rd), 0.0, 1.0 );\n    float occ = calcAO( pos, nor, t );\n    float sss = calcSSS( pos, nor, t );\n\n    \n        \n    float dif1 = clamp( dot(nor,sunDir), 0.0, 1.0 );\n    float sha = softshadow( pos, sunDir, 32.0 ); \n    dif1 *= sha;\n    float spe1 = clamp( dot(nor,hal), 0.0, 1.0 );\n\n    float bou = clamp( 0.5-0.5*nor.y, 0.0, 1.0 );\n\n    vec3 col = 6.0*vec3(1.6,1.0,0.5)*dif1;\/\/*(0.5+0.5*occ);\n    col += 6.0*pow( spe1, 16.0 )*dif1*mateK;\n    col += 2.0*fre*(0.1+0.9*dif1);\/\/*occ;\n    col += sss*mateS*4.0;\n    col += 4.0*vec3(0.2,0.6,1.3)*occ*(0.5+0.5*nor.y);\n    col += 3.0*vec3(0.2,0.6,1.3)*occ*smoothstep( 0.0, 0.5, reflect( rd, nor ).y )*occ;\n    col += 1.0*vec3(0.2,0.2,0.2)*bou*(0.5+0.5*occ);\n    \n    col *= mateD;\n    \n    t *= 0.5;\n    col = mix( col, vec3(0.3,0.3,.3)*0.4, 1.0-exp( -0.1*t ) );\n    col = mix( col, vec3(0.4,0.5,.6)*0.4, 1.0-exp( -0.001*t*t ) );\n\n    col *= 0.9;\n\n    return col;        \n}\n\nvec2 intersect( in vec3 ro, in vec3 rd, const float maxdist )\n{\n    vec2 res = vec2(-1.0);\n    vec3 resP = vec3(0.0);\n    float t = 0.1;\n    for( int i=0; i<256; i++ )\n    {\n        vec3 p = ro + t*rd;\n        vec2 h = map( p, t );\n        res = vec2(t,h.y);\n\n        if( h.x<(0.001*t) ||  t>maxdist ) break;\n        \n        t += h.x*0.5;\n    }\n\treturn res;\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = clamp(vec3(0.2,0.4,0.5) - 0.5*rd.y,0.0,1.0);\n    col *= 0.6;\n    col = mix( col, vec3(0.30,0.25,0.20), pow(1.0-rd.y,16.0) );\n    \n    float maxdist = 32.0;\n    float tp = (1.25-ro.y)\/rd.y; if( tp>0.0 ) maxdist = min( maxdist, tp );\n    \n    vec2 tm = intersect( ro, rd, maxdist );\n    if( tm.y>-0.5 && tm.x < maxdist )\n    {\n        col = shade( ro, rd, tm.x, tm.y );\n    }\n\n    \/\/col = clamp( col, 0.0, 1.0 );\n    return pow( col, vec3(0.45) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\n    vec3 tot = vec3(0.0);\n    #if VIS_SAMPLES<2\n\tint a = 0;\n\t{\n        vec4 rr = vec4(0.0);\n\n        vec2 p = (-iResolution.xy+2.0*fragCoord.xy)\/iResolution.y;\n    \tfloat an = 10.0 + 0.2*sin(6.0+0.2*iGlobalTime);\n\n        vec3 ro = vec3(0.0,0.5,0.5) + 2.1*vec3(cos(an),0.0,sin(an));\n        vec3 ta = vec3(0.7,0.5,0.0);\n        mat3 ca = setCamera( ro, ta, 0.4 );\n        vec3 rd = normalize( ca * vec3(p,-2.8) );\n        \n    \/\/ ray differentials\n    vec2 px = (-iResolution.xy+2.0*(fragCoord.xy+vec2(1.0,0.0)))\/iResolution.y;\n    vec2 py = (-iResolution.xy+2.0*(fragCoord.xy+vec2(0.0,1.0)))\/iResolution.y;\n    vec3 rdx = normalize( ca * vec3(px,-2.8) );\n    vec3 rdy = normalize( ca * vec3(py,-2.8) );\n    drddx = rdx - rd;\n    drddy = rdy - rd;\n        \n    #else\n\tfor( int a=0; a<VIS_SAMPLES; a++ )\n\t{\n        vec4 rr = texture2DLodEXT( iChannel1, (fragCoord.xy + 0.5+113.3137*float(a))\/iChannelResolution[1].xy, 0.0  ).xzyw;\n\n    \tvec2 p = (-iResolution.xy+2.0*(fragCoord.xy+rr.zw-0.5))\/iResolution.y;\n    \tfloat an = 10.0 + 0.2*sin(6.0+0.2*iGlobalTime);\n\n        vec3 ro = vec3(0.0,0.5,0.5) + 2.1*vec3(cos(an),0.0,sin(an));\n        vec3 ta = vec3(0.7,0.5,0.0);\n        mat3 ca = setCamera( ro, ta, 0.4 );\n        vec3 rd = normalize( ca * vec3(p,-2.8) );\n\n        \/\/ dof\n        vec3 fp = ro + rd * 1.7;\n        ro += (ca[0].xyz*(-1.0+2.0*rr.x) + ca[1].xyz*(-1.0+2.0*rr.w))*0.015;\n        rd = normalize( fp - ro );\n    #endif\n\n        vec3 col = render( ro, rd );\n\n        float sun = clamp( 0.5 + 0.5*dot(rd,sunDir), 0.0, 1.0 );\n        sun = sun*sun;\n        col += vec3(0.5,0.4,0.3)*4.0*sun*sun;\n\n        col = vec3(1.4,1.37,1.35)*col*1.3 - vec3(0.1,0.1,0.06)*2.4;\n\t\ttot += col;\n    }    \n    #if VIS_SAMPLES>1\n\ttot \/= float(VIS_SAMPLES);\n    #endif\n        \n    vec2 q = fragCoord.xy\/iResolution.xy;\n    tot *= 0.3 + 0.7*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.1);\n\n    fragColor = vec4( tot, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}