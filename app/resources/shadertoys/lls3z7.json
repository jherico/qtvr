{"Shader":{"ver":"0.1","info":{"id":"lls3z7","date":"1420457211","viewed":517,"name":"Wavescape","username":"dr2","description":"Another wave renderer, from both above and below the waterline. See the source for where it all comes from.","likes":11,"published":3,"flags":0,"tags":["raymarching","reflection","waves","clouds","refraction","water"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Wavescape\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Water waves, including what the fish sees.\n\n\/\/ Acknowledgments: thanks for the following -\n\/\/  Dave_H's multilayered clouds with nimitz's variable layer spacing\n\/\/    (but depends on elevation rather than distance).\n\/\/  Wave shapes from TDM; they seem a little more \"energetic\" than TekF's.\n\/\/  Raymarching with binary subdivision, as used by Dave_H for mountains;\n\/\/    TekF and TDM use one or the other, not both.\n\/\/  Buoy based on TekF's, but raymarched for generality; shows aging effects\n\/\/    below waterline.\n\/\/  Foam idea from TekF.\n\/\/  Noise functions from iq.\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;  p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 f = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  p *= 2.;\n  }\n  return dot (f, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nint idObj;\nmat3 ballMat;\nvec3 qHit, ballPos, sunCol, sunDir, cloudDisp, waterDisp;\nfloat tCur, fCloud;\nconst float dstFar = 300.;\n\nvec3 SkyGrndCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, skyBg, clCol, col;\n  float colSum, attSum, s, att, a, dDotS, ds;\n  const vec3 cCol1 = 0.5 * vec3 (0.15, 0.2, 0.4),\n     cCol2 = 0.5 * vec3 (0.25, 0.5, 0.7), gCol = 1.3 * vec3 (0.05, 0.08, 0.05);\n  const float cloudLo = 100., cloudRngI = 1.\/50., atFac = 0.06;\n  const int nLay = 30;\n  if (rd.y < 0.015 * Fbm1 (16. * rd.x)) col = gCol * (0.5 + 0.5 *\n     Noisefv2 (1000. * vec2 (5. * atan (rd.x, rd.z), rd.y)));\n  else {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro += cloudDisp;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz \/ rd.y;\n    p.y = cloudLo;\n    ds = 1. \/ (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      q.z *= 0.7;\n      att += atFac * max (fCloud - Fbm3 (0.02 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.) * colSum + 0.05 * sunCol;\n    cSun = sunCol * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    skyBg = mix (cCol1, cCol2, 1. - rd.y);\n    col = clamp (mix (skyBg + cSun, 1.6 * clCol, attSum), 0., 1.);\n  }\n  return col;\n}\n\nvec3 SeaFloorCol (vec3 rd)\n{\n  vec2 p;\n  float w, f;\n  p = 5. * rd.xz \/ rd.y;\n  w = 1.;\n  f = 0.;\n  for (int j = 0; j < 4; j ++) {\n    f += w * Noisefv2 (p);\n    w *= 0.5;  p *= 2.;\n  }\n  return mix (vec3 (0.01, 0.04, 0.02), vec3 (0, 0.05, 0.05), \n     smoothstep (0.4, 0.7, f));\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.16;  wAmp = 0.6;  pRough = 5.;\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 5; j ++) {\n    t2 = 1.1 * tCur * vec2 (1., -1.);\n    t4 = vec4 (q2 + t2.xx, q2 + t2.yy) * wFreq;\n    t2 = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + abs (cos (t4)));\n    v2 = pow (1. - pow (v4.xz * v4.yw, vec2 (0.65)), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 1.9;  wAmp *= 0.22;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, h) + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 7; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nfloat WaveOutRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  ro.y *= -1.;\n  rd.y *= -1.;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y + WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.2, h) + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 7; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y + WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.1, 5e-5 * d * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = dstFar;\n  q = p;\n  q -= ballPos;\n  q *= ballMat;\n  d = PrSphDf (q, 2.);\n  if (d < dHit) { dHit = d;  idObj = 1;  qHit = q; }\n  q.y -= 3.;\n  d = PrCylDf (q.xzy, 0.05, 1.);\n  if (d < dHit) { dHit = d;  idObj = 2;  qHit = q; }\n  q.y -= 1.3;\n  d = PrCylDf (q.xzy, 0.15, 0.3);\n  if (d < dHit) { dHit = d;  idObj = 3;  qHit = q; }\n  return dHit;\n}\n\nfloat ObjRay (in vec3 ro, in vec3 rd)\n{\n  float d, dHit;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjCol (vec3 n)\n{\n  vec3 col;\n  col = vec3 (0.);\n  if (idObj == 1) {\n    col = vec3 (1., 0.01, 0.);\n    if (abs (qHit.y) < 0.21) col =\n       (mod (floor (7. * (atan (qHit.x, qHit.z) \/ pi + 1.)), 2.) == 0.) ?\n       vec3 (1., 0.8, 0.08) : vec3 (0.04);\n    else if (qHit.y > 1.93) col = vec3 (0.15, 0.05, 0.);\n    else if (abs (qHit.y) < 0.25) col = vec3 (1., 0.8, 0.08);\n    else if (abs (abs (qHit.y) - 0.55) < 0.05) col = vec3 (1.);\n    else if (abs (abs (qHit.y) - 0.65) < 0.05) col = vec3 (0.04);\n    if (qHit.y < 0.) col = mix (col, vec3 (0.05, 0.2, 0.05), \n       min (- 2. * qHit.y, 0.9));\n  } else if (idObj == 2) {\n    col = vec3 (0.6, 0.4, 0.2);\n  } else if (idObj == 3) {\n    if (abs (qHit.y) < 0.2) \n       col = vec3 (0., 1., 0.) * (2. + 1.5 * cos (10. * tCur));\n    else col = vec3 (0.6, 0.4, 0.2);\n  }\n  return col;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.1;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ObjRender (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dif, bk, sh, cc;\n  int idObjT;\n  idObjT = idObj;\n  vn = ObjNf (ro);\n  idObj = idObjT;\n  if (idObj == 1) {\n    vn = VaryNf (20. * qHit, vn, 0.3);\n    if (qHit.y < 0.) vn = mix (vn, VaryNf (12. * qHit, vn, 2.),\n      min (- 5. * qHit.y, 1.));\n  }\n  col = ObjCol (rd);\n  cc = 1. - smoothstep (0.3, 0.6, fCloud);\n  sh = ObjSShadow (ro, sunDir);\n  bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n  dif = max (dot (vn, sunDir), 0.);\n  return col * (0.2 + 0.1 * bk + max (0., dif) * (0.7 + 0.3 * cc * sh)) + \n     0.3 * cc * sh * sunCol * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, rdd, refCol, uwatCol;\n  float dstHit, dstWat, dif, bk, sh, foamFac;\n  const float eta = 0.75, att = 0.5;\n  int idObjT;\n  bool doReflect;\n  if (ro.y > WaveHt (ro)) {\n    dstWat = WaveRay (ro, rd);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    doReflect = (dstWat < dstFar && dstWat < dstHit);\n    if (doReflect) {\n      ro += rd * dstWat;\n      vn = WaveNf (ro, dstWat);\n      rdd = rd;\n      rd = reflect (rd, vn);\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      if (idObj < 0) dstHit = dstFar;\n    }\n    col = (dstHit < dstFar) ? ObjRender (ro + rd * dstHit, rd) :\n       SkyGrndCol (ro, rd);\n    if (doReflect) {\n      refCol = col;\n      rd = refract (rdd, vn, eta);\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      if (idObj < 0) dstHit = dstFar;\n      col = (dstHit < dstFar) ? ObjRender (ro + rd * dstHit, rd) *\n         exp (- att * dstHit) : SeaFloorCol (rd);\n      col = mix (col, 0.8 * refCol, pow (1. - abs (dot (rdd, vn)), 5.));\n      foamFac = pow (clamp (WaveHt (ro) +\n         0.004 * Fbm3 (256. * ro) - 0.65, 0., 1.), 8.);\n      col = mix (col, vec3 (1.), foamFac);\n    }\n  } else {\n    uwatCol = vec3 (0., 0.05, 0.05) +\n       step (0.4, Fbm1 (20. * tCur)) * vec3 (0.02, 0.02, 0.03);\n    col = uwatCol;\n    dstWat = WaveOutRay (ro, rd);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    if (dstWat < dstFar && dstWat < dstHit) {\n      ro += rd * dstWat;\n      vn = - WaveNf (ro, dstWat);\n      rdd = refract (rd, vn, 1. \/ eta);\n      if (length (rdd) > 0.) rd = rdd;\n      else rd = reflect (rd, vn);\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      if (idObj < 0) dstHit = dstFar;\n      if (dstHit < dstFar) col = 0.9 * ObjRender (ro + rd * dstHit, rd);\n      else if (rd.y > 0.) col = mix (uwatCol, 0.9 * SkyGrndCol (ro, rd),\n         exp (- 0.07 * att * dstWat));\n    } else if (dstHit < dstFar) col = mix (uwatCol,\n       ObjRender (ro + rd * dstHit, rd), exp (- 0.07 * att * dstHit));\n  }\n  return col;\n}\n\nvoid BallPM ()\n{\n  const vec3 e = vec3 (1., 0., 0.);\n  float h[5], b;\n  ballPos = vec3 (0., 0., 0.);\n  h[0] = WaveHt (ballPos);\n  h[1] = WaveHt (ballPos + e.yyx);  h[2] = WaveHt (ballPos - e.yyx);\n  h[3] = WaveHt (ballPos + e);  h[4] = WaveHt (ballPos - e);\n  ballPos.y = 0.5 + (2. * h[0] + h[1] + h[2] + h[3] + h[4]) \/ 9.;\n  b = (h[1] - h[2]) \/ (4. * e.x);\n  ballMat[2] = normalize (vec3 (0., b, 1.));\n  b = (h[3] - h[4]) \/ (4. * e.x);\n  ballMat[1] = normalize (cross (ballMat[2], vec3 (1., b, 0.)));\n  ballMat[0] = cross (ballMat[1], ballMat[2]);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ iResolution.xy - 0.5;\n  mat3 vuMat;\n  vec3 col, ro, rd;\n  vec2 vEl, vAz;\n  float el, az, zmFac, a, tPer, tSeq;\n  cloudDisp = 10. * tCur * vec3 (1., 0., 1.);\n  waterDisp = 0.5 * tCur * vec3 (-1., 0., 1.);\n  sunDir = normalize (vec3 (0.2, 0.5, 0.5));\n  sunCol = vec3 (1., 0.4, 0.3) + vec3 (0., 0.5, 0.2) * sunDir.y;\n  fCloud = 0.5 + 0.2 * sin (0.022 * 2. * pi * tCur);\n  zmFac = 3.5;\n  tPer = 35.;\n  if (mPtr.z <= 0.) {\n    az = 0.01 * tCur;\n    el = 0.2 * pi;\n    tSeq = mod (tCur, tPer);\n    if (mod (floor (tCur \/ tPer), 2.) == 0.) {\n      a = SmoothBump (10., 30., 5., tSeq);\n      zmFac -= 0.1 * a;\n      el -= 0.19 * pi * a;\n    } else {\n      a = SmoothBump (8., 26., 8., tSeq);\n      zmFac -= 0.05 * a;\n      el -= 0.55 * pi * a;\n    }\n  } else {\n    az = 1.1 * pi * mPtr.x;\n    el = 0.02 * pi - 0.7 * pi * mPtr.y;\n  }\n  vEl = vec2 (cos (el), sin (el));\n  vAz = vec2 (cos (az), sin (az));\n  rd = normalize (vec3 (uv, zmFac));\n  vuMat = mat3 (1., 0., 0., 0., vEl.x, - vEl.y, 0., vEl.y, vEl.x) *\n     mat3 (vAz.x, 0., vAz.y, 0., 1., 0., - vAz.y, 0., vAz.x);\n  rd = rd * vuMat;\n  ro = vec3 (0., 0., -20.) * vuMat;\n  ro.y += 2.;\n  BallPM ();\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (sqrt (clamp (col, 0., 1.)), 1.);\n}\n","name":"","description":"","type":"image"}]}}