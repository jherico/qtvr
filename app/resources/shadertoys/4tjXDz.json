{"Shader":{"ver":"0.1","info":{"id":"4tjXDz","date":"1442945753","viewed":923,"name":"MegaWave","username":"aiekick","description":"A MegaWave","likes":8,"published":3,"flags":0,"tags":["3d","raymarch","sin","cos","repeat","megawave"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015 (twitter:@aiekick)\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst vec3 ld = vec3(0.,1., .5);\nconst float mPi = 3.14159;\nconst float m2Pi = 6.28318;\n\nfloat t = 0.;\n\nfloat dtepf = 0.;\n\nvec2 df(vec3 p)\n{\n\tvec2 res = vec2(1000.);\n\t\n    dtepf += 0.002;\n    \n\t\/\/ mat 1\n\tfloat plane = p.y + 1.;\n\tif (plane < res.x)\n\t\tres = vec2(plane, 1.);\n\t\t\n\t\/\/ mat 2\n\t\n\t\/\/ repat by sin and cos\n\tvec3 q;\n    q.x = cos(p.x);\n    q.y = p.y * 5. - 10. + 10. * cos(p.x \/ 7. + t) + 10. * sin(p.z \/ 7. + t);\n    q.z = cos(p.z);\n\t\n\tfloat sphere = length(q) - 1.;\n\tif (sphere < res.x)\n\t\tres = vec2(sphere, 2.);\n\t\n\treturn res;\n}\n\nvec3 nor( vec3 p, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tdf(p+e.xyy).x - df(p-e.xyy).x,\n\t\tdf(p+e.yxy).x - df(p-e.yxy).x,\n\t\tdf(p+e.yyx).x - df(p-e.yyx).x );\n    return normalize(n);\n}\n\n\/\/ from iq code\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<100; i++ )\n    {\n\t\tfloat h = df( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += h*.25;\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0., 1. );\n}\n\n\/\/ from iq code\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<10; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = df( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/ from iq code\nvec3 lighting(vec3 col, vec3 p, vec3 n, vec3 rd, vec3 ref, float t)    \n{\n\tfloat occ = calcAO( p, n );\n\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n\tfloat dif = clamp( dot( n, ld ), 0.0, 1.0 );\n\tfloat bac = clamp( dot( n, normalize(vec3(-ld.x,0.0,-ld.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n\tfloat dom = smoothstep( -0.1, 0.1, ref.y );\n\tfloat fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\tfloat spe = pow(clamp( dot( ref, ld ), 0.0, 1.0 ),16.0);\n        \n\tdif *= softshadow( p, ld, 0.1, 20. );\n\tdom *= softshadow( p, ref, 0.1, 20. );\n\n\tvec3 brdf = vec3(0.0);\n\tbrdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n\tbrdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n\tbrdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n\tbrdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n\tbrdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\tbrdf += 0.02;\n\tcol = col * brdf + dtepf;\n\n\tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*t*t ) );\n\t\n\treturn col;\n}\n\n\/\/--------------------------------------------------------------------------\n\/\/ Grab all sky information for a given ray from camera\n\/\/ from Dave Hoskins \/\/ https:\/\/www.shadertoy.com\/view\/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 si = iResolution.xy;\n\t\n\tvec2 mo = iMouse.xy;\n    \n\tvec2 uv = (2.*g-si)\/min(si.x, si.y);\n\t\n\tt = iGlobalTime;\n\t\n\tvec3 rayOrg = vec3(cos(t*.2),0.,sin(t*.2));\n\tvec3 camUp = vec3(0,1,0);\n\tvec3 camOrg = vec3(0,0,0);\n\t\n\tfloat fov = .5;\/\/ by shane\n\tvec3 axisZ = normalize(camOrg - rayOrg);\n\tvec3 axisX = normalize(cross(camUp, axisZ));\n\tvec3 axisY = normalize(cross(axisZ, axisX));\n\tvec3 rayDir = normalize(axisZ + fov * uv.x * axisX + fov * uv.y * axisY);\n\t\n\tvec2 s = vec2(0.01);\n\tfloat d = 0.;\n\tvec3 p = rayOrg + rayDir * d;\n\tfloat dMax = 80.;\n\tfloat sMin = 0.0001;\n\t\n\tfor (float i=0.; i<250.; i++)\n\t{\n\t\tif (s.x<sMin || d>dMax) break;\n\t\ts = df(p);\n\t\td += s.x * (s.x>0.5?0.35:0.75);\n\t\tp = rayOrg + rayDir * d;\t\n\t}\n\t\n    vec3 sky = GetSky(rayDir, ld, vec3(1.5));\n    \n\tif (d<dMax)\n\t{\n\t\tvec3 n = nor(p, 0.0001);\n\t\t\n\t\t\/\/ \tiq primitive shader : https:\/\/www.shadertoy.com\/view\/Xds3zN\n\t\tfloat r = mod( floor(5.0*p.z) + floor(5.0*p.x), 2.0);\n        f.rgb = 0.4 + 0.1*r*vec3(1.0);\n\n        \/\/ iq lighting\n\t\tfloat occ = calcAO( p, n );\n        float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, ld ), 0.0, 1.0 );\n        float spe = pow(clamp( dot( rayDir, ld ), 0.0, 1.0 ),16.0);\n\n        dif *= softshadow( p, ld, 0.1, 50. );\n\n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n        brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.02;\n        f.rgb *= brdf + dtepf;\n\n        f.rgb = mix( f.rgb, sky, 1.0-exp( -0.0005*d*d ) ); \n\t}\n\telse\n\t{\n\t\tf.rgb = sky;\n\t}\n\t\t\n\t\n\tgl_FragColor = f;\n}","name":"","description":"","type":"image"}]}}