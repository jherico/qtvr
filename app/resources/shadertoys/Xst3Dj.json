{"Shader":{"ver":"0.1","info":{"id":"Xst3Dj","date":"1452223198","viewed":602,"name":"Viscous Fingering","username":"cornusammonis","description":"Fluid-like continuous cellular automata.","likes":40,"published":3,"flags":32,"tags":["diffusion","feedback","reaction"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 texel = 1. \/ iResolution.xy;\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 components = texture2D(iChannel0, uv).xyz;\n    vec3 norm = normalize(components);\n    fragColor = vec4(0.5 + norm.z);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0\/6.0; \/\/ center weight\n    const float _K1 = 4.0\/6.0; \/\/ edge-neighbors\n    const float _K2 = 1.0\/6.0; \/\/ vertex-neighbors\n    const float cs = 0.25; \/\/ curl scale\n    const float ls = 0.24; \/\/ laplacian scale\n    const float ps = -0.06; \/\/ laplacian of divergence scale\n    const float ds = -0.08; \/\/ divergence scale\n    const float pwr = 0.2; \/\/ power when deriving rotation angle from curl\n    const float amp = 1.0; \/\/ self-amplification\n    const float sq2 = 0.7; \/\/ diagonal weight\n\n    vec2 vUv = fragCoord.xy \/ iResolution.xy;\n    vec2 texel = 1. \/ iResolution.xy;\n    \n    \/\/ 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec3 uv =    texture2D(iChannel0, vUv).xyz;\n    vec3 uv_n =  texture2D(iChannel0, vUv+n).xyz;\n    vec3 uv_e =  texture2D(iChannel0, vUv+e).xyz;\n    vec3 uv_s =  texture2D(iChannel0, vUv+s).xyz;\n    vec3 uv_w =  texture2D(iChannel0, vUv+w).xyz;\n    vec3 uv_nw = texture2D(iChannel0, vUv+nw).xyz;\n    vec3 uv_sw = texture2D(iChannel0, vUv+sw).xyz;\n    vec3 uv_ne = texture2D(iChannel0, vUv+ne).xyz;\n    vec3 uv_se = texture2D(iChannel0, vUv+se).xyz;\n    \n    \/\/ uv.x and uv.y are our x and y components, uv.z is divergence \n\n    \/\/ laplacian of all components\n    vec3 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float sp = ps * lapl.z;\n    \n    \/\/ calculate curl\n    \/\/ vectors point clockwise about the center point\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    \n    \/\/ compute angle of rotation from curl\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    \n    \/\/ calculate divergence\n    \/\/ vectors point inwards towards the center point\n    float div  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    float sd = ds * div;\n\n    vec2 norm = normalize(uv.xy);\n    \n    \/\/ temp values for the update rule\n    float ta = amp * uv.x + ls * lapl.x + norm.x * sp + uv.x * sd;\n    float tb = amp * uv.y + ls * lapl.y + norm.y * sp + uv.y * sd;\n\n    \/\/ rotate\n    float a = ta * cos(sc) - tb * sin(sc);\n    float b = ta * sin(sc) + tb * cos(sc);\n    \n    \/\/ initialize with noise\n    if(iFrame<10) {\n        fragColor = -0.5 + texture2D(iChannel1, fragCoord.xy \/ iResolution.xy);\n    } else {\n        fragColor = clamp(vec4(a,b,div,1), -1., 1.);\n    }\n    \n\n}","name":"","description":"","type":"buffer"}]}}