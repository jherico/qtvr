{"Shader":{"ver":"0.1","info":{"id":"MljSzd","date":"1446025099","viewed":374,"name":"Capri","username":"dr2","description":"The famous Faraglione di Mezzo (the spherical cow version x2) - mouse enabled.","likes":13,"published":3,"flags":0,"tags":["raymarching","seascape"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Capri\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4v3 (ip);\n  t2 = Hashv4v3 (ip + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    a *= 0.5;\n    p *= 4. * mr;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi * clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo,\n     abs (p.z) - h);\n}\n\nvec3 qHit, sunDir, cloudDisp, waterDisp;\nfloat tCur;\nint idObj;\nconst float dstFar = 100.;\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.2, 0.2, 0.9), vec3 (0.45, 0.45, 0.6),\n     1. - max (rd.y, 0.));\n}\n\nvec3 SkyHrzCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, clCol, col;\n  float fCloud, cloudLo, cloudRngI, atFac, colSum, attSum, s,\n     att, a, dDotS, ds;\n  const int nLay = 30;\n  cloudLo = 300.;  cloudRngI = 1.\/100.;  atFac = 0.04;\n  fCloud = 0.5;\n  if (rd.y < 0.015 * Fbm1 (16. * rd.x)- 0.0075) {\n    col = vec3 (0.2, 0.3, 0.2) *\n       (0.7 + 0.3 * Noisefv2 (1000. * vec2 (5. * atan (rd.x, rd.z), rd.y)));\n  } else if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro += cloudDisp;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz \/ rd.y;\n    p.y = cloudLo;\n    ds = 1. \/ (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      att += atFac * max (fCloud - 0.5 * Fbm3 (0.0035 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.) * 2.8 * (colSum + 0.05);\n    cSun = vec3 (1.) * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    col = clamp (mix (SkyBg (rd) + cSun, clCol, attSum), 0., 1.);\n    col = mix (col, SkyBg (rd), pow (1. - rd.y, 32.));\n  } else col = mix (vec3 (0.07, 0.15, 0.2), SkyBg (- rd), pow (1. + rd.y, 32.));\n  return col;\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 1.;  wAmp = 0.07;  pRough = 10.;\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 5; j ++) {\n    t2 = 0.6 * tCur * vec2 (1., -1.);\n    t4 = vec4 (q2 + t2.xx, q2 + t2.yy) * wFreq;\n    t2 = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + abs (cos (t4)));\n    v2 = pow (1. - sqrt (v4.xz * v4.yw), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.25;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = 0.;\n    sLo = 0.;\n    for (int j = 0; j < 100; j ++) {\n      p = ro + s * rd;\n      h = p.y - WaveHt (p);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.3, h) + 0.005 * s;\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = 0; j < 5; j ++) {\n        s = 0.5 * (sLo + sHi);\n        p = ro + s * rd;\n        h = step (0., p.y - WaveHt (p));\n        sLo += h * (s - sLo);\n        sHi += (1. - h) * (s - sHi);\n      }\n      dHit = sHi;\n    }\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.005 * d * d), 0.);\n  float ht = WaveHt (p);\n  return normalize (vec3 (ht - WaveHt (p + e.xyy), e.x, ht - WaveHt (p + e.yyx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin, a, r, rb, h, dr;\n  dMin = dstFar;\n  p.z = abs (p.z) - 6.;\n  h = 2.5 + 0.02 * sin (23. * q.x);\n  q = p;\n  q.y -= 0.25;\n  rb = 1.8;\n  r = max (0., rb - 0.5 * q.y \/ h - 0.005 * sin (61. * q.y \/ h));\n  a = atan (q.z, q.x) + 0.03 * sin (16.2 * q.y \/ h);\n  dr = 0.04 * max (r - rb + 0.6, 0.) * sin (30. * a);\n  d = PrRCylDf (q.xzy, r + dr, 0.5, h);\n  a = atan (q.y, q.x) + 0.03 * sin (22.2 * q.z \/ rb);\n  dr = 0.006 * sin (33. * a) + 0.004 * sin (43. * a + 1.);\n  d = max (d, - PrFlatCylDf (q.yxz, 0.4 + dr, 0.5 + dr, h));\n  d = max (d, - 0.5 - q.y);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  return 0.9 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.05;\n  for (int i = 0; i < 20; i ++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.15;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 trkBox, rp;\n  float ti[9], tTurn, rdTurn, a, dt, rSeg;\n  trkBox = vec2 (1.7, 14.);\n  rdTurn = 0.9999 * min (trkBox.x, trkBox.y);\n  tTurn = 0.5 * pi * rdTurn * 1.5;\n  ti[0] = 0.;\n  ti[1] = ti[0] + trkBox.y - rdTurn;\n  ti[2] = ti[1] + tTurn;\n  ti[3] = ti[2] + trkBox.x - rdTurn;\n  ti[4] = ti[3] + tTurn;\n  ti[5] = ti[4] + trkBox.y - rdTurn;\n  ti[6] = ti[5] + tTurn;\n  ti[7] = ti[6] + trkBox.x - rdTurn;\n  ti[8] = ti[7] + tTurn;\n  t = mod (0.5 * t, ti[8]);\n  rSeg = -1.;\n  rp = vec2 (1.) - rdTurn \/ trkBox;\n  p.xz = trkBox;\n  p.y = 0.;\n  if (t < ti[4]) {\n    if (t < ti[1]) {\n      dt = (t - ti[0]) \/ (ti[1] - ti[0]);\n      p.xz *= vec2 (1., rp.y * (2. * dt - 1.));\n    } else if (t < ti[2]) {\n      dt = (t - ti[1]) \/ (ti[2] - ti[1]);\n      rSeg = 0.;\n      p.xz *= rp;\n    } else if (t < ti[3]) {\n      dt = (t - ti[2]) \/ (ti[3] - ti[2]);\n      p.xz *= vec2 (rp.x * (1. - 2. * dt), 1.);\n    } else {\n      dt = (t - ti[3]) \/ (ti[4] - ti[3]);\n      rSeg = 1.;\n      p.xz *= rp * vec2 (-1., 1.);\n    }\n  } else {\n    if (t < ti[5]) {\n      dt = (t - ti[4]) \/ (ti[5] - ti[4]);\n      p.xz *= vec2 (- 1., rp.y * (1. - 2. * dt));\n    } else if (t < ti[6]) {\n      dt = (t - ti[5]) \/ (ti[6] - ti[5]);\n      rSeg = 2.;\n      p.xz *= - rp;\n    } else if (t < ti[7]) {\n      dt = (t - ti[6]) \/ (ti[7] - ti[6]);\n      p.xz *= vec2 (rp.x * (2. * dt - 1.), - 1.);\n    } else {\n      dt = (t - ti[7]) \/ (ti[8] - ti[7]);\n      rSeg = 3.;\n      p.xz *= rp * vec2 (1., -1.);\n    }\n  }\n  if (rSeg >= 0.) {\n    a = 0.5 * pi * (rSeg + dt);\n    p += rdTurn * vec3 (cos (a), 0., sin (a));\n  }\n  p.x -= trkBox.x;\n  return p;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, rdd, vn, vnw;\n  float dstHit, dstWat, sh;\n  int idObjT;\n  bool waterRefl;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  dstWat = WaveRay (ro, rd);\n  waterRefl = (dstWat < min (dstFar, dstHit));\n  if (waterRefl) {\n    ro += rd * dstWat;\n    vnw = WaveNf (ro, dstWat);\n    rdd = rd;\n    rd = reflect (rd, vnw);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      vn = VaryNf (21.1 * qHit, vn, 5.);\n      objCol = mix (vec3 (0.45, 0.4, 0.4), vec3 (0.6),\n         clamp (Fbm2 (vec2 (50. * (atan (qHit.z, qHit.x) \/ pi + 1.),\n\t 21. * qHit.y)) - 0.6, 0., 1.));\n      objCol *= mix (vec3 (0.5, 0.6, 0.5), vec3 (1.),\n         smoothstep (-0.2, -0.15, qHit.y));\n    }\n    sh = 0.5 + 0.5 * ObjSShadow (ro, sunDir);\n    col = objCol * (0.2 +\n       0.2 * max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.) +\n       sh * max (dot (vn, sunDir), 0.)) +\n       0.4 * sh * pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n  } else col = SkyHrzCol (ro, rd);\n  if (waterRefl) {\n    col = mix (vec3 (0.07, 0.15, 0.2), col,\n       0.8 * pow (1. - abs (dot (rdd, vnw)), 4.));\n    col = mix (col, vec3 (0.9),\n       pow (clamp (WaveHt (ro) + 0.5 * Fbm3 (4. * ro), 0., 1.), 8.));\n  }\n  return clamp (col, 0., 1.);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  vec2 sa;\n  const vec3 e = vec3 (1., 0., -1.);\n  const vec2 hax = vec2 (0.866, 0.5);\n  uv *= 2.;\n  if (sd.z > 0.) {\n    sa = uv + 0.3 * sd.xy;\n    col = 0.2 * pow (sd.z, 8.) *\n       (1.5 * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n       e.xxy * (1. - smoothstep (0.11, 0.12, max (abs (sa.y),\n       max (abs (dot (sa, hax)), abs (dot (sa, hax * e.xz)))))) +\n       e.xyx * SmoothBump (0.32, 0.4, 0.04, length (uv - 0.7 * sd.xy)) +\n       0.8 * e.yxx * SmoothBump (0.72, 0.8, 0.04, length (uv + sd.xy)));\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, ca, sa, vd, u;\n  vec2 uv;\n  float el, az, rl, f;\n  uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ iResolution.xy - 0.5;\n  mPtr.x -= 0.08;\n  sunDir = normalize (vec3 (-0.5, 0.5, -1.));\n  cloudDisp = 10. * tCur * vec3 (1., 0., -1.);\n  waterDisp = 0.1 * tCur * vec3 (-1., 0., 1.);\n  ro = TrackPath (tCur);\n  vd = normalize (TrackPath (tCur + 0.2) - ro);\n  ro.y = 0.6;\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (- vd.z, 0., vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  az = 0.15 * sin (0.22 * tCur + 0.2) + 0.1 * sin (0.53 * tCur);\n  el = -0.05 * pi + 0.05 * (1. + sin (0.5 * tCur + 0.3)) +\n     0.034 * (1. + sin (0.8 * tCur));\n  if (mPtr.z > 0.) {\n    az = clamp (az - 1.5 * pi * mPtr.x, -0.5 * pi, 0.5 * pi);\n    el = clamp (el - 0.3 * pi * mPtr.y, -0.2 * pi, 0.4 * pi);\n  }\n  rl = 0.1 * sin (0.5 * tCur) + 0.06 * sin (0.8 * tCur + 0.3);\n  ca = cos (vec3 (el, az, rl));\n  sa = sin (vec3 (el, az, rl));\n  vuMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) * vuMat;\n  rd = normalize (vec3 (uv, 2.5)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd) + GlareCol (rd, vuMat * sunDir, uv), 1.);\n}\n","name":"","description":"","type":"image"}]}}