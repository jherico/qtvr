{"Shader":{"ver":"0.1","info":{"id":"Md3GR4","date":"1448915868","viewed":2699,"name":"Meditation for dummies","username":"iapafoto","description":"Modeling human head and play with animations.<br\/>Try to have a picture without artfact.","likes":63,"published":3,"flags":0,"tags":["sss","antialiasing","animation","man"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by sebastien durand - 2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/-----------------------------------------------------\n\n\/\/ Lightening, essentially based on one of incredible TekF shaders:\n\/\/ https:\/\/www.shadertoy.com\/view\/lslXRj\n\n\/\/ Pupils effect came from lexicobol shader: [famous iq tutorial]\n\/\/ https:\/\/www.shadertoy.com\/view\/XsjXz1\n\n\/\/ Smooth max from cabbibo shader:\n\/\/ https:\/\/www.shadertoy.com\/view\/Ml2XDw\n\n\/\/-----------------------------------------------------\n\n\/\/ Display distance field in a plane perpendicular to camera crossing pt(0,0,0)\n\/\/#define DRAW_DISTANCE\n\n\n#ifndef DRAW_DISTANCE\n\/\/ To enable mouse rotation (enable to explore modeling)\n\/\/\t#define MOUSE\n\n\/\/ Change this to improve quality (3 is good)\n\t#define ANTIALIASING 1\n\n#else\n\n\/\/ To enable mouse rotation (enable to explore modeling)\n   #define MOUSE\n\n\/\/ Change this to improve quality (3 is good)\n  #define ANTIALIASING 1\n\n#endif\n\n\/\/ consts\nconst float tau = 6.2831853;\nconst float phi = 1.61803398875;\n\n\/\/ Isosurface Renderer\nconst int g_traceLimit=48;\nconst float g_traceSize=.005;\n\n\/\/ globals\nconst vec3 g_nozePos = vec3(0,-.28+.04,.47+.08);\nconst vec3 g_eyePos = vec3(.14,-.14,.29);\nconst float g_eyeSize = .09;\n\nvec3 g_envBrightness = vec3(.5,.6,.9); \/\/ Global ambiant color\nvec3 g_lightPos;\nmat2 ma, mb, mc, g_eyeRot, g_headRotH, g_headRot;\nfloat animNoze;\n    \nbool g_bHead = true, g_bBody = true;\n\n\/\/ -----------------------------------------------------------------\n\n\nfloat hash( float n ) { return fract(sin(n)*43758.5453123); }\n\nfloat noise( in vec3 x ) {\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\n\/\/ Smooth HSV to RGB conversion \n\/\/ [iq: https:\/\/www.shadertoy.com\/view\/MsS3Wc]\nvec3 hsv2rgb_smooth(float x, float y, float z) {\n    vec3 rgb = clamp( abs(mod(x*6.+vec3(0.,4.,2.),6.)-3.)-1., 0., 1.);\n\trgb = rgb*rgb*(3.-2.*rgb); \/\/ cubic smoothing\t\n\treturn z * mix( vec3(1), rgb, y);\n}\n\n\/\/ Distance from ray to point\nfloat distance(vec3 ro, vec3 rd, vec3 p) {\n\treturn length(cross(p-ro,rd));\n}\n\n\/\/ Intersection ray \/ sphere\nbool intersectSphere(in vec3 ro, in vec3 rd, in vec3 c, in float r, out float t0, out float t1) {\n    ro -= c;\n\tfloat b = dot(rd,ro), d = b*b - dot(ro,ro) + r*r;\n    if (d<0.) return false;\n\tfloat sd = sqrt(d);\n\tt0 = max(0., -b - sd);\n\tt1 = -b + sd;\n\treturn (t1 > 0.);\n}\n\n\/\/ -- Modeling Primitives ---------------------------------------------------\n\nfloat udRoundBox(in vec3 p,in vec3 b, in float r) {\n  return length(max(abs(p)-b,0.0))-r ;\n}\n\nfloat sdCapsule(in vec3 p, in vec3 a, in vec3 b, in float r0, in float r1 ) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0., 1.);\n    return length( pa - ba*h ) - mix(r0,r1,h);\n}\n\n\/\/ capsule with bump in the middle -> use for neck\nvec2 sdCapsule2(in vec3 p,in vec3 a,in vec3 b, in float r0,in float r1,in float bump) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa,ba)\/dot(ba,ba), 0., 1. );\n    float dd = bump*sin(3.14*h);  \/\/ Little adaptation\n    return vec2(length(pa - ba*h) - mix(r0,r1,h)*(1.+dd), 1.); \n}\n\nfloat smin(in float a, in float b, in float k ) {\n    float h = clamp( .5+.5*(b-a)\/k, 0., 1. );\n    return mix( b, a, h ) - k*h*(1.-h);\n}\n\n\/\/ Smooth max from cabbibo shader:\n\/\/ https:\/\/www.shadertoy.com\/view\/Ml2XDw\nfloat smax(in float a, in float b, in float k) {\n    return log(exp(a\/k)+exp(b\/k))*k;\n}\n\nfloat sdEllipsoid( in vec3 p, in vec3 r) {\n    return (length(p\/r ) - 1.) * min(min(r.x,r.y),r.z);\n}\n\n\n\n\/\/ -- Modeling Head ---------------------------------------------------------\n\nfloat dEar(in vec3 p, in float scale_ear) {\n    vec3 p_ear = scale_ear*p;\n    p_ear.xy *= ma;\n    p_ear.xz *= ma; \n    float d = max(-sdEllipsoid(p_ear-vec3(.005,.025,.02), vec3(.07,.11,.07)), \n                       sdEllipsoid(p_ear, vec3(.08,.12,.09)));\n    p_ear.yz *= mb; \n    d = max(p_ear.z, d); \n    d = smin(d, sdEllipsoid(p_ear+vec3(.035,.045,.01), vec3(.04,.04,.018)), .01);\n    return d\/scale_ear;\n}\n\nfloat dSkinPart(in vec3 pgeneral, in vec3 p) {\n#ifndef DRAW_DISTANCE    \n    if (!g_bHead) return 100.;\n#endif\n    \n\/\/ Neck    \n    float dNeck = sdCapsule2(pgeneral, vec3(0,-.24,-.11), vec3(0,-.7,-.12), .22, .12, -.45).x;\n    \n    float d = 1000.;\n   \n\/\/ Skull modeling -------------------------\n    d = sdEllipsoid(p-vec3(0,.05,.0), vec3(.39,.48,.46));\t\t\t\t  \n    d = smin(d, sdEllipsoid(p-vec3(0.,.1,-.15), vec3(.42,.4,.4)),.1);     \n    d = smin(d, udRoundBox(p-vec3(0,-.28,.2), vec3(.07,.05,.05),.05),.4); \/\/ Basic jaw \n\t\/\/ small forehead correction with a rotated plane\n    vec3 p_plane = p; \n    p_plane.yz *= ma;\n    d = smax(d, p_plane.z-.68, .11);  \n\n\/\/ Neck -----------------------------------\n    d = smin(d, dNeck, .05);\n\n\/\/ Symetrie -------------------------------\n    p.x = abs(p.x);\n\n\/\/ Eye hole \n    d = smax(d, -sdEllipsoid(p-vec3(.12,-.16,.48), vec3(.09,.06,.09)), .07);\n\n\/\/ Noze ------------------------------------\n    d = smin(d, max(-(length(p-vec3(.032,-.325,.45))-.028),   \/\/ Noze hole\n                    smin(length(p-vec3(.043,-.29+.015*animNoze,.434))-.01,  \/\/ Nostrils\n                    sdCapsule(p, vec3(0,-.13,.39), vec3(0,-.28+.004*animNoze,.47), .01,.04), .05)) \/\/ Bridge of the nose\n            ,.065); \n   \n\/\/ Mouth -----------------------------------    \n    d = smin(d, length(p- vec3(.22,-.34,.08)), .17); \/\/ Jaw\n    d = smin(d, sdCapsule(p, vec3(.16,-.35,.2), vec3(-.16,-.35,.2), .06,.06), .15); \/\/ Cheeks\n   \n    d = smin(d, max(-length(p.xz-vec2(0,.427))+.015,  \t\/\/ Line under the noze\n        \t\tmax(-p.y-.41+.008*animNoze,   \t\t\t\t\t\t\/\/ Upper lip\n                    sdEllipsoid(p- vec3(0,-.34,.37), vec3(.08,.15,.05)))), \/\/ Mouth bump\n             .032);\n\n\/\/ Chin -----------------------------------  \n    d = smin(d, length(p- vec3(0,-.5,.26)), .2);   \/\/ Chin\n    d = smin(d, length(p- vec3(0,-.44,.15)), .25); \/\/ Under chin \n  \n    \/\/d = smin(d, sdCapsule(p, vec3(.24,-.1,.33), vec3(.08,-.05,.46), .0,.01), .11); \/\/ Eyebrow \n    \n\/\/ Eyelid ---------------------------------\n\tvec3 p_eye1 = p - g_eyePos;\n    p_eye1.xz *= mb;\n    \n    vec3 p_eye2 = p_eye1;\n    float d_eye = length(p_eye1) - g_eyeSize;\n          \n\tp_eye1.yz *= g_eyeRot;\n\tp_eye2.zy *= mc;\n    \n    float d1 = min(max(-p_eye1.y,d_eye - .01),\n                   max(p_eye2.y,d_eye - .005));\n    d = smin(d,d1,.01);\n\n\/\/ Ear ------------------------------------\n    d = smin(d, dEar(vec3(p.x-.4,p.y+.22,p.z), .9), .01);    \n\n\/\/\td = max(p.y+cos(iGlobalTime),d); \/\/ Cut head  :)\n\treturn d; \n}\n\nfloat dEye(vec3 p_eye) {\n    p_eye.xz *= ma;     \n    return length(p_eye) - g_eyeSize;\n}\n\nvec2 min2(in vec2 dc1, in vec2 dc2) {\n\treturn dc1.x < dc2.x ? dc1 : dc2; \n}\n\nvec2 dToga(vec3 p) {\n#ifndef DRAW_DISTANCE        \n    if (!g_bBody) return vec2(100.,-1.);\n#endif\n    \n    p -= vec3(0.,0.,-.02);\n    \n    float d_skin = udRoundBox(p- vec3(0,-1.22,-.12), vec3(.25,.5,.0), .13); \/\/ Shoulder\n\n    \/\/ Scarf\n    float d1 = udRoundBox(p - vec3(-.05, -1.02,-.1), vec3(.15, .25, .0), .22);\n    float r = length(p-vec3(1.,0,-.1))-1.25;\n    d1 = max(d1, -r);\n    d1 = max(d1+.007*sin(r*42.+.6), (length(p-vec3(1.,.1,-.1))-1.62)); \n    \n    \/\/ Toga\n    float d = .004*smoothstep(.0,.45, -p.x)*cos(r*150.)+udRoundBox(p - vec3(-.05, -1.,-.1), vec3(.15, .23, .0), .2);\n    \n \/\/   d = min(d , length(p- vec3(0,-.018,.02))-.65);\n \/\/   d = min(d , length(p- vec3(0,-.7,.02))-.5);\n        \n    return min2(vec2(d_skin,2.), min2(vec2(d,0.), vec2(d1, 1.)));\n}\n\n\nvec3 headRotCenter = vec3(0,-.2,-.07);\nfloat map( vec3 p) {\n    float d = dToga(p).x;\n    \n    vec3 p0 = p;\n    p -= headRotCenter;\n    p.yz *= g_headRotH;\n    p.xz *= g_headRot;\n    p += headRotCenter;\n    \n\td = min(d, dSkinPart(p0,p));\n    p.x = abs(p.x);\n    d = min(d, dEye(p- g_eyePos));\n    return d;\n}\n\n\n\/\/ render for color extraction\nfloat colorField(vec3 p) {\n    vec2 dc = dToga(p);\n    vec3 p0 = p;\n    p -= headRotCenter;\n    p.yz *= g_headRotH;\n    p.xz *= g_headRot;\n    p += headRotCenter;\n\n    dc = min2(dc, vec2(dSkinPart(p0,p), 2.));\n         \n    p.x = abs(p.x);\n\treturn min2(dc, vec2(dEye(p - g_eyePos), 3.)).y;\n}\n\n\n\/\/ ---------------------------------------------------------------------------\n\nfloat SmoothMax( float a, float b, float smoothing ) {\n\treturn a-sqrt(smoothing*smoothing + pow(max(.0,a-b),2.0));\n}\n\nvec3 Sky( vec3 ray) {\n\treturn g_envBrightness*mix( vec3(.8), vec3(0), exp2(-(1.0\/max(ray.y,.01))*vec3(.4,.6,1.0)) );\n}\n\n\n\/\/ -------------------------------------------------------------------\n\/\/ pupils effect came from lexicobol shader:\n\/\/ https:\/\/www.shadertoy.com\/view\/XsjXz1\n\/\/ -------------------------------------------------------------------\n\nvec3 hash3( vec2 p )\n{\n    vec3 q = vec3( dot(p,vec2(127.1,311.7)), \n\t\t\t\t   dot(p,vec2(269.5,183.3)), \n\t\t\t\t   dot(p,vec2(419.2,371.9)) );\n\treturn fract(sin(q)*43758.5453);\n}\n\nfloat iqnoise( in vec2 x, float u, float v )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\tfloat k = 1.0+63.0*pow(1.0-v,4.0);\n\tfloat va = 0.0;\n\tfloat wt = 0.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ ) {\n        vec2 g = vec2(i,j);\n\t\tvec3 o = hash3( p + g )*vec3(u,u,1.0);\n\t\tvec2 r = g - f + o.xy;\n\t\tfloat d = dot(r,r);\n\t\tfloat ww = pow( 1.0-smoothstep(0.0,1.414,sqrt(d)), k );\n\t\tva += o.z*ww;\n\t\twt += ww;\n    }\n\t\n    return va\/wt;\n}\n\nfloat noise ( vec2 x)\n{\n\treturn iqnoise(x, 0.0, 1.0);\n}\n\nmat2 m = mat2( 0.8, 0.6, -0.6, 0.8);\n\nfloat fbm( vec2 p)\n{\n\tfloat f = 0.0;\n    f += 0.5000 * noise(p); p *= m* 2.02;\n    f += 0.2500 * noise(p); p *= m* 2.03;\n    f += 0.1250 * noise(p); p *= m* 2.01;\n    f += 0.0625 * noise(p); p *= m* 2.04;\n    f \/= 0.9375;\n    return f;\n}\n\n\nvec3 iris(vec2 p, float open)\n{\n    float background = 1.0;\/\/ smoothstep(-0.25, 0.25, p.x);\n    \n    float r = sqrt( dot (p,p));\n    float r_pupil = .15 + .15*smoothstep(.5,2.,open);\n\n    float a = atan(p.y, p.x); \/\/ + 0.01*iGlobalTime;\n    vec3 col = vec3(1.0);\n    \n    float ss = 0.5;\/\/ + 0.5 * sin(iGlobalTime * 2.0);\n    float anim = 1.0 + 0.05*ss* clamp(1.0-r, 0.0, 1.0);\n    r *= anim;\n        \n    if( r< .8) {\n\t\tcol = vec3(0.12, 0.60, 0.57);\n        float f = fbm(5.0 * p);\n        col = mix(col, vec3(0.12,0.52, 0.60), f); \/\/ iris bluish green mix\n        \n        f = 1.0 - smoothstep( r_pupil, r_pupil+.2, r);\n        col = mix(col, vec3(0.60,0.44,0.12), f); \/\/yellow\n        \n        a += 0.05 * fbm(20.0*p);\n        \n        f = smoothstep(0.3, 1.0, fbm(vec2(5.0 * r, 20.0 * a))); \/\/ white highlight\n        col = mix(col, vec3(1.0), f);\n        \n        f = smoothstep(0.3, 1.0, fbm(vec2(5.0 * r, 5.0 * a))); \/\/ yellow highlight\n        col = mix(col, vec3(0.60,0.44,0.12), f);\n        \n        f = smoothstep(0.5, 1.0, fbm(vec2(5.0 * r, 15.0 * a))); \/\/ dark highlight\n        col *= 1.0 - f;\n        \n        f = smoothstep(0.55, 0.8, r); \/\/dark at edge\n        col *= 1.0 - 0.6*f;\n        \n        f = smoothstep( r_pupil, r_pupil + .05, r); \/\/pupil\n        col *= f; \n        \n        f = smoothstep(0.75, 0.8, r);\n        col = .5*mix(col, vec3(1.0), f);\n    }\n    \n\treturn col * background;\n}\n\n\/\/ -------------------------------------------------------------------\n\n\n\nvec3 Shade( vec3 pos, vec3 ray, vec3 normal, vec3 lightDir1, vec3 lightDir2, vec3 lightCol1, vec3 lightCol2, float shadowMask1, float shadowMask2, float distance )\n{\n    \n    float colorId = colorField(pos);\n    \n\tvec3 ambient = g_envBrightness*mix( vec3(.2,.27,.4), vec3(.4), (-normal.y*.5+.5) ); \/\/ ambient\n    \n    \/\/ ambient occlusion, based on my DF Lighting: https:\/\/www.shadertoy.com\/view\/XdBGW3\n\tfloat aoRange = distance\/20.0;\n\t\n\tfloat occlusion = max( 0.0, 1.0 - map( pos + normal*aoRange )\/aoRange ); \/\/ can be > 1.0\n\tocclusion = exp2( -2.0*pow(occlusion,2.0) ); \/\/ tweak the curve\n    \n\tambient *= occlusion*.8+.2; \/\/ reduce occlusion to imply indirect sub surface scattering\n\n\tfloat ndotl1 = max(.0,dot(normal,lightDir1));\n\tfloat ndotl2 = max(.0,dot(normal,lightDir2));\n    \n\tfloat lightCut1 = smoothstep(.0,.1,ndotl1);\n\tfloat lightCut2 = smoothstep(.0,.1,ndotl2);\n\n\tvec3 light = vec3(0);\n    \n\n\tlight += lightCol1*shadowMask1*ndotl1;\n\tlight += lightCol2*shadowMask2*ndotl2;\n\n    \n\t\/\/ And sub surface scattering too! Because, why not?\n    float transmissionRange = distance\/10.0; \/\/ this really should be constant... right?\n    float transmission1 = map( pos + lightDir1*transmissionRange )\/transmissionRange;\n    float transmission2 = map( pos + lightDir2*transmissionRange )\/transmissionRange;\n    \n    vec3 sslight = lightCol1 * smoothstep(0.0,1.0,transmission1) + lightCol2 * smoothstep(0.0,1.0,transmission2);\n    vec3 subsurface = vec3(1,.8,.5) * sslight;\n\n    float specularity = .2; \n\tvec3 h1 = normalize(lightDir1-ray);\n\tvec3 h2 = normalize(lightDir2-ray);\n    \n\tfloat specPower;\n    specPower = exp2(3.0+5.0*specularity);\n\n    vec3 p = pos;\n    p -= headRotCenter;\n    p.yz *= g_headRotH;\n    p.xz *= g_headRot;\n    p += headRotCenter;\n\n    vec3 albedo;\n    if (colorId < .5) {  \n        \/\/ Toge 1\n        albedo = vec3(1.,.6,0.);\n        specPower = sqrt(specPower);\n    } else if (colorId < 1.5) {  \n        \/\/ Toge 2\n        albedo = vec3(.6,.3,0.);\n        specPower = sqrt(specPower);\n    } else if (colorId < 2.5) {\n         \/\/ Skin color\n        albedo = vec3(.6,.43,.3); \n    \tfloat v = 1.;\n        if (p.z>0.) {\n        \tv = smoothstep(.02,.03, length(p.xy-vec2(0,-.03)));\n        }\n\t\talbedo = mix(vec3(.5,0,0), albedo, v);\n         \n    } else {\n        \/\/ Eye\n        if (p.z>0.) {\n            vec3 g_eyePosloc = g_eyePos;\n            g_eyePosloc.x *= sign(p.x);\n            vec3 pe = p - g_eyePosloc;\n \n            \/\/ Light point in face coordinates\n        \tvec3 g_lightPos2 = g_lightPos - headRotCenter;\n    \t\tg_lightPos2.yz *= g_headRotH;\n    \t\tg_lightPos2.xz *= g_headRot;\n    \t\tg_lightPos2 += headRotCenter;\n\n            vec3 dir = normalize(g_lightPos2-g_eyePosloc);\n            \n            float a = clamp(atan(-dir.x, dir.z), -.6,.6), \n                  ca = cos(a), sa = sin(a);\n            pe.xz *= mat2(ca, sa, -sa, ca);\n\n            float b = clamp(atan(-dir.y, dir.z), -.3,.3), \n                  cb = cos(b), sb = sin(b);\n            pe.yz *= mat2(cb, sb, -sb, cb);\n            \n            albedo = (pe.z>0.) ? iris(17.*(pe.xy), length(g_lightPos2-g_eyePosloc)) : vec3(1);\n        }\n        specPower *= specPower;\n     }\n    \n\tvec3 specular1 = lightCol1*shadowMask1*pow(max(.0,dot(normal,h1))*lightCut1, specPower)*specPower\/32.0;\n\tvec3 specular2 = lightCol2*shadowMask2*pow(max(.0,dot(normal,h2))*lightCut2, specPower)*specPower\/32.0;\n    \n\tvec3 rray = reflect(ray,normal);\n\tvec3 reflection = Sky( rray );\n\t\n\t\/\/ specular occlusion, adjust the divisor for the gradient we expect\n\tfloat specOcclusion = max( 0.0, 1.0 - map( pos + rray*aoRange )\/(aoRange*max(.01,dot(rray,normal))) ); \/\/ can be > 1.0\n\tspecOcclusion = exp2( -2.0*pow(specOcclusion,2.0) ); \/\/ tweak the curve\n\t\n\t\/\/ prevent sparkles in heavily occluded areas\n\tspecOcclusion *= occlusion;\n\n\treflection *= specOcclusion; \/\/ could fire an additional ray for more accurate results\n    \n\tfloat fresnel = pow( 1.0+dot(normal,ray), 5.0 );\n\tfresnel = mix( mix( .0, .01, specularity ), mix( .4, 1.0, specularity ), fresnel );\n\n    light += ambient;\n\tlight += subsurface;\n\n    vec3 result = light*albedo;\n\tresult = mix( result, reflection, fresnel );\n\tresult += specular1;\n    result += specular2;\n\n\treturn result;\n}\n\n\nfloat Trace( vec3 pos, vec3 ray, float traceStart, float traceEnd )\n{\n    float t0=0.,t1=100.;\n    float t2=0.,t3=100.;\n    \/\/ trace only if intersect bounding spheres\n#ifndef DRAW_DISTANCE       \n    g_bHead = intersectSphere(pos, ray, vec3(0,-.017,.02), .65, t0, t1);\n    g_bBody = intersectSphere(pos, ray, vec3(0,-.7,.02), .5, t2, t3);\n    if (g_bHead || g_bBody) \n#endif        \n    {   \n            float t = max(traceStart, min(t2,t0));\n            traceEnd = min(traceEnd, max(t3,t1));\n            float h;\n            for( int i=0; i < g_traceLimit; i++) {\n                h = map( pos+t*ray );\n                if (h < g_traceSize || t > traceEnd)\n                    return t>traceEnd?100.:t;\n                t = t+h;\n            }\n      }\n    \n\treturn 100.0;\n}\n\n\n\nvec3 Normal( vec3 pos, vec3 ray, float t) {\n\n\tfloat pitch = .2 * t \/ iResolution.x;\n    \n\/\/#ifdef FAST\n\/\/\t\/\/ don't sample smaller than the interpolation errors in Noise()\n\tpitch = max( pitch, .005 );\n\/\/#endif\n\t\n\tvec2 d = vec2(-1,1) * pitch;\n\n\tvec3 p0 = pos+d.xxx; \/\/ tetrahedral offsets\n\tvec3 p1 = pos+d.xyy;\n\tvec3 p2 = pos+d.yxy;\n\tvec3 p3 = pos+d.yyx;\n\t\n\tfloat f0 = map(p0);\n\tfloat f1 = map(p1);\n\tfloat f2 = map(p2);\n\tfloat f3 = map(p3);\n\t\n\tvec3 grad = p0*f0+p1*f1+p2*f2+p3*f3 - pos*(f0+f1+f2+f3);\n\t\/\/return normalize(grad);\n\t\/\/ prevent normals pointing away from camera (caused by precision errors)\n\treturn normalize(grad - max(.0,dot (grad,ray ))*ray);\n}\n\n\n\/\/ Camera\nvec3 Ray( float zoom, in vec2 fragCoord) {\n\treturn vec3( fragCoord.xy-iResolution.xy*.5, iResolution.x*zoom );\n}\n\nvec3 Rotate( inout vec3 v, vec2 a ) {\n\tvec4 cs = vec4( cos(a.x), sin(a.x), cos(a.y), sin(a.y) );\n\t\n\tv.yz = v.yz*cs.x+v.zy*cs.y*vec2(-1,1);\n\tv.xz = v.xz*cs.z+v.zx*cs.w*vec2(1,-1);\n\t\n\tvec3 p;\n\tp.xz = vec2( -cs.w, -cs.z )*cs.x;\n\tp.y = cs.y;\n\t\n\treturn p;\n}\n\n\n\/\/ Camera Effects\n\nvoid BarrelDistortion( inout vec3 ray, float degree ){\n\t\/\/ would love to get some disperson on this, but that means more rays\n\tray.z \/= degree;\n\tray.z = ( ray.z*ray.z - dot(ray.xy,ray.xy) ); \/\/ fisheye\n\tray.z = degree*sqrt(ray.z);\n}\n\n\nmat2 matRot(in float a) {\n    float ca = cos(a), sa = sin(a);\n    return mat2(ca,sa,-sa,ca);\n}\n\n#ifdef DRAW_DISTANCE\n\n\/\/ ---------------------------------------------\nconst vec3 ep2 = vec3(.001,0.,0.); \nvec3 gradAt(in vec3 p) {\n\treturn vec3(\n    \t\tmap(p+ep2.xyy) - map(p-ep2.xyy),\n            map(p+ep2.yxy) - map(p-ep2.yxy),\n            map(p+ep2.yyx) - map(p-ep2.yyx));\n}\n\nfloat isoline(vec3 p, vec3 n, float pas, float tickness) {\n    float dist = map(p);\n    vec3 grad = (dist - vec3(map(p-ep2.xyy), map(p-ep2.yxy), map(p-ep2.yyx)));\n    grad -= n*dot(grad,n);\n\tfloat k = length(grad);\n    if (k != 0.) {\n        k = (iResolution.x*ep2.x)\/(k*tickness);\n    \tfloat v1 = abs(mod(dist+pas*.5, pas)-pas*.5)*k\/3.;\n    \tfloat v2 = abs(mod(dist+pas*2., pas*4.)-pas*2.)*k\/4.;\n    \tfloat v3 = abs(dist)*k\/8.;\n    \treturn smoothstep(.01,.99, v3) * (.5+.5*smoothstep(.01,.99, v1)) * smoothstep(.01,.99, v2);\n    } \n    return 1.;\n}\n\nvec3 heatmapGradient(in float t) {\n    return clamp((pow(t, 1.5) * .8 + .2) * vec3(smoothstep(0., .35, t) + t * .5, smoothstep(.5, 1., t), max(1. - t * 1.7, t * 7. - 6.)), 0., 1.);\n}\n\nbool intersectPlane(in vec3 ro, in vec3 rd, in vec3 pt, in vec3 n, out float t) {\n\tfloat k = dot(rd, n);\n\tif (k == 0.) return false;\n\tt = (dot(pt, n)-dot(ro,n))\/k;\n\treturn t>0.;\n}\n#endif\n\n\/\/ -------------------------------------------\n\nconst float\n    a_eyeClose = .55, \n    a_eyeOpen = -.3;\n\n\nconst float \n    t_apear = 5.,\n    t_noze = t_apear+8., \n    t_openEye = t_noze + 1.,\n    t_g_headRot = t_openEye + 4.5,\n    t_rotDown = t_g_headRot + 3.5,\n    t_outNoze = t_rotDown + 3.,\n    t_night = t_outNoze + 4.,\n    t_colorfull = t_night + 5.,\n    t_disapear = t_colorfull + 2.,\n    t_closeEye = t_disapear + 3.;\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float st = 1.2; \/\/ speed coeff\n    float time = mod(iGlobalTime*st+55., 62.831);\n    \n\/\/ constantes\n    ma = matRot(-.5);\n    mb = matRot(-.15);\n    mc = matRot(-.6);\n\n\/\/ Eye blink\n    float a_PaupieresCligne = mix(a_eyeOpen,a_eyeClose, hash(floor(time*10.))>.98?2.*abs(fract(20.*time)-.5):0.);    \n    float a_Paupieres = mix(a_eyeClose, .2, smoothstep(t_openEye, t_openEye+2., time));    \n    a_Paupieres = mix(a_Paupieres, a_PaupieresCligne, smoothstep(t_rotDown, t_rotDown+1., time));\n    a_Paupieres = mix(a_Paupieres, a_eyeClose, smoothstep(t_closeEye, t_closeEye+3., time));\n\n    g_eyeRot = matRot(a_Paupieres);\n\n\/\/ rotation de la tete \n    float a_headRot = 0.1, a_headRotH = 0.1;\n\t\n    a_headRot = mix(0., .2*cos(20.*(time-t_g_headRot)), smoothstep(t_g_headRot, t_g_headRot+.5, time)-smoothstep(t_g_headRot+1., t_g_headRot+1.5, time));\n    a_headRotH = mix(-.1, .2*sin(20.*(time-t_g_headRot)), smoothstep(t_g_headRot+1.5, t_g_headRot+2., time)-smoothstep(t_g_headRot+2., t_g_headRot+2.5, time));\n    a_headRotH = mix(a_headRotH, .3, smoothstep(t_g_headRot+2.6, t_rotDown, time));\n    a_headRotH = mix(a_headRotH, -.2, smoothstep(t_outNoze, t_outNoze+2., time));\n    a_headRotH = mix(a_headRotH, -.1, smoothstep(t_closeEye, t_closeEye+3., time));\n    \n    g_headRot = matRot(a_headRot); \n    g_headRotH = matRot(a_headRotH); \n    mat2 g_headRot2 = matRot(-a_headRot); \n    mat2 g_headRotH2 = matRot(-a_headRotH); \n\n\/\/ Position du nez\n    animNoze = smoothstep(t_openEye+2., t_openEye+2.1, time) - smoothstep(t_openEye+2.1, t_openEye+2.3, time)\n             + smoothstep(t_openEye+2.5, t_openEye+2.6, time) - smoothstep(t_openEye+2.6, t_openEye+2.8, time);\n    \n    vec3 p_noze = g_nozePos - headRotCenter;\n    p_noze.xz *= g_headRot2;\n    p_noze.yz *= g_headRotH2;\n    p_noze += headRotCenter;\n\n\/\/ Positon du point lumineux\n    float distLightRot = mix(1., .4, smoothstep(3.,t_noze-2., time));\n    vec3 centerLightRot = vec3(0,.2,1.7);\n                              \n    float lt = 3.*(time-1.);\n    vec3 lightRot = centerLightRot + distLightRot*vec3(cos(lt*.5), .025*sin(2.*lt), sin(lt*.5));\n\t\n    g_lightPos = mix(lightRot, p_noze+.004*animNoze, smoothstep(t_noze, t_noze + 1., time));\n    g_lightPos = mix(g_lightPos, lightRot, smoothstep(t_outNoze,t_outNoze+2., time));\n\n\/\/ intensitee et couleur du point\n    float lightAppear = smoothstep(t_apear, t_apear+2., time)-smoothstep(t_disapear, t_disapear+3., time);\n\tvec3 lightCol2 = hsv2rgb_smooth(.6*(floor(st*iGlobalTime\/62.831))+.04,1.,.5);\n    \n\t\/\/ Ambiant color\n\tg_envBrightness = mix(vec3(.6,.65,.9), vec3(.02,.03,.05), smoothstep(t_night, t_night+3., time));\n\tg_envBrightness = mix(g_envBrightness, lightCol2, smoothstep(t_colorfull, t_colorfull+1., time));\n\tg_envBrightness = mix(g_envBrightness, vec3(.6,.65,.9), smoothstep(t_disapear+5., t_disapear+9., time));\n\t\n\n\tvec3 lightDir1 = normalize(vec3(.5,1.5,1.5));\n\tvec3 lightCol1 = vec3(1.1,1.,.9)*.7*g_envBrightness;\n\n\tfloat lightRange2 = .4; \n\tfloat traceStart = 0.;\n\tfloat traceEnd = 40.0;\n\n    vec3 col, colorSum = vec3(0.);\n\n#if (ANTIALIASING == 1)\t\n\tint i=0;\n#else\n\tfor (int i=0;i<ANTIALIASING;i++) {\n#endif\n\t\tcol = vec3(0);\n\n        \/\/ Camera    \n\n#if (ANTIALIASING == 1)\t        \n        float randPix = 0.;\n#else \n        float randPix = hash(iGlobalTime); \/\/ Use frame rate to improve antialiasing ... not sure of result\n#endif        \n\t\tvec2 subPix = .4*vec2(cos(randPix+6.28*float(i)\/float(ANTIALIASING)),\n                              sin(randPix+6.28*float(i)\/float(ANTIALIASING)));\n\t\tvec3 ray = Ray(2.0,fragCoord.xy+subPix);\n\t\t\n\t\tBarrelDistortion(ray, .5 );\n\t\t\n\t\tray = normalize(ray);\n\t\tvec3 localRay = ray;\n\t\tvec2 mouse = vec2(0);\n\t#ifdef MOUSE\n\t\tif ( iMouse.z > 0.0 )\n\t\t\tmouse = .5-iMouse.yx\/iResolution.yx;\n\t\tvec3 pos = 5.*Rotate(ray, vec2(-.1,1.+time*.1)+vec2(-1.0,-3.3)*mouse );        \n\t#else    \n\t\tvec3 pos = vec3(0,0,.6) + 5.5*Rotate(ray, vec2(-.1,1.+time*.1));        \n\t#endif\n\n\t\t\n#ifdef DRAW_DISTANCE    \n        float tPlane;\n        if (intersectPlane(pos, ray, vec3(0.), -ray, tPlane)) {\n            vec3 p = pos+tPlane*ray;\n            float dist = map(p);\n            if (dist > 0.) {\n            \tcol = .1+.8*heatmapGradient(clamp(1.2*dist,0.,10.));   \n            }\n            else {\n            \tcol.brg = .1+.8*heatmapGradient(clamp(-1.2*dist,0.,10.));     \n            }\n            col *= isoline(p, -ray, .05, 1.); \n          \n        } \n        else {\n            col = vec3(0);\n        }\n#else            \n\t\tfloat t = Trace(pos, ray, traceStart, traceEnd );\n        if ( t < 10.0 )\n\t\t{           \n\t\t\tvec3 p = pos + ray*t;\n\t\t\t\n\t\t\t\/\/ Shadows\n\t\t\tvec3 lightDir2 = g_lightPos-p;\n\t\t\tfloat lightIntensity2 = length(lightDir2);\n\t\t\tlightDir2 \/= lightIntensity2;\n\t\t\tlightIntensity2 = lightAppear*lightRange2\/(.1+lightIntensity2*lightIntensity2);\n\t\t\t\n\t\t\tfloat s1 = 0.0;\n\t\t\ts1 = Trace(p, lightDir1, .05, 4.0 );\n\t\t\tfloat s2 = 0.0;\n\t\t\ts2 = Trace(p, lightDir2, .05, 4.0 );\n\t\t\t\n\t\t\tvec3 n = Normal(p, ray, t);\n\t\t\tcol = Shade(p, ray, n, lightDir1, lightDir2,\n\t\t\t\t\t\tlightCol1, lightCol2*lightIntensity2,\n\t\t\t\t\t\t(s1<20.0)?0.0:1.0, (s2<20.0)?0.0:1.0, t );\n\t\t\t\n\t\t\t\/\/ fog\n\t\t\tfloat f = 200.0;\n\t\t\tcol = mix( vec3(.8), col, exp2(-t*vec3(.4,.6,1.0)\/f) );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tcol = Sky( ray );\n\t\t}\n        \/\/ Draw light\n\t\tfloat s1 = max(distance(pos, ray, g_lightPos)+.03,0.);\n\t\tfloat dist = length(g_lightPos-pos);\n\t\tif (dist < t) {\n\t\t\tvec3 col2 = lightCol2*2.5*exp( -.01*dist*dist );\n\t\t\tfloat BloomFalloff = 15000.; \/\/mix(1000.,5000., Anim);\n\t\t\tcol = col *(1.-lightAppear) + lightAppear*mix(col2, col, smoothstep(.037,.047, s1));\n\t\t\tcol += lightAppear*col2*col2\/(1.+s1*s1*s1*BloomFalloff);\n\t\t}\n        \n#endif\t\t\t\n\t\t\n\n\t\/\/ Post traitments -----------------------------------------------------    \n\t\t\/\/ Vignetting:\n\t\tcol *= smoothstep(.5, .0, dot(localRay.xy,localRay.xy) );\n\n\t\t\t\n\t\tcolorSum += col;\n        \n#if (ANTIALIASING > 1)\t\n\t}\n    \n    col = colorSum\/float(ANTIALIASING);\n#else\n\tcol = colorSum;\n#endif\n    \n\n    \/\/ Compress bright colours, (because bloom vanishes in vignette)\n    vec3 c = (col-1.0);\n    c = sqrt(c*c+.05); \/\/ soft abs\n    col = mix(col,1.0-c,.48); \/\/ .5 = never saturate, .0 = linear\n\t\n\t\/\/ compress bright colours\n\tfloat l = max(col.x,max(col.y,col.z));\/\/dot(col,normalize(vec3(2,4,1)));\n\tl = max(l,.01); \/\/ prevent div by zero, darker colours will have no curve\n\tfloat l2 = SmoothMax(l,1.0,.01);\n\tcol *= l2\/l;\n    \n\tfragColor =  vec4(pow(col,vec3(1.\/1.6)),1);\n}\n","name":"","description":"","type":"image"}]}}