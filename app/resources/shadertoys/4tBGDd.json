{"Shader":{"ver":"0.1","info":{"id":"4tBGDd","date":"1433464101","viewed":852,"name":"Ray Marching Experiment 27","username":"aiekick","description":"Sphere mapping of the Fractal Experiment 4","likes":14,"published":3,"flags":0,"tags":["ray","experiment","marching","27"],"hasliked":0},"renderpass":[{"inputs":[{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat dstef = 0.0;\n    \nvec3 effect(vec2 uv) \n{\n    float t = sin(iGlobalTime*.05)*.6;\n    vec2 s = iResolution.xy;\n    vec2 mo = 0.9*(s*vec2(0.98, t)-s)\/s.y;\n        \n    float       \n    x=uv.x,\n    y=uv.y,\n    m=0.;\n       \n    dstef += 0.028;\n        \n    for (int i=0;i<50;i++)\n\t{\n        \n        x=abs(x);\n        y=abs(y);\n        m=x*x+y*y;\n        x=x\/m+mo.x;\n        y=y\/m+mo.y;\n    }    \n\n    vec2 res = abs(vec2(x,y))\/(x*y)+uv;\n       \n    float d = dot(res,res.yx);\n        \n    float tt = sin(3.15);\n      \n    float rr = mix(1.\/d, d, abs(tt));\n    float gg = mix(rr, d, abs(tt));\n    float bb = mix(gg, d, abs(tt));\n    vec3 c = vec3(rr,gg,bb);\n\n    return c;\n}\n\n\/\/\/\/\/\/\/FRAMEWORK\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n#define mPi 3.14159\n#define m2Pi 6.28318\nvec2 uvMap(vec3 p)\n{\n        p = normalize(p);\n        vec2 tex2DToSphere3D;\n        tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ m2Pi;\n        tex2DToSphere3D.y = 0.5 - asin(p.y) \/ mPi;\n        return tex2DToSphere3D;\n}\n\nvec4 displacement(vec3 p)\n{\n        vec3 col = effect(uvMap(p));\n    \n        col = clamp(col, vec3(0), vec3(1.));\n    \n        float dist = dot(col,vec3(0.1)); \n    \n        return vec4(dist,col);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n        float scale = 1.; \/\/ displace scale\n        float dist = 0.;\n    \n        float x = 6.;\n        float z = 6.;\n    \n        vec4 disp = displacement(p);\n        \n        float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n        dist = osphere(p, +5.-y);\n    \n        return vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos, float prec )\n{\n        vec3 eps = vec3( prec, 0., 0. );\n        vec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n        return normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n        float occ = 0.0;\n        float sca = 1.0;\n        for( int i=0; i<5; i++ )\n    \n{\n            float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n        return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cam_a = 3.3; \/\/ angle z\n    \n    float cam_e = -1.; \/\/ elevation\n    float cam_d = 6.; \/\/ distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 1.2; \/\/ refraction angle\n    float refr_i = .8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float marchPrecision = 0.5; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    vec3 ray, cubeRay;\n    \n    for(int i=0;i<250;i++)\n        {      \n            if (s<prec||s>maxd) break;\n            s = map(p).x*marchPrecision;\n            d += s;\n            p = ro+rd*d;\n        }\n\n        if (d<maxd)\n        {\n            vec2 e = vec2(-1., 1.)*0.005; \n            vec3 n = calcNormal(p, 0.1);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(ray, n, refr_a);\n            cubeRay += textureCube(iChannel0, ray).rgb * refr_i;\n\n            col = cubeRay+pow(b,15.); \n\n            \n            \/\/ lighting        \n            float occ = calcAO( p, n );\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            col = mix(col, map(p).yzw, 0.5);\n\n        }\n        else\n        {\n            col = textureCube(iChannel0, rd).rgb;\n        }\n\n    col *= dstef;\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}