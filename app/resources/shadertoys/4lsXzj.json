{"Shader":{"ver":"0.1","info":{"id":"4lsXzj","date":"1438089429","viewed":815,"name":"Signed Distance Teddy","username":"Doidel","description":"A floating teddy designed with some trigonometry in a signed distance field. Based on otaviogood's \"Straticum\".<br\/>Please go easy on me, it's my very first shader ^^ That's also why there's no real material or clouds (yet)...","likes":5,"published":3,"flags":0,"tags":["procedural","fractal","raymarch","signeddistancefield","teddybear"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*--------------------------------------------------------------------------------------\nLicense CC0 - http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^This means do anything you want with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*\/\n\n\/\/ Set this to change detail level. [1 - 10] is a good range.\nconst int NUM_SIN_REPS = 9;\nconst int MAX_MARCH_REPS = 250;\nconst float MARCH_DISTANCE_MULTIPLIER = 0.1;\n\nfloat localTime = 0.0;\n\n\/\/ some noise functions\nfloat Hash(float f)\n{\n    return fract(cos(f)*7561.0);\n}\nfloat Hash2d(vec2 uv)\n{\n    float f = uv.x + uv.y * 521.0;\t\/\/ repeats after this value\n    float rand = fract(cos(f)*104729.0);\n    return rand;\n}\nvec2 Hash2(vec2 v)\n{\n    return fract(cos(v*3.333)*vec2(100003.9, 37049.7));\n}\nfloat Hash3d(vec3 uv)\n{\n    float f = uv.x + uv.y * 37.0 + uv.z * 521.0;\n    return fract(sin(f)*110003.9);\n}\n\nfloat mixS(float f0, float f1, float a)\n{\n    if (a < 0.5) return f0;\n    return f1;\n}\n\nfloat mixC(float f0, float f1, float a)\n{\n    return mix(f1, f0, cos(a*3.1415926) *0.5+0.5);\n}\n\nfloat mixP(float f0, float f1, float a)\n{\n    return mix(f0, f1, a*a*(3.0-2.0*a));\n}\nvec2 mixP2(vec2 v0, vec2 v1, float a)\n{\n    return mix(v0, v1, a*a*(3.0-2.0*a));\n}\n\nfloat mixSS(float f0, float f1, float a)\n{\n    return mix(f0, f1, smoothstep(0.0, 1.0, a));\n}\n\nconst vec2 zeroOne = vec2(0.0, 1.0);\nfloat noise2dVec(vec2 uv)\n{\n    vec2 fr = fract(uv);\n    vec2 fl = floor(uv);\n    vec2 h0 = vec2(Hash2d(fl), Hash2d(fl + zeroOne));\n    vec2 h1 = vec2(Hash2d(fl + zeroOne.yx), Hash2d(fl + zeroOne.yy));\n    vec2 xMix = mixP2(h0, h1, fr.x);\n    return mixC(xMix.x, xMix.y, fr.y);\n}\nfloat noise2d(vec2 uv)\n{\n    vec2 fr = fract(uv);\n    vec2 fl = floor(uv);\n    float h00 = Hash2d(fl);\n    float h10 = Hash2d(fl + zeroOne.yx);\n    float h01 = Hash2d(fl + zeroOne);\n    float h11 = Hash2d(fl + zeroOne.yy);\n    return mixP(mixP(h00, h10, fr.x), mixP(h01, h11, fr.x), fr.y);\n}\nfloat noise(vec3 uv)\n{\n    vec3 fr = fract(uv.xyz);\n    vec3 fl = floor(uv.xyz);\n    float h000 = Hash3d(fl);\n    float h100 = Hash3d(fl + zeroOne.yxx);\n    float h010 = Hash3d(fl + zeroOne.xyx);\n    float h110 = Hash3d(fl + zeroOne.yyx);\n    float h001 = Hash3d(fl + zeroOne.xxy);\n    float h101 = Hash3d(fl + zeroOne.yxy);\n    float h011 = Hash3d(fl + zeroOne.xyy);\n    float h111 = Hash3d(fl + zeroOne.yyy);\n    return mixP(\n        mixP(mixP(h000, h100, fr.x),\n             mixP(h010, h110, fr.x), fr.y),\n        mixP(mixP(h001, h101, fr.x),\n             mixP(h011, h111, fr.x), fr.y)\n        , fr.z);\n}\n\nfloat PI=3.14159265;\n\nvec3 saturate(vec3 a) { return clamp(a, 0.0, 1.0); }\nvec2 saturate(vec2 a) { return clamp(a, 0.0, 1.0); }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\nvec3 RotateX(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  \/\/if (RIGHT_HANDED_COORD)\n  return vec3(v.x, cos * v.y + sin * v.z, -sin * v.y + cos * v.z);\n  \/\/else return new float3(x, cos * y - sin * z, sin * y + cos * z);\n}\nvec3 RotateY(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  \/\/if (RIGHT_HANDED_COORD)\n  return vec3(cos * v.x - sin * v.z, v.y, sin * v.x + cos * v.z);\n  \/\/else return new float3(cos * x + sin * z, y, -sin * x + cos * z);\n}\nvec3 RotateZ(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  \/\/if (RIGHT_HANDED_COORD)\n  return vec3(cos * v.x + sin * v.y, -sin * v.x + cos * v.y, v.z);\n}\n\n\n\/\/ This function basically is a procedural environment map that makes the sun\nvec3 sunCol = vec3(258.0, 228.0, 170.0) \/ 3555.0;\/\/unfortunately, i seem to have 2 different sun colors. :(\nvec3 GetSunColorReflection(vec3 rayDir, vec3 sunDir)\n{\n\tvec3 localRay = normalize(rayDir);\n\tfloat dist = 1.0 - (dot(localRay, sunDir) * 0.5 + 0.5);\n\tfloat sunIntensity = 0.015 \/ dist;\n\tsunIntensity = pow(sunIntensity, 0.3)*100.0;\n\n    sunIntensity += exp(-dist*12.0)*300.0;\n\tsunIntensity = min(sunIntensity, 40000.0);\n    \/\/vec3 skyColor = mix(vec3(1.0, 0.95, 0.85), vec3(0.2,0.3,0.95), pow(saturate(rayDir.y), 0.7))*skyMultiplier*0.95;\n\treturn sunCol * sunIntensity*0.0425;\n}\nvec3 GetSunColorSmall(vec3 rayDir, vec3 sunDir)\n{\n\tvec3 localRay = normalize(rayDir);\n\tfloat dist = 1.0 - (dot(localRay, sunDir) * 0.5 + 0.5);\n\tfloat sunIntensity = 0.05 \/ dist;\n    sunIntensity += exp(-dist*12.0)*300.0;\n\tsunIntensity = min(sunIntensity, 40000.0);\n\treturn sunCol * sunIntensity*0.025;\n}\n\nvec4 cXX = vec4(0.0, 3.0, 0.0, 0.0);\n\nvec3 camPos = vec3(0.0), camFacing;\nvec3 camLookat=vec3(0,0.0,0);\n\nfloat SinRep(float a)\n{\n    float h = 0.0;\n    float mult = 1.0;\n    for (int i = 0; i < NUM_SIN_REPS; i++)\n    {\n        h += (cos(a*mult)\/(mult));\n        mult *= 2.0;\n    }\n    return h;\n}\n\nvec2 DistanceToObject(vec3 p)\n{\n    float final = 0.0;\n    float material = 0.0;\n    if (p.y > -2.0)\n    {\n    \tfloat balloonform = length(vec3(p.x*1.3,p.y,p.z*1.3)) -2.0;\n        final = balloonform;\n        material = \t0.2;\n    }\n    else if (p.y > -4.0)\n    {  \n    \tfloat cord = length(p.xz) - 0.02;\n        final = cord;\n    } else {\n     \t\/\/ the teddy\n        \n        \/\/right arm\n        float teddyHandUp = length(vec3(p.x, p.y + 4.5, p.z)) - 0.5;\n        vec3 teddyArmUpPos1 = vec3(0.1, -4.8, 0.1);\n        vec3 teddyArmUpPos2 = vec3(0.15, -5.3, 0.15);\n        vec3 t = normalize(teddyArmUpPos2 - teddyArmUpPos1);\n        float l = dot(t,p-teddyArmUpPos1);\n        float teddyArmUp = length((teddyArmUpPos1 + clamp(l,0.0,1.5) * t) - p) - 0.5;\n        \n        \n        \/\/ left arm\n        vec3 teddyArmDownPos1 = vec3(2.2, -6.3, 2.2);\n        vec3 teddyArmDownPos2 = vec3(2.35, -6.8, 2.35);\n        t = normalize(teddyArmDownPos2 - teddyArmDownPos1);\n        l = dot(t,p-teddyArmDownPos1);\n        float teddyArmDown = length((teddyArmDownPos1 + clamp(l,0.0,1.5) * t) - p) - 0.5;\n        \n        \/\/ body\n        float teddyBody = length(vec3((p.x - 1.2) * 1.3, p.y + 7.5, (p.z - 1.2) * 1.3)) - 1.8;\n        \n        \/\/ head\n        float teddyHead = length(vec3(p.x - 1.2, p.y + 5.2, p.z - 1.2)) - 1.0;\n        \n        \/\/ eyes\n        float teddyEyeLeft = length(vec3(p.x - 1.5, p.y + 5.0, p.z - 0.3)) - 0.15;\n        float teddyEyeRight = length(vec3(p.x - 2.0, p.y + 5.0, p.z - 0.8)) - 0.15;\n        \n        \/\/ ears\n        float teddyEarLeft = length(vec3((p.x - 0.8)* 1.5, p.y + 4.7, (p.z - 0.9)*1.5)) - 0.7;  \n        float teddyEarRight = length(vec3((p.x - 1.6)* 1.5, p.y + 4.7, (p.z - 1.7)*1.5)) - 0.7; \n        \n        \/\/ nose\n        float teddyNose = length(vec3(p.x - 1.65, p.y + 5.35, p.z - 0.65)) - 0.4;\n        float teddyNoseBump = length(vec3(p.x - 1.85, p.y + 5.35, p.z - 0.35)) - 0.1;\n        \n        \/\/ left leg\n        vec3 teddyLegLeftPos1 = vec3(1.9, -9.0, 1.9);\n        vec3 teddyLegLeftPos2 = vec3(4.0, -9.3, 1.0);\n        t = normalize(teddyLegLeftPos2 - teddyLegLeftPos1);\n        l = dot(t,p-teddyLegLeftPos1);\n        float teddyLegLeft = length((teddyLegLeftPos1 + clamp(l,0.0,1.5) * t) - p) - 0.5;\n        \n        \/\/ right leg\n        vec3 teddyLegRightPos1 = vec3(1.0, -9.0, 1.0);\n        vec3 teddyLegRightPos2 = vec3(2.0, -9.3, -1.5);\n        t = normalize(teddyLegRightPos2 - teddyLegRightPos1);\n        l = dot(t,p-teddyLegRightPos1);\n        float teddyLegRight = length((teddyLegRightPos1 + clamp(l,0.0,1.5) * t) - p) - 0.5;\n        \n        final = min(teddyNose, min(teddyNoseBump, min(teddyLegLeft, teddyLegRight)));\n        final = min(teddyHead, min(teddyEyeLeft, min(teddyEyeRight, min(teddyEarLeft, min(teddyEarRight, final)))));\n        final = min(teddyHandUp, min(teddyArmUp, min(teddyArmDown, min(teddyBody, final))));\n        \n        if (final == teddyEyeLeft || final == teddyEyeRight || final == teddyNoseBump)\n        {\n         \tmaterial = 0.1; \n        }\n    }\n    return vec2(final, material);\n}\n\nfloat distFromSphere;\nfloat IntersectSphereAndRay(vec3 pos, float radius, vec3 posA, vec3 posB, out vec3 intersectA2, out vec3 intersectB2)\n{\n\t\/\/ Use dot product along line to find closest point on line\n\tvec3 eyeVec2 = normalize(posB-posA);\n\tfloat dp = dot(eyeVec2, pos - posA);\n\tvec3 pointOnLine = eyeVec2 * dp + posA;\n\t\/\/ Clamp that point to line end points if outside\n\t\/\/if ((dp - radius) < 0) pointOnLine = posA;\n\t\/\/if ((dp + radius) > (posB-posA).Length()) pointOnLine = posB;\n\t\/\/ Distance formula from that point to sphere center, compare with radius.\n\tfloat distance = length(pointOnLine - pos);\n\tfloat ac = radius*radius - distance*distance;\n\tfloat rightLen = 0.0;\n\tif (ac >= 0.0) rightLen = sqrt(ac);\n\tintersectA2 = pointOnLine - eyeVec2 * rightLen;\n\tintersectB2 = pointOnLine + eyeVec2 * rightLen;\n\tdistFromSphere = distance - radius;\n\tif (distance <= radius) return 1.0;\n\treturn 0.0;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    localTime = iGlobalTime - 1.6;\n\t\/\/ ---------------- First, set up the camera rays for ray marching ----------------\n\tvec2 uv = fragCoord.xy\/iResolution.xy * 2.0 - 1.0;\n\n\t\/\/ Camera up vector.\n\tvec3 camUp=vec3(0,1,0); \/\/ vuv\n\n\t\/\/ Camera lookat.\n\tcamLookat=vec3(0,0.0,0);\t\/\/ vrp\n\n    \/\/ debugging camera\n    float mx=iMouse.x\/iResolution.x*PI*2.0-0.7 + localTime * 0.123;\n\tfloat my=-iMouse.y\/iResolution.y*10.0 - sin(localTime * 0.31)*0.5;\/\/*PI\/2.01;\n\tvec3 camAdd = vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*(9.2); \t\/\/ prp\n    camPos += camAdd;\n\n\n    \/\/ add randomness to camera for depth-of-field look close up.\n    \/\/camPos += vec3(Hash2d(uv)*0.91, Hash2d(uv+37.0), Hash2d(uv+47.0))*0.01;\n\n\t\/\/ Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);\/\/vpn\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\t\/\/ u\n\tvec3 upNorm=cross(camVec, sideNorm);\/\/v\n\tvec3 worldFacing=(camPos + camVec);\/\/vcv\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x\/iResolution.y) + uv.y * upNorm;\/\/scrCoord\n\tvec3 relVec = normalize(worldPix - camPos);\/\/scp\n\n\t\/\/ --------------------------------------------------------------------------------\n\t\/\/ I put a bounding sphere around the whole object. If the ray is outside\n\t\/\/ of the bounding sphere, I don't bother ray marching. It's just an optimization.\n\tvec3 iA, iB;\n\tfloat hit = IntersectSphereAndRay(vec3(0,-5.0,0), \/*7.6*\/10.0, camPos, camPos+relVec, iA, iB);\n\n\t\/\/ --------------------------------------------------------------------------------\n\tvec2 distAndMat = vec2(0.05, 0.0);\n\tfloat t = 0.0;\n\tfloat inc = 0.02;\n\tfloat maxDepth = 110.0;\n\tvec3 pos = vec3(0,0,0);\n    \/\/ start and end the camera ray at the sphere intersections.\n    camPos = iA;\n    maxDepth = distance(iA, iB);\n\t\/\/ ray marching time\n\tif (hit > 0.5)\t\/\/ check if inside bounding sphere before wasting time ray marching.\n\t{\n        for (int i = 0; i < MAX_MARCH_REPS; i++)\t\/\/ This is the count of the max times the ray actually marches.\n        {\n            if ((t > maxDepth) || (abs(distAndMat.x) < 0.0075)) break;\n            pos = camPos + relVec * t;\n            \/\/ *******************************************************\n            \/\/ This is _the_ function that defines the \"distance field\".\n            \/\/ It's really what makes the scene geometry.\n            \/\/ *******************************************************\n            distAndMat = DistanceToObject(pos);\n            \/\/ adjust by constant because deformations mess up distance function.\n            t += distAndMat.x * MARCH_DISTANCE_MULTIPLIER;\n        }\n    }\n    else\n    {\n\t\tt = maxDepth + 1.0;\n        distAndMat.x = 1.0;\n    }\n\t\/\/ --------------------------------------------------------------------------------\n\t\/\/ Now that we have done our ray marching, let's put some color on this geometry.\n\n\tvec3 sunDir = normalize(vec3(0.93, 1.0, -1.5));\n\tvec3 finalColor = vec3(0.0);\n\n\t\/\/ If a ray actually hit the object, let's light it.\n\tif (abs(distAndMat.x) < 0.75)\n    \/\/if (t <= maxDepth)\n\t{\n        \/\/ calculate the normal from the distance field. The distance field is a volume, so if you\n        \/\/ sample the current point and neighboring points, you can use the difference to get\n        \/\/ the normal.\n        vec3 smallVec = vec3(0.005, 0, 0);\n        vec3 normalU = vec3(distAndMat.x - DistanceToObject(pos - smallVec.xyy).x,\n                           distAndMat.x - DistanceToObject(pos - smallVec.yxy).x,\n                           distAndMat.x - DistanceToObject(pos - smallVec.yyx).x);\n\n        vec3 normal = normalize(normalU);\n\n        \/\/ calculate 2 ambient occlusion values. One for global stuff and one\n        \/\/ for local stuff - so the green sphere light source can also have ambient.\n        float ambientS = 1.0;\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.1).x*10.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.2).x*5.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.4).x*2.5);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.8).x*1.25);\n        float ambient = ambientS * saturate(DistanceToObject(pos + normal * 1.6).x*1.25*0.5);\n        ambient *= saturate(DistanceToObject(pos + normal * 3.2).x*1.25*0.25);\n        ambient *= saturate(DistanceToObject(pos + normal * 6.4).x*1.25*0.125);\n        ambient = max(0.15, pow(ambient, 0.3));\t\/\/ tone down ambient with a pow and min clamp it.\n        ambient = saturate(ambient);\n\n        \/\/ Trace a ray toward the sun for sun shadows\n        float sunShadow = 1.0;\n        float iter = 0.2;\n\t\tfor (int i = 0; i < 10; i++)\n        {\n            float tempDist = DistanceToObject(pos + sunDir * iter).x;\n\t        sunShadow *= saturate(tempDist*10.0);\n            if (tempDist <= 0.0) break;\n            iter *= 1.5;\t\/\/ constant is more reliable than distance-based\n            \/\/iter += max(0.2, tempDist)*1.2;\n        }\n        sunShadow = saturate(sunShadow);\n\n        \/\/ calculate the reflection vector for highlights\n        vec3 ref = reflect(relVec, normal);\n\n        \/\/ ------ Calculate texture color of the rock ------\n        \/\/ base texture can be swirled noise.\n\t\t\/\/vec3 rp = RotateY(pos, pos.y*0.4 - cos(localTime)*0.4);\n        \/\/float n = noise(rp*4.0) + noise(rp*8.0) + noise(rp*16.0) + noise(rp*32.0);\n        vec3 redBase = vec3(1.0,0.01,0.05);\n        vec3 brownBase = vec3(0.3,0.15,0.0);\n        \n        vec3 texColor = redBase;\n        if (pos.y <= -4.0)\n        {\n         \ttexColor = brownBase;\n            float n = noise(pos * 40.0);\n            \/\/n = saturate(n*0.25 * 0.95 + 0.05);\n            texColor *= n\/2.0 + 1.0\/2.0;\n        }\n        \n        if (distAndMat.y > 0.05 && distAndMat.y <= 0.15)\n        {\n         \ttexColor = vec3(0.05,0.05,0.1);   \n        }\n\n        \/*\n        \/\/ fade to reddish texture on outside\n        texColor += vec3(0.99, 0.21, 0.213) * clamp(length(pos)-4.0, 0.0, 0.4);\n        \/\/ give it green-blue texture that matches the shape using normal length\n        texColor += vec3(1.0, 21.0, 26.0)*0.6 * saturate(length(normalU)-0.01);\n        \/\/ Give it a reddish-rust color in the middle\n        texColor -= vec3(0.0, 0.3, 0.5)*saturate(-distAndMat.y*(0.9+sin(localTime+0.5)*0.9));\n        \/\/ make sure it's not too saturated so it looks realistic\n        texColor = max(vec3(0.02),texColor);\n        *\/;\n\n        \/\/ ------ Calculate lighting color ------\n        \/\/ Start with sun color, standard lighting equation, and shadow\n        vec3 lightColor = sunCol * saturate(dot(sunDir, normal)) * sunShadow*14.0;\n        \/\/ sky color, hemisphere light equation approximation, anbient occlusion\n        lightColor += vec3(0.1,0.35,0.95) * (normal.y * 0.5 + 0.5) * ambient * 0.25;\n        \/\/ ground color - another hemisphere light\n        lightColor += vec3(1.0) * ((-normal.y) * 0.5 + 0.5) * ambient * 0.2;\n\n        \/\/ finally, apply the light to the texture.\n        finalColor = texColor * lightColor;\n\n        \/\/ specular highlights - just a little\n        vec3 refColor = GetSunColorReflection(ref, sunDir)*0.68;\n        finalColor += refColor * sunCol * sunShadow * 9.0 * texColor.g;\n\n        \/\/ fog that fades to sun color so that fog is brightest towards sun\n        finalColor = mix(vec3(0.98, 0.981, 0.981) + min(vec3(0.25),GetSunColorSmall(relVec, sunDir))*2.0, finalColor, exp(-t*0.007));\n        \/\/finalColor = vec3(1.0, 21.0, 26.0) * saturate(length(normalU)-0.01);\n        \n        \/\/ if it's the balloon, make it a bit transparent\n        \n        if (distAndMat.y > 0.15)\n        {\n            vec3 bgCol = mix(vec3(1.0, 0.95, 0.85), vec3(0.2,0.5,0.95), pow(saturate(relVec.y), 0.7))*0.95;\n            \/\/ add the sun\n            bgCol += GetSunColorSmall(relVec, sunDir);\/\/ + vec3(0.1, 0.1, 0.1);\n            finalColor = mix(bgCol, finalColor, 0.9);\n        }\n\t}\n    else\n    {\n        \/\/ Our ray trace hit nothing, so draw sky.\n        \/\/ fade the sky color, multiply sunset dimming\n        finalColor = mix(vec3(1.0, 0.95, 0.85), vec3(0.2,0.5,0.95), pow(saturate(relVec.y), 0.7))*0.95;\n        \/\/ add the sun\n        finalColor += GetSunColorSmall(relVec, sunDir);\/\/ + vec3(0.1, 0.1, 0.1);\n    }\n\n    \/\/ vignette?\n    finalColor *= vec3(1.0) * saturate(1.0 - length(uv\/2.5));\n    finalColor *= 1.95;\n\n\t\/\/ output the final color with sqrt for \"gamma correction\"\n\tfragColor = vec4(sqrt(clamp(finalColor, 0.0, 1.0)),1.0);\n}\n","name":"","description":"","type":"image"}]}}