{"Shader":{"ver":"0.1","info":{"id":"XlsSz4","date":"1435473315","viewed":717,"name":"A Magnifying Lens","username":"codywatts","description":"It's a lens which magnifies and removes blurriness. Click and drag the mouse to move the lens around.","likes":3,"published":3,"flags":0,"tags":["2d","blur"],"hasliked":0},"renderpass":[{"inputs":[{"id":9,"src":"\/presets\/tex08.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float normalDistribution(in float mean, in float deviation, in float x)\n{\n    \/\/ 2.50662827463 = sqrt(2 * pi)\n    return (1.0 \/ (2.50662827463 * deviation)) * exp((-1.0 * pow(x - mean, 2.0))\/(2.0 * pow(deviation, 2.0)));\n}\n\nvec4 sampleTexture(in sampler2D sampler, in vec2 fragCoord, in vec2 uvOffsets)\n{\n\tconst float textureEdgeOffset = 0.005;\n\t\n\tvec2 textureCoordinates = (fragCoord + uvOffsets) \/ iResolution.xy;\n\ttextureCoordinates.y = 1.0 - textureCoordinates.y;\n\ttextureCoordinates = clamp(textureCoordinates, 0.0 + textureEdgeOffset, 1.0 - textureEdgeOffset);\n\treturn texture2D(iChannel0, textureCoordinates);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float textureSamplesCount = 8.0;\n    const float mean = 0.0;\n    \n\tvec2 mouseCoords = iMouse.xy;\n    \/\/ This causes the lens to animate in a figure-eight pattern if the user hasn't clicked anything.\n    if (mouseCoords == vec2(0.0))\n\t{\n        mouseCoords = (vec2(sin(iGlobalTime), sin(iGlobalTime) * cos(iGlobalTime)) * 0.35 + vec2(0.5)) * iResolution.xy;\n\t}\n    \n    float distanceFromLensCenter = distance(fragCoord, mouseCoords);\n    float distanceFactor = -1.0 * pow(0.04 * 640.0 \/ iResolution.x * distanceFromLensCenter, 5.0) + iResolution.x;\n    distanceFactor = max(1.0, distanceFactor);\n    \n    vec2 textureDisplacement = vec2(0.0, 0.0);\n    if (distanceFactor > 1.0)\n    {\n        float displacementFactor = distanceFromLensCenter \/ 2.0;\n        textureDisplacement = normalize(mouseCoords - fragCoord) * displacementFactor;\n    }\n    \n\tfloat standardDeviation = 40.0\/distanceFactor;    \n\n    float divisor = (normalDistribution(mean, standardDeviation, 0.0) + 1.0) * distanceFactor;\n\tvec4 accumulator = sampleTexture(iChannel0, fragCoord, textureDisplacement) * divisor;\n    \n    vec2 polarityArray[4];\n    polarityArray[0] = vec2(1.0, 1.0);\n    polarityArray[1] = vec2(-1.0, 1.0);\n    polarityArray[2] = vec2(1.0, -1.0);\n    polarityArray[3] = vec2(-1.0, -1.0);\n\n\tfor (float y = 1.0; y < textureSamplesCount; ++y)\n\t{\n        for (float x = 1.0; x < textureSamplesCount; ++x)\n        {\n            float multiplier = normalDistribution(mean, standardDeviation, distance(vec2(0.0), vec2(x, y))) + 1.0;\n\n            for (int p = 0; p < 4; ++p)\n            {\n                vec2 offset = vec2(x, y) * polarityArray[p];\n                accumulator += sampleTexture(iChannel0, fragCoord, offset) * multiplier;\n                divisor += (multiplier);\n            }\n        }\n\t}\n    \n    fragColor = accumulator \/ divisor;\n}","name":"","description":"","type":"image"}]}}