{"Shader":{"ver":"0.1","info":{"id":"Xls3R7","date":"1420304464","viewed":1033,"name":"3D metashapes","username":"LeWiZ","description":"My first 3D shader. \"Metaballs\" using various shapes (box, sphere, torus).<br\/>Thanks to iq for the tutorials and articles.<br\/><br\/>Update : softer diffuse shadows<br\/>Update : now the phong shading is correct","likes":19,"published":3,"flags":0,"tags":["3d","phong","metaballs","blob","metashapes"],"hasliked":0},"renderpass":[{"inputs":[{"id":27,"src":"\/presets\/cube05_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float sphere(vec3 pos)\n{\n\treturn length(pos)-1.0;   \n}\n\nfloat box(vec3 pos)\n{\n    vec3 d = abs(pos) - 1.0;\n  \treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat torus(vec3 pos)\n{\n\tvec2 q = vec2(length(pos.xz)-2.0,pos.y);\n  \treturn length(q)-0.5;   \n}\n\nfloat blob7(float d1, float d2, float d3, float d4, float d5, float d6, float d7)\n{\n    float k = 2.0;\n\treturn -log(exp(-k*d1)+exp(-k*d2)+exp(-k*d3)+exp(-k*d4)+exp(-k*d5)+exp(-k*d6)+exp(-k*d7))\/k;\n}\n\nfloat scene(vec3 pos)\n{\n    float t = iGlobalTime;\n    \n    float p = torus(pos + vec3(0.0,3.0,0.0));\n\tfloat b = sphere(0.5*(pos + vec3(cos(t*0.5),sin(t*0.3),0.0)));\n    float s1 = box(2.0*(pos + 3.0 * vec3(cos(t*1.1),cos(t*1.3),cos(t*1.7))))\/2.0;\n    float s2 = box(2.0*(pos + 3.0 * vec3(cos(t*0.7),cos(t*1.9),cos(t*2.3))))\/2.0;\n    float s3 = box(2.0*(pos + 3.0 * vec3(cos(t*0.3),cos(t*2.9),sin(t*1.1))))\/2.0;\n    float s4 = box(2.0*(pos + 3.0 * vec3(sin(t*1.3),sin(t*1.7),sin(t*0.7))))\/2.0;\n    float s5 = box(2.0*(pos + 3.0 * vec3(sin(t*2.3),sin(t*1.9),sin(t*2.9))))\/2.0;\n    \n    return blob7(p, b, s1, s2, s3, s4, s5);\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 15.0;\n\tconst float precis = 0.001;\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<150; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = scene( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*scene( pos + v1*eps ) + \n\t\t\t\t\t  v2*scene( pos + v2*eps ) + \n\t\t\t\t\t  v3*scene( pos + v3*eps ) + \n\t\t\t\t\t  v4*scene( pos + v4*eps ) );\n}\n\nvec3 calcLight( in vec3 pos , in vec3 lightp, in vec3 lightc, in vec3 camdir)\n{    \n\tvec3 normal = calcNormal(pos);\n    vec3 lightdir = normalize(pos - lightp);\n    float cosa = pow(0.5+0.5*dot(normal, -lightdir), 3.0);\n    float cosr = max(dot(-camdir, reflect(lightdir, normal)), 0.0);\n    \n    vec3 ambiant = vec3(0.02);\n    vec3 diffuse = vec3(0.7 * cosa);\n    vec3 phong = vec3(0.3 * pow(cosr, 16.0));\n    \n    return lightc * (ambiant + diffuse + phong);\n}\n\nvec3 illuminate( in vec3 pos , in vec3 camdir )\n{\n\tvec3 l1 = calcLight(pos, vec3(5.0,10.0,-20.0), vec3(1.0,1.0,1.0), camdir);\n    vec3 l2 = calcLight(pos, vec3(-20,10.0,5.0), vec3(0.5,0.4,0.3), camdir);\n    vec3 l3 = calcLight(pos, vec3(25.0,5.0,-5.0), vec3(0.4,0.3,0.2), camdir);\n    vec3 l4 = calcLight(pos, vec3(-5.0,-15.0,10.0), vec3(0.1,0.1,0.1), camdir);\n    return l1+l2+l3+l4;\n}\n\nvec3 background( vec3 rd )\n{\n\treturn textureCube(iChannel0, rd).rgb * textureCube(iChannel0, -rd).rgb;\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = (fragCoord.xy - iResolution.xy\/2.0) \/ min(iResolution.xy.x, iResolution.xy.y);\n    \n    float t = iGlobalTime;\n    vec3 campos = vec3(10.0*sin(t*0.3),2.5*sin(t*0.5),-10.0*cos(t*0.3));\n    vec3 camtar = vec3(0.0,0.0,0.0);\n    \n    mat3 camMat = calcLookAtMatrix( campos, camtar, 0.0 );\n\tvec3 camdir = normalize( camMat * vec3(xy,1.0) );\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    float dist = calcIntersection(campos, camdir);\n    \n    if (dist==-1.0) col = background(camdir);\n    else\n    {\n    \tvec3 inters = campos + dist * camdir;\n    \tcol = illuminate(inters, camdir);\n    }\n    \n    col = pow(col, vec3(0.8));\n    \n\tfragColor = vec4(col,1.0);\n}\n","name":"","description":"","type":"image"}]}}