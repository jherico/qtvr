{"Shader":{"ver":"0.1","info":{"id":"4sK3RR","date":"1453094513","viewed":231,"name":"Particle System Dynamics","username":"cornusammonis","description":"A particle system implementing several different forces, and rule-based particle interactions. Use mouse controls to speed up particles locally.","likes":5,"published":3,"flags":32,"tags":["dynamics","particle","system"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 is = texture2D(iChannel1, uv);\n    float l = length(is);    \n    fragColor = ((0.5 + 0.5 * sin(20.0 * l))\/l) *  vec4(is.xyz, 0.0) + 0.5 * vec4(is.w, is.w, 0.0, 0.0); \n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define NUM_PARTICLES 400\n#define speed 0.003\n#define accel 0.0005\n#define epsilon 0.5\n#define invert 100000.0\n#define gravity 5000.0\n#define perpendicular 5000000.0\n\nfloat hash(vec2 p) {\n    float h = dot(p,vec2(127.1,311.7)); \n    return fract(sin(h)*43758.5453123);\n}\n\nvec2 pm(vec2 uv) {\n    return mod(mod(uv, 1.0) + 1.0, 1.0);\n}\n\nint getType(vec2 uv) {\n    float pos = uv.x;\n    float catSize = 0.25;\n    \n    if (float(NUM_PARTICLES) < iResolution.x) {\n        catSize = (float(NUM_PARTICLES) \/ iResolution.x) \/ 4.0;\n    }    \n    \n    if (pos < catSize) {\n        return 0;    \n    } else if (pos >= catSize && pos < catSize * 2.0) {\n        return 1;\n    } else if (pos >= catSize * 2.0 && pos < catSize * 3.0) {\n        return 2;   \n    } else {\n        return 3;   \n    }\n}\n\nfloat getRule(int type0, int type1) {\n    vec2 stepX = vec2(float(type1) \/ iResolution.x, 0.0);\n    vec2 stepY = vec2(0.0, float(type0) \/ iResolution.y);\n    vec2 halfStep = 0.5 \/ iResolution.xy;\n    \n    vec2 uv = stepX + stepY + halfStep;\n    return texture2D(iChannel2, uv).x;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{    \n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 is = texture2D(iChannel0, uv);\n    vec2 pos = is.xy;\n    vec2 vel = is.zw;\n    \n    vec2 accum = vec2(0.0);\n    \n    vec2 c = fragCoord.xy;\n    vec2 r = iResolution.xy;\n    vec2 r_n = vec2(0.0, iResolution.y);\n    vec2 r_e = vec2(iResolution.x, 0.0);\n    vec2 stepX = vec2(1.0 \/ iResolution.x, 0.0);\n    vec2 stepY = vec2(0.0, 1.0 \/ iResolution.y);\n    vec2 halfStep = 0.5 \/ iResolution.xy;\n    \n    vec2 posS = pos * r;\n    \n    int myType = getType(uv);\n\n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        vec2 xpos = stepX * float(i);\n        vec2 uvN = pm(xpos) + stepY * floor(xpos.x) + halfStep;\n        vec2 posN = r * texture2D(iChannel0, uvN).xy;\n        \n        int thisType = getType(uvN);\n        float rule = getRule(myType, thisType);\n        \n        vec2 velN = texture2D(iChannel0, uvN).zw;\n        \n        if (length(posN - posS) > epsilon) {  \n        \n            \n            float rule = getRule(myType, thisType);\n            \n        \tvec2 minV = vec2(0.0, 0.0);\n        \tfloat minD = 10000.0;\n        \tfloat d[5];\n        \td[0] = distance(posN, posS);\n        \td[1] = distance(posN + r_n, posS);\n        \td[2] = distance(posN + r_e, posS);\n        \td[3] = distance(posN - r_n, posS);\n        \td[4] = distance(posN - r_e, posS);\n\n            vec2 v[5];\n            v[0] = posN - posS;\n            v[1] = posN + r_n - posS;\n            v[2] = posN + r_e - posS;\n            v[3] = posN - r_n - posS;\n            v[4] = posN - r_e - posS;\n\n            for (int i = 0; i < 5; i++) {\n                if (d[i] < minD) {\n                    minD = d[i];\n                    minV = v[i];\n                }\n            }\n\n            accum += gravity * rule * (normalize(velN) + normalize(minV)) \/ (minD * minD);\n            accum -= invert * rule * normalize(minV) \/ (minD * minD * minD);\n            accum += perpendicular * rule * normalize(velN) * length(cross(vec3(vel, 0.0), vec3(velN, 0.0))) \/ (minD * minD * minD);\n        }\n    }  \n    \n    float mouseScale = 1.0 + 0.2 \/ (distance(posS, iMouse.xy) \/ iResolution.x);\n    vec2 tempVel = vel + accel * accum;\n    vec2 norm = normalize(tempVel);\n    vel = length(tempVel) > 1.0 ? norm : tempVel;\n    vel *= mouseScale;\n\n    \/\/ initialize with noise\n    if(iFrame<10) {\n        fragColor = vec4(hash(uv + 1.1), hash(uv + 2.3), hash(uv + 3.8) - 0.5, hash(uv + 4.2) - 0.5);\n    } else {\n        fragColor = vec4(pm(pos + speed * vel), vel);\n    }\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define NUM_PARTICLES 400\n#define scale 0.5\n\nvec4 getType(vec2 uv) {\n    float pos = uv.x;\n    float catSize = 0.25;\n    \n    if (float(NUM_PARTICLES) < iResolution.x) {\n        catSize = (float(NUM_PARTICLES) \/ iResolution.x) \/ 4.0;\n    }   \n    \n    if (pos < catSize) {\n        return vec4(1.0, 0.0, 0.0, 0.0);    \n    } else if (pos >= catSize && pos < catSize * 2.0) {\n        return vec4(0.0, 1.0, 0.0, 0.0); \n    } else if (pos >= catSize * 2.0 && pos < catSize * 3.0) {\n        return vec4(0.0, 0.0, 1.0, 0.0);   \n    } else {\n        return vec4(0.0, 0.0, 0.0, 1.0);    \n    }\n}\n\nvec2 pm(vec2 uv) {\n    return mod(mod(uv, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 stepX = vec2(1.0 \/ iResolution.x, 0.0);\n    vec2 stepY = vec2(0.0, 1.0 \/ iResolution.y);\n    vec2 halfStep = 0.5 \/ iResolution.xy;\n    \n    vec4 accum = vec4(0.0);\n    \n    vec2 c = fragCoord.xy;\n    vec2 r = iResolution.xy;\n    vec2 r_n = vec2(0.0, iResolution.y);\n    vec2 r_e = vec2(iResolution.x, 0.0);\n   \n\n    for (int i = 0; i < NUM_PARTICLES; i++) {\n        vec2 xpos = stepX * float(i);\n        vec2 uvN = pm(xpos) + stepY * floor(xpos.x) + halfStep;\n        vec2 pos = r * texture2D(iChannel0, uvN).xy;\n\n        float d = distance(c, pos);\n        float d_n = distance(c, pos + r_n);\n        float d_e = distance(c, pos + r_e);\n        float d_s = distance(c, pos - r_n);\n        float d_w = distance(c, pos - r_e);\n        float minWrap = min(min(d_n, d_s), min(d_e, d_w));\n        float minDistance = min(minWrap, d);\n        accum += getType(uvN) * scale \/ (minDistance);\n    }\n    fragColor = clamp(accum, 0.0, 1.0);\n\n}","name":"","description":"","type":"buffer"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 O, in vec2 U )\n{\n    \/\/ define our rule table\n    \n    int x = int(U.x);\n    int y = int(U.y);\n    \n    vec4 one = vec4(1.0);\n    vec4 neg_three = vec4(-3.0);\n    vec4 neg = vec4(-1.0);\n    \n    \n    \/*    \n          A  B  C  D\n        A 1 -3  1  1\n        B 1  1 -3  1\n        C 1 -3  1  1\n        D 1  1 -3  1\n    *\/\n\n    if (y == 0) {\n        if (x == 1) {\n            O = neg_three;   \n        } else {\n            O = one;\n        }\n    } else if (y == 1) {\n        if (x == 2) {\n            O = neg_three;   \n        } else {\n            O = one;\n        }\n    } else if (y == 2) {\n        if (x == 1) {\n            O = neg_three;   \n        } else {\n            O = one;\n        }       \n    } else {\n        if (x == 2) {\n            O = neg_three;   \n        } else {\n            O = one;\n        } \n    }\n\n\n    \/\/ Two alternative rules:\n    \n    \/*\n         1 -1 -1  1\n        -1  1  1 -1\n        -1 -1  1  1\n         1  1 -1 -1\n\n    if (y == 0) {\n        if (x == 0 || x == 3) {\n            O = one;   \n        } else {\n            O = neg;\n        }\n    } else if (y == 1) {\n        if (x == 0 || x == 3) {\n            O = neg;   \n        } else {\n            O = one;\n        }\n    } else if (y == 2) {\n        if (x == 0 || x == 1) {\n            O = neg;   \n        } else {\n            O = one;\n        }       \n    } else {\n        if (x == 0 || x == 1) {\n            O = one;   \n        } else {\n            O = neg;\n        } \n    }\n    *\/\n\n    \n    \/* \n        -1  1 -1 -1\n        -1 -1  1 -1\n        -1 -1 -1  1\n         1 -1 -1 -1\n\n\n    if (y == 0) {\n        if (x == 1) {\n            O = one;   \n        } else {\n            O = neg;\n        }\n    } else if (y == 1) {\n        if (x == 2) {\n            O = one;   \n        } else {\n            O = neg;\n        }\n    } else if (y == 2) {\n        if (x == 3) {\n            O = one;   \n        } else {\n            O = neg;\n        }       \n    } else {\n        if (x == 0) {\n            O = one;   \n        } else {\n            O = neg;\n        } \n    }\n    *\/\n    \n\n    \n}","name":"","description":"","type":"buffer"}]}}