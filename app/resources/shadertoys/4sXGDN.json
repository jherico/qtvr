{"Shader":{"ver":"0.1","info":{"id":"4sXGDN","date":"1369815533","viewed":2592,"name":"Iterations - coral","username":"iq","description":"Orbit trap coloring for noise-based iterations. Totally improvised.","likes":6,"published":3,"flags":0,"tags":["procedural","2d","noise","orbit"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\t\t\t\t\t\t    \n\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\n\nvec2 iterate( in vec2 p, in vec4 t )\n{\n\tfloat an  = noise(13.0*p)*3.1416;\n\t      an += noise(10.0*p)*3.1416;\n\t\n\treturn p + 0.01*vec2(cos(an),sin(an));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n\n\tp *= 0.85;\n\t\n\tp *= 3.0 + 2.0*cos(3.1*iGlobalTime\/10.0);\t\n\n\tvec4 t = 0.15*iGlobalTime*vec4( 1.0, -1.5, 1.2, -1.6 ) + vec4(0.0,2.0,3.0,1.0);\n\t\n    vec2 z = p;\n\tvec2 s = vec2(0.0);\n\tfor( int i=0; i<100; i++ ) \n\t{\n\t\tz = iterate( z, t );\n\n\t\tfloat d = dot( z-p, z-p ); \n\t\ts.x += abs(p.x-z.x);\n\t\ts.y = max( s.y, d );\n\t}\n    s.x \/= 100.0;\n\t\n\n\tvec3 col = 0.5 + 0.5*cos( s.y*3.2 + 0.5+vec3(4.5,2.4,1.5) );\n\tcol *= s.x*4.0;\n\n\tvec3 nor = normalize( vec3( dFdx(s.x), 0.001, dFdy(s.x) ) );\n\tcol -= vec3(0.2)*dot( nor, vec3(0.7,0.1,0.7) );\n\n\tcol *= 1.4*s.y;\n\n\tcol = sqrt(col)-0.16;\n\t\n\tcol += 0.3*s.x*s.y*noise(p*100.0 + 40.0*s.y);\n\t\n\tcol *= vec3(1.0,1.,1.4);\n\t\n\tcol *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}