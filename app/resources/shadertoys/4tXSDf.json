{"Shader":{"ver":"0.1","info":{"id":"4tXSDf","date":"1440112487","viewed":877,"name":"Voronoi Water","username":"clayjohn","description":"This started off as an experiment in multi octave voronoi cell-based noise. it ended up as a very simple water shader.","likes":8,"published":3,"flags":0,"tags":["voronoi","water","worleynoise"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec2 hash2(vec2 p ) {\n   return fract(sin(vec2(dot(p, vec2(123.4, 748.6)), dot(p, vec2(547.3, 659.3))))*5232.85324);   \n}\nfloat hash(vec2 p) {\n  return fract(sin(dot(p, vec2(43.232, 75.876)))*4526.3257);   \n}\n\n\/\/Based off of iq's described here: http:\/\/www.iquilezles.org\/www\/articles\/voronoilin\nfloat voronoi(vec2 p) {\n    vec2 n = floor(p);\n    vec2 f = fract(p);\n    float md = 5.0;\n    vec2 m = vec2(0.0);\n    for (int i = -1;i<=1;i++) {\n        for (int j = -1;j<=1;j++) {\n            vec2 g = vec2(i, j);\n            vec2 o = hash2(n+g);\n            o = 0.5+0.5*sin(iGlobalTime+5.038*o);\n            vec2 r = g + o - f;\n            float d = dot(r, r);\n            if (d<md) {\n              md = d;\n              m = n+g+o;\n            }\n        }\n    }\n    return md;\n}\n\nfloat ov(vec2 p) {\n    float v = 0.0;\n    float a = 0.4;\n    for (int i = 0;i<3;i++) {\n        v+= voronoi(p)*a;\n        p*=2.0;\n        a*=0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 a = vec4(0.2, 0.4, 1.0, 1.0);\n    vec4 b = vec4(0.85, 0.9, 1.0, 1.0);\n\tfragColor = vec4(mix(a, b, smoothstep(0.0, 0.5, ov(uv*5.0))));\n    \n}","name":"","description":"","type":"image"}]}}