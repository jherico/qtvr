{"Shader":{"ver":"0.1","info":{"id":"MlSGDW","date":"1429041638","viewed":775,"name":"Fur Experiment 2 : mod","username":"aiekick","description":"Fur Experiment 2","likes":3,"published":3,"flags":0,"tags":["experiment","fur","2"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst int REFLEXIONS_STEP = 1;\nconst vec2 RMPrec = vec2(0.1, 0.03); \/\/ ray marching tolerance precision \/\/ vec2(low, high)\nconst vec2 DPrec = vec2(0.01, 0.0001); \/\/ ray marching distance precision\n    \nvec3 effect(vec2 uv, float d) \n{\n    float t = sin(iGlobalTime)*.5+.5;\n    \n    float z = 0.1;\n    \n    vec2 bricks = vec2(200.);\n    \n    d = clamp(0., 1., d)*0.01;\n    \n    uv*=10.;\n    \n    vec2 mp = vec2(z);\n    float r = .02*d;\n    \n    vec2 wx = mod(uv, mp) -mp\/2.;\n    \n    vec2 tt = (floor(uv\/mp)+mp)*2.;\n    \n    if (abs(tt.x) < bricks.x ) uv.x = wx.x;\n    if (abs(tt.y) < bricks.y ) uv.y = wx.y;\n    \n\treturn vec3(r\/dot(uv,uv));\n}\n\nvec4 displacement(vec3 p, float d)\n{\n    \/\/ uv mapping\n    p = normalize(p);\n    vec2 tex2DToSphere3D;\n    tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ (2.*3.14159);\n    tex2DToSphere3D.y = 0.5 - asin(p.y) \/ 3.14159;\n            \n    vec3 col = effect(tex2DToSphere3D, d);\n    col = clamp(col, vec3(0), vec3(1.));\n    float dist = dot(col,vec3(0.3));\n    return vec4(dist,col);\n}\n\nvec4 map(vec3 p, float d)\n{\n    vec4 disp = displacement(p, d);\n    float dist = length(p) - 3.5 - disp.x;\n    return vec4(dist, disp.yzw);\n}\n\nvec3 nor( in vec3 p, float prec , float d)\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t    map(p+e.xyy,d).x - map(p-e.xyy,d).x,\n\t    map(p+e.yxy,d).x - map(p-e.yxy,d).x,\n\t    map(p+e.yyx,d).x - map(p-e.yyx,d).x );\n\treturn normalize(n);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor , float d)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aop =  nor * hr + pos;\n        float dd = map( aop ,d).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.5;\n    float cam_a = time; \/\/ angle z\n    \n    float cam_e = 0.; \/\/ elevation\n    float cam_d = 6.88; \/\/ distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 0.2; \/\/ refraction angle\n    float refr_i = .4; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = DPrec.x;\n    \n    float yOffset = length(p);\n    \n    vec3 ray, cubeRay;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<500;i++)\n        {      \n            if(s<DPrec.y||s>maxd) break;\n            s = map(p, yOffset).x*(s>DPrec.x?RMPrec.x:RMPrec.y);\n            d+=s;\n            yOffset = length(p);\n            p=ro+rd*d;\n        }\n\n        if (d<maxd)\n        {\n            vec2 e = vec2(-1., 1.)*0.005; \n            vec3 n = nor(p, 0.1, yOffset);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(ray, n, refr_a);\n            cubeRay += textureCube(iChannel0, ray).rgb * refr_i;\n\n            float ratio = float(k)\/float(REFLEXIONS_STEP);\n            \n            if ( k == 0 ) \n                col = cubeRay+pow(b,15.); \n            else \n                col = mix(col, cubeRay+pow(b,25.\/ratio), ratio*0.8);  \n            \n            \/\/ lighting        \n            float occ = calcAO( p, n , yOffset);\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            col = mix(col, map(p, yOffset).yzw, 0.5);\n            \n            ro = p;\n            rd = ray;\n            s = DPrec.x;\n        }\n        else if (k == 0)\n        {\n            col = textureCube(iChannel0, rd).rgb;\n        }\n    }\n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}