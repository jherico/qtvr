{"Shader":{"ver":"0.1","info":{"id":"llj3W1","date":"1428741177","viewed":794,"name":"Revision 2015 Livecoding Finals","username":"mu6k","description":"Written under 25 minutes at Revision 2015 live-coding finals. I tried to adapt it by making as less modifications as possible. Put some music into iChannel0.","likes":8,"published":3,"flags":0,"tags":["3d","raymarching","livecoding"],"hasliked":0},"renderpass":[{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":18,"src":"\/presets\/mzk01.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/original at: ftp:\/\/ftp.scene.org\/pub\/parties\/2015\/revision15\/shadershowdown\/03-musk.glsl\n\n#define v2Resolution iResolution.xy\n#define texFFTSmoothed iChannel0\n#define texFFT iChannel0\n#define texNoise iChannel1\n#define fGlobalTime iGlobalTime\n#define out_color fragColor\n\nfloat time =  fGlobalTime;\n\n\nfloat bt = texture2D(texFFTSmoothed, vec2(.01,.0)).x*.2;\n\nvec3 arep(vec3 p, float r)\n{\n  float a= atan(p.y,p.x);\n  float l = length(p.xy);\n  a = mod(a+r*.5,r)-r*.5;\n  p.xy = vec2(cos(a),sin(a))*l;\n  return p;\n}\n\nfloat b2(vec3 p, vec3 b)\n{\n  \n  return length(max(abs(p)-b,.0));\n}\n\nfloat box(vec3 p, vec3 b)\n{\n  vec3 q = arep(p,.5*355.0\/113.0);\n  p = arep(p,.25*355.0\/113.0);\n  return min(max(max(p.x-1.0,\n  max(p.x-1.0+p.z*.3,\n  max(p.x-1.3+p.z*.5,\n  max(p.x-1.6-p.z*.3,p.x-2.5-p.z*.8)))),-2.5-p.z),length(max(abs(p)-vec3(.1,0.1,.1),.0)));\n}\n\nfloat df(vec3 p)\n{\n  \n  \/\/return length(p)-1.0;\n  return min(box(p, vec3(.5,.5,.5)),p.y+8.0+texture2D(texNoise,(p.zx+vec2(time*64.0,.0))*.0004).x*2.0\n+texture2D(texNoise,(p.zx+vec2(time*64.0,.0))*.0004).x*64.0*bt);\n}\n\nvec3 nf(vec3 p)\n{\n  vec2 e = vec2(.0,.1);\n  float c= df(p);\n  return normalize(vec3(c+df(p+e.yxx),c+df(p+e.xyx),c+df(p+e.xxy)));\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time \/ .4 ) * .25, 1.0 );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(gl_FragCoord.x \/ v2Resolution.x, gl_FragCoord.y \/ v2Resolution.y);\n  uv -= 0.5;\n  uv \/= vec2(v2Resolution.y \/ v2Resolution.x, 1);\n\n  float a=time*.7, cs=cos(a), ss=sin(a);\n  mat3 r0 = mat3(cs,ss,0,-ss,cs,0,0,0,1);\n\n  a=sin(time*.6), cs=cos(a), ss=sin(a);\n  mat3 r1 = mat3(cs,0,ss,0,1,0,-ss,0,cs);\n\n  a=time*.4, cs=cos(a), ss=sin(a);\n  mat3 r2 = mat3(1,0,0,0,cs,ss,0,-ss,cs);\n\n\n  vec3 p = vec3(.0,.0,-8.0);\n  vec3 dir = normalize(vec3(uv.xy,-length(uv.xy)+0.5));\n\n  p*=r0*r1*r2;\n  dir*=r0*r1*r2;\n\n  float tt =.0;\n\n  for (int i=0; i<150; i++)\n  {\n    float dt = df(p);\n  tt += dt;\n    p += dir*dt*.5;\n    \n  }\n \n  vec2 m;\n  m.x = atan(uv.x \/ uv.y) \/ 3.14;\n  m.y = 1.0 \/ length(uv) * .2;\n  float d = m.y;\n\n  float f = texture2D( texFFTSmoothed, vec2(d,.0) ).r * 100.0;\n  m.x += sin( fGlobalTime ) * 0.1;\n  m.y += fGlobalTime * 0.25;\n\n  vec4 t = plas( m * 3.14, fGlobalTime ) \/ d;\n  t = clamp( t, 0.0, 1.0 );\n  vec4 c0 = (f + t)*bt*4.0;;\n\n  vec3 col = c0.xyz;\n  \n  vec3 l = normalize(vec3(1,2,3));\n\n  if (df(p)<.1)\n  {\n    col = nf(p)*.5+.5;\n    col = vec3(dot(nf(p),l)*.5+.5);\n  col*=.9;\n  }\n\n  if(p.y<-2.1)\n  {\n    col*=vec3(.2,.5,.2);\n  }\n  else if (p.z>.75) col*=vec3(.9,.2,.2);\n\n  col = col +  vec3(.2,.4,.6)*tt*.003;\n\n  col += length(col);\n  col -=.4;\n  out_color = vec4(col,1.0)*(bt+.2)*2.0;\n\n}\n","name":"","description":"","type":"image"}]}}