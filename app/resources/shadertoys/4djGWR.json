{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4djGWR",
				"date": "1386313470",
				"viewed": 6997,
				"name": "Rounded Voxels",
				"username": "iq",
				"description": "Another regular voxel renderer. When a voxel is hit, a distance field is raymarched inside the cell in order to shape it in any arbitrary shape. Looks cool with a video rather than a static texture ^_^",
				"likes": 66,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching",
					"distancefield",
					"voxel"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 2,
							"src": "\/presets\/tex01.jpg",
							"ctype": "texture",
							"channel": 0
						},

						{
							"id": 30,
							"src": "\/presets\/tex16.png",
							"ctype": "texture",
							"channel": 1
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#pragma vr\n\n// 1, 2, 3 or 4\n#define QUALITY 1\n\n#if QUALITY==1\n #define VIS_SAMPLES 4\n #define LIG_SAMPLES 10\n #define DETAIL_INTER 1\n#endif\n#if QUALITY==2\n #define VIS_SAMPLES 5\n #define LIG_SAMPLES 12\n #define DETAIL_INTER 2\n#endif\n#if QUALITY==3\n #define VIS_SAMPLES 8\n #define LIG_SAMPLES 12\n #define DETAIL_INTER 8\n#endif\n#if QUALITY==4\n #define VIS_SAMPLES 10\n #define LIG_SAMPLES 40\n #define DETAIL_INTER 16\n#endif\n\n\nfloat hash1( vec2  n ) { \n  return fract(sin(dot(n,vec2(1.0,113.0)))*43758.5453123); \n}\nfloat hash1( vec3  n ) { \n  return fract(sin(dot(n,vec3(1.0,113.0,257.0)))*43758.5453123); \n}\nvec2  hash2( float n ) { \n  return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123)); \n}\n\n\n// voxel map\nfloat map( vec3 c ) \n{\n    vec3 p = c + 0.5;\n    \n    float h = -10.0 + 20.0*texture2D( iChannel0, fract(p.xz/iChannelResolution[0].xy), -100.0 ).x;\n\n    return step( p.y, h );\n}\n\n// distance field for each voxel\nfloat map2( in vec3 p, in float id )\n{\n    float w = 0.05 + 0.35*id;\n    return length(max(abs(p)-0.5+w,0.0))-w+0.001;\n}\n\nvec3 calcNormal( in vec3 pos, in float id )\n{\n    vec3 eps = vec3(0.01,0.0,0.0);\n\n    return normalize( vec3(\n           map2(pos+eps.xyy,id) - map2(pos-eps.xyy,id),\n           map2(pos+eps.yxy,id) - map2(pos-eps.yxy,id),\n           map2(pos+eps.yyx,id) - map2(pos-eps.yyx,id) ) );\n}\n\n\nfloat castRay( in vec3 ro, in vec3 rd, out vec3 oVos, out vec3 oDir )\n{\n    vec3 pos = floor(ro);\n    vec3 ri = 1.0/rd;\n    vec3 rs = sign(rd);\n    vec3 ris = ri*rs;\n    vec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n    float t = -1.0;\n    \n    vec3 mm = vec3(0.0);\n    for( int i=0; i<100; i++ ) \n    {\n        if( map(pos)>0.5 ) \n        { \n            // intersect cube exactly           \n            vec3 pr = pos+0.5-ro;\n            vec3 mini = (pr-0.5*rs)*ri;\n            float s = max( mini.x, max( mini.y, mini.z ) );\n\n            // raymarch internal shape          \n            float id = hash1( pos );\n            float h = 0.0;\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            h = map2( -pr+rd*s, id ); s += max(0.0,h);\n            if( h<0.025 )\n            {\n                t = s;\n                break; \n            }\n        }\n        vec3 mi = step( dis.xyz, dis.yzx ); \n        mm = mi*(1.0-mi.zxy);\n        dis += mm * ris;\n        pos += mm * rs;\n    }\n\n    oDir = mm;\n    oVos = pos;\n\n    return t;\n\n}\n\nfloat castShadowRay( in vec3 ro, in vec3 rd, out vec3 oVos )\n{\n\n    vec3 pos = floor(ro);\n    vec3 ri = 1.0/rd;\n    vec3 rs = sign(rd);\n    vec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n    vec3 ris = ri*rs;\n    \n    float res = 1.0;\n    \n    for( int i=0; i<16; i++ ) \n    {\n        if( map(pos)>0.5 && i>0 )\n        {\n            #if DETAIL_INTER>1\n            if( i<DETAIL_INTER )\n            {\n                float id = hash1( pos );\n                vec3 mini = (pos-ro + 0.5 - 0.5*vec3(rs))*ri;\n                float t = max ( mini.x, max ( mini.y, mini.z ) );\n                float h = 0.0;\n                vec3 ce = pos + 0.5;\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                h = map2( ro+rd*t-ce,id ); t += max(0.0,h);\n                if( h<0.001 )\n                {\n                res=0.0; \n                break; \n                }\n            }\n            else\n            #endif          \n            {\n                res=0.0; \n                break; \n            }\n                \n        }\n        vec3 mi = step( dis.xyz, dis.yzx ); \n        vec3 mm = mi*(1.0-mi.zxy);\n        dis += mm * ris;\n        pos += mm * rs;\n    }\n    \n    oVos = pos;\n    \n    return res;\n}\n\n\n\nvec3 path( float t )\n{\n    vec2 p  = 100.0*sin( 0.01*t*vec2(1.0,1.2) + vec2(1.5,3.0) );\n         p +=  50.0*sin( 0.02*t*vec2(1.3,1.0) + vec2(2.5,5.4) );    \n    return vec3( p.x, 5.5 + 2.0*sin(0.05*t), p.y );\n}\n\nvec3 getVoxelColor( in vec3 pos )\n{\n    float id = hash1( pos.xz + 53.123  );\n    \n    float f = smoothstep( 0.8, 0.801, id );\n    f *= smoothstep( 0.6, 0.8, sin(60.0*id + pos.y*0.3 + 2.0*iGlobalTime) );\n\n    vec3 col = 0.55 + 0.45*sin( 16.0*id + 0.0 + vec3(0.0,0.6,1.5) );\n    col = 0.9*normalize(col);   \n    return f*col;\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n    vec4 x = texture2D( sam, p.yz );\n    vec4 y = texture2D( sam, p.zx );\n    vec4 z = texture2D( sam, p.xy );\n    return x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\nvoid main( void )\n{\n    // inputs   \n    vec2 q = gl_FragCoord.xy / iResolution.xy;\n    vec2 mo = iMouse.xy / iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n    \n    vec3 bgcol = vec3(0.0);\n\n    // montecarlo   \n    vec3 tot = vec3(0.0);\n#if VIS_SAMPLES<2\n    int a = 0;\n    {\n        vec4 rr = texture2D( iChannel1, (gl_FragCoord.xy+0.5)/iChannelResolution[1].xy  ).xzyw;\n        vec2 p = -1.0 + 2.0*(gl_FragCoord.xy) / iResolution.xy;\n#else\n    for( int a=0; a<VIS_SAMPLES; a++ )\n    {\n        vec4 rr = texture2D( iChannel1, (gl_FragCoord.xy +0.5+103.3137*float(a))/iChannelResolution[1].xy  ).xzyw;\n        vec2 p = -1.0 + 2.0*(gl_FragCoord.xy+rr.xz) / iResolution.xy;\n#endif  \n\n        p.x *= iResolution.x/ iResolution.y;\n\n        float time = 2.2*(iGlobalTime + 1.0*(0.5/24.0)*rr.y) + 50.0*mo.x;\n\n        // camera\n        vec3 ro = path( time );\n        vec3 ta = path( time+2.0 );// - vec3(0.0,6.0,0.0);\n        ta.y -= 1.0;\n        //ta.y = 0.3*ta.y + 0.7*ro.y - 1.2 + 1.0*sin(0.05*time);\n        float cr = 0.2*cos(0.09*time);\n    \n        // build ray\n        vec3 ww = normalize( ta - ro);\n        vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n        vec3 vv = normalize(cross(ww,uu));\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n        vec3 rd = normalize(iDir); // normalize( p.x*uu + p.y*vv + 3.0*ww );\n\n        // dof\n        #if VIS_SAMPLES>2\n        vec3 fp = ro + rd * 8.0;\n        ro += (uu*(-1.0+2.0*rr.x) + vv*(-1.0+2.0*rr.w))*0.03;\n        rd = normalize( fp - ro );\n        #endif\n        \n        vec3 col = bgcol;\n        \n        // raymarch \n        vec3 vos, dir;\n        float t = castRay( ro, rd, vos, dir );\n        if( t>0.0 )\n        {\n            vec3 pos = ro + rd*t;\n            float id = hash1( vos );\n            vec3 nor = calcNormal( fract(pos)-0.5, id );\n                \n            vec3 uvw = pos - vos;\n    \n            // lighting\n            vec3 lin = vec3(0.0);\n            vec3 occ = vec3(0.0);\n            vec3 spp = vec3(0.0);\n            #if 1\n            vec3  ru  = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n            vec3  rv  = normalize( cross( ru, nor ) );\n            for( int j=0; j<LIG_SAMPLES; j++ )\n            {\n                vec2  aa = hash2( rr.x + float(j)*203.1 );\n                float ra = sqrt(aa.y);\n                float rx = ra*cos(6.2831*aa.x); \n                float ry = ra*sin(6.2831*aa.x);\n                float rz = sqrt( 1.0-aa.y );\n                vec3  rr = rx*ru + ry*rv + rz*nor;\n                \n                vec3 rpo = vec3( 0.0 );\n                float sha = castShadowRay( pos, rr, rpo );\n                \n                vec3 irr = (1.0-sha) * getVoxelColor( rpo );\n                lin += irr;\n                spp += irr * pow( clamp( dot(reflect(rd,nor),rr), 0.0, 1.0 ), 12.0 );\n                occ += sha;\n            }\n            float is = 1.0/float(LIG_SAMPLES);\n            lin *= is;\n            occ *= is;\n            spp *= is;\n            #else       \n            lin = vec3(0.0);\n            occ = vec3(1.0) * (0.6 + 0.4*nor.y);\n            spp = vec3(0.0);\n            #endif      \n\n            // material         \n            vec3 mate = getVoxelColor( vos );\n            vec3 tex = (0.5+0.5*texture2D( iChannel0, fract(vos.xz/iChannelResolution[0].xy), -100.0 ).xyz);\n            float spe = pow( clamp( -dot(nor,rd), 0.0, 1.0 ), 28.0 );\n            tex *=  0.15 + 0.85*id;\n            vec3 tt = texcube( iChannel0, 0.5*pos + id*111.143, nor ).xyz;\n            tex *= 0.4 + 1.2*tt;\n                \n            // final color          \n            col = vec3(0.0);\n            col += 1.800*mate;\n            col += 4.000*lin*(mate+tex);\n            col += 0.040*occ*(mate+tex) * 6.0*(0.5+0.5*nor.y) * 0.75;\n            col += 70.000*spe*(mate+tex)*lin*occ * 0.6;\n            col += spp*10.0*(0.2+1.6*tt.x) * 0.75;\n            col *= 1.8;\n\n            // fog          \n            float ff = 1.0 - smoothstep( 90.0, 128.0, t*1.73 );\n            ff *= exp( -pow(0.015*t,1.0) );\n            col = mix( col, bgcol, 1.0-ff );\n        }\n        tot += col;\n    }\n    tot /= float(VIS_SAMPLES);\n        \n    // gamma    \n    tot = pow( clamp( tot, 0.0, 1.0 ), vec3(0.45) );\n\n    // vignetting   \n    tot *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    \n    gl_FragColor = vec4( tot, 1.0 );\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}