{"Shader":{"ver":"0.1","info":{"id":"4tBXDd","date":"1447233151","viewed":442,"name":"08_balls","username":"yiwenl","description":"08s","likes":5,"published":3,"flags":0,"tags":["raymarch"],"hasliked":0},"renderpass":[{"inputs":[{"id":24,"src":"\/presets\/cube02_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float time = iGlobalTime * .5;\n\nvec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\n\nfloat iSphere(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\n\nfloat map(vec3 pos) {\n   \n    float s1 = iSphere(pos - vec3(sin(iGlobalTime*.55)*1.85, cos(iGlobalTime*.19) * 0.95, sin(iGlobalTime*.91) * 1.21) * .7, 1.6451);\n    float s2 = iSphere(pos - vec3(cos(iGlobalTime*.43)*1.55, sin(iGlobalTime*.38) * 1.12, cos(iGlobalTime*.76) * 1.67) * 1.1, 1.564821);\n    float s3 = iSphere(pos - vec3(sin(iGlobalTime*.26)*2.52, cos(iGlobalTime*.57) * 0.56, sin(iGlobalTime*.12) * 1.58) * .9, 1.98441);\n    float s4 = iSphere(pos - vec3(sin(iGlobalTime*.97)*1.72, sin(iGlobalTime*.22) * 0.81, cos(iGlobalTime*.34) * 0.97) * 1.2, 1.12373);\n    float s5 = iSphere(pos - vec3(sin(iGlobalTime*.62)*1.47, cos(iGlobalTime*.76) * 0.73, sin(iGlobalTime*.75) * 1.45) * 1.3, 1.2748186);\n        \n    return min(s1, min(s2, min(s3, min(s4, s5))));\n}\n\nfloat map(vec3 pos, out int index) {\n   \n    float s1 = iSphere(pos - vec3(sin(iGlobalTime*.55)*1.85, cos(iGlobalTime*.19) * 0.95, sin(iGlobalTime*.91) * 1.21) * .7, 1.6451);\n    float s2 = iSphere(pos - vec3(cos(iGlobalTime*.43)*1.55, sin(iGlobalTime*.38) * 1.12, cos(iGlobalTime*.76) * 1.67) * 1.1, 1.564821);\n    float s3 = iSphere(pos - vec3(sin(iGlobalTime*.26)*2.52, cos(iGlobalTime*.57) * 0.56, sin(iGlobalTime*.12) * 1.58) * .9, 1.98441);\n    float s4 = iSphere(pos - vec3(sin(iGlobalTime*.97)*1.72, sin(iGlobalTime*.22) * 0.81, cos(iGlobalTime*.34) * 0.97) * 1.2, 1.12373);\n    float s5 = iSphere(pos - vec3(sin(iGlobalTime*.62)*1.47, cos(iGlobalTime*.76) * 0.73, sin(iGlobalTime*.75) * 1.45) * 1.3, 1.2748186);\n    \n    index = 0;\n    float d = s1;\n    if(s2 < d) {\n        index = 1;\n        d = s2;\n    }\n    if(s3 < d) {\n        index = 2;\n        d = s3;\n    }\n    if(s4 < d) {\n        index = 3;\n        d = s4;\n    }\n    if(s5 < d) {\n        index = 4;\n    }\n\n        \n    return min(s1, min(s2, min(s3, min(s4, s5))));\n}\n\n\nconst float PI = 3.141592657;\n\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\nfloat ao( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos );\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 envLight(vec3 normal, vec3 dir) {\n\tvec3 eye = -dir;\n\tvec3 r = reflect( eye, normal );\n    float m = 2. * sqrt( pow( r.x, 2. ) + pow( r.y, 2. ) + pow( r.z + 1., 2. ) );\n    vec3 color = textureCube( iChannel0, r ).rgb;\n\tfloat power = 15.0;\n\tcolor.r     = pow(color.r, power);\n\tcolor       = color.rrr;\n    return color;\n}\n\nfloat rand(vec2 co){\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nvec4 getColor(vec3 pos, vec3 dir, vec3 normal, int index) {\n\tvec3 orgPos  = pos;\n\tfloat t      = float(index);\n\tfloat rnd    = rand(vec2(t));\n\tfloat fixRnd = mix(rnd, 1.0, .75);\n\t\n\tpos.xz       = rotate(pos.xz, rnd * 3.0);\n\tpos.yz       = rotate(pos.yz, rnd * 3.0);\n\t\n\tfloat base   = sin(pos.y*15.0*fixRnd-time*0.5)*.5 + .5;\n\tbase         = smoothstep(.5, .6, base);\n\t\n\tfloat _ao    = ao(orgPos, normal);\n\tvec3 env     = envLight(normal, dir);\n\treturn vec4(vec3(base+env)*_ao, 1.0);\n\t\/\/ return vec4(vec3(_ao*env)+grey, 1.0);\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nconst int NUM_ITER = 100;\nconst float maxDist  = 5.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 pos = vec3( -0.5+3.5*cos(0.1*time + 6.0), 1.0 + 2.0, 0.5 + 5.5*sin(0.1*time + 6.0) );\n\tvec3 ta = vec3( 0.0, 0.0, 0.0 );\n    mat3 ca = setCamera( pos, ta, 0.0 );\n\tvec3 dir = ca * normalize( vec3(uv,1.5) );\n    \n    float grey = length(uv*0.75);\n\tgrey = (1.0 - grey * .25) * .25;\n    \n    vec4 color = vec4(vec3(grey), 1.0);\n\tfloat prec = pow(.1, 5.0);\n\tfloat d;\n\tbool hit = false;\n\tint index = -1;\n\t\n\tfor(int i=0; i<NUM_ITER; i++) {\n\t\td = map(pos, index);\t\t\t\t\t\t\/\/\tdistance to object\n\n\t\tif(d < prec) {\t\t\t\t\t\t\/\/ \tif get's really close, set as hit the object\n\t\t\thit = true;\n\t\t}\n\n\t\tpos += d * dir;\t\t\t\t\t\t\/\/\tmove forward by\n\t\tif(length(pos) > maxDist) break;\n\t}\n\n\n\tif(hit) {\n\t\tcolor = vec4(1.0);\n\t\tvec3 normal = computeNormal(pos);\n\t\tcolor = getColor(pos, dir, normal, index);\n\t}\n    \n\tfragColor = color;\n}","name":"","description":"","type":"image"}]}}