{"Shader":{"ver":"0.1","info":{"id":"XstGz4","date":"1448370716","viewed":307,"name":"Dreaming","username":"yiwenl","description":"dreaming ? ","likes":4,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":27,"src":"\/presets\/cube05_0.png","ctype":"cubemap","channel":1,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float time = iGlobalTime * 1.0;\nconst float PI      = 3.141592657;\n\/\/ const float maxDist = 5.0;\n\n\n\n\/\/\tTOOLS\nvec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\nfloat smin( float a, float b, float k ) {\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )\/k;\n}\n\nfloat smin( float a, float b ) {\treturn smin(a, b, 7.0);\t}\n\n\/\/\tGEOMETRY\nfloat sphere(vec3 pos, float radius) {\n\treturn length(pos) - radius;\n}\n\nfloat capsule(vec3 p, float r, float c) {\n\treturn mix(length(p.xz)-r, length(vec3(p.x,abs(p.y)-c,p.z))-r, step(c,abs(p.y)));\n}\n\nfloat cone( in vec3 p, in vec3 c ) {\n    vec2 q = vec2( length(p.xz), p.y );\n    vec2 v = vec2( c.z*c.y\/c.x, -c.z );\n    vec2 w = v - q;\n    vec2 vv = vec2( dot(v,v), v.x*v.x );\n    vec2 qv = vec2( dot(v,w), v.x*w.x );\n    vec2 d = max(qv,0.0)*qv\/vv;\n    return sqrt( dot(w,w) - max(d.x,d.y) )* sign(max(q.y*v.x-q.x*v.y,w.y));\n}\n\nfloat plane(vec3 pos) {\n\treturn pos.y;\n}\n\n\nvec2 map(vec3 pos) {\n\tfloat colorIndex       = 0.0;\n\tvec3 orgPos            = pos;\n\tpos.y                  -=.1;\n\tpos.xz                 = rotate(pos.xz, time*10.0);\n\tfloat r                = sin(time*.5) * .5 + .5;\n\tr                      = smoothstep(0.6, 1.0, r) * .015 + .003;\n\tpos.yz                 = rotate(pos.yz, r);\n\t\n\tfloat dCenter          = capsule(pos, .1, 1.0);\n\tfloat t                = 0.0;\n\tif(abs(pos.y) < 1.2) t = (pos.y + 1.2) \/ 2.0;\n\tdCenter                += t * .02;\n\t\n\tvec3 negPos            = pos;\n\tnegPos.y               *= -1.0;\n\tfloat dLowerCone       = cone(negPos+vec3(0.0, -.9, 0.0), vec3(.5, .65, .65));\n\tfloat d                = smin(dCenter, dLowerCone);\n\t\n\tvec3 diskPos           = pos+vec3(0.0, .25, 0.0);\n\tdiskPos.y              *= 10.0;\n\tfloat dDisk            = sphere(diskPos, 1.0);\n\td                      = smin(d, dDisk);\n\t\n\tfloat dUpperCone       = cone(pos+vec3(0.0, -.25, 0.0), vec3(.5, .5, .5));\n\td                      = smin(d, dUpperCone);\n\t\n\tfloat dFloor           = plane(orgPos+vec3(0.0, 1.0, 0.0));\n\t\/\/ d                   = min(dFloor, d);\n\tif(dFloor < d) {\n\tcolorIndex             = 1.0;\n\t\td                  = dFloor;\n\t}\n\t\n\t\n\treturn vec2(d, colorIndex);\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.001, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy).x - map(pos - eps.xyy).x,\n\t\tmap(pos + eps.yxy).x - map(pos - eps.yxy).x,\n\t\tmap(pos + eps.yyx).x - map(pos - eps.yyx).x\n\t);\n\treturn normalize(normal);\n}\n\n\n\/\/\tLIGHTING\nconst vec3 lightPos0 = vec3(-0.6, 0.7, -0.5);\nconst vec3 lightColor0 = vec3(1.0, 1.0, .96);\nconst float lightWeight0 = 0.85;\n\nconst vec3 lightPos1 = vec3(-1.0, -0.75, -.6);\nconst vec3 lightColor1 = vec3(.96, .96, 1.0);\nconst float lightWeight1 = 0.15;\n\nfloat ao( in vec3 pos, in vec3 nor ){\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 envLight(vec3 normal, vec3 dir, samplerCube tex) {\n\tvec3 eye    = -dir;\n\tvec3 r      = reflect( eye, normal );\n\tvec3 color  = textureCube( tex, r ).rgb;\n\tfloat power = 10.0;\n\tcolor.r     = pow(color.r, power);\n\tcolor       = color.rrr;\n    return color;\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax ) {\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ ) {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n}\n\n\nfloat diffuse(vec3 normal, vec3 light) {\n\treturn max(dot(normal, light), 0.0);\n}\n\nvec4 getColor(vec3 pos, vec3 dir, vec3 normal, float colorIndex) {\n\tif(colorIndex == 0.0) {\n\t\tfloat a       = fract(atan(pos.z, pos.x) * 3.0 + time*15.0);\n\t\ta             = smoothstep(0.25, 0.3, abs(a-.5));\n\t\tvec3 grd      = vec3(1.0, 1.0, .96) * .95 * a;\n\t\tfloat _ao     = ao(pos, normal);\n\t\tvec3 env      = envLight(normal, dir, iChannel1);\n\t\tvec3 envBlur  = envLight(normal, dir, iChannel1);\n\t\tfloat mixture = sin(time*.2) * .5 + .5;\n\t\tenv           = mix(env, envBlur, mixture);\n\t\tvec3 _diffuse = diffuse(normal, normalize(lightPos0)) * lightColor0 * lightWeight0;\n\t\treturn vec4(vec3(grd+env+_diffuse)*_ao, 1.0);\t\n\t} else {\n\t\tvec3  lig      = normalize( lightPos0 );\n\t\tfloat shadow   = softshadow(pos, lig, 0.02, 2.5 );\n\t\tshadow         = mix(shadow, 1.0, .5);\n\t\tvec4 baseColor = vec4(1.0, 1.0, .96, 1.0);\n\t\tbaseColor.rgb  *= shadow;\n\t\treturn baseColor;\n\t}\n\t\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ) {\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nconst int NUM_ITER = 100;\nconst float maxDist  = 5.0;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float r = 3.0;\n    float t = time*0.1;\n    float y = sin(time*.25) * .5 + .65;\n    vec3 pos = vec3( cos(t)*r, y, 0.5 + sin(t)*r );\n\tvec3 ta = vec3( 0.0, 0.0, 0.0 );\n    mat3 ca = setCamera( pos, ta, 0.0 );\n\tvec3 dir = ca * normalize( vec3(uv,1.5) );\n    \n    float grey = length(uv*0.75);\n\tgrey = (1.0 - grey * .25) * .25;\n    \n    vec4 color = vec4(1.0, 1.0, .96, 1.0);\n\tfloat prec = pow(.1, 7.0);\n\tfloat d;\n\tfloat colorIndex = 0.0;\n\tbool hit = false;\n\t\n\tfor(int i=0; i<NUM_ITER; i++) {\n\t\tvec2 result = map(pos);\t\t\t\t\t\t\/\/\tdistance to object\n\t\td = result.x;\n\t\tcolorIndex = result.y;\n\n\t\tif(d < prec) {\t\t\t\t\t\t\/\/ \tif get's really close, set as hit the object\n\t\t\thit = true;\n\t\t}\n\n\t\tpos += d * dir;\t\t\t\t\t\t\/\/\tmove forward by\n\t\tif(length(pos) > maxDist) break;\n\t}\n\n\n\tif(hit) {\n\t\tcolor = vec4(1.0);\n\t\tvec3 normal = computeNormal(pos);\n\t\tcolor = getColor(pos, dir, normal, colorIndex);\n\t}\n    \n\tfragColor = color;\n}","name":"","description":"","type":"image"}]}}