{"Shader":{"ver":"0.1","info":{"id":"llXGDS","date":"1424782755","viewed":370,"name":"Half Life 3","username":"4rknova","description":"Waiting for Valve to learn how to count to 3..","likes":5,"published":3,"flags":0,"tags":["valve","confirmed"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2015\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define EPS .001\n#define PI  3.14159265359\n\n#define AA\t4.\n#define COL1 vec3(1,.6,0)\n\nvec2 rotate(in vec2 p, in float t)\n{\n    t = t * 2. * PI;\n    return vec2(p.x * cos(t) - p.y * sin(t),\n                p.y * cos(t) + p.x * sin(t));\n}\n\nfloat df_box (in vec2 p)\n{\n    return max(abs(p.x), abs(p.y));\n}\n\nfloat df_line(in vec2 p, in vec2 a, in vec2 b)\n{\n    vec2 pa = p - a, ba = b - a;\n\tfloat h = clamp(dot(pa,ba) \/ dot(ba,ba), 0., 1.);\t\n\treturn length(pa - ba * h);\n}\n\nfloat df_circ(in vec2 p, in vec2 c, in float r)\n{\n    return abs(r - length(p - c));\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. \/ min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat df_scene(vec2 uv)\n{   \n    \n\tvec2 c = vec2(0), u = vec2(0,.45);\n    float c1 = sharpen(df_circ(uv, c, .8), EPS * 100.);\n    \n    \n    \/\/3    \n    float e0 = 1. - sharpen(df_circ(20. * uv - vec2(14.,14.5), c, 1.), EPS * 350.);\n    float e1 = 1. - sharpen(df_circ(20. * uv - vec2(14.,12.5), c, 1.), EPS * 350.);\n    float e2 = sharpen(df_box((uv- vec2(.63,.675))*vec2(1.15,1.3)), EPS * 75.0);\n    float e  = max(min(e0, e1),e2);\n    float c2 = 0.;\n    \n    \/\/ circle\n    if (   uv.y > 0. && uv.y < 0.9 \n        && uv.x > 0. && uv.x < 0.9\n        && length(uv + vec2(.25)) < 1.\/length(uv*uv*uv*uv))\n        c2 = sharpen(\n            df_circ(uv, c, 1.2), EPS * 500.);\n    \n    \/\/ \u03bb\n    float l1 = sharpen(df_line(uv, vec2(.0, .5), vec2(  .3,-.40)), EPS * 75.);\n    float l2 = sharpen(df_line(uv, vec2(.3,-.4), vec2(  .45,-.35)), EPS * 75.);\n    float l3 = sharpen(df_line(uv, vec2(.0, .5), vec2(-.25, .50)), EPS * 75.);\n    float l4 = sharpen(df_line(uv, vec2(.04, .2), vec2(-.4,-.40)), EPS * 75.);\n    \n    float l5 = sharpen(df_line(uv, vec2(-.3, 1.), vec2(-.3,.0)), EPS * 75.);\n    float l6 = sharpen(df_line(uv, vec2(-.3, 1.), vec2(-.3,.0)), EPS * 75.);\n    float l7 = sharpen(df_line(uv, vec2(-.3, 1.), vec2(-.3,.0)), EPS * 75.);\n    return min(max(max(max(max(max(l1,l2),l3-l5),l4), c1), c2),e);\n}\n\nvec3 tex(vec2 uv)\n{\n    return vec3(df_scene(uv));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy \/ iResolution.xy * 2. - 1.);\n\tvec2 nv = uv * vec2(iResolution.x\/iResolution.y, 1) * 1.1;\n    \n    \n    vec3 col = vec3(0);\n    \n#ifdef AA\n    \/\/ Antialiasing via supersampling\n    float e = 1. \/ min(iResolution.y , iResolution.x);    \n    for (float i = -AA; i < AA; ++i) {\n        for (float j = -AA; j < AA; ++j) {\n    \t\tcol += tex(nv + vec2(i, j) * (e\/AA)) \/ (4.*AA*AA);\n        }\n    }\n#else\n    col += tex(nv);\n#endif \/* AA *\/\n    \n    col *= COL1;\n    \n\tfragColor = vec4(col, 1);\n}","name":"","description":"","type":"image"}]}}