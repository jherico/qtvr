{"Shader":{"ver":"0.1","info":{"id":"XlSSzK","date":"1444770544","viewed":1095,"name":"Sun surface","username":"Duke","description":"Based on Shanes' Fiery Spikeball https:\/\/www.shadertoy.com\/view\/4lBXzy (I think that his implementation is more understandable than the original <img src=\"\/img\/emoticonHappy.png\"\/> ) Relief come from Siggraph workshop by Beautypi\/2015 https:\/\/www.shadertoy.com\/view\/MtsSRf","likes":42,"published":3,"flags":0,"tags":["volume","sun","surface"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Based on Shanes' Fiery Spikeball https:\/\/www.shadertoy.com\/view\/4lBXzy (I think that his implementation is more understandable than the original :) ) \n\/\/ Relief come from Siggraph workshop by Beautypi\/2015 https:\/\/www.shadertoy.com\/view\/MtsSRf\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\/\/#define ULTRAVIOLET\n#define DITHERING\n\n#define pi 3.14159265\n#define R(p, a) p=cos(a)*p+sin(a)*vec2(p.y, -p.x)\n\n\/\/ IQ's noise\nfloat pn( in vec3 p )\n{\n    vec3 ip = floor(p);\n    p = fract(p);\n    p *= p*(3.0-2.0*p);\n    vec2 uv = (ip.xy+vec2(37.0,17.0)*ip.z) + p.xy;\n    uv = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n    return mix( uv.x, uv.y, p.z );\n}\n\n\/\/ FBM\nfloat fpn(vec3 p) {\n    return pn(p*.06125)*.57 + pn(p*.125)*.28 + pn(p*.25)*.15;\n}\n\nfloat rand(vec2 co){\/\/ implementation found at: lumina.sourceforge.net\/Tutorials\/Noise.html\n\treturn fract(sin(dot(co*0.123,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat cosNoise( in vec2 p )\n{\n    return 0.5*( sin(p.x) + sin(p.y) );\n}\n\nconst mat2 m2 = mat2(1.6,-1.2,\n                     1.2, 1.6);\n\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length( vec2(length(p.xz)-t.x*1.2,p.y) )-t.y;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( 0.5 + 0.5*(b-a)\/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat SunSurface( in vec3 pos )\n{\n    float h = 0.0;\n    vec2 q = pos.xz*0.5;\n    \n    float s = 0.5;\n    \n    float d2 = 0.0;\n    \n    for( int i=0; i<6; i++ )\n    {\n        h += s*cosNoise( q ); \n        q = m2*q*0.85; \n        q += vec2(2.41,8.13);\n        s *= 0.48 + 0.2*h;\n    }\n    h *= 2.0;\n    \n    float d1 = pos.y - h;\n   \n    \/\/ rings\n    vec3 r1 = mod(2.3+pos+1.0,10.0)-5.0;\n    r1.y = pos.y-0.1 - 0.7*h + 0.5*sin( 3.0*iGlobalTime+pos.x + 3.0*pos.z);\n    float c = cos(pos.x); float s1 = 1.0;\/\/sin(pos.x);\n    r1.xz=c*r1.xz+s1*vec2(r1.z, -r1.x);\n    d2 = sdTorus( r1.xzy, vec2(clamp(abs(pos.x\/pos.z),0.7,2.5), 0.20) );\n\n    \n    return smin( d1, d2, 1.0 );\n}\n\nfloat map(vec3 p) {\n   p.z += 1.;\n   R(p.yz, -25.5);\/\/ -1.0+iMouse.y*0.003);\n   R(p.xz, iMouse.x*0.008*pi+iGlobalTime*0.1);\n   return SunSurface(p) +  fpn(p*50.+iGlobalTime*25.) * 0.45;\n}\n\n\/\/ See \"Combustible Voronoi\"\n\/\/ https:\/\/www.shadertoy.com\/view\/4tlSzl\nvec3 firePalette(float i){\n\n    float T = 1400. + 1300.*i; \/\/ Temperature range (in Kelvin).\n    vec3 L = vec3(7.4, 5.6, 4.4); \/\/ Red, green, blue wavelengths (in hundreds of nanometers).\n    L = pow(L,vec3(5.0)) * (exp(1.43876719683e5\/(T*L))-1.0);\n    return 1.0-exp(-5e8\/L); \/\/ Exposure level. Set to \"50.\" For \"70,\" change the \"5\" to a \"7,\" etc.\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{  \n   \/\/ p: position on the ray\n   \/\/ rd: direction of the ray\n   vec3 rd = normalize(vec3((gl_FragCoord.xy-0.5*iResolution.xy)\/iResolution.y, 1.));\n   vec3 ro = vec3(0., 0., -22.);\n   \n   \/\/ ld, td: local, total density \n   \/\/ w: weighting factor\n   float ld=0., td=0., w=0.;\n\n   \/\/ t: length of the ray\n   \/\/ d: distance function\n   float d=1., t=1.;\n   \n   \/\/ Distance threshold.\n   const float h = .1;\n    \n   \/\/ total color\n   vec3 tc = vec3(0.);\n   \n   #ifdef DITHERING\n   vec2 pos = ( fragCoord.xy \/ iResolution.xy );\n   vec2 seed = pos + fract(iGlobalTime);\n   \/\/t=(1.+0.2*rand(seed));\n   #endif\n    \n   \/\/ rm loop\n   for (int i=0; i<56; i++) {\n\n      \/\/ Loop break conditions. Seems to work, but let me\n      \/\/ know if I've overlooked something.\n      if(td>(1.-1.\/200.) || d<0.001*t || t>40.)break;\n       \n      \/\/ evaluate distance function\n      d = map(ro+t*rd); \n      \n      \/\/ check whether we are close enough (step)\n      \/\/ compute local density and weighting factor \n      \/\/const float h = .1;\n      ld = (h - d) * step(d, h);\n      w = (1. - td) * ld;   \n     \n      \/\/ accumulate color and density\n      tc += w*w + 1.\/50.;  \/\/ Different weight distribution.\n      td += w + 1.\/200.;\n\n\t  \/\/ dithering implementation come from Eiffies' https:\/\/www.shadertoy.com\/view\/MsBGRh\n      #ifdef DITHERING  \n      #ifdef ULTRAVIOLET\n      \/\/ enforce minimum stepsize\n      d = max(d, 0.04);\n      \/\/ add in noise to reduce banding and create fuzz\n      d=abs(d)*(1.+0.28*rand(seed*vec2(i)));\n      #else\n      \/\/ add in noise to reduce banding and create fuzz\n      d=abs(d)*(.8+0.28*rand(seed*vec2(i)));\n      \/\/ enforce minimum stepsize\n      d = max(d, 0.04);\n      #endif \n      #else\n      \/\/ enforce minimum stepsize\n      d = max(d, 0.04);        \n      #endif\n\n       \n      \/\/ step forward\n      t += d*0.5;\n      \n   }\n\n   \/\/ Fire palette.\n   tc = firePalette(tc.x);\n   \n   #ifdef ULTRAVIOLET\n   tc *= 1. \/ exp( ld * 2.82 ) * 1.05;\n   #endif\n    \n   fragColor = vec4(tc, 1.0);\n}","name":"","description":"","type":"image"}]}}