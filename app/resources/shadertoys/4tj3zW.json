{"Shader":{"ver":"0.1","info":{"id":"4tj3zW","date":"1427304601","viewed":399,"name":"Voronoi overlaps","username":"Dave_Hoskins","description":"Voronoi overlaps. Showing the extent you can overlap the voronoi centres. Based on my shader  <a href=\"https:\/\/www.shadertoy.com\/view\/4sjXRh\"  class=\"regular\" target=\"_blank\">Squiggles<\/a><br\/>You can increase the distance they travel, but you'll have to cover more area with xo & yo.","likes":8,"published":3,"flags":0,"tags":["2d","voronoi"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Voronoi overlaps\n\/\/ Dave H.\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ https:\/\/www.shadertoy.com\/view\/4tj3zW\n\n#define MOD3 vec3(.1031,.11369,.13787)\n\/\/----------------------------------------------------------------------------------------\n\/\/\/  2 out, 2 in...\n\/\/ From Hash without Sine:- www.shadertoy.com\/view\/4djSRW\nvec2 Hash22(vec2 p)\n{\n\n\tvec3 p3 = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx+19.19);\n    return fract(vec2((p3.x + p3.y)*p3.z, (p3.x+p3.z)*p3.y));\n}\n\n\/\/---------------------------------------------------------------------------------------\nvec3 Cells(in vec2 p, in float time)\n{\n    vec2 f = fract(p);\n    p = floor(p);\n\tfloat d = 1.0e10;\n    vec2 id = vec2(0.0);\n    \n\tfor (int xo = -3; xo <= 3; xo++)\n\t{\n\t\tfor (int yo = -3; yo <= 3; yo++)\n\t\t{\n            vec2 g = vec2(xo, yo);\n            vec2 n = Hash22(p+g);\n            vec2 tp = g + .5 + sin(time * (n.y*n.x+.1)*3.0 + 6.2831 * n)*3.2 - f;\n            float d2 = dot(tp, tp);\n\t\t\tif (d2 < d)\n            {\n                \/\/ 'id' is the colour code for each squiggle\n                d = d2;\n                id = n;\n            }\n\t\t}\n\t}\n\treturn vec3(sqrt(d), id);\n}\n\n\/\/---------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xx;\n\tfloat time = iGlobalTime * 2.;\n    vec3 col = vec3(1.0);\n\tfloat amp = .5;\n    float size = 4.0 * (abs(fract(time*.01-.5)-.5)*50.0+1.0) + ((iMouse.x\/iResolution.x) * 200.0);\n    float timeSlide = .03;\/\/sin(time*3.4+float(i))*.02 + .03;\n         \n    for (int i = 0; i < 30; i++)\n    {\n        vec3 res = Cells(uv * size - size * .5, time);\n        float c = clamp(.9-res.x*3., 0.0, 1.0);\n        c = sqrt(c);\n        \/\/ Get a colour associated with the returned id...\n        vec3 wormCol =  clamp(abs(fract(((res.y+res.z)*float(i+1)*2.33) + vec3(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0)) * 6.0 - 3.0) -1.0, 0.0, 1.0);\n        c = smoothstep(1.0-amp, 1., c);\n        col = min(col, 1.0-amp * c * (wormCol * 3.3));\n        amp *= .97;\n        time -= timeSlide;\n   }\n \tfragColor = vec4(max(col, 0.0), 0.0);\n}","name":"","description":"","type":"image"}]}}