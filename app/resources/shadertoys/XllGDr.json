{"Shader":{"ver":"0.1","info":{"id":"XllGDr","date":"1420998502","viewed":416,"name":"Icy Moon","username":"dr2","description":"Who knows what they will find?","likes":11,"published":3,"flags":0,"tags":["raymarching","shapes","saturn","nv15"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Icy Moon\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (length (p.xy) - rc, p.z);\n  return length (q) - ri;\n}\n\nint idObj;\nmat3 objMat;\nvec3 objPos, qHit, sunDir;\nfloat tCur;\nconst float dstFar = 200.;\nvec3 satnPos = vec3 (-5., 25., 50.), satnCol = vec3 (1., 0.9, 0.5);\nconst int idBase = 1, idPlat = 2, isShel = 3, idFrm = 4, idDway = 5,\n  idTwr = 6, idBrg = 7, idBrCab = 8, idRdw = 9, idGem = 10, idSat = 11,\n  idRng = 12, idRefl = 13;\n\nfloat IceHt (vec3 p)\n{\n  p *= 0.3;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = 1.5 * wb;\n  for (int j = 0; j < 3; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.5 * ht;\n}\n\nvec3 IceNf (vec3 p, float d)\n{\n  float ht = IceHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - IceHt (p + e.xyy), e.x, ht - IceHt (p + e.yyx)));\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat AngQnt (float a, float s1, float s2, float nr)\n{\n  return (s1 + floor (s2 + a * (nr \/ (2. * pi)))) * (2. * pi \/ nr);\n}\n\nfloat BridgeDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  float wRd = 1.;\n  q = p;  q.y -= -1.;\n  d = PrBoxDf (q, vec3 (wRd, 0.1, 21.));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRdw; }\n  q = p;  q.x = abs (q.x);  q.xy -= vec2 (wRd - 0.1, 2.);\n  q.z = mod (q.z + 0.75, 1.5) - 0.75;\n  d = PrCylDf (q.xzy, 0.07, 3.);\n  q = p;  q.y -= 2.;\n  d = max (d, PrBoxDf (q, vec3 (wRd, 3., 9.8)));\n  q = p;  q.y -= 13.;\n  d = max (d, - PrCylDf (q.yzx, 13., 1.01));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.x = abs (q.x);  q.xy -= vec2 (wRd - 0.1, 13.);\n  d = max (PrTorusDf (q.yzx, 0.1, 13.), q.y + 8.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (wRd - 0.1, 1.5, 13.5);\n  q.yz = Rot2D (q.yz, -0.25 * pi);\n  d = PrCylDf (q, 0.1, 4.5);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.z = abs (q.z);  q.yz -= vec2 (0., 10.2);\n  d = PrBoxDf (q, vec3 (wRd + 0.2, 5., 0.2));\n  q.y -= -0.3;\n  d = max (d, - PrBoxDf (q, vec3 (wRd - 0.1, 4.8, 0.21)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrg; }\n  return dHit;\n}\n\nfloat DwayDf (vec3 p, float h1, float h2, float h3)\n{\n  return max (length (p.yz -\n     vec2 (h1 * clamp (p.y \/ h1, -1., 1.), 0.)) - h2, abs (p.x) - h3);\n}\n\nfloat CageDf (vec3 p, float dHit)\n{\n  const float rad = 6., hLen = 8., wg = 0.5, ww = 0.03, wThk = 0.05,\n     doorHt = 2., doorWd = 1.5;\n  vec3 q, c1, c2;\n  vec2 qo;\n  float d, ds, dd, a;\n  q = p;\n  q.y -= hLen;\n  c1 = vec3 (0., hLen * clamp (q.y \/ hLen, -1., 1.), 0.);\n  c2 = vec3 (0., (hLen - wThk) * clamp (q.y \/ (hLen + wThk), -1., 1.), 0.);\n  d = max (max (length (q - c1) - rad,\n     - (length (q - c2) - (rad - wg))), - q.y);\n  a = atan (q.z, - q.x);\n  q = p;  q.y -= hLen + 0.5 * rad;\n  q.xz = Rot2D (q.xz, AngQnt (a, 0.5, 0., 8.));\n  q.x += 0.5 * rad;\n  ds = PrBoxDf (q, vec3 (0.5 * rad, hLen + 0.5 * rad, 2. * ww));\n  q = p;  q.y = mod (q.y - 1.5, 3.) - 1.5;\n  d = max (d, min (ds, PrBoxDf (q, vec3 (rad, 2. * ww, rad))));\n  q = p;\n  qo = Rot2D (q.xz, AngQnt (a, 0.5, 0., 4.));\n  q.xz = qo;  q.xy -= vec2 (- rad, hLen + 1.2 * doorHt);\n  dd = DwayDf (q, doorHt, doorWd, 0.2 * rad);\n  d = max (d, - dd);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idFrm; }\n  q = p;  q.y -= hLen;\n  d = max (max (max (max (length (q - c1) - (rad - 0.4 * wg),\n     - (length (q - c2) - (rad - 0.6 * wg))), - q.y), - ds), - dd);\n  q = p;  q.y -= 2. * hLen + rad;\n  d = max (d, - PrCylDf (q.xzy, 0.5 * rad, 0.2 * rad));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = isShel; }\n  q = p;  q.xz = qo;  q.xy -= vec2 (-0.98 * rad, hLen + 1.2 * doorHt);\n  d = max (max (max (DwayDf (q, doorHt, doorWd, 0.1 * rad),\n     - DwayDf (q, doorHt - ww, doorWd - ww, 0.1 * rad + wThk)),\n     - (q.y + 2. * doorHt - ww - wThk)), - (q.y + 1.2 * doorHt));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idDway; }\n  return dHit;\n}\n\nfloat CentStrucDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.xz = abs (q.xz) - vec2 (4.);  q.y -= -5.;\n  d = max (max (PrSphDf (q, 5.), - PrSphDf (q, 4.7)), - min (4. - q.y, q.y));\n  q.y -= 2.3;\n  d = max (d, - min (PrCylDf (q.yzx, 1., 6.), PrCylDf (q, 1., 6.)));\n  q.y += 0.5;\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBase; }\n  q = p;  q.y -= -1.;\n  d = PrTorusDf (q.xzy, 0.4, 8.5);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idPlat; }\n  d = PrCylDf (q.xzy, 8.5, 0.1);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idPlat; }\n  q = p;  q.y -= -9.; \n  dHit = CageDf (q, dHit);\n  return dHit;\n}\n\nfloat CornStrucDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, a;\n  q = p;  q.y -= -5.;\n  d = max (max (PrSphDf (q, 5.), - PrSphDf (q, 4.7)), - min (3.9 - q.y, q.y));\n  q.y -= 2.3;\n  d = max (d, - min (PrCylDf (q.yzx, 1., 6.), PrCylDf (q, 1., 6.)));\n  q.y -= 1.5;\n  d = min (d, PrCylDf (q.xzy, 3., 0.1));\n  q.y += 2.;\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBase; }\n  q = p;  q.y -= 1.;\n  d = max (max (PrCapsDf (q.xzy, 2.5, 3.), - PrCapsDf (q.xzy, 2.3, 3.)), -2.2 - q.y);\n  q = p;  q.y -= 7.;\n  d = min (d, max (PrCapsDf (q.xzy, 0.7, 2.), -1. - q.y));\n  q = p;  q.y -= 0.;\n  q.xz = Rot2D (q.xz, AngQnt (0.5 + atan (q.z, - q.x), 0., 0., 4.));\n  q.x += 2.;\n  d = max (d, - DwayDf (q, 2., 1., 2.4));\n  q = p;  q.y -= 4.;\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = max (d, - min (PrCylDf (q.yzx, 1., 3.), PrCylDf (q, 1., 3.)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idTwr; }\n  return dHit;\n}\n\nfloat SatnDf (vec3 p, float dHit)\n{\n  const float dz = 6., radO = 9., radI = 6.5;\n  vec3 q;\n  float d;\n  q = p;\n  q -= satnPos; \n  q.yz = Rot2D (q.yz, -0.2 * pi);\n  q.xz = Rot2D (q.xz, -0.2 * pi);\n  d = PrSphDf (q, 5.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idSat; }\n  q.z += dz;\n  d = PrTorusDf (q, radI, radO);\n  q.z -= 2. * dz;\n  d = max (d, PrTorusDf (q, radI, radO));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRng; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  float dHit = dstFar;\n  dHit = SatnDf (p, dHit);\n  p = objMat * (p - objPos);\n  q = p;\n  q.xz = Rot2D (q.xz, AngQnt (atan (q.z, - q.x), 0., 0.5, 4.));\n  q.x += 20.;\n  dHit = BridgeDf (q, dHit);\n  q = p;  q.xz = abs (q.xz) - vec2 (10.);  q.y -= -1.;\n  d = max (max (PrCylDf (q.xzy, 10.9, 0.1), - PrCylDf (q.xzy, 9.1, 0.11)),\n     max (- q.x, - q.z));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRdw; }\n  q = p;\n  dHit = CentStrucDf (q, dHit);\n  q.y -= 0.1; \n  d = PrSphDf (q, 1.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idGem; }\n  q = p;  q.xz = abs (q.xz) - vec2 (20.);\n  dHit = CornStrucDf (q, dHit);\n  q.y -= -0.1; \n  d = PrSphDf (q, 0.7);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idGem; }\n  q = p;\n  q.y -= -6.2;\n  d = PrCylDf (q.xzy, 100., 2.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRefl; }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.2;\n  for (int i = 0; i < 30; i ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.2;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec3 col;\n  float spec;\n  spec = 1.;\n  if (idObj == idBase) {\n    if (qHit.y < -1.) col = vec3 (0.1, 0.2, 0.1);\n    else if (qHit.y > -0.6 || n.y < 0.) col = vec3 (0.1, 0.5, 0.1);\n    else col = mix (vec3 (1., 1., 0.), vec3 (0., 1., 1.),\n       floor (mod (32. * atan (qHit.z, - qHit.x) \/ (2. * pi), 2.)));\n  } else if (idObj == idPlat) col = vec3 (0.9, 0.9, 0.1);\n  else if (idObj == isShel) col = vec3 (1., 1., 1.);\n  else if (idObj == idFrm) col = vec3 (0.8, 0.8, 0.);\n  else if (idObj == idDway) col = vec3 (0.8, 0.3, 0.);\n  else if (idObj == idTwr) col = vec3 (0.9, 0.7, 0.6);\n  else if (idObj == idBrg) col = vec3 (1., 1., 0.2);\n  else if (idObj == idBrCab) col = vec3 (1., 0.7, 0.);\n  else if (idObj == idRdw) col = vec3 (0.2, 0.15, 0.15);\n  else if (idObj == idGem) {\n    col = vec3 (1., 0.1, 0.1);\n    spec = 5.;\n  } else if (idObj == idSat) col = satnCol * vec3 (1., 0.9, 0.9) *\n     clamp (1. - 0.2 * Noiseff (12. * qHit.z), 0., 1.);\n  else if (idObj == idRng) col = satnCol *\n     (1. - 0.4 * SmoothBump (9.3, 9.5, 0.01, length (qHit.xy)));\n  if (idObj == idSat || idObj == idRng) spec = 0.02;\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  vec4 objCol;\n  float dstHit, sh;\n  int idObjT;\n  bool reflRay;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  reflRay = false;\n  if (dstHit < dstFar && idObj == idRefl) {\n    ro += rd * dstHit;\n    rd = reflect (rd, IceNf (objMat * (ro - objPos), dstHit));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    reflRay = true;\n  }\n  if (dstHit >= dstFar) col = vec3 (0., 0., 0.02) + 0.03 * satnCol *\n     pow (clamp (dot (rd, normalize (satnPos - ro)), 0., 1.), 128.);\n  else {\n    idObjT = idObj;\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    if (idObj != idSat && idObj != idRng) vn = objMat * vn;\n    idObj = idObjT;\n    if (idObj == idBase && qHit.y < -1.) vn = VaryNf (2. * qHit, vn, 5.);\n    if (idObj == idRdw) vn = VaryNf (5. * qHit, vn, 1.);\n    objCol = ObjCol (vn);\n    sh = ObjSShadow (ro, sunDir);\n    float bBri = 0.2 +\n       0.2 * max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.) +\n       0.5 * max (0., max (dot (vn, sunDir), 0.)) * sh;\n    if (idObj == idGem) bBri *= 1.2 + 0.2 * sin (10. * tCur);\n    col = objCol.rgb * (bBri + 0.5 * objCol.a *\n       pow (max (0., dot (sunDir, reflect (rd, vn))), 32.));\n    if (reflRay) col = vec3 (0.1) + 0.8 * col;\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 ro, rd, vd;\n  float az, el, dist;\n  sunDir = normalize (vec3 (cos (0.4 * tCur), 1., sin (0.4 * tCur)));\n  rd = normalize (vec3 (uv, 4.));\n  az = 0.1 * pi * (1. - 2. * SmoothBump (15., 45., 10., mod (tCur, 60.)));\n  vec3 ca = cos (vec3 (0., az, 0.));\n  vec3 sa = sin (vec3 (0., az, 0.));\n  objMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  dist = 100.;\n  ro = vec3 (0., 0., - dist);\n  objPos = ro * objMat - ro;\n  vd = normalize (vec3 (objPos - ro));\n  rd.xz = Rot2D (rd.xz, atan (- vd.x, vd.z));\n  rd.yz = Rot2D (rd.yz, 0.01 * pi);\n  ro.y += 0.1 * dist;\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}