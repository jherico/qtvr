{"Shader":{"ver":"0.1","info":{"id":"XlXGzS","date":"1425158361","viewed":735,"name":"Martian Elevated","username":"ForestCSharp","description":"Modifications to the Elevated Shader created by iq","likes":1,"published":3,"flags":0,"tags":["proceduralterrain"],"hasliked":0},"renderpass":[{"inputs":[{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst mat2 m2 = mat2(0.8,-0.6,0.6,0.8);\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*texture2D( iChannel0, p\/256.0 ).x; p = m2*p*2.02;\n    f += 0.2500*texture2D( iChannel0, p\/256.0 ).x; p = m2*p*2.03;\n    f += 0.1250*texture2D( iChannel0, p\/256.0 ).x; p = m2*p*2.01;\n    f += 0.0625*texture2D( iChannel0, p\/256.0 ).x;\n    return f\/0.9375;\n}\n\/\/ value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    vec2 u = f*f*(3.0-2.0*f);\n\tfloat a = texture2D(iChannel0,(p+vec2(0.5,0.5))\/256.0,-100.0).x;\n\tfloat b = texture2D(iChannel0,(p+vec2(1.5,0.5))\/256.0,-100.0).x;\n\tfloat c = texture2D(iChannel0,(p+vec2(0.5,1.5))\/256.0,-100.0).x;\n\tfloat d = texture2D(iChannel0,(p+vec2(1.5,1.5))\/256.0,-100.0).x;\n\treturn vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n\t\t\t\t6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\nvec3 noiseFrac(in vec2 x)\n{\n \tvec3 f = vec3(0.,0.,0.);\n    f+= 0.5000 * noised(x); x = x * 1.02;\n    f+= 0.2500 * noised(x); x = x * 11.01;\n    f+= 0.1250 * noised(x); x = x * 1.03;\n    f+= 0.0625 * noised(x); x = x * 1.015;\n    return f;\n}\n\n\nfloat terrain( in vec2 x )\n{\n\tvec2  p = x*0.003;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<4; i++ )\n    {\n        vec3 n = noiseFrac(p);\n        d += n.yz;\n        a += b*n.x\/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n\treturn 140.0*a;\n}\n\nfloat terrain2( in vec2 x )\n{\n\tvec2  p = x*0.003;\n    float a = 0.0;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<12; i++ )\n    {\n        vec3 n = noised(p);\n        d += n.yz;\n        a += b*n.x\/(1.0+dot(d,d));\n\t\tb *= 0.56;\n        p = m2*p*2.0;\n    }\n\n\treturn 140.0*a;\n}\n\nfloat terrain3( in vec2 x )\n{\n\tvec2  p = x*0.003;\n    float a = 0.10;\n    float b = 1.0;\n\tvec2  d = vec2(0.0);\n    for( int i=0; i<2; i++ )\n    {\n        vec3 n = noiseFrac(p * 0.0625);\n        d += n.yz;\n        a += b*n.x\/(1.0+dot(d,d));\n\t\tb *= 0.5;\n        p = m2*p*2.0;\n    }\n\n\treturn 190.0*a;\n}\n\nfloat map( in vec3 p )\n{\n    return p.y - terrain(p.xz);\n}\n\nfloat interesct( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n    float t = tmin;\n\tfor( int i=0; i<120; i++ )\n\t{\n\t\tfloat h = map( ro + t*rd );\n\t\tif( h<(0.002*t) || t>tmax ) break;\n\t\tt += 0.5*h;\n\t}\n\n\treturn t;\n}\n\n\nvec3 calcNormal( in vec3 pos, float t )\n{\n    vec2  eps = vec2( 0.002*t, 0.0 );\n    return normalize( vec3( terrain2(pos.xz-eps.xy) - terrain2(pos.xz+eps.xy),\n                            2.0*eps.x,\n                            terrain2(pos.xz-eps.yx) - terrain2(pos.xz+eps.yx) ) );\n}\n\nvec3 camPath( float time )\n{\n\treturn 1100.0* vec3( cos(0.0+0.23*time), 200.0, cos(1.5+0.21*time*0.25) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 xy = -1.0 + 2.0*fragCoord.xy\/iResolution.xy;\n\tvec2 s = xy*vec2(iResolution.x\/iResolution.y,1.0);\n\t\n    float time = 20.0 + iGlobalTime * 0.25;\n\t\n\tvec3 light1 = normalize( vec3(-0.8,0.4,-0.3) );\n\n    \/\/ camera position\n\tvec3 ro = camPath( time );\n\tvec3 ta = camPath( time + 3.0 );\n\tro.y = terrain3( ro.xz ) + 11.0;\n\tta.y = ro.y - 20.0;\n\tfloat cr = 0.2*cos(0.1*time);\n\n    \/\/ Generate Ray   \n\tvec3  cw = normalize(ta-ro);\n\tvec3  cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3  cu = normalize( cross(cw,cp) );\n\tvec3  cv = normalize( cross(cu,cw) );\n\tvec3  rd = normalize( s.x*cu + s.y*cv + 2.0*cw );\n    \n    \/\/ bounding plane\n    float tmin = 2.0;\n    float tmax = 2000.0;\n    float maxh = 210.0;\n    float tp = (maxh-ro.y)\/rd.y;\n    if( tp>0.0 )\n    {\n        if( ro.y>maxh ) tmin = max( tmin, tp );\n        else            tmax = min( tmax, tp );\n    }\n\n\tvec3 col = vec3(0.0,0.0,0.0);\n    float t = interesct( ro, rd, tmin, tmax );\n    \n    if( t>tmax) \/\/SKY\/\/\n    {\n        \/\/ clouds\n\t\tvec2 sc = ro.xz + rd.xz*(1000.0-ro.y)\/rd.y * 25.;\n\t\tcol = mix( col, vec3(1.0,0.95,1.0), 0.5*smoothstep(0.1,1.8,fbm(0.000045*sc)) );\n        \/\/ horizon\n        col = mix( col, vec3(0.7,0.1,0.0), pow( 1.0-max(rd.y\/ 4.,0.0), 8.0 ) );\n\t}\n    \n\telse \/\/TERRAIN\/\/\n\t{\n        \/\/ mountains\t\t\n\t\tvec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos, t );\n        vec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0+dot(rd,nor), 0.0, 1.0 );\n        \n        \/\/ rock\n\t\tfloat r = texture2D( iChannel2, 7.0*pos.xz\/256.0 ).x;\n        col = (r*0.25+0.75)*0.9*mix( vec3(0.06,0.05,0.03), vec3(0.40,0.00,0.08), texture2D(iChannel0,0.00007*vec2(pos.x,pos.y*48.0)).x );\n\n\t\t\/\/ dirt\n\t\tfloat h = 1.0;\n        float e = smoothstep(1.0-0.5*h,1.0-0.1*h,nor.y);\n        float o = 1.0;\n        float s = h*e*o;\n        col = mix( col, 0.29*vec3(0.92,0.45,0.4), smoothstep( 0.1, 0.9, s ) );\n\t\t\n         \/\/ lighting\t\t\n        float amb = 0.1;\n\t\tfloat dif =  0.4 *clamp( dot( light1, nor ), 0.0, 1.0 );\n\t\tfloat bac = clamp( 0.2 + 0.8*dot( normalize( vec3(-light1.x, 0.0, light1.z ) ), nor ), 0.0, 1.0 );\n\t\tfloat sh = 0.8;\n\t\t\n\t\tvec3 lin  = vec3(0.0);\n\t\tlin += dif*vec3(7.00,5.00,3.00)*vec3( sh, sh*sh*0.5+0.5*sh, sh*sh*0.8+0.2*sh );\n\t\tlin += amb*vec3(0.40,0.60,0.80)*1.2;\n        lin += bac*vec3(0.40,0.50,0.60);\n\t\tcol *= lin;\n        \n        col += s*0.1*pow(fre,4.0)*vec3(7.0,5.0,3.0)*sh * pow( clamp(dot(light1,ref), 0.0, 1.0),16.0);\n        col += s*0.1*pow(fre,4.0)*vec3(0.4,0.5,0.6)*smoothstep(0.0,0.6,ref.y);\n\n\t}\n\n    \/\/ gamma\n\tcol = pow(col,vec3(0.4045));\n\n\tfragColor=vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}