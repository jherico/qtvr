{"Shader":{"ver":"0.1","info":{"id":"Xll3DM","date":"1422490136","viewed":954,"name":"Cube of Cubes","username":"Flyguy","description":"Based off a gif I saw somewhere, no idea where it originally came from.","likes":11,"published":3,"flags":0,"tags":["raymarching","cube","animation"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define MAX_STEPS 96\n#define MIN_DIST 0.001\n#define NORMAL_SMOOTHNESS 0.02\n#define PI 3.14159265359\n\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\nfloat Union(float a, float b)\n{\n    return min(a, b);\n}\n\nfloat Sphere(float radius, vec3 position)\n{\n    return length(position) - radius;\n}\n\nfloat Box(float radius, vec3 position)\n{\n    return max(max(abs(position.x), abs(position.y)), abs(position.z)) - radius;\n}\n\nfloat Scene(vec3 position)\n{\n    float map = -Sphere(24.0, position);\n    \n    float animTime = mod(iGlobalTime, 10.0);\n    \n    float xScale = smoothstep(1.0, 1.5, animTime) - smoothstep(6.0, 6.5, animTime);  \n    float zScale = smoothstep(2.0, 2.5, animTime) - smoothstep(7.0, 7.5, animTime);\n    float yScale = smoothstep(3.0, 3.5, animTime) - smoothstep(8.0, 8.5, animTime);\n    \n    for(int i = -1; i <= 1;i++)\n    {\n        for(int j = -1; j <= 1;j++)\n        {\n            for(int k = -1; k <= 1;k++)\n            {\n                vec3 offset = vec3(i,j,k) * 2.0;\n                \n                offset.x *= 1.0 + xScale;\n                offset.y *= 1.0 + yScale;\n                offset.z *= 1.0 + zScale;\n                \n    \t\t\tmap = Union(map, Box(1.0, position + offset));\n        \t}\n        }\n    }\n    \n    return map;\n}\n\nvec3 Normal(vec3 position)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(position - offset.xyz) - Scene(position + offset.xyz),\n        Scene(position - offset.zxy) - Scene(position + offset.zxy),\n        Scene(position - offset.yzx) - Scene(position + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\nvec3 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\nvec3 Shade(vec3 position, vec3 normal, vec3 rayOrigin,vec3 rayDirection)\n{\n    vec3 color = vec3(0, 0, 0);\n    \n    \/\/Face Colors\n    vec3 leftColor =  vec3(  3, 130,  75) \/ 255.0;\n    vec3 frontColor = vec3(233, 207,  12) \/ 255.0;\n    vec3 topColor =   vec3(215,  75,   4) \/ 255.0;\n    \n    color = mix(color, leftColor,  abs( dot(normal, vec3(1,0,0) ) ) );\n    color = mix(color, frontColor, abs( dot(normal, vec3(0,0,1) ) ) );\n    color = mix(color, topColor,   abs( dot(normal, vec3(0,1,0) ) ) );\n    \n    \/\/Background\n    color = mix(color, vec3(0.1), step(22.0, length(position)));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 aspect = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    vec2 mouse = iMouse.xy \/ iResolution.xy;\n    \n    vec2 mouseAngle = vec2(0);\n    \n    mouseAngle.x = PI * mouse.y + PI\/2.0;\n    mouseAngle.x += PI\/3.0;\n    \n    mouseAngle.y = 2.0 * PI * -mouse.x;\n    mouseAngle.y += PI\/4.0;\n    \n    vec3 rayOrigin = vec3(0 , 0, -20.0);\n    vec3 rayDirection = normalize(vec3(uv - aspect \/ 2.0, 1.0));\n    \n    mat2 rotateX = Rotate(mouseAngle.x);\n    mat2 rotateY = Rotate(mouseAngle.y);\n    \n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    \n    vec3 scenePosition = RayMarch(rayOrigin, rayDirection);\n    \n    vec3 outColor = Shade(scenePosition,Normal(scenePosition),rayOrigin,rayDirection);\n    \n\tfragColor = vec4(outColor, 1.0);\n}","name":"","description":"","type":"image"}]}}