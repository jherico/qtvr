{"Shader":{"ver":"0.1","info":{"id":"ltlSWf","date":"1440476793","viewed":2217,"name":"Flux Core","username":"otaviogood","description":"Long range space-based energy transmission requires a flux core to amplify and concentrate energy.<br\/>*** Try out the high quality non-realtime renderer. Feel free to use it for your shaders if you want to render screenshots.","likes":49,"published":3,"flags":0,"tags":["fractal","space"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*--------------------------------------------------------------------------------------\nLicense CC0 - http:\/\/creativecommons.org\/publicdomain\/zero\/1.0\/\nTo the extent possible under law, the author(s) have dedicated all copyright and related and neighboring rights to this software to the public domain worldwide. This software is distributed without any warranty.\n----------------------------------------------------------------------------------------\n^ This means do ANYTHING YOU WANT with this code. Because we are programmers, not lawyers.\n-Otavio Good\n*\/\n\n\/\/ ---------------- Config ----------------\n\/\/ This is an option that lets you render high quality frames for screenshots. It enables\n\/\/ stochastic antialiasing and motion blur automatically for any shader.\n\/\/#define NON_REALTIME_HQ_RENDER\nconst float frameToRenderHQ = 20.0; \/\/ Time in seconds of frame to render\nconst float antialiasingSamples = 16.0; \/\/ 16x antialiasing - too much might make the shader compiler angry.\n\n\/\/#define MANUAL_CAMERA\n\n\n\/\/ --------------------------------------------------------\n\/\/ These variables are for the non-realtime block renderer.\nfloat localTime = 0.0;\nfloat seed = 1.0;\n\n\/\/ Animation variables\nfloat animStructure = 1.0;\nfloat fade = 1.0;\n\n\/\/ ---- noise functions ----\nfloat v31(vec3 a)\n{\n    return a.x + a.y * 37.0 + a.z * 521.0;\n}\nfloat v21(vec2 a)\n{\n    return a.x + a.y * 37.0;\n}\nfloat Hash11(float a)\n{\n    return fract(sin(a)*10403.9);\n}\nfloat Hash21(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nvec2 Hash22(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nvec2 Hash12(float f)\n{\n    return fract(cos(f)*vec2(10003.579, 37049.7));\n}\nfloat Hash1d(float u)\n{\n    return fract(sin(u)*143.9);\t\/\/ scale this down to kill the jitters\n}\nfloat Hash2d(vec2 uv)\n{\n    float f = uv.x + uv.y * 37.0;\n    return fract(sin(f)*104003.9);\n}\nfloat Hash3d(vec3 uv)\n{\n    float f = uv.x + uv.y * 37.0 + uv.z * 521.0;\n    return fract(sin(f)*110003.9);\n}\nfloat mixP(float f0, float f1, float a)\n{\n    return mix(f0, f1, a*a*(3.0-2.0*a));\n}\nconst vec2 zeroOne = vec2(0.0, 1.0);\nfloat noise2d(vec2 uv)\n{\n    vec2 fr = fract(uv.xy);\n    vec2 fl = floor(uv.xy);\n    float h00 = Hash2d(fl);\n    float h10 = Hash2d(fl + zeroOne.yx);\n    float h01 = Hash2d(fl + zeroOne);\n    float h11 = Hash2d(fl + zeroOne.yy);\n    return mixP(mixP(h00, h10, fr.x), mixP(h01, h11, fr.x), fr.y);\n}\nfloat noise(vec3 uv)\n{\n    vec3 fr = fract(uv.xyz);\n    vec3 fl = floor(uv.xyz);\n    float h000 = Hash3d(fl);\n    float h100 = Hash3d(fl + zeroOne.yxx);\n    float h010 = Hash3d(fl + zeroOne.xyx);\n    float h110 = Hash3d(fl + zeroOne.yyx);\n    float h001 = Hash3d(fl + zeroOne.xxy);\n    float h101 = Hash3d(fl + zeroOne.yxy);\n    float h011 = Hash3d(fl + zeroOne.xyy);\n    float h111 = Hash3d(fl + zeroOne.yyy);\n    return mixP(\n        mixP(mixP(h000, h100, fr.x),\n             mixP(h010, h110, fr.x), fr.y),\n        mixP(mixP(h001, h101, fr.x),\n             mixP(h011, h111, fr.x), fr.y)\n        , fr.z);\n}\n\nconst float PI=3.14159265;\n\nvec3 saturate(vec3 a) { return clamp(a, 0.0, 1.0); }\nvec2 saturate(vec2 a) { return clamp(a, 0.0, 1.0); }\nfloat saturate(float a) { return clamp(a, 0.0, 1.0); }\n\nvec3 RotateX(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(v.x, cos * v.y + sin * v.z, -sin * v.y + cos * v.z);\n}\nvec3 RotateY(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(cos * v.x - sin * v.z, v.y, sin * v.x + cos * v.z);\n}\nvec3 RotateZ(vec3 v, float rad)\n{\n  float cos = cos(rad);\n  float sin = sin(rad);\n  return vec3(cos * v.x + sin * v.y, -sin * v.x + cos * v.y, v.z);\n}\n\n\/\/ This spiral noise works by successively adding and rotating sin waves while increasing frequency.\n\/\/ It should work the same on all computers since it's not based on a hash function like some other noises.\n\/\/ It can be much faster than other noise functions if you're ok with some repetition.\nconst float nudge = 0.71;\t\/\/ size of perpendicular vector\nfloat normalizer = 1.0 \/ sqrt(1.0 + nudge*nudge);\t\/\/ pythagorean theorem on that perpendicular to maintain scale\n\/\/ Total hack of the spiral noise function to get a rust look\nfloat RustNoise3D(vec3 p)\n{\n    float n = 0.0;\n    float iter = 1.0;\n    float pn = noise(p*0.125);\n    pn += noise(p*0.25)*0.5;\n    pn += noise(p*0.5)*0.25;\n    pn += noise(p*1.0)*0.125;\n    for (int i = 0; i < 7; i++)\n    {\n        \/\/n += (sin(p.y*iter) + cos(p.x*iter)) \/ iter;\n        float wave = saturate(cos(p.y*0.25 + pn) - 0.998);\n        wave *= noise(p * 0.125)*1016.0;\n        n += wave;\n        p.xy += vec2(p.y, -p.x) * nudge;\n        p.xy *= normalizer;\n        p.xz += vec2(p.z, -p.x) * nudge;\n        p.xz *= normalizer;\n        iter *= 1.4733;\n    }\n    return n;\n}\n\n\/\/ ---- functions to remap \/ warp space ----\nfloat repsDouble(float a)\n{\n    return abs(a * 2.0 - 1.0);\n}\nvec2 repsDouble(vec2 a)\n{\n    return abs(a * 2.0 - 1.0);\n}\n\nvec2 mapSpiralMirror(vec2 uv)\n{\n    float len = length(uv);\n    float at = atan(uv.x, uv.y);\n    at = at \/ PI;\n    float dist = (fract(log(len)+at*0.5)-0.5) * 2.0;\n    at = repsDouble(at);\n    at = repsDouble(at);\n    return vec2(abs(dist), abs(at));\n}\n\nvec2 mapSpiral(vec2 uv)\n{\n    float len = length(uv);\n    float at = atan(uv.x, uv.y);\n    at = at \/ PI;\n    float dist = (fract(log(len)+at*0.5)-0.5) * 2.0;\n    \/\/dist += sin(at*32.0)*0.05;\n    \/\/ at is [-1..1]\n    \/\/ dist is [-1..1]\n    at = repsDouble(at);\n    at = repsDouble(at);\n    return vec2(dist, at);\n}\n\nvec2 mapCircleInvert(vec2 uv)\n{\n    float len = length(uv);\n    float at = atan(uv.x, uv.y);\n    \/\/at = at \/ PI;\n    \/\/return uv;\n    len = 1.0 \/ len;\n    return vec2(sin(at)*len, cos(at)*len);\n}\n\nvec3 mapSphereInvert(vec3 uv)\n{\n    float len = length(uv);\n    vec3 dir = normalize(uv);\n    len = 1.0 \/ len;\n    return dir * len;\n}\n\n\/\/ ---- shapes defined by distance fields ----\n\/\/ See this site for a reference to more distance functions...\n\/\/ http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\nfloat length8(vec2 v)\n{\n\treturn pow(pow(abs(v.x),8.0) + pow(abs(v.y), 8.0), 1.0\/8.0);\n}\n\n\/\/ box distance field\nfloat sdBox(vec3 p, vec3 radius)\n{\n  vec3 dist = abs(p) - radius;\n  return min(max(dist.x, max(dist.y, dist.z)), 0.0) + length(max(dist, 0.0));\n}\n\n\/\/ Makes a warped torus that rotates around\nfloat sdTorusWobble( vec3 p, vec2 t, float offset)\n{\n   \tfloat a = atan(p.x, p.z);\n    float subs = 2.0;\n\ta = sin(a*subs+localTime*4.0+offset*3.234567);\n\tvec2 q = vec2(length(p.xz)-t.x-a*0.1,p.y);\n\treturn length8(q)-t.y;\n}\n\n\/\/ simple cylinder distance field\nfloat cyl(vec2 p, float r)\n{\n    return length(p) - r;\n}\n\nfloat glow = 0.0, glow2 = 0.0, glow3 = 0.0;\nfloat pulse;\n\/\/ This is the big money function that makes the crazy fractally shape\n\/\/ The input is a position in space.\n\/\/ The output is the distance to the nearest surface.\nfloat DistanceToObject(vec3 p)\n{\n    vec3 orig = p;\n    \/\/ Magically remap space to be in a spiral\n    p.yz = mapSpiralMirror(p.yz);\n    \/\/ Mix between spiral space and unwarped space. This changes the scene\n    \/\/ from the tunnel to the spiral.\n    p = mix(orig, p, animStructure);\n\/\/    p = mix(p, orig, cos(localTime)*0.5+0.5);\n\n    \/\/ Cut out stuff outside of outer radius\n\tconst float outerRad = 3.5;\n    float lenXY = length(p.xy);\n    float final = lenXY - outerRad;\n    \/\/ Carve out inner radius\n    final = max(final, -(lenXY - (outerRad-0.65)));\n\n    \/\/ Slice the object in a 3d grid\n    float slice = 0.04;\n    vec3 grid = -abs(fract(p)-0.5) + slice;\n    \/\/final = max(final, grid.x);\n    \/\/final = max(final, grid.y);\n    final = max(final, grid.z);\n\n    \/\/ Carve out cylinders from the object on all 3 axis, scaled 3 times\n    \/\/ This gives it the fractal look.\n    vec3 rep = fract(p)-0.5;\n    float scale = 1.0;\n    float mult = 0.32;\n    for (int i = 0; i < 3; i++)\n    {\n        float uglyDivider = max(1.0, float(i));\t\/\/ wtf is this? My math sucks :(\n        \/\/ carve out 3 cylinders\n        float dist = cyl(rep.xz\/scale, mult\/scale)\/uglyDivider;\n        final = max(final, -dist);\n        dist = cyl(rep.xy\/scale, mult\/scale)\/uglyDivider;\n        final = max(final, -dist);\n        dist = cyl(rep.yz\/scale, mult\/scale)\/uglyDivider;\n        final = max(final, -dist);\n        \/\/ Scale and repeat.\n        scale *= 1.14+1.0;\/\/ + sin(localTime)*0.995;\n        rep = fract(rep*scale) - 0.5;\n    }\n\n    \/\/ Make radial struts that poke into the center of the spiral\n    vec3 sp = p;\n    sp.x = abs(sp.x)-5.4;\n    sp.z = fract(sp.z) - 0.5;\n    \/\/ Bad distance field on these makes them sometimes disappear. Math. :(\n    float struts = sdBox(sp+vec3(2.95, 0.1-sin(sp.x*2.0)*1.1, 0.0), vec3(1.5, 0.05, 0.02))*0.5;\n    \/\/glow3 += (0.00005)\/max(0.01, struts);\n    final = min(final, struts);\n\n    \/\/ Make spiral glows that rotate and pulse energy to the center\n    rep.yz = (fract(p.yz)-0.5);\n    rep.x = p.x;\n    scale = 1.14+1.0;\n    float jolt = max(0.0, sin(length(orig.yz) + localTime*20.0))*0.94;\n    jolt *= saturate(0.3-pulse);\n    float spiral = sdBox(RotateX(rep+vec3(-0.05,0.0,0.0), pulse), vec3(0.01+jolt,1.06, mult*0.01)\/scale );\n    glow3 += (0.0018)\/max(0.0025,spiral);\n    final = min(final, spiral + (1.0-animStructure) * 100.0);\n\n    \/\/ Make a warped torus that rotates around and glows orange\n    vec3 rp = p.xzy;\n    rp.x = -abs(rp.x);\n    rp.y = fract(rp.y) - 0.5;\n    float torus = sdTorusWobble(rp + vec3(3.0, 0.0, 0.0), vec2(0.2, 0.0003), p.z);\n    glow2 += 0.0015 \/ max(0.03, torus);\n    final = min(final, torus);\n\n    \/\/ Make the glowing tower in the center.\n    \/\/ This also gives a bit of a glow to everything.\n    glow += (0.02+abs(sin(orig.x-localTime*3.0)*0.15)*jolt )\/length(orig.yz);\n\n    return final;\n}\n\n\/\/ Input is UV coordinate of pixel to render.\n\/\/ Output is RGB color.\nvec3 RayTrace(in vec2 fragCoord )\n{\n    glow = 0.0;\n    glow2 = 0.0;\n    glow3 = 0.0;\n\t\/\/ -------------------------------- animate ---------------------------------------\n    \/\/ Default to spiral shape\n    animStructure = 1.0;\n\n    \/\/ Make a cycling, clamped sin wave to animate the glow-spiral rotation.\n    float slt = sin(localTime);\n    float stepLike = pow(abs(slt), 0.75)*sign(slt);\n    stepLike = max(-1.0, min(1.0, stepLike*1.5));\n    pulse = stepLike*PI\/4.0 + PI\/4.0;\n\n\tvec3 camPos, camUp, camLookat;\n\t\/\/ ------------------- Set up the camera rays for ray marching --------------------\n    \/\/ Map uv to [-1.0..1.0]\n\tvec2 uv = fragCoord.xy\/iResolution.xy * 2.0 - 1.0;\n\n#ifdef MANUAL_CAMERA\n    \/\/ Camera up vector.\n\tcamUp=vec3(0,1,0);\n\n\t\/\/ Camera lookat.\n\tcamLookat=vec3(0,0.0,0);\n\n    \/\/ debugging camera\n    float mx=iMouse.x\/iResolution.x*PI*2.0;\/\/ + localTime * 0.166;\n\tfloat my=-iMouse.y\/iResolution.y*10.0;\/\/ + sin(localTime * 0.3)*0.8+0.1;\/\/*PI\/2.01;\n\tcamPos = vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*8.35;\n#else\n    \/\/ Do the camera fly-by animation and different scenes.\n    \/\/ Time variables for start and end of each scene\n    const float t0 = 0.0;\n    const float t1 = 9.0;\n    const float t2 = 16.0;\n    const float t3 = 24.0;\n    const float t4 = 40.0;\n    const float t5 = 48.0;\n    const float t6 = 70.0;\n    \/\/ Repeat the animation after time t6\n    localTime = fract(localTime \/ t6) * t6;\n    \/*const float t0 = 0.0;\n    const float t1 = 0.0;\n    const float t2 = 0.0;\n    const float t3 = 0.0;\n    const float t4 = 0.0;\n    const float t5 = 0.0;\n    const float t6 = 18.0;*\/\n    if (localTime < t1)\n    {\n\t    animStructure = 0.0;\n        float time = localTime - t0;\n        float alpha = time \/ (t1 - t0);\n        fade = saturate(time);\n        fade *= saturate(t1 - localTime);\n        camPos = vec3(56.0, -2.5, 1.5);\n        camPos.x -= alpha * 6.8;\n        camUp=vec3(0,1,0);\n        camLookat=vec3(50,0.0,0);\n    } else if (localTime < t2)\n    {\n    \tanimStructure = 0.0;\n        float time = localTime - t1;\n        float alpha = time \/ (t2 - t1);\n        fade = saturate(time);\n        fade *= saturate(t2 - localTime);\n        camPos = vec3(12.0, 3.3, -0.5);\n        camPos.x -= smoothstep(0.0, 1.0, alpha) * 4.8;\n        camUp=vec3(0,1,0);\n        camLookat=vec3(0,5.5,-0.5);\n    } else if (localTime < t3)\n    {\n        animStructure = 1.0;\n        float time = localTime - t2;\n        float alpha = time \/ (t3 - t2);\n        fade = saturate(time);\n        fade *= saturate(t3 - localTime);\n        camPos = vec3(12.0, 6.3, -0.5);\n        camPos.y -= alpha * 1.8;\n        camPos.x = cos(alpha*1.0) * 6.3;\n        camPos.z = sin(alpha*1.0) * 6.3;\n        camUp=normalize(vec3(0,1,-0.3 - alpha * 0.5));\n        camLookat=vec3(0,0.0,-0.5);\n    } else if (localTime < t4)\n    {\n        animStructure = 1.0;\n        float time = localTime - t3;\n        float alpha = time \/ (t4 - t3);\n        fade = saturate(time);\n        fade *= saturate(t4 - localTime);\n        camPos = vec3(12.0, 3.0, -2.6);\n        camPos.y -= alpha * 1.8;\n        camPos.x = cos(alpha*1.0) * 6.5-alpha*0.25;\n        camPos.z += sin(alpha*1.0) * 6.5-alpha*0.25;\n        camUp=normalize(vec3(0,1,0.0));\n        camLookat=vec3(0,0.0,-0.0);\n    } else if (localTime < t5)\n    {\n        animStructure = 1.0;\n        float time = localTime - t4;\n        float alpha = time \/ (t5 - t4);\n        fade = saturate(time);\n        fade *= saturate(t5 - localTime);\n        camPos = vec3(0.0, -7.0, -0.9);\n        camPos.y -= alpha * 1.8;\n        camPos.x = cos(alpha*1.0) * 1.5-alpha*1.5;\n        camPos.z += sin(alpha*1.0) * 1.5-alpha*1.5;\n        camUp=normalize(vec3(0,1,0.0));\n        camLookat=vec3(0,-3.0,-0.0);\n    } else if (localTime < t6)\n    {\n        float time = localTime - t5;\n        float alpha = time \/ (t6 - t5);\n        float smooth = smoothstep(0.0, 1.0, saturate(alpha*1.8-0.1));\n        animStructure = 1.0-smooth;\n        fade = saturate(time);\n        fade *= saturate(t6 - localTime);\n        camPos = vec3(10.0, -0.95+smooth*1.0, 0.0);\n        camPos.x -= alpha * 6.8;\n        camUp=normalize(vec3(0,1.0-smooth,0.0+smooth));\n        camLookat=vec3(0,-0.0,-0.0);\n    }\n#endif\n\n\t\/\/ Camera setup.\n\tvec3 camVec=normalize(camLookat - camPos);\n\tvec3 sideNorm=normalize(cross(camUp, camVec));\n\tvec3 upNorm=cross(camVec, sideNorm);\n\tvec3 worldFacing=(camPos + camVec);\n\tvec3 worldPix = worldFacing + uv.x * sideNorm * (iResolution.x\/iResolution.y) + uv.y * upNorm;\n\tvec3 rayVec = normalize(worldPix - camPos);\n\n\t\/\/ ----------------------------- Ray march the scene ------------------------------\n\tfloat dist = 1.0;\n\tfloat t = 0.1 + Hash2d(uv)*0.1;\t\/\/ random dither-fade things close to the camera\n\tconst float maxDepth = 45.0; \/\/ farthest distance rays will travel\n\tvec3 pos = vec3(0,0,0);\n    const float smallVal = 0.000625;\n\t\/\/ ray marching time\n    for (int i = 0; i < 210; i++)\t\/\/ This is the count of the max times the ray actually marches.\n    {\n        \/\/ Step along the ray. Switch x, y, and z because I messed up the orientation.\n        pos = (camPos + rayVec * t).yzx;\n        \/\/ This is _the_ function that defines the \"distance field\".\n        \/\/ It's really what makes the scene geometry. The idea is that the\n        \/\/ distance field returns the distance to the closest object, and then\n        \/\/ we know we are safe to \"march\" along the ray by that much distance\n        \/\/ without hitting anything. We repeat this until we get really close\n        \/\/ and then break because we have effectively hit the object.\n        dist = DistanceToObject(pos);\n        \/\/ This makes the ray trace more precisely in the center so it will not miss the\n        \/\/ vertical glowy beam.\n        dist = min(dist, length(pos.yz));\n\n        t += dist;\n        \/\/ If we are very close to the object, let's call it a hit and exit this loop.\n        if ((t > maxDepth) || (abs(dist) < smallVal)) break;\n    }\n\n\t\/\/ --------------------------------------------------------------------------------\n\t\/\/ Now that we have done our ray marching, let's put some color on this geometry.\n\tfloat glowSave = glow;\n\tfloat glow2Save = glow2;\n\tfloat glow3Save = glow3;\n\n\tvec3 sunDir = normalize(vec3(0.93, 1.0, -1.5));\n\tvec3 finalColor = vec3(0.0);\n\n\t\/\/ If a ray actually hit the object, let's light it.\n    if (t <= maxDepth)\n\t{\n        \/\/ calculate the normal from the distance field. The distance field is a volume, so if you\n        \/\/ sample the current point and neighboring points, you can use the difference to get\n        \/\/ the normal.\n        vec3 smallVec = vec3(smallVal, 0, 0);\n        vec3 normalU = vec3(dist - DistanceToObject(pos - smallVec.xyy),\n                           dist - DistanceToObject(pos - smallVec.yxy),\n                           dist - DistanceToObject(pos - smallVec.yyx));\n        vec3 normal = normalize(normalU);\n\n        \/\/ calculate 2 ambient occlusion values. One for global stuff and one\n        \/\/ for local stuff\n        float ambientS = 1.0;\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.05)*20.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.1)*10.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.2)*5.0);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.4)*2.5);\n        ambientS *= saturate(DistanceToObject(pos + normal * 0.8)*1.25);\n        float ambient = ambientS * saturate(DistanceToObject(pos + normal * 1.6)*1.25*0.5);\n        \/\/ambient *= saturate(DistanceToObject(pos + normal * 3.2)*1.25*0.25);\n        \/\/ambient *= saturate(DistanceToObject(pos + normal * 6.4)*1.25*0.125);\n        \/\/ambient = max(0.05, pow(ambient, 0.3));\t\/\/ tone down ambient with a pow and min clamp it.\n        ambient = saturate(ambient);\n\n        \/\/ calculate the reflection vector for highlights\n        \/\/vec3 ref = reflect(rayVec, normal);\n\n        \/\/ Trace a ray toward the sun for sun shadows\n        float sunShadow = 1.0;\n        float iter = 0.01;\n        vec3 nudgePos = pos + normal*0.002;\t\/\/ don't start tracing too close or inside the object\n\t\tfor (int i = 0; i < 30; i++)\n        {\n            float tempDist = DistanceToObject(nudgePos + sunDir * iter);\n\t        sunShadow *= saturate(tempDist*150.0);\t\/\/ Shadow hardness\n            if (tempDist <= 0.0) break;\n            \/\/iter *= 1.5;\t\/\/ constant is more reliable than distance-based\n            iter += max(0.01, tempDist)*1.0;\n            if (iter > 4.2) break;\n        }\n        sunShadow = saturate(sunShadow);\n\n        \/\/ make a few frequencies of noise to give it some texture\n        float n =0.0;\n        n += noise(pos*32.0);\n        n += noise(pos*64.0);\n        n += noise(pos*128.0);\n        n += noise(pos*256.0);\n        n += noise(pos*512.0);\n        n *= 0.8;\n        normal = normalize(normal + (n-2.0)*0.1);\n\n        \/\/ ------ Calculate texture color  ------\n        vec3 texColor = vec3(0.95, 1.0, 1.0);\n        vec3 rust = vec3(0.65, 0.25, 0.1) - noise(pos*128.0);\n        \/\/ Call the function that makes rust stripes on the texture\n        texColor *= smoothstep(texColor, rust, vec3(saturate(RustNoise3D(pos*8.0))-0.2));\n\n        \/\/ apply noise\n        texColor *= vec3(1.0)*n*0.05;\n        texColor *= 0.7;\n        texColor = saturate(texColor);\n\n        \/\/ ------ Calculate lighting color ------\n        \/\/ Start with sun color, standard lighting equation, and shadow\n        vec3 lightColor = vec3(3.6) * saturate(dot(sunDir, normal)) * sunShadow;\n        \/\/ weighted average the near ambient occlusion with the far for just the right look\n        float ambientAvg = (ambient*3.0 + ambientS) * 0.25;\n        \/\/ a red and blue light coming from different directions\n        lightColor += (vec3(1.0, 0.2, 0.4) * saturate(-normal.z *0.5+0.5))*pow(ambientAvg, 0.35);\n        lightColor += (vec3(0.1, 0.5, 0.99) * saturate(normal.y *0.5+0.5))*pow(ambientAvg, 0.35);\n        \/\/ blue glow light coming from the glow in the middle\n        lightColor += vec3(0.3, 0.5, 0.9) * saturate(dot(-pos, normal))*pow(ambientS, 0.3);\n        lightColor *= 4.0;\n\n        \/\/ finally, apply the light to the texture.\n        finalColor = texColor * lightColor;\n        \/\/ sun reflection to make it look metal\n        \/\/finalColor += vec3(1.0)*pow(n,4.0)* GetSunColorSmall(ref, sunDir) * sunShadow;\/\/ * ambientS;\n        \/\/ visualize length of gradient of distance field to check distance field correctness\n        \/\/finalColor = vec3(0.5) * (length(normalU) \/ smallVec.x);\n\t}\n    else\n    {\n        \/\/ Our ray trace hit nothing, so draw sky.\n    }\n    \/\/ add the ray marching glows\n    float center = length(pos.yz);\n    finalColor += vec3(0.3, 0.5, 0.9) * glowSave*1.2;\n    finalColor += vec3(0.9, 0.5, 0.3) * glow2*1.2;\n    finalColor += vec3(0.25, 0.29, 0.93) * glow3Save*2.0;\n\n    \/\/ vignette?\n    finalColor *= vec3(1.0) * saturate(1.0 - length(uv\/2.5));\n    finalColor *= 1.0;\/\/ 1.3;\n\n\t\/\/ output the final color without gamma correction - will do gamma later.\n\treturn vec3(clamp(finalColor, 0.0, 1.0)*saturate(fade));\n}\n\n#ifdef NON_REALTIME_HQ_RENDER\n\/\/ This function breaks the image down into blocks and scans\n\/\/ through them, rendering 1 block at a time. It's for non-\n\/\/ realtime things that take a long time to render.\n\n\/\/ This is the frame rate to render at. Too fast and you will\n\/\/ miss some blocks.\nconst float blockRate = 20.0;\nvoid BlockRender(in vec2 fragCoord)\n{\n    \/\/ blockSize is how much it will try to render in 1 frame.\n    \/\/ adjust this smaller for more complex scenes, bigger for\n    \/\/ faster render times.\n    const float blockSize = 64.0;\n    \/\/ Make the block repeatedly scan across the image based on time.\n    float frame = floor(iGlobalTime * blockRate);\n    vec2 blockRes = floor(iResolution.xy \/ blockSize) + vec2(1.0);\n    \/\/ ugly bug with mod.\n    \/\/float blockX = mod(frame, blockRes.x);\n    float blockX = fract(frame \/ blockRes.x) * blockRes.x;\n    \/\/float blockY = mod(floor(frame \/ blockRes.x), blockRes.y);\n    float blockY = fract(floor(frame \/ blockRes.x) \/ blockRes.y) * blockRes.y;\n    \/\/ Don't draw anything outside the current block.\n    if ((fragCoord.x - blockX * blockSize >= blockSize) ||\n    \t(fragCoord.x - (blockX - 1.0) * blockSize < blockSize) ||\n    \t(fragCoord.y - blockY * blockSize >= blockSize) ||\n    \t(fragCoord.y - (blockY - 1.0) * blockSize < blockSize))\n    {\n        discard;\n    }\n}\n#endif\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n#ifdef NON_REALTIME_HQ_RENDER\n    \/\/ Optionally render a non-realtime scene with high quality\n    BlockRender(fragCoord);\n#endif\n\n    \/\/ Do a multi-pass render\n    vec3 finalColor = vec3(0.0);\n#ifdef NON_REALTIME_HQ_RENDER\n    for (float i = 0.0; i < antialiasingSamples; i++)\n    {\n        const float motionBlurLengthInSeconds = 1.0 \/ 60.0;\n        \/\/ Set this to the time in seconds of the frame to render.\n\t    localTime = frameToRenderHQ;\n        \/\/ This line will motion-blur the renders\n        localTime += Hash11(v21(fragCoord + seed)) * motionBlurLengthInSeconds;\n        \/\/ Jitter the pixel position so we get antialiasing when we do multiple passes.\n        vec2 jittered = fragCoord.xy + vec2(\n            Hash21(fragCoord + seed),\n            Hash21(fragCoord*7.234567 + seed)\n            );\n        \/\/ don't antialias if only 1 sample.\n        if (antialiasingSamples == 1.0) jittered = fragCoord;\n        \/\/ Accumulate one pass of raytracing into our pixel value\n\t    finalColor += RayTrace(jittered);\n        \/\/ Change the random seed for each pass.\n\t    seed *= 1.01234567;\n    }\n    \/\/ Average all accumulated pixel intensities\n    finalColor \/= antialiasingSamples;\n#else\n    \/\/ Regular real-time rendering\n    localTime = iGlobalTime;\n    finalColor = RayTrace(fragCoord);\n#endif\n\n    fragColor = vec4(sqrt(clamp(finalColor, 0.0, 1.0)),1.0);\n}\n\n\n","name":"","description":"","type":"image"}]}}