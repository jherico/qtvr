{"Shader":{"ver":"0.1","info":{"id":"ldSGRW","date":"1384244142","viewed":2372,"name":"25 boxes and a tunnel","username":"movAX13h","description":"25 boxes, a tunnel based on voronoi, bit encoded patterns, script for 80 seconds (music); making visual use of inaccuracies (blue fluff)","likes":25,"published":3,"flags":0,"tags":["3d","raymarching","tunnel","text","vononoi","scripted"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ 25 boxes, a tunnel based on voronoi, bit encoded patterns, script for 80 seconds (music)\n\/\/ fragment shader by movAX13h, November 2013\n\n\/\/ NOTE: Patterns start at ~45 seconds.\n\nfloat rand(vec2 co)\n{\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(float n)\n{\n    return fract(sin(n * 12.9898) * 43758.5453);\n}\n\nvec2 rand2(vec2 p)\n{\n\tfloat r = 523.0*sin(dot(p, vec2(53.3158, 43.6143)));\n\treturn vec2(fract(15.32354 * r), fract(17.25865 * r));\n}\n\nfloat sdBox( vec3 p, vec3 b ) \n{\t\n\tvec3 d = abs(p) - b;\n\treturn min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat pattern(float n, vec2 p)\n{\n\tp = p * 4.0;\n\tp = floor(p + 2.5);\n\t\n\tif (clamp(p.x, 0.0, 4.0) == p.x && clamp(p.y, 0.0, 4.0) == p.y)\n\t{\n\t\tfloat k = p.x + p.y*5.0;\n\t\tif (int(mod(n\/(pow(2.0,k)),2.0)) == 1) return 0.0;\n\t}\t\n\t\n\treturn 1.0;\n}\n\nstruct Cell\n{\n\tfloat d;\n\tvec2 hash;\n\tvec2 pos;\n};\n\nCell Cells(in vec2 p, in float numCells, bool bump)\n{\n\tp *= numCells;\n\t\n\tfloat d = 1.0e20;\n\tvec2 hash;\n\tvec2 pos;\n\t\n\tfor (int dx = -1; dx <= 1; dx++)\n\tfor (int dy = -1; dy <= 1; dy++)\n\t{\n\t\tvec2 tp = floor(p) + vec2(dx, dy);\n\t\tvec2 h = rand2(vec2(mod(tp.x, numCells), tp.y)); \/\/ repeat x\n\t\tfloat m = length(p - tp - h);\n\t\t\n\t\tif (m < d) \n\t\t{\n\t\t\td = m;\n\t\t\thash = h;\n\t\t\tpos = tp;\n\t\t}\n\t}\n\t\n\tif (bump) return Cell(d, hash, pos);\n\treturn Cell(1.0-d, hash, pos);\n}\n\n\nfloat sampleMusic(float f, float bands)\n{\n\tf = floor(f*bands)\/bands;\n\tfloat fft = texture2D( iChannel0, vec2(f,0.0) ).x;\n\treturn fft;\n}\n\nfloat sampleMusic()\n{\n\treturn 0.25 * (\n\t\ttexture2D( iChannel0, vec2( 0.01, 0.25 ) ).x + \n\t\ttexture2D( iChannel0, vec2( 0.07, 0.25 ) ).x + \n\t\ttexture2D( iChannel0, vec2( 0.15, 0.25 ) ).x + \n\t\ttexture2D( iChannel0, vec2( 0.30, 0.25 ) ).x);\n}\n\n\n#define L_hi 1613493.0\n#define L_smile 10813998.0\n#define L_I 14815374.0\n#define L_heart 11533764.0\n#define L_S 15793695.0\n#define L_T 462976.0\n\n#define L_NONE 0.0\n#define L_RANDOM 1.0\n\nfloat time;\n\nbool openTunnel = false;\nbool bumpTunnel = false;\nfloat boxSymbol = L_RANDOM;\n\nvec4 scene(vec3 p)\n{\n\tfloat tunnelRadius = 0.38;\n\tfloat numCells = 8.0;\n\t\n\tfloat d, d1;\n\tvec3 q = p;\n\t\n\tvec3 col = vec3(0.1, 0.7, 1.0);\n\td = 10000.0;\n\t\n \t\/\/ tunnel\n\t#if 1\n\tvec2 uv = vec2((atan(p.y, p.x) + 3.14159265) \/ 6.283185307, -time*0.6 + p.z*0.4);\n\tCell cell = Cells(uv, numCells, bumpTunnel);\n\tq.xy *= 1.0 + cell.d*0.1;\n\td = max(length(q.xy) - tunnelRadius+0.01,-(length(q.xy) - tunnelRadius));\n\tif (openTunnel) d = max(-sdBox(p-vec3(-1.2, 0.0, 0.0), vec3(1.0, 1.0, 10.0)), d);\n\tfloat m = sampleMusic() * (1.0+smoothstep(0.4, 0.6, sampleMusic(cell.hash.x * cell.hash.y, 4.0)));\n\tvec3 c = m*vec3(cell.hash.x*0.9, cell.hash.y*0.3, 0.11)*cell.d;\n\tcol = mix(col, c, smoothstep(0.1, 0.0, d));\n\t#endif\n\t\n\t\/\/ letter boxes\n\t#if 1\n\tfloat ltime = mod(time, 10.0);\n\t\n\tif (boxSymbol > 0.0)\n\t{\n\t\tfor(int i = 0; i < 25; i++)\n\t\t{\n\t\t\tvec3 pos;\n\t\t\t\n\t\t\tif (boxSymbol < 1.1) \/\/ random boxes\n\t\t\t{\n\t\t\t\tltime = time*3.0 + float(i)*20.134;\n\t\t\t\t\n\t\t\t\tfloat r = rand(float(i)*20.33);\n\t\t\t\tfloat z = -6.0+mod(ltime*(r + 0.5), 15.0);\n\t\t\t\t\n\t\t\t\tif (!openTunnel && z > 2.0) continue;\n\t\t\t\t\n\t\t\t\tpos = vec3(0.04*mod(float(i), 5.0) - 0.08, 0.04*floor(float(i)\/5.0) - 0.08, z);\n\t\t\t\td1 = sdBox(p-pos,  vec3(0.009)); \/\/ ugly boxes\n\t\t\t\tif (d1 < d)\n\t\t\t\t{\n\t\t\t\t\td = d1;\n\t\t\t\t\tcol = vec3(0.1, 0.6, 0.9)*(r+0.2);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse \/\/ symbol mode\n\t\t\t{\n\t\t\t\tfloat z = 0.5+0.2*tan(-time - float(i)*0.04);\n\t\t\t\tif (z > 1.0) continue;\n\t\t\t\t\n\t\t\t\tvec3 shift = min(z-0.5, 0.0) * vec3(0.08*sin(time + 0.2*float(i)), 0.08*cos(time + 0.4 * float(i)), 0.0);\n\t\t\t\tpos = vec3(0.04*mod(float(i), 5.0) - 0.08, 0.04*floor(float(i)\/5.0) - 0.08, z);\n\t\t\t\td1 = sdBox(p-pos-shift,  vec3(0.009)); \/\/ ugly boxes\n\t\t\t\tif (d1 < d)\n\t\t\t\t{\n\t\t\t\t\tfloat lv = pattern(boxSymbol, (p.xy-shift.xy)*6.2); \n\t\t\t\t\td = d1;\n\t\t\t\t\tif (lv > 0.5) col = vec3(0.216, 0.106, 0.173);\n\t\t\t\t\telse col = vec3(0.820, 0.839, 0.906);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t#endif\n\treturn vec4(col, d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n    vec2 pos = (fragCoord.xy*2.0 - iResolution.xy) \/ iResolution.y;\n\t\n    float focus = 3.14;\n    float far = 5.5;\n\n\ttime = iChannelTime[0];\/\/iGlobalTime;\n\t\n\tvec3 ct = vec3(0.0);\n\tvec3 cp;\n\tvec3 cu  = vec3(0.0, 1.0, 0.0);\n\t\n\tif (time < 12.7) \n\t{\n\t\tcp = vec3(0.2*sin(time*0.4), -0.02+0.2*cos(time*0.2), 1.5);\n\t}\n\telse if (time < 27.8) \n\t{\n\t\tcp = vec3(-0.2*sin(time*0.4), 0.02+0.2*sin(time*0.2), 1.5);\n\t}\n\telse if (time < 35.4) \n\t{\n\t\tbumpTunnel = true;\n\t\tboxSymbol = L_NONE;\n\t\tcp = vec3(0.6, sin(time*0.4-35.4), 1.5);\n\t}\n\telse if (time < 44.9)\n\t{\n\t\topenTunnel = true;\n\t\tcp = vec3(-2.0, 0.0, 3.5);\n\t}\n\telse if (time < 45.2)\n\t{\n\t\tboxSymbol = L_NONE;\n\t\tcp = vec3(0.0, 0.0, 1.5);\n\t}\n\telse if (time < 63.7)\n\t{\n\t\tcp = vec3(0.0, 0.0, 1.5);\n\t\tcu  = vec3(0.1*sin(time), 1.0, 0.1*cos(time));\n\t\t\n\t\tfloat id = mod(floor((time - 45.2) \/ 3.1415), 6.0);\n\t\tif (id == 0.0) boxSymbol = L_hi;\n\t\telse if (id == 1.0) boxSymbol = L_smile;\n\t\telse if (id == 2.0) boxSymbol = L_I;\n\t\telse if (id == 3.0) boxSymbol = L_heart;\n\t\telse if (id == 4.0) boxSymbol = L_S;\n\t\telse if (id == 5.0) boxSymbol = L_T;\n\t}\n\telse if (time < 79.3)\n\t{\n\t\tboxSymbol = L_NONE;\n\t\tcu  = vec3(sin(time), 1.0, cos(time));\n\t\tcp = vec3(0.0, 0.0, 1.5);\n\t}\n\telse\n\t{\n\t\tboxSymbol = L_RANDOM;\n\t\tcp = vec3(0.2*sin(time*0.4), -0.02+0.2*cos(time*0.2), 1.5);\n\t\tcu  = vec3(sin(time*0.8), 1.0, cos(time*0.6));\n\t}\n\t\n\t#if 0\n\tif (iMouse.z > 0.0) \/\/ debug\n\t{\n\t\tfloat d = (iResolution.y-iMouse.y)*0.01+3.0;\n\t\tcp = vec3(sin(iMouse.x*0.01)*d, .0, cos(iMouse.x*0.01)*d);\n\t}\n\t#endif\n\t\n\tvec3 cd = normalize(ct-cp);\n\tvec3 cs = cross(cd, cu);\n\tvec3 dir = normalize(cs*pos.x + cu*pos.y + cd*focus);\n\t\n    vec4 s;\n\tfloat dist = 0.0;\n\tvec3 ray = cp;\n\t\n    for(int i=0; i < 40; i++) \n\t{\n        s = scene(ray);\n\t\t\n        dist += s.w;\n        ray += dir * s.w;\n\t\t\n        if(s.w < 0.01) break;\n\t\t\n        if(dist > far) \n\t\t{ \n\t\t\tdist = far; \n\t\t\tbreak; \n\t\t}\n    }\n\t\n    float b = 1.0 - dist\/far;\n\tvec3 col = b * s.rgb;\n\t\n\t\/\/ fake lights\n\tcol *= pow(1.3 + smoothstep(0.6, 0.0, abs(sin(ray.z+time*2.0))), 2.0);\n    \n\t\/\/ vignetting & grain\n\tcol *= 1.0-smoothstep(0.0, 2.0, length(pos.xy));\n\tcol -= 0.03*rand(pos.xy);\n\t\n\tfragColor = vec4(col*1.2, 1.0);\n}\n","name":"","description":"","type":"image"}]}}