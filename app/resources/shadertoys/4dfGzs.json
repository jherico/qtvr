{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4dfGzs",
				"date": "1376478210",
				"viewed": 12433,
				"name": "Voxel Edges",
				"username": "iq",
				"description": "Correct edge detection for voxels. The marching function is fb39ca4's DDA, but using floating point operations instead of integers. The most interesting bits are probably the exact 3D intersector, the occlusion and the edge detection code.",
				"likes": 119,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching",
					"voxel",
					"occlusion",
					"dda"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 7,
							"src": "\/presets\/tex06.jpg",
							"ctype": "texture",
							"channel": 2
						},

						{
							"id": 8,
							"src": "\/presets\/tex07.jpg",
							"ctype": "texture",
							"channel": 1
						},

						{
							"id": 30,
							"src": "\/presets\/tex16.png",
							"ctype": "texture",
							"channel": 0
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#pragma vr\n\nfloat hash( in vec3 x )\n{\n    float n = dot( x, vec3(1.0,113.0,257.0) );\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    \n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = texture2D( iChannel0, (uv+ 0.5)/256.0, -100.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    vec2 uv = p.xy + f.xy*f.xy*(3.0-2.0*f.xy);\n    return texture2D( iChannel0, (uv+118.4)/256.0, -100.0 ).x;\n}\n\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n    vec4 x = texture2D( sam, p.yz );\n    vec4 y = texture2D( sam, p.zx );\n    vec4 z = texture2D( sam, p.xy );\n    return x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n//=====================================================================\n\nconst mat3 m = mat3( 0.00,  0.80,  0.60,\n                    -0.80,  0.36, -0.48,\n                    -0.60, -0.48,  0.64 );\n\n\nfloat mapTerrain( vec3 p )\n{\n    \n    p *= 0.1; \n    p.xz *= 0.6;\n\n    \n    float time = 0.5 + 0.15*iGlobalTime;\n    float ft = fract( time );\n    float it = floor( time );\n    ft = smoothstep( 0.7, 1.0, ft );\n    time = it + ft;\n    float spe = 1.4;\n    \n    float f;\n    f  = 0.5000*noise( p*1.00 + vec3(0.0,1.0,0.0)*spe*time );\n    f += 0.2500*noise( p*2.02 + vec3(0.0,2.0,0.0)*spe*time );\n    f += 0.1250*noise( p*4.01 );\n    return 25.0*f-10.0;\n}\n\n\nvec3 gro = vec3(0.0);\n\nfloat map(in vec3 c) \n{\n    vec3 p = c + 0.5;\n    \n    \n    float f = mapTerrain( p ) + 0.25*p.y;\n\n    f = mix( f, 1.0, step( length(gro-p), 5.0 ) );\n\n    return step( f, 0.5 );\n}\n\nvec3 lig = normalize( vec3(-0.4,0.3,0.7) );\n\n\nfloat castRay( in vec3 ro, in vec3 rd, out vec3 oVos, out vec3 oDir )\n{\n    vec3 pos = floor(ro);\n    vec3 ri = 1.0/rd;\n    vec3 rs = sign(rd);\n    vec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n    \n    float res = -1.0;\n    vec3 mm = vec3(0.0);\n    for( int i=0; i<128; i++ ) \n    {\n        if( map(pos)>0.5 ) { res=1.0; break; }\n        mm = step(dis.xyz, dis.yxy) * step(dis.xyz, dis.zzx);\n        dis += mm * rs * ri;\n        pos += mm * rs;\n    }\n\n    vec3 nor = -mm*rs;\n    vec3 vos = pos;\n    \n    // intersect the cube   \n    vec3 mini = (pos-ro + 0.5 - 0.5*vec3(rs))*ri;\n    float t = max ( mini.x, max ( mini.y, mini.z ) );\n    \n    oDir = mm;\n    oVos = vos;\n\n    return t*res;\n\n}\n\nfloat castVRay( in vec3 ro, in vec3 rd, in float maxDist )\n{\n\n    vec3 pos = floor(ro);\n    vec3 ri = 1.0/rd;\n    vec3 rs = sign(rd);\n    vec3 dis = (pos-ro + 0.5 + rs*0.5) * ri;\n    \n    float res = 1.0;\n    for( int i=0; i<50; i++ ) \n    {\n        if( map(pos)>0.5 ) {res=0.0; break; }\n        vec3 mm = step(dis.xyz, dis.yxy) * step(dis.xyz, dis.zzx);\n        dis += mm * rs * ri;\n        pos += mm * rs;\n    }\n    \n    return res;\n}\n\n\n\nvec3 path( float t )\n{\n    vec2 p  = 100.0*sin( 0.02*t*vec2(1.0,1.2) + vec2(0.1,0.9) );\n         p +=  50.0*sin( 0.04*t*vec2(1.3,1.0) + vec2(1.0,4.5) );\n    \n    return vec3( p.x, 18.0 + 4.0*sin(0.05*t), p.y );\n}\n\nvoid main( void )\n{\n    // inputs   \n    vec2 q = gl_FragCoord.xy / iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x/ iResolution.y;\n    \n    vec2 mo = iMouse.xy / iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n    \n    float time = 2.0*iGlobalTime + 50.0*mo.x;\n    // camera\n    vec3 ro = 20.5*normalize(vec3(cos(time), 0.5, sin(time)));\n    vec3 ta = vec3(0.0, 0.0, 0.0);\n    float cr = 0.2*cos(0.1*iGlobalTime);\n    \n    ro = path( time );\n    ta = path( time+5.0 ) - vec3(0.0,6.0,0.0);\n    gro = ro;\n    \n    // build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    float r2 = p.x*p.x*0.32 + p.y*p.y;\n    p *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n    // vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n    vec3 rd = normalize( iDir );\n\n    vec3 col = vec3(0.0);\n    \n    // raymarch \n    vec3 vos, dir;\n    float t = castRay( ro, rd, vos, dir );\n    if( t>0.0 )\n    {\n        vec3 nor = -dir*sign(rd);\n        vec3 pos = ro + rd*t;\n        vec3 uvw = pos - vos;\n        \n        vec3 v1  = vos + nor + dir.yzx;\n        vec3 v2  = vos + nor - dir.yzx;\n        vec3 v3  = vos + nor + dir.zxy;\n        vec3 v4  = vos + nor - dir.zxy;\n        vec3 v5  = vos + nor + dir.yzx + dir.zxy;\n        vec3 v6  = vos + nor - dir.yzx + dir.zxy;\n        vec3 v7  = vos + nor - dir.yzx - dir.zxy;\n        vec3 v8  = vos + nor + dir.yzx - dir.zxy;\n        vec3 v9  = vos + dir.yzx;\n        vec3 v10 = vos - dir.yzx;\n        vec3 v11 = vos + dir.zxy;\n        vec3 v12 = vos - dir.zxy;\n        vec3 v13 = vos + dir.yzx + dir.zxy; \n        vec3 v14 = vos - dir.yzx + dir.zxy ;\n        vec3 v15 = vos - dir.yzx - dir.zxy;\n        vec3 v16 = vos + dir.yzx - dir.zxy;\n\n        vec4 ed = vec4( map(v1),  map(v2),  map(v3),  map(v4)  );\n        vec4 co = vec4( map(v5),  map(v6),  map(v7),  map(v8)  );\n        vec4 ep = vec4( map(v9),  map(v10), map(v11), map(v12) );\n        vec4 cp = vec4( map(v13), map(v14), map(v15), map(v16) );\n        \n        vec2 uv = vec2( dot(dir.yzx, uvw), dot(dir.zxy, uvw) );\n            \n        // wireframe\n        vec4 ee = 1.0-ep*(1.0-ed);\n        float www = 1.0;\n        www *= 1.0 - smoothstep( 0.85, 0.99,     uv.x )*ee.x;\n        www *= 1.0 - smoothstep( 0.85, 0.99, 1.0-uv.x )*ee.y;\n        www *= 1.0 - smoothstep( 0.85, 0.99,     uv.y )*ee.z;\n        www *= 1.0 - smoothstep( 0.85, 0.99, 1.0-uv.y )*ee.w;\n        www *= 1.0 - smoothstep( 0.85, 0.99,      uv.y*      uv.x )\n            *(1.0-cp.x*(1.0-co.x))*(1.0-ee.x)*(1.0-ee.z);\n        www *= 1.0 - smoothstep( 0.85, 0.99,      uv.y* (1.0-uv.x))\n            *(1.0-cp.y*(1.0-co.y))*(1.0-ee.y)*(1.0-ee.z);\n        www *= 1.0 - smoothstep( 0.85, 0.99, (1.0-uv.y)*(1.0-uv.x))\n            *(1.0-cp.z*(1.0-co.z))*(1.0-ee.y)*(1.0-ee.w);\n        www *= 1.0 - smoothstep( 0.85, 0.99, (1.0-uv.y)*     uv.x )\n            *(1.0-cp.w*(1.0-co.w))*(1.0-ee.x)*(1.0-ee.w);\n        \n        vec3 wir = smoothstep( 0.4, 0.5, abs(uvw-0.5) );\n        float vvv = (1.0-wir.x*wir.y)*(1.0-wir.x*wir.z)*(1.0-wir.y*wir.z);\n\n        col = 2.0*texture2D( iChannel1,0.01*pos.xz ).zyx; \n        col += 0.8*vec3(0.1,0.3,0.4);\n        col *= 0.5 + 0.5*texcube( iChannel2, 0.5*pos, nor ).x;\n        col *= 1.0 - 0.75*(1.0-vvv)*www;\n        \n        // lighting\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float sha = 0.0; if( dif>0.01) sha=castVRay(pos+nor*0.01,lig,32.0);\n        float bac = clamp( dot( nor, normalize(lig*vec3(-1.0,0.0,-1.0)) ), 0.0, 1.0 );\n        float sky = 0.5 + 0.5*nor.y;\n        float amb = clamp(0.75 + pos.y/25.0,0.0,1.0);\n        float occ = 1.0;\n    \n        // ambient occlusion\n        occ = 0.0; \n        // (for edges)\n        occ += (    uv.x) * ed.x;\n        occ += (1.0-uv.x) * ed.y;\n        occ += (    uv.y) * ed.z;\n        occ += (1.0-uv.y) * ed.w;\n        // (for corners)\n        occ += (      uv.y *     uv.x ) * co.x*(1.0-ed.x)*(1.0-ed.z);\n        occ += (      uv.y *(1.0-uv.x)) * co.y*(1.0-ed.z)*(1.0-ed.y);\n        occ += ( (1.0-uv.y)*(1.0-uv.x)) * co.z*(1.0-ed.y)*(1.0-ed.w);\n        occ += ( (1.0-uv.y)*     uv.x ) * co.w*(1.0-ed.w)*(1.0-ed.x);\n        occ = 1.0 - occ/8.0;\n        occ = occ*occ;\n        occ = occ*occ;\n        occ *= amb;\n\n        // lighting\n        vec3 lin = vec3(0.0);\n        lin += 6.0*dif*vec3(1.00,0.90,0.70)*sha*(0.5+0.5*occ);\n        lin += 0.5*bac*vec3(0.15,0.10,0.10)*occ;\n        lin += 2.0*sky*vec3(0.40,0.30,0.15)*occ;\n\n        // line glow    \n        float lineglow = 0.0;\n        lineglow += smoothstep( 0.4, 1.0,     uv.x )*(1.0-ep.x*(1.0-ed.x));\n        lineglow += smoothstep( 0.4, 1.0, 1.0-uv.x )*(1.0-ep.y*(1.0-ed.y));\n        lineglow += smoothstep( 0.4, 1.0,     uv.y )*(1.0-ep.z*(1.0-ed.z));\n        lineglow += smoothstep( 0.4, 1.0, 1.0-uv.y )*(1.0-ep.w*(1.0-ed.w));\n        lineglow += smoothstep( 0.4, 1.0,      uv.y*      uv.x )*(1.0-cp.x*(1.0-co.x));\n        lineglow += smoothstep( 0.4, 1.0,      uv.y* (1.0-uv.x))*(1.0-cp.y*(1.0-co.y));\n        lineglow += smoothstep( 0.4, 1.0, (1.0-uv.y)*(1.0-uv.x))*(1.0-cp.z*(1.0-co.z));\n        lineglow += smoothstep( 0.4, 1.0, (1.0-uv.y)*     uv.x )*(1.0-cp.w*(1.0-co.w));\n        \n        vec3 linCol = 2.0*vec3(5.0,0.6,0.0);\n        linCol *= (0.5+0.5*occ)*(0.25+sha);\n        lin += 3.0*lineglow*linCol;\n        \n        col = col*lin;\n        col += 8.0*linCol*vec3(1.0,2.0,3.0)*(1.0-www);//*(0.5+1.0*sha);\n        col += 0.1*lineglow*linCol;\n        col *= min(0.1,exp( -0.07*t ));\n    \n        // blend to black & white       \n        vec3 col2 = vec3(1.3)*(0.5+0.5*nor.y)*occ*www*(0.9+0.1*vvv)*exp( -0.04*t );;\n        float mi = sin(-1.57+0.5*iGlobalTime);\n        mi = smoothstep( 0.90, 0.95, mi );\n        col = mix( col, col2, mi );\n    }\n\n    // gamma    \n    col = pow( col, vec3(0.45) );\n\n    col = clamp( col, 0.0, 1.0 );\n\n    // vignetting   \n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    \n    gl_FragColor = vec4( col, 1.0 );\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}