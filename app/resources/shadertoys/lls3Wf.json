{"Shader":{"ver":"0.1","info":{"id":"lls3Wf","date":"1425908996","viewed":958,"name":"Pseudo Knightyan","username":"eiffie","description":"An homage to Knighty.","likes":18,"published":3,"flags":0,"tags":["godrays","knighty","volumelight","pseudokleinian"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/pseudo knightyan by eiffie\n\/\/I have been watching knighty put together a fine render engine here:\n\/\/http:\/\/www.fractalforums.com\/fragmentarium\/updating-of-de-raytracer\/\n\/\/but because I dropped a pc on my fast graphics card I was unable to make a video\n\/\/of it :) so I went this route and made a fake.\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nvec3 mcol=vec3(-1.0);\nmat2 rmx;\nint rotater=-1;\nfloat DE(vec3 p){\/\/knighty's pseudo kleinian\n\tconst vec3 CSize = vec3(0.63248,0.78632,0.875);\n\tfloat DEfactor=1.;\n\tfor(int i=0;i<5;i++){\n\t\tif(i==rotater)p.xy=p.xy*rmx;\n\t\tp=2.*clamp(p, -CSize, CSize)-p;\n\t\tfloat k=max(0.70968\/dot(p,p),1.);\n\t\tp*=k;DEfactor*=k;\n\t}\n\tif(mcol.r>=0.0)mcol+=abs(p);\n\tfloat rxy=length(p.xy);\n\treturn max(rxy-0.92784, abs(rxy*p.z) \/ length(p))\/DEfactor;\n}\nvec3 Normal(in vec3 p, in float px){\n\tvec2 v=vec2(px*0.1,0.0);\n\tvec3 n=normalize(vec3(DE(p+v.xyy)-DE(p-v.xyy),DE(p+v.yxy)-DE(p-v.yxy),DE(p+v.yyx)-DE(p-v.yyx)));\n\treturn (n==n)?n:vec3(0.0);\n}\nfloat randSeed;\nvoid randomize(vec2 c){randSeed=fract(sin(dot(c,vec2(113.421,17.329)))*3134.1234);}\nfloat rand(){return fract(sin(randSeed++)*3143.45345);}\nvec3 path(float tyme){return vec3(cos(tyme),sin(tyme),-0.65+abs(sin(tyme*0.7))*0.25)*(2.0+sin(tyme*1.7)*0.5)+vec3(0.0,0.0,1.0);}\nvec4 scene(vec3 ro, vec3 rd, float pathSlider, float tyme, float pxl) {\n\trandomize(gl_FragCoord.xy+tyme);\n\tvec3 LP=path(tyme+1.0),p;\n\tLP.z+=pathSlider;\n\tro.z-=pathSlider;\n\tfloat d=DE(ro)*0.8,t=d*rand(),nt=d,od=1.0,ft=0.0;\/\/t=totalDist,nt=nextDistForRealDECheck,od=lastDist,ft=fogStepDist\n\tvec4 col=vec4(0.0,0.0,0.0,1.0);\n\tvec4 am,tm=vec4(-1.0);\/\/stacks for hit alphas and dists\n\tfor(int i=0;i<99;i++){\n\t\t\/\/t+=d=DE(ro+rd*t);if(t>20.0 || d<0.001)break;\n\t\tif(nt>t+ft){\/\/prepare for fog step\n\t\t\tp=ro+rd*(t+ft);\n\t\t\tp+=(LP-p)*(-p.z)\/(LP.z-p.z);\/\/sample the point on the plane z=0\n\t\t}else{\/\/regular march \n\t\t\tp=ro+rd*t;\n\t\t}\n\t\td=DE(p);\n\t\tif(nt>t+ft){\/\/step thru the fog and light it up\n\t\t\tfloat dL=0.05*length(ro+rd*(t+ft)-LP);\/\/how far we step is based on distance to light\n\t\t\tcol.rgb+=col.a*vec3(1.0,1.0,0.7)*exp(-dL*40.0)*smoothstep(0.0,0.01,d);\n\t\t\tif(t+ft+dL>nt){\n\t\t\t\tft=0.0;\n\t\t\t\tt=nt;\n\t\t\t\tif(t>20.0)break;\n\t\t\t}else ft+=dL;\n\t\t}else{\/\/save edge samples and march\n\t\t\tif(d<od && tm.w<0.0){\n\t\t\t\tfloat alpha=clamp(d\/(pxl*t),0.0,1.0); \n\t\t\t\tif(alpha<0.95){\n\t\t\t\t\tam=vec4(alpha,am.xyz);tm=vec4(t,tm.xyz);\n\t\t\t\t\tcol.a*=alpha;\n\t\t\t\t}\n\t\t\t}\n\t\t\tod=d;\n\t\t\tnt=t+d*(0.6+0.2*rand());\n\t\t}\n\t}\n\tvec3 tcol=vec3(0.0);\n\tfor(int i=0;i<4;i++){\/\/now surface lighting from the saved stack of hits\n\t\tif(tm.x<0.0)continue;\n\t\tmcol=vec3(0.0);\n\t\tp=ro+rd*tm.x;\n\t\tvec3 N=Normal(p,pxl*tm.x),L=LP-p,scol;\n\t\tmcol=sin(mcol)*0.3+vec3(0.8,0.6,0.4);\n\t\tfloat ls=exp(-dot(L,L)*0.2);\n\t\tp+=L*(-p.z)\/L.z;\n\t\tL=normalize(L);\n\t\tscol=ls*mcol*max(0.0,dot(N,L));\n\t\tfloat v=max(0.0,dot(N,-rd));\n\t\tscol+=exp(-t)*mcol*v;\n\t\td=smoothstep(0.0,0.005,DE(p));\n\t\tscol+=ls*vec3(2.0,2.0,1.7)*max(0.0,dot(N,L))*d;\n\t\tif(rd.z<0.0 && d>0.0)scol+=ls*vec3(4.0,3.0,1.4)*pow(max(0.0,dot(reflect(rd,N),L)),5.0)*(1.0-0.25*v)*d;\n\t\ttcol=mix(scol,tcol,am.x);\n\t\tam=am.yzwx;tm=tm.yzwx;\n\t}\n\tcol.rgb=clamp(col.rgb+tcol,0.0,1.0);\n\treturn vec4(col.rgb,t);\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,0.0,1.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvoid SetCamera(inout vec3 ro, inout vec3 rd, inout float pathSlider,float tyme, vec2 uv){\n\tro=path(tyme);\n\tvec3 ta=path(tyme+0.2);ta.z+=0.1;\n\trd=lookat(ta-ro)*normalize(vec3(uv,1.0));\n\ttyme=mod(tyme,18.85);\n\trmx=mat2(cos(tyme),sin(tyme),-sin(tyme),cos(tyme));\n\trotater=5-int(tyme\/3.1416);\n\tpathSlider=1.0;\n\tif(rotater==0)pathSlider=cos((tyme-15.707)*2.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv=(2.0*fragCoord.xy-iResolution.xy)\/iResolution.y;\n\tvec3 ro,rd;\n\tfloat pathSlider;\n\tSetCamera(ro,rd,pathSlider,iGlobalTime*0.125,uv);\n\tvec4 scn=scene(ro,rd,pathSlider,iGlobalTime*0.125,3.0\/iResolution.y);\n\tfragColor = vec4(scn.rgb,1.0);\n}\n","name":"","description":"","type":"image"}]}}