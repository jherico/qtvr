{"Shader":{"ver":"0.1","info":{"id":"4scGWj","date":"1452176909","viewed":318,"name":"Electro","username":"sqrt_1","description":"Port of Humus Electro demo http:\/\/humus.name\/index.php?page=3D&ID=35","likes":8,"published":3,"flags":0,"tags":["noise","lightning","electricity"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Port of Humus Electro demo http:\/\/humus.name\/index.php?page=3D&ID=35\n\/\/ Not exactly right as the noise is wrong, but is the closest I could make it.\n\/\/ Uses Simplex noise by Nikita Miropolskiy https:\/\/www.shadertoy.com\/view\/XsX3zB\n\n\/* Simplex code license\n * This work is licensed under a \n * Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n * http:\/\/creativecommons.org\/licenses\/by-nc-sa\/3.0\/\n *  - You must attribute the work in the source code \n *    (link to https:\/\/www.shadertoy.com\/view\/XsX3zB).\n *  - You may not use this work for commercial purposes.\n *  - You may distribute a derivative work only under the same license.\n *\/\n\n\n\/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 *\/\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n\/* skew constants for 3d simplex functions *\/\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n\/* 3d simplex noise *\/\nfloat simplex3d(vec3 p) {\n\t \/* 1. find current tetrahedron T and it's four vertices *\/\n\t \/* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices *\/\n\t \/* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*\/\n\t \n\t \/* calculate s and x *\/\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t \/* calculate i1 and i2 *\/\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t \/* x1, x2, x3 *\/\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t \/* 2. find four surflets and store them in d *\/\n\t vec4 w, d;\n\t \n\t \/* calculate surflet weights *\/\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t \/* w fades from 0.6 at the center of the surflet to 0.0 at the margin *\/\n\t w = max(0.6 - w, 0.0);\n\t \n\t \/* calculate surflet components *\/\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t \/* multiply d by w^4 *\/\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t \/* 3. return the sum of the four surflets *\/\n\t return dot(d, vec4(52.0));\n}\n\nfloat noise(vec3 m) {\n    return   0.5333333*simplex3d(m)\n\t\t\t+0.2666667*simplex3d(2.0*m)\n\t\t\t+0.1333333*simplex3d(4.0*m)\n\t\t\t+0.0666667*simplex3d(8.0*m);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = fragCoord.xy \/ iResolution.xy;    \n  uv = uv * 2. -1.;  \n \n  vec2 p = fragCoord.xy\/iResolution.x;\n  vec3 p3 = vec3(p, iGlobalTime*0.4);    \n    \n  float intensity = noise(vec3(p3*12.0+12.0));\n                          \n  float t = clamp((uv.x * -uv.x * 0.16) + 0.15, 0., 1.);                         \n  float y = abs(intensity * -t + uv.y);\n    \n  float g = pow(y, 0.2);\n                          \n  vec3 col = vec3(1.70, 1.48, 1.78);\n  col = col * -g + col;                    \n  col = col * col;\n  col = col * col;\n                          \n  fragColor.rgb = col;                          \n  fragColor.w = 1.;  \n}\n\n\/* Origial shader and setup source\n\n!!ARBfp1.0\n\nOUTPUT output = result.color;\nTEMP glow, turb, y, t, mid;\n\nPARAM glowFallOff = 0.2;\nPARAM color = { 1.70, 1.48, 1.78, 0 };\n\nTEX\t\tturb, fragment.texcoord[0], texture[0], 3D;\nMAD\t\tturb.x, turb.x, 2, -1;\n\nMAD_SAT\tt.x, fragment.texcoord[1].y, -fragment.texcoord[1].y, 0.15;\n\nMAD\t\ty, turb.x, -t.x, fragment.texcoord[1].x;\nABS\t\ty, y;\n\nPOW\t\tglow.x, y.x, glowFallOff.x;\nMAD\t\tglow, -glow.x, color, color;\nMUL\t\tglow, glow, glow;\nMUL\t\toutput, glow, glow;\n\nEND \n*\/\n\n\/*\n\tfloat z = currTime * 0.8f;\n\tfloat y = z * 1.82f;\n\n\tglBegin(GL_TRIANGLE_STRIP);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  1, -0.4f);\n\t\tglVertex2f(-1,  1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  1, 0.4f);\n\t\tglVertex2f( 1,  1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y,     z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  0, -0.4f);\n\t\tglVertex2f(-1,  0);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y,     z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB,  0, 0.4f);\n\t\tglVertex2f( 1,  0);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB, -1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB, -1, -0.4f);\n\t\tglVertex2f(-1, -1);\n\t\tglMultiTexCoord3fARB(GL_TEXTURE0_ARB,  1, y - 1, z);\n\t\tglMultiTexCoord2fARB(GL_TEXTURE1_ARB, -1, 0.4f);\n\t\tglVertex2f( 1, -1);\n\tglEnd();\n\n*\/","name":"","description":"","type":"image"}]}}