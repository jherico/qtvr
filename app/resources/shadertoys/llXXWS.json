{"Shader":{"ver":"0.1","info":{"id":"llXXWS","date":"1439361074","viewed":773,"name":"steranko eyeball","username":"racarate","description":"patterns from http:\/\/www.gdcvault.com\/play\/1015493\/Technical-Artist-Boot (p. 314)<br\/>snoise from github<br\/>fbm from iq","likes":2,"published":3,"flags":0,"tags":["practice"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  \/\/ (3.0-sqrt(3.0))\/6.0\n                      0.366025403784439,  \/\/ 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  \/\/ -1.0 + 2.0 * C.x\n                      0.024390243902439); \/\/ 1.0 \/ 41.0\n\/\/ First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\/\/ Other corners\n  vec2 i1;\n  \/\/i1.x = step( x0.y, x0.x ); \/\/ x0.x > x0.y ? 1.0 : 0.0\n  \/\/i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  \/\/ x0 = x0 - 0.0 + 0.0 * C.xx ;\n  \/\/ x1 = x0 - i1 + 1.0 * C.xx ;\n  \/\/ x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n\/\/ Permutations\n  i = mod289(i); \/\/ Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\/\/ Gradients: 41 points uniformly over a line, mapped onto a diamond.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n\/\/ Normalise gradients implicitly by scaling m\n\/\/ Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n\/\/ Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n\nfloat t = iGlobalTime;\n\/\/mat2 m = mat2( 0.8+0.1*t, 0.6-t, -0.6+0.010*t, 0.8+0.4*t );\nmat2 m = mat2( 0.8, 0.6, -0.6, 0.8 );\n\nfloat fbm( vec2 p )\n{\n\tfloat f = 0.0;\n    f += 0.5000*snoise( p ); p*=m*2.02;\n    f += 0.2500*snoise( p ); p*=m*2.05;\n    f += 0.1250*snoise( p ); p*=m*2.03;\n    f += 0.0625*snoise( p ); p*=m*2.01;\n    f \/= 0.9375;\n    return f;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{         \n\tconst float PI = 3.14159265;\n    \n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n\n    \/\/ background gradient colors\n\tvec3 start = vec3(0.7, 0.7, 0.4);\n    vec3 end = vec3(0.0);\n    \n    \/\/ fix apsect ratio or something\n    p.x *= iResolution.x \/ iResolution.y;\n    \n    \/\/ pixel distance from center of screen\n    float dist = dot(p, p);    \n   \tfloat r = sqrt( dist );\n\n    \/\/ used for falloff in pow(X)\n    float falloff = 1.0;\n    \n\t\/\/ domain distortion???\n    p *= vec2(t,2.0*t);\n    \n    \/\/ radial gradient\n    float blend = (PI + atan(p.y, p.x)) \/ (2.0*PI);\n    blend = pow(blend, falloff);\n    \n    float freq1 = 10.0 *2.0*PI;\n    float freq2 = 20.0 *2.0*PI;\n    \n    \/\/ sine-pulsed radial\n    float wave = (sin(freq1*(blend - 0.05*t)) + 1.0) * 0.5;\n\twave      += (sin(freq2*(blend + 0.1*t)) + 1.0) * 0.5; \n    \n\tp \/= vec2(t,2.0*t);\n    \n\t\/\/ domain distortion???\n    p *= 0.2*abs(sin(0.1*t))*fbm(p);\n    \n    \/\/ break up radial shafts with sine-pulsed sphere gradient\n    blend = dot(p,p);\n    wave += 0.1*(sin(freq1*(blend + t)) + 1.0) * 0.5;\n    \n    \/\/ throw in some sine-pulsed fbm\n    blend = fbm(0.05*p);\n    wave += (sin(freq2*(blend + 0.1*t)) + 1.0) * 0.5;    \n    vec3 col = mix(start, end, wave);\n    \n    \/\/ domain distortion\n    \n    r -= fbm(vec2(r,0.1*t));\n    r += sin(p.x+0.1*t);\n    r -= sin(p.y+0.1*t);\n\tr += dot(r,wave);\n\tr -= dot(wave, 0.01*r);\n\tr -= fbm(vec2(r,0.09*t));\n    r *= p.y*t;\n\tr *= 10.0*sin(p.x+0.9*t);\n\t\n    \n    \/\/ a circle made of fbm \n    if ( r<10.0*(sin(t)*0.5) )\n    {\n     \tcol = vec3(1.0, 0.6, 0.3);   \n        col += 0.9 * fbm( p + 0.05*t);\n        col = pow(col, 1.0 - 0.5*vec3(sin(0.01*t)));\n    }\n\t\n    col = pow(col, vec3(2.2));\n    \n\tfragColor = vec4(col, 1.0);\n}","name":"","description":"","type":"image"}]}}