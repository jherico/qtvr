{"Shader":{"ver":"0.1","info":{"id":"Ml2XRW","date":"1442156224","viewed":900,"name":"Subo Glacius","username":"aiekick","description":" Subo Glacius (Under The Ice in latin)<br\/>The X axis of the mouse can be used for translate on x the camera ","likes":10,"published":3,"flags":0,"tags":["terrain","ice","voronesque","submarine"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015 (twitter:@aiekick)\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n    \n\/* Subo Glacius (Under The Ice in latin)\nI use the famous voronesque func from shane and a texture to displace a plane.\nI have also returned the camera and add a basic fog to the end processing\nThe X axis of the mouse can be used for translate on x the camera \nenjoy :)\n*\/\n\nconst vec2 RMPrec = vec2(.2, 0.01); \nconst vec2 DPrec = vec2(0.01, 50.); \n\nconst vec3 IceColor = vec3(0,.38,.47);\nconst vec3 DeepColor = vec3(0,.02,.15);\n\n\/\/ by shane from https:\/\/www.shadertoy.com\/view\/4lSXzh\nfloat Voronesque( in vec3 p )\n{\n    vec3 i  = floor(p + dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    vec3 i1 = step(0., p-p.yzx), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    vec3 rnd = vec3(7, 157, 113); \n    vec4 v = max(0.5 - vec4(dot(p, p), dot(p1, p1), dot(p2, p2), dot(p3, p3)), 0.);\n    vec4 d = vec4( dot(i, rnd), dot(i + i1, rnd), dot(i + i2, rnd), dot(i + 1., rnd) ); \n    d = fract(sin(d)*262144.)*v*2.; \n    v.x = max(d.x, d.y), v.y = max(d.z, d.w); \n    return max(v.x, v.y);\n}\n\nvec2 map(vec3 p)\n{\n\tfloat voro = Voronesque(p);\n\tfloat tex = texture2D(iChannel1, p.xz\/200.).r*12.;\n\treturn vec2(p.y - tex + voro, 0.);\n}\n\nvec3 nor( vec3 pos, float prec )\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t\tmap(pos+e.xyy).x - map(pos-e.xyy).x,\n\t\tmap(pos+e.yxy).x - map(pos-e.yxy).x,\n\t\tmap(pos+e.yyx).x - map(pos-e.yyx).x );\n    return normalize(n);\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u =  normalize(cross(cu, rov));\n    vec3 v =  normalize(cross(rov, u));\n    vec3 rd = normalize(rov + u*uv.x + v*uv.y);\n    return rd;\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n    vec2 si = iResolution.xy;\n   \tvec2 uv = (g+g-si)\/min(si.x, si.y);\n    vec3 cu = vec3(0,-1,0);\n    vec3 ro = vec3(-10., 10., iGlobalTime);\n\tvec3 cv = vec3(0,0,.08); \n    \n    if (iMouse.z>0.) ro.x = -20.*iMouse.x\/si.x;\n    \n   \tfloat vy = map(ro + cv).x;\/\/ cam h\n    \n    \/\/ smooth cam path\n\tconst int smoothIter = 8;\n\tfor (int i=0;i<smoothIter;i++)\n\t\tvy += map(ro + cv * float (i)).x;\n    vy \/= float(smoothIter);\n    \n\tro.y -= vy * .78;\n    \n    vec3 rd = cam(uv, ro, cu, ro + cv);\n\t\n    vec3 d = vec3(0.);\n    vec3 p = ro+rd*d.x;\n\tfloat sgn = sign(map(p).x);\n    vec2 s = vec2(DPrec.y,0.);\n\t\n    for(int i=0;i<150;i++)\n\t{      \n\t\tif(s.x<DPrec.x||s.x>DPrec.y) break;\n        s = map(p);\n\t\ts.x *= (s.x>DPrec.x?RMPrec.x:RMPrec.y) * sgn;\n\t\td.x += s.x;\n        p = ro+rd*d.x;\n   \t}\n\n\tif (d.x<DPrec.y)\n\t{\n\t\tvec3 n = nor(p, .1);\n\t\tf.rgb = textureCube(iChannel0, \tn).rgb*.2;\/\/ some reflect\n\t\t\n\t\tif ( s.y < 1.5) \/\/ icy color\n        {\n\t\t\trd = reflect(rd, n);\n\t\t\tp += rd*d.x;\t\t\n\t\t\td.x += map(p).x * RMPrec.x;\n\t\t\tf.rgb += exp(-d.x \/ IceColor \/ 10.);\n\t\t}\n   \t}\n\t\n\tf = mix( f, vec4(DeepColor, 1.), 1.0 - exp( -d.x\/3.) ); \/\/ fog\n}\n\n","name":"","description":"","type":"image"}]}}