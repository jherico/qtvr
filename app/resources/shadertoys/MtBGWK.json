{"Shader":{"ver":"0.1","info":{"id":"MtBGWK","date":"1432378260","viewed":796,"name":"Anti menger Sphere Sponge","username":"ManuManu","description":"In order to better understand the what was happening in the sphere sponge  (from IQ, I think), I reversed holes and fill parts.<br\/><br\/>Made on GlSlSandbox here :http:\/\/glslsandbox.com\/e#25180.1<br\/><br\/>","likes":4,"published":3,"flags":0,"tags":["raymarchingspheresponge"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\/\/---------------------------------------------------------\n\/\/ Shader:   RayMarchingPrimitivesV2.glsl\n\/\/ original: https:\/\/www.shadertoy.com\/view\/Xds3zN   colored\n\/\/           http:\/\/glslsandbox.com\/e#20839          gray scaled\n\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ A list of usefull distance function to simple primitives (animated), and an example \n\/\/ on how to \/ do some interesting boolean operations, repetition and displacement.\n\/\/ More info here: http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\/\/---------------------------------------------------------\n\n#ifdef GL_ES\nprecision highp float;\n#endif \n\n\/\/---------------------------------------------------------\n\n#define ANIMATE true\n#define ROTATE true\n#define flag true\n\nfloat aTime = 0.0;\nfloat sinTime = 0.0;\n\/\/---------------------------------------------------------\nvec3 rotateX(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(p.x, ca * p.y - sa * p.z, sa * p.y + ca * p.z);\n}\nvec3 rotateY(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x + sa * p.z, p.y, -sa * p.x + ca * p.z);\n}\nvec3 rotateZ(vec3 p, float a)\n{\n  float sa = sin(a);\n  float ca = cos(a);\n  return vec3(ca * p.x - sa * p.y, sa * p.x + ca * p.y, p.z);\n}\n\n\/\/---------------------------------------------------------\nfloat length2( vec2 p )  \/\/ sqrt(x^2+y^2) \n{\n  return sqrt( p.x*p.x + p.y*p.y );\n}\n\nfloat length6( vec2 p )  \/\/ (x^6+y^6)^(1\/6)\n{\n  p = p*p*p; \n  p = p*p;\n  return pow( p.x + p.y, 1.0\/6.0 );\n}\n\nfloat length8( vec2 p )  \/\/ (x^8+y^8)^(1\/8)\n{\n  p = p*p; \n  p = p*p; \n  p = p*p;\n  return pow( p.x + p.y, 1.0\/8.0 );\n}\n\n\/\/---------------------------------------------------------\n\/\/  primitives\n\/\/---------------------------------------------------------\nfloat sdPlane( vec3 p )\n{\n  return p.y;\n}\n\nfloat sdSphere( vec3 p, float radius )\n{\n  return length(p) - radius;\n}\n\nfloat sdWaveSphere(vec3 p, float radius, int waves, float waveSize) \n{\n  \/\/ deformation of radius\n  float d = waveSize*(radius-length(p.y));\n\/\/  float d = waveSize*(radius*radius-(p.y*p.y));\n  radius += d * cos(atan(p.x,p.z) * float(waves));\n  return length(p) - radius;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x, max(d.y, d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat udRoundBox( vec3 p, vec3 b, float r )\n{\n  return length(max(abs(p)-b, 0.0))-r;\n}\n\n\/\/ t.x = torus radius,  t.y = ring radius\nfloat sdTorus( vec3 p, vec2 t )\n{\n  return length(vec2(length(p.xz)-t.x, p.y)) - t.y;\n}\n\nfloat sdTorus82( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length2(p.xz)-t.x, p.y);\n  return length8(q) - t.y;\n}\n\nfloat sdTorus88( vec3 p, vec2 t )\n{\n  vec2 q = vec2(length8(p.xz)-t.x, p.y);\n  return length8(q)-t.y;\n}\n\nfloat sdBlob (in vec3 pos, in float r)\n{\n  vec3 v1 = pos * 6.0;\n  return 0.05*(r + 0.5* (length(dot(v1, v1)) -0.51*(cos(4.*v1.x) +cos(4.*v1.y) +cos(4.*v1.z))));\n}\n\n\/\/ Capsule:  a,b = end points, r = cylinder radius\nfloat sdCapsule( vec3 p, vec3 a, vec3 b, float r )\n{\n  vec3 pa = p-a, ba = b-a;\n  float h = clamp( dot(pa, ba)\/dot(ba, ba), 0.0, 1.0 );\n  return length( pa - ba*h ) - r;\n}\n\n\/\/ Triangle prism: \nfloat sdTriPrism( vec3 p, float radius, float height )\n{\n  vec3 q = abs(p);\n  #ifdef flag\n    return max(q.z-height, max(q.x*0.866025 +p.y*0.5, -p.y) - radius*0.5);\n  #else\n    float d1 = q.z-height;\n    float d2 = max(q.x*0.866025+p.y*0.5, -p.y) - radius*0.5;\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.0);\n  #endif\n}\n\n\/\/ hexagonal prism:r \nfloat sdHexPrism( vec3 p, float radius, float height)\n{\n  vec3 q = abs(p);\n  #ifdef flag\n    return max(q.z-height, max((q.x*0.866025 +q.y*0.5), q.y) - radius);\n  #else\n    float d1 = q.z-heighty;\n    float d2 = max((q.x*0.866025 +q.y*0.5), q.y)-radius;\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.);\n  #endif\n}\n\nfloat sdCylinder( vec3 p, vec2 h )\n{\n  vec2 d = abs(vec2(length(p.xz), p.y)) - h;\n  return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 h )\n{\n  return length(p.xz - h.xy) - h.z;\n}\n\/\/ h.xy = base rectangle size,  h.z = height\nfloat sdCylinder6( vec3 p, vec3 h )\n{\n  return max( length6(p.xz) - h.x, abs(p.y) - h.z );\n}\n\nfloat sdCone( in vec3 p, in vec3 c )\n{\n  vec2 q = vec2( length(p.xz), p.y );\n  #if 0\n    return max( max( dot(q, c.xy), p.y), -p.y -c.z );\n  #else\n    float d1 = -p.y - c.z;\n    float d2 = max( dot(q, c.xy), p.y);\n    return length(max(vec2(d1, d2), 0.0)) + min(max(d1, d2), 0.);\n  #endif\n}\n\n\/\/----------------------------------------------------------------------\n\/\/ distance operations\n\/\/----------------------------------------------------------------------\n\n\/\/ Substraction: d1 -d2\nfloat opS( float d1, float d2 )\n{\n  return max(-d2, d1);\n}\n\n\/\/ Union: d1 +d2\nvec2 opU( vec2 d1, vec2 d2 )\n{\n  return (d1.x < d2.x) ? d1 : d2;\n}\n\n\/\/----------------------------------------------------------------------\n\/\/ domain operations\n\/\/----------------------------------------------------------------------\n\n\/\/ Repetition: \nvec3 opRep( vec3 p, vec3 c )\n{\n  return mod(p, c)-0.5*c;\n}\n\n\/\/ Twist: \nvec3 opTwist( vec3 p, float angle )\n{\n  float  c = cos(10.0*p.y + angle);\n  float  s = sin(10.0*p.y + angle);\n  mat2   m = mat2(c, -s, s, c);\n  return vec3(m*p.xz, p.y);\n}\n\n\/\/----------------------------------------------------------------------\n\/\/ sphere cutted out from a rounded box\n\/\/----------------------------------------------------------------------\nfloat sdBoxMinusSphere( in vec3 pos, in float radius )\n{\n  return opS( udRoundBox( pos, vec3(0.15), 0.05)\n            , sdSphere(   pos, radius - 0.012 + 0.02*sinTime));\n}\n\/\/----------------------------------------------------------------------\n\/\/ rack-wheel with holes\n\/\/----------------------------------------------------------------------\nfloat sdRackWheel( in vec3 pos)\n{\n  return opS(sdTorus82(  pos-vec3(-2.0, 0.2, 0.0), vec2(0.20, 0.1)), \n             sdCylinder( opRep( vec3(atan(pos.x+2.0, pos.z)\/6.2831 + 0.1*aTime, \n                                     pos.y, \n                                     0.02+0.5*length(pos-vec3(-2.0, 0.2, 0.0))), \n                                vec3(0.05, 1.0, 0.05)\n\t\t\t\t\t\t\t   )\n                          , vec2(0.02, 0.6)\n\t\t\t           )\n\t\t    );\n}\n\/\/----------------------------------------------------------------------\nfloat sdBallyBall( in vec3 pos)\n{\n  return 0.7 * sdSphere(pos, 0.2 ) \n         + 0.03*sin(50.0*pos.x)*sin(50.0*pos.y+8.0*aTime)*sin(50.0*pos.z);\n}\n\/\/----------------------------------------------------------------------\nfloat sdTwistedTorus( in vec3 pos, float angle)\n{\n  return 0.5*sdTorus( opTwist(pos,angle), vec2(0.20, 0.05));\n}\n\/\/----------------------------------------------------------------------\n\/\/ animated fractal Anti sphere sponge\nfloat AntiSphereSponge(vec3 w)\n{\n  const int ITER = 10;\n  float sphereHoles = 8.0 + 5.*sin(0.4123*aTime);\n  float sphereScale = 1.5 + 0.2*sin(0.345*aTime);\n  float scale = 1.5;\n  float k = scale*.5;\n  float d = 10000.0;\n  float r, d1;\n  float sph=length(w * vec3(0.8, 0.8, 0.5)) - 0.6 ;\n  \n  if ( sph < .1)\n  for (int i = 0; i < ITER; i++) \n  {\n    vec3 zz = mod(w * k, sphereHoles) - vec3(0.5 * sphereHoles);\n    r = length(zz);\n    d1 = -(sphereScale - r) \/ k;\n    k *= scale;\n    d = min(d, d1);\n  }\n\telse d = 0.;\n  d = max(d,sph);\n  return d;\n}\n\/\/----------------------------------------------------------------------\nvec2 map( in vec3 pos )\n{\n  vec3 r1, r2;\n  float sphy = 0.35 + 0.1 * sinTime;\n  vec3 sp = pos - vec3( 1.0, sphy, 0.0);\n  vec2 res = vec2( sdPlane( pos), 1.0 );\n  float color = 46.9 + 40.0 * cos(0.2 * iGlobalTime);\n  res = opU(res,vec2(AntiSphereSponge(pos - vec3(0.0, 0.7, 0.0)), color));\n  return res;\n}\n\/\/----------------------------------------------------------------------\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n  float tmin = 1.0;\n  float tmax = 20.0;\n\n  #if 0\n    float tp1 = (0.0-ro.y) \/ rd.y; \n    if ( tp1>0.0 ) \n\t  tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)\/rd.y; \n    if ( tp2>0.0 ) \n    { \n      if ( ro.y>1.6 ) tmin = max( tmin, tp2 );\n      else            tmax = min( tmax, tp2 );\n    }\n  #endif\n\n  float precis = 0.002;\n  float t = tmin;\n  float m = -1.0;\n  for ( int i=0; i<50; i++ )\n  {\n    vec2 res = map( ro+rd*t );\n    if ( res.x<precis || t>tmax ) break;\n    t += res.x;\n    m = res.y;\n  }\n\n  if ( t>tmax ) m=-1.0;\n  return vec2( t, m );\n}\n\n\/\/----------------------------------------------------------------------\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n  float res = 1.0;\n  float t = mint;\n  for ( int i=0; i<14; i++ )\n  {\n    float h = map( ro + rd*t ).x;\n    res = min( res, 8.0*h\/t );\n    t += clamp( h, 0.02, 0.10 );\n    if ( h<0.001 || t>tmax ) break;\n  }\n  return clamp( res, 0.0, 1.0 );\n}\n\n\/\/----------------------------------------------------------------------\nvec3 calcNormal( in vec3 pos )\n{\n  vec3 eps = vec3( 0.001, 0.0, 0.0 );\n  vec3 nor = vec3(\n  map(pos+eps.xyy).x - map(pos-eps.xyy).x, \n  map(pos+eps.yxy).x - map(pos-eps.yxy).x, \n  map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n  return normalize(nor);\n}\n\n\/\/----------------------------------------------------------------------\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n  float occ = 0.0;\n  float sca = 1.0;\n  for ( int i=0; i<5; i++ )\n  {\n    float hr = 0.01 + 0.12*float(i) \/ 4.0;\n    vec3 aopos =  nor * hr + pos;\n    float dd = map( aopos ).x;\n    occ += -(dd-hr)*sca;\n    sca *= 0.95;\n  }\n  return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );\n}\n\/\/---------------------------------------------------------\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n  aTime = ANIMATE ? iGlobalTime : 0.0;\n  sinTime = sin(aTime);\n  vec3 col = vec3(0.8, 0.9, 1.0);\n  vec2 res = castRay(ro, rd);\n  float t = res.x;\n  float m = res.y;\n  if ( m > -0.5 )\n  {\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    vec3 ref = reflect( rd, nor );\n\n    \/\/ material        \n    col = 0.45 + 0.3*sin( vec3(0.05, 0.08, 0.10)*(m-1.0) );\n\n    if ( m<1.5 )\n    {\n      float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n      col = 0.4 + 0.1*f*vec3(1.0);\n    }\n\n    \/\/ lighting        \n    float occ = calcAO( pos, nor );\n    vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n    float amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x, 0.0, -lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y, 0.0, 1.0);\n    float dom = smoothstep( -0.1, 0.1, ref.y );\n    float fre = pow( clamp(1.0+dot(nor, rd), 0.0, 1.0), 2.0 );\n    float spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ), 16.0);\n\n    dif *= softshadow( pos, lig, 0.02, 2.5 );\n    dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n    vec3 brdf = vec3(0.0);\n    brdf += 1.20*dif*vec3(1.00, 0.90, 0.60);\n    brdf += 1.20*spe*vec3(1.00, 0.90, 0.60)*dif;\n    brdf += 0.30*amb*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.40*dom*vec3(0.50, 0.70, 1.00)*occ;\n    brdf += 0.30*bac*vec3(0.25, 0.25, 0.25)*occ;\n    brdf += 0.40*fre*vec3(1.00, 1.00, 1.00)*occ;\n    brdf += 0.02;\n    col = col*brdf;\n    col = mix( col, vec3(0.8, 0.9, 1.0), 1.0-exp( -0.005*t*t ) );\n  }\n  return vec3( clamp(col, 0.0, 1.0) ); \n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.0*(fragCoord.xy \/ iResolution.xy) - 1.0;\n  p.x *= iResolution.x \/ iResolution.y;\n\n  \/\/ camera  \n  float angle = ROTATE ? 0.02*iGlobalTime : 0.0;\n  float rx = 0.5 + 3.0*cos(angle + 6.0*iMouse.x);\n  float rz = 0.5 + 3.0*sin(angle + 6.0*iMouse.x);\n  vec3 ro = vec3( rx, 1.0 + 1.0*iMouse.y, rz );\n  vec3 ta = vec3( 0.0, 0.5, 0.0 );\n\n  \/\/ camera tx\n  vec3 cw = normalize( ta-ro );\n  vec3 cp = vec3( 0.0, 1.0, 0.0 );\n  vec3 cu = normalize( cross(cw, cp) );\n  vec3 cv = normalize( cross(cu, cw) );\n  vec3 rd = normalize( p.x*cu + p.y*cv + 3.0*cw );\n\n  \/\/ pixel color\n  vec3 col = render( ro, rd );\n  col = pow( col, vec3(0.4545) );\n  fragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}