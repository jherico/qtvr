{"Shader":{"ver":"0.1","info":{"id":"4ljSWK","date":"1446514703","viewed":543,"name":"2015\/11\/02","username":"hughsk","description":"More experiments <img src=\"\/img\/emoticonHappy.png\"\/>","likes":5,"published":3,"flags":0,"tags":["cubes","shiny","infinite","tropes"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec2 doModel(vec3 p);\n\nfloat gaussianSpecular_2_0(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta \/ shininess;\n  return exp(-w*w);\n}\n\nvec2 calcRayIntersection_3_1(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 125; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest * 0.75;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_3_1(vec3 rayOrigin, vec3 rayDir) {\n  return calcRayIntersection_3_1(rayOrigin, rayDir, 20.0, 1.);\n}\n\n\nvec3 calcNormal_4_2(vec3 pos, float eps) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps ).x +\n                    v2 * doModel( pos + v2*eps ).x +\n                    v3 * doModel( pos + v3*eps ).x +\n                    v4 * doModel( pos + v4*eps ).x );\n}\n\nvec3 calcNormal_4_2(vec3 pos) {\n  return calcNormal_4_2(pos, 0.002);\n}\n\nvec2 squareFrame_9_3(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy \/ screenSize.xy) - 1.0;\n  position.x *= screenSize.x \/ screenSize.y;\n  return position;\n}\n\n\n\nmat3 calcLookAtMatrix_11_4(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\n\n\n\nvec3 getRay_10_5(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay_10_5(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix_11_4(origin, target, 0.0);\n  return getRay_10_5(camMat, screenPos, lensLength);\n}\n\n\n\n\nvoid orbitCamera_5_6(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection,\n  in vec2 fragCoord\n) {\n  vec2 screenPos = squareFrame_9_3(screenResolution, fragCoord);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay_10_5(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\nhighp float random_6_13(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\n\n\/\/ Originally sourced from:\n\/\/ http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\nfloat sdBox_7_14(vec3 position, vec3 dimensions) {\n  vec3 d = abs(position) - dimensions;\n\n  return min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d, 0.0));\n}\n\n\n\nfloat fogFactorExp2_8_15(\n  const float dist,\n  const float density\n) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\n\n\n  \n#define rs(a) (a * 0.5 + 0.5)\n#define sr(a) (a * 2.0 - 1.0)\n  \nvec3 wrap(vec3 v, float n) {\n  return mod(v + n, n * 2.) - n;\n}\n\nvec3 wrapId(vec3 p, float v) {\n  return floor(p \/ v + 0.5) * v;\n}\n  \nvec3 fogColor = vec3(0.015, 0.09, 0.2).bgr;\n\n\/\/ http:\/\/www.neilmendoza.com\/glsl-rotation-about-an-arbitrary-axis\/\nmat4 rotationMatrix(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n              0.0,                                0.0,                                0.0,                                1.0);\n}\n\nfloat boxGrid(vec3 p, float l) {\n  vec3 idx = wrapId(p, l);\n  float idd = idx.y + idx.x + idx.z;\n  \n  p.xyz = wrap(p.xyz, l);\n  \n  vec3 dim = vec3(0.225);\n  \n  dim *= rs(sin(idd * 0.924 + iGlobalTime * 0.5)) * 0.5 + 0.5;\n  p.y += sin(iGlobalTime * 0.8 + idd * 43.43290432) * 0.065;\n  p.z += sin(iGlobalTime * 1.1 + idd * 93.43290432) * 0.065;\n  p.x += sin(iGlobalTime * 1.5 + idd * 23.43290432) * 0.065;\n  p = ((rotationMatrix(normalize(vec3(idx.xz, 1)), 1.5 * iGlobalTime + idd * 1.324)) * vec4(p, 1)).xyz;\n  \n  return sdBox_7_14(p, dim);\n}\n\nvec2 doModel(vec3 p) {\n  float id = 0.0;\n  \n  p.z += sin(p.y * 0.125) * 2.;\n  \n  float d1 = boxGrid(p, 1.5);\n  float d2 = d1;\n  \n  return vec2(min(d1, d2), id);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 color = fogColor;\n  vec3 ro, rd;\n  vec2 uv = fragCoord.xy \/ iResolution.xy * 2.0 - 1.;\n  \n  float rotation = sin(iGlobalTime * 0.2);\n  float height   = 10.5;\n  float dist     = 2.5;\n  orbitCamera_5_6(rotation, height, dist, iResolution.xy, ro, rd, fragCoord);\n\n  ro.y += iGlobalTime * 3.5;\n  \n  vec2 t = calcRayIntersection_3_1(ro, rd, 50.0, 0.035);\n  if (t.x > -0.5) {\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal_4_2(pos);\n    vec3 ang = vec3(0, 1, 0);\n    vec3 mat = vec3(0.9, 0.5, 0.3);\n    vec3 col = vec3(0.8, 0.7, 0.4);\n    \n    float diff = max(0.0, dot(nor, ang)) * 0.25;\n    float spec = gaussianSpecular_2_0(ang, -rd, nor, 0.38);\n    \n    color = vec3(col * mat * diff + spec * col);\n  }\n  \n  color = mix(clamp(color, vec3(0), vec3(1)), fogColor, fogFactorExp2_8_15(t.x, 0.04));\n  color *= 1.0 - dot(uv, uv) * 0.3 * vec3(1.05, 1.35, 1.2);\n  color = pow(color, vec3(0.7575));\n  color.b = smoothstep(-0.1, 0.9, color.b);\n  color = mix(color, color.rrr, 3.5);\n\n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}","name":"","description":"","type":"image"}]}}