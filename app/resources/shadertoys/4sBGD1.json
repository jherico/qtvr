{"Shader":{"ver":"0.1","info":{"id":"4sBGD1","date":"1387675116","viewed":2452,"name":"Fast balls","username":"iq","description":"Fast motion blurred spheres. Brute force motion blur, no cheats, no cleverness.","likes":31,"published":3,"flags":0,"tags":["3d","raytracing","grid","motionblur","mblur"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define VIS_SAMPLES 25\n\n\nfloat hash1( vec2  n ) { return fract(43758.5453123*sin(dot(n,vec2(1.0,113.0)))); }\nvec2  hash2( float n ) { return fract(43758.5453123*sin(vec2(n,n+1.0))); }\nvec3  hash3( vec2  n ) { return fract(43758.5453123*sin(dot(n,vec2(1.0,113.0))+vec3(0.0,1.0,2.0))); }\n\nvec4 castRay( in vec3 ro, in vec3 rd, in int num )\n{\n\tvec2 pos = floor(ro.xz);\n\tvec2 ri = 1.0\/rd.xz;\n\tvec2 rs = sign(rd.xz);\n\tvec2 ris = ri*rs;\n\tvec2 dis = (pos-ro.xz+ 0.5 + rs*0.5) * ri;\n\t\n\tvec4 res = vec4( -1.0, 0.0, 0.0, 0.0 );\n\t\n    \/\/ traverse regular grid (in 2D)\n\tfor( int i=0; i<12; i++ ) \n\t{\n\t\tif( i>num ) break;\/\/ continue;\n\t\t\n        \/\/ intersect sphere\n\t\tvec3  rr = hash3(pos);\n\t\tvec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n\t\tvec3  ce = vec3( pos.x+oo.x, 0.5, pos.y+oo.y );\n\t\tfloat ra = (0.5+0.5*rr.z)*min( min(oo.x,1.0-oo.x), min(oo.y,1.0-oo.y) );\n\t\tvec3  rc = ro - ce;\n\t\tfloat b = dot( rd, rc );\n\t\tfloat c = dot( rc, rc ) - ra*ra;\n\t\tfloat h = b*b - c;\n\t\tif( h>0.0 )\n\t\t{\n\t\t\tfloat s = -b - sqrt(h);\n\t\t\tres = vec4( s, 0.0, pos );\n\t\t\tbreak;\n\t\t}\n\n        \/\/ step to next cell\t\t\n\t\tvec2 mm = step( dis.xy, dis.yx ); \n\t\tdis += mm*ris;\n        pos += mm*rs;\n\t}\n\n\treturn res;\n}\n\nvec3 cameraPath( float t )\n{\n    vec2 p  = 200.0*sin( 0.01*t*vec2(1.2,1.0) + vec2(0.1,0.9) );\n\t     p += 100.0*sin( 0.02*t*vec2(1.1,1.3) + vec2(1.0,4.5) );\n\tfloat y = 4.0 + 2.0*sin(0.05*t);\n\n\treturn vec3( p.x, y, p.y );\n}\n\nconst vec3 bgcol = vec3(0.0);\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n\t\t\n\t\/\/ montecarlo\t\n\tvec3 tot = vec3(0.0);\n\tfor( int a=0; a<VIS_SAMPLES; a++ )\n\t{\n\t\tvec4 rr = texture2D( iChannel1, (fragCoord.xy+floor(256.0*hash2(float(a))))\/iChannelResolution[1].xy );\n        vec2 p = -1.0 + 2.0*(fragCoord.xy+rr.xz) \/ iResolution.xy;\n        p.x *= iResolution.x\/ iResolution.y;\n        float time = 16.0*(iGlobalTime + (0.5\/24.0)*rr.w);\n\n\t\t\/\/ camera\n        vec3  ro = cameraPath( time );\n        vec3  ta = cameraPath( time+5.0 ); ta.y = ro.y - 5.5;\n        float cr = 0.2*cos(0.1*time*0.5);\n        vec3  ww = normalize( ta - ro);\n        vec3  uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n        vec3  vv = normalize(cross(ww,uu));\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= (7.0-sqrt(37.5-11.5*r2))\/(r2+1.0);\n        vec3  rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        \/\/ dof\n        vec3 fp = ro + rd * 17.0;\n        ro += (uu*(-1.0+2.0*rr.y) + vv*(-1.0+2.0*rr.w))*0.05;\n        rd = normalize( fp - ro );\n\n        vec3 col = bgcol;\n\t\t\n\t    \/\/ trace bounding plane y=1\n\t\tfloat tp = (1.0-ro.y)\/rd.y;\n\t\tif( tp>0.0 )\n\t\t{\n\t\t\tro = ro + rd*tp;\n            float n = 1.0 - 1.0\/rd.y;\n\n            \/\/ trace spheres\t\t\t\n\t\t\tvec4 res  = castRay(  ro, rd, int(n) );\n\t\t\tfloat t = res.x;\n\t\t\tvec2 vos = res.zw;\n\t\t\tif( t>0.0 )\n\t\t\t{\n\t\t\t\tvec3  pos = ro + rd*t;\n\t\t\t\tfloat id  = hash1( vos );\n\t\t\t\tvec3  rr = hash3(vos);\n\t\t\t\tvec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n\t\t\t\tvec3  nor = normalize( fract(pos)-vec3(oo.x,0.5,oo.y) );\n\t\t\t\tcol = 0.5 + 0.45*sin( 3.1*id + 0.0+vec3(1.0,0.5,2.0) );\n\t\t\t\tcol *= (0.5+0.5*nor.y)* clamp( pos.y, 0.0, 1.0 );\n\t\t\t\tcol *= exp(-0.02*t*t);\n\t\t\t}\n\t\t}\n\t\ttot += col;\n\t}\n\ttot \/= float(VIS_SAMPLES);\n\t\n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.44) );\n\n\tfragColor = vec4( tot, 1.0 );\n}","name":"","description":"","type":"image"}]}}