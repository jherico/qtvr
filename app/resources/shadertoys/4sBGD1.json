{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4sBGD1",
				"date": "1387675116",
				"viewed": 1216,
				"name": "Fast balls",
				"username": "iq",
				"description": "Fast motion blurred spheres. Brute force motion blur, no cheats, no cleverness.",
				"likes": 21,
				"published": 3,
				"tags": 
				[
					"3d",
					"raytracing",
					"grid",
					"motionblur",
					"mblur"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 30,
							"src": "\/presets\/tex16.png",
							"ctype": "texture",
							"channel": 1
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#pragma vr\n\n#define VIS_SAMPLES 25\n\n\nfloat hash1( vec2  n ) { return fract(43758.5453123*sin(dot(n,vec2(1.0,113.0)))); }\nvec2  hash2( float n ) { return fract(43758.5453123*sin(vec2(n,n+1.0))); }\nvec3  hash3( vec2  n ) { return fract(43758.5453123*sin(dot(n,vec2(1.0,113.0))+vec3(0.0,1.0,2.0))); }\n\nvec4 castRay( in vec3 ro, in vec3 rd, in int num )\n{\n    vec2 pos = floor(ro.xz);\n    vec2 ri = 1.0/rd.xz;\n    vec2 rs = sign(rd.xz);\n    vec2 ris = ri*rs;\n    vec2 dis = (pos-ro.xz+ 0.5 + rs*0.5) * ri;\n    \n    vec4 res = vec4( -1.0, 0.0, 0.0, 0.0 );\n    \n    // traverse regular grid (in 2D)\n    for( int i=0; i<12; i++ ) \n    {\n        if( i>num ) break;// continue;\n        \n        // intersect sphere\n        vec3  rr = hash3(pos);\n        vec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n        vec3  ce = vec3( pos.x+oo.x, 0.5, pos.y+oo.y );\n        float ra = (0.5+0.5*rr.z)*min( min(oo.x,1.0-oo.x), min(oo.y,1.0-oo.y) );\n        vec3  rc = ro - ce;\n        float b = dot( rd, rc );\n        float c = dot( rc, rc ) - ra*ra;\n        float h = b*b - c;\n        if( h>0.0 )\n        {\n            float s = -b - sqrt(h);\n            res = vec4( s, 0.0, pos );\n            break;\n        }\n\n        // step to next cell        \n        vec2 mm = step( dis.xy, dis.yx ); \n        dis += mm*ris;\n        pos += mm*rs;\n    }\n\n    return res;\n}\n\nvec3 cameraPath( float t )\n{\n    vec2 p  = 200.0*sin( 0.01*t*vec2(1.2,1.0) + vec2(0.1,0.9) );\n         p += 100.0*sin( 0.02*t*vec2(1.1,1.3) + vec2(1.0,4.5) );\n    float y = 4.0 + 2.0*sin(0.05*t);\n\n    return vec3( p.x, y, p.y );\n}\n\nconst vec3 bgcol = vec3(0.0);\n\nvoid main( void )\n{\n    vec2 q = gl_FragCoord.xy / iResolution.xy;\n        \n    // montecarlo   \n    vec3 tot = vec3(0.0);\n    for( int a=0; a<VIS_SAMPLES; a++ )\n    {\n        vec4 rr = texture2D( iChannel1, (gl_FragCoord.xy+floor(256.0*hash2(float(a))))/iChannelResolution[1].xy );\n        vec2 p = -1.0 + 2.0*(gl_FragCoord.xy+rr.xz) / iResolution.xy;\n        p.x *= iResolution.x/ iResolution.y;\n        float time = 16.0*(iGlobalTime + (0.5/24.0)*rr.w);\n\n        // camera\n        vec3  ro = cameraPath( time );\n        vec3  ta = cameraPath( time+5.0 ); ta.y = ro.y - 5.5;\n        float cr = 0.2*cos(0.1*time*0.5);\n        vec3  ww = normalize( ta - ro);\n        vec3  uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n        vec3  vv = normalize(cross(ww,uu));\n        float r2 = p.x*p.x*0.32 + p.y*p.y;\n        p *= (7.0-sqrt(37.5-11.5*r2))/(r2+1.0);\n        vec3  rd = normalize(iDir); // normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n        // dof\n        vec3 fp = ro + rd * 17.0;\n        ro += (uu*(-1.0+2.0*rr.y) + vv*(-1.0+2.0*rr.w))*0.05;\n        rd = normalize( fp - ro );\n\n        vec3 col = bgcol;\n        \n        // trace bounding plane y=1\n        float tp = (1.0-ro.y)/rd.y;\n        if( tp>0.0 )\n        {\n            ro = ro + rd*tp;\n            float n = 1.0 - 1.0/rd.y;\n\n            // trace spheres            \n            vec4 res  = castRay(  ro, rd, int(n) );\n            float t = res.x;\n            vec2 vos = res.zw;\n            if( t>0.0 )\n            {\n                vec3  pos = ro + rd*t;\n                float id  = hash1( vos );\n                vec3  rr = hash3(vos);\n                vec2  oo = 0.5 + 0.3*(-1.0 + 2.0*rr.xy);\n                vec3  nor = normalize( fract(pos)-vec3(oo.x,0.5,oo.y) );\n                col = 0.5 + 0.45*sin( 3.1*id + 0.0+vec3(1.0,0.5,2.0) );\n                col *= (0.5+0.5*nor.y)* clamp( pos.y, 0.0, 1.0 );\n                col *= exp(-0.02*t*t);\n            }\n        }\n        tot += col;\n    }\n    tot /= float(VIS_SAMPLES);\n    \n    tot = pow( clamp(tot,0.0,1.0), vec3(0.44) );\n\n    gl_FragColor = vec4( tot, 1.0 );\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}