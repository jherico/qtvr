{"Shader":{"ver":"0.1","info":{"id":"Mtj3W1","date":"1428740660","viewed":719,"name":"Revision 2015 Livecoding Round 2","username":"mu6k","description":"Written under 25 minutes at Revision 2015 live-coding semifinals. I tried to adapt it by making as less modifications as possible. Put some music into iChannel0.","likes":4,"published":3,"flags":0,"tags":["3d","raymarching","livecoding"],"hasliked":0},"renderpass":[{"inputs":[{"id":19,"src":"\/presets\/mzk02.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/original at: ftp:\/\/ftp.scene.org\/pub\/parties\/2015\/revision15\/shadershowdown\/02a-musk.glsl\n\/\/#define LIGHT_REACT_TO_MUSIC\n\n#define v2Resolution iResolution.xy\n#define texFFTSmoothed iChannel0\n#define texFFT iChannel0\n#define fGlobalTime iGlobalTime\n#define out_color fragColor\n\n  float bt = texture2D(texFFTSmoothed, vec2(.01,.0)).x*1.0;\n\nfloat time = fGlobalTime;\n\n\/\/layout(location = 0) out vec4 out_color; \/\/ out_color must be written in order to see anything\n\nfloat rbox(vec3 p, vec3 b, float r)\n{\n  return length(max(abs(p)-b,.0))-r;\n}\n\nvec4 plas( vec2 v, float time )\n{\n  float c = 0.5 + sin( v.x * 10.0 ) + cos( sin( time + v.y ) * 20.0 );\n  return vec4( sin(c * 0.2 + cos(time)), c * 0.15, cos( c * 0.1 + time \/ .4 ) * .25, 1.0 );\n}\n\nfloat dft(vec3 p)\n{\n  \n  float a=time,cs=cos(a),ss=sin(a);\n  mat3 r0 = mat3(cs,ss,0,-ss,cs,0,0,0,1);\n\n\n  a=time,cs=cos(a),ss=sin(a);\n  mat3 r1 = mat3(cs,0,ss,0,1,0,-ss,0,cs);\n\n  p*=r0*r1;\n\n  p*=(1.0+bt*.1);\n  vec3 q = p;\n  p.x = abs(p.x)-.6;\n  p.x = abs(p.x)-.6;\n  \/\/return rbox(q,vec3(.5),.1);\n  return min(rbox(p,vec3(.5),.1),rbox(q+vec3(0,1.2,0),vec3(.5),.1));\n  return length(p)-1.0-bt*.1;\n}\n\nvec3 nft(vec3 p)\n{\n  vec2 e = vec2(.0,.001);\n  float d= dft(p);\n  return normalize(vec3(d+dft(p+e.yxx), d+dft(p+e.xyx), d+dft(p+e.xxy)));\n}\n\nfloat dfb(vec3 p)\n{\n  float d =1000.0;\n  p.x+=time*16.0;\n  p = mod(p+8.0,vec3(16.0))-8.0;\n  d = min(d, -(length(p)-9.1));\n \n  p = mod(p+4.0,vec3(8.0))-4.0;\n  d = max(d,\n -(length(p)-5.1)+sin(time)*.1);\n  return d;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = vec2(gl_FragCoord.x \/ v2Resolution.x, gl_FragCoord.y \/ v2Resolution.y);\n  uv -= 0.5;\n  uv \/= vec2(v2Resolution.y \/ v2Resolution.x, 1);\n\n  vec2 m;\n  m.x = atan(uv.x \/ uv.y) \/ 3.14;\n  m.y = 1.0 \/ length(uv) * .2;\n  float d = m.y;\n\n  float a=time*.6,cs=cos(a),ss=sin(a);\n  mat3 r0 = mat3(cs,ss,0,-ss,cs,0,0,0,1);\n\n\n  a=time*.4,cs=cos(a),ss=sin(a);\n  mat3 r1 = mat3(cs,0,ss,0,1,0,-ss,0,cs);\n\n\n  vec3 p = vec3(.0,.0,-8.0);\n  vec3 dir = normalize(vec3(uv,1.0));\n\n  p*=r0*r1;\n  dir*=r0*r1;\n  float i=0.0;\n\n  float td = 0.0;\n\n  for (int i=0; i<50; i++)\n  {\n    float d = min(dft(p),dfb(p));\n    td +=d;\n    p+=dir*d; \n  }\n\n  vec3 l = normalize(vec3(1,2,3));\n  vec3 col = (vec3(dft(p+l*.1)*2.5+.5));\n\n  if (dft(p)>dfb(p)){\n    col = vec3(i*.04)*.0;\n    col = (vec3(dfb(p+l*.1)*2.5+.5));\n    col *=4.0;\n    col *= mix(vec3(.3,.4,.9),vec3(.2,.4,.7), (uv.x-.5)*.5);\n  }\n  else\n  {\n    col*=vec3(9.0,3.0,1.0);\n    \/\/col *= bt*vec3(.5,4.0,.5);\n  }\n  \n  col \/= td;\n\n  col += length(col)*.5;\n  col -= length(uv)*.5;\n\n  float f = texture2D( texFFTSmoothed, vec2((uv.x-.5)*.5,.0) ).r * 5.0;\n  m.x += sin( fGlobalTime ) * 0.1;\n  m.y += fGlobalTime * 0.25;\n\n  vec4 t = plas( m * 3.14, fGlobalTime ) \/ d;\n  t = clamp( t, 0.0, 1.0 );\n\n  \n  out_color = vec4(col,1.0)+f*.1;\n}\n","name":"","description":"","type":"image"}]}}