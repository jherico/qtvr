{"Shader":{"ver":"0.1","info":{"id":"XtSSWK","date":"1446343151","viewed":480,"name":"Curve Derivative","username":"aiekick","description":"use mouse for set the x position of point<br\/>a study for finidng the up cam direction for a roller coaster like<br\/>this is a not finished work ^^ <a href=\"https:\/\/www.shadertoy.com\/view\/4tSSWK\"  class=\"regular\" target=\"_blank\">Roller Coaster<\/a> ^^","likes":5,"published":3,"flags":0,"tags":["curvederivative"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ Tuned via XShade (http:\/\/www.funparadigm.com\/xshade\/)\n\n\/*\nstudy on simple 2d curve for doing a first person camera in a roller coaster like in 3d:)\nhere an a reoller coaster like in study ^^\n\nthe goal is to have the cam up dir from a sin path from the use of derivative of the sin path\n\nequation for a line f(x) = a * x + b, the derivate is f'(x)\n\t\tsi the param for eq line is (a,b)\n\nequation for a tangeant line in point (i,j) is j = f'(i) * (x-i) + f(i)\n\t\tso the param for eq line is (a,b) = (f'(i),f'(i) * i + f(i))\n\nequation for a perpendicular line in point (i,j) is j = -1\/f'(i) * (x-i) + f(i)\n\t\tso the param for eq line is (a,b) = (-1\/f'(i),f'(i) * i + f(i))\n*\/\n\n#define uAmplitude 5.8\n#define uMouse iMouse\n#define uThick .004\n#define uZoom 20.\n#define uScreenSize iResolution.xy\n#define uTime iGlobalTime\n\nfloat cosFunc(float x, float k, float c){return cos(x\/k)*c;}\/\/ cos\nfloat cosFuncDer(float x, float k, float c){return -sin(x\/k)\/k*c;} \/\/ cos derivation\nfloat sinFunc(float x, float k, float c){return sin(x\/k)*c;}\/\/ sin\nfloat sinFuncDer(float x, float k, float c){return cos(x\/k)\/k*c;} \/\/ sin derivation\n\t\n\/\/ composite func : compose what you want\nfloat compFunc(float x)\n{\n\treturn sinFunc(x,10.,-uAmplitude) + cosFunc(x,5.,-uAmplitude) + 1.;\n}\n\n\/\/ derivative composite func\nfloat compFuncDer(float x)\n{\n\treturn sinFuncDer(x,10.,-uAmplitude) + cosFuncDer(x,5.,-uAmplitude);\n}\n\n\/\/ tangeant func\nfloat compFuncTan(float uvx, float ptx)\n{\n\t\/\/ tangeance : y = f'(a) * (x-a) + f(a)\n\treturn compFuncDer(ptx) * (uvx - ptx) + compFunc(ptx);\n}\n\n\/\/ perpendicular func\nfloat compFuncTanPerp(float uvx, float ptx)\n{\n    \/\/ perpendicular : y = -1.\/f'(a) * (x-a) + f(a)\n\treturn -1.\/compFuncDer(ptx) * (uvx - ptx) + compFunc(ptx);\n}\n\n\/\/ draw 2d metaball point\nfloat drawPoint(vec2 uv, vec2 pt, float thick)\n{\n\treturn thick\/dot(uv + pt * vec2(-1,1), uv + pt * vec2(-1,1));\n}\n\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tvec2 uv = uZoom*(2.*gl_FragCoord.xy - uScreenSize) \/ uScreenSize.y;\n    \n    float xMouse = (sin(uTime)*.5+.5) * uScreenSize.x*.95 + uScreenSize.x * 0.025;\n    \n    if (uMouse.z>0.) xMouse = uMouse.x;\n\tfloat mox = uZoom*(2.*xMouse - uScreenSize.x) \/ uScreenSize.y;\n\t\n\tvec2 uva = uv, uvb = uv, uvc = uv;\n\t\n\tgl_FragColor.rgb = vec3(.5);\n\t\n\tfloat curves = 0.;\n\n\tfloat thick = uThick;\n\t\n\tuva.y += compFunc(uva.x); \/\/ base fund\n\tuvb.y += compFuncTan(uvb.x, mox); \/\/ tangeante\n\tuvc.y += compFuncTanPerp(uvb.x, mox); \/\/ perpendiculair\n\t\n\tcurves += thick\/dot(uva.y,uva.y);\n\tcurves += thick\/dot(uvb.y,uvb.y);\n\tcurves += thick*2.\/dot(uvc.y,uvc.y);\n\t\t\n    curves = 1.-exp(-2e3 \/ iResolution.y *curves); \/\/ patch of Fabriceneyret2 for better smoothing of curve\n    \n\t\/\/ draw points\n\tfloat x = 2.; \/\/ x offset for point line relative ot point on curve\n\t\n\tvec2 ptOnCurve = vec2(mox, compFunc(mox));\n\t\n\tvec2 ptFront = vec2(ptOnCurve.x + x, compFuncDer(ptOnCurve.x) * (x) + compFunc(ptOnCurve.x));\n\t\n\tfloat pente = compFuncDer(ptOnCurve.x);\n\tx *= pente;\n\tvec2 ptUp = vec2(ptOnCurve.x + x, -1.\/compFuncDer(ptOnCurve.x) * (x) + compFunc(ptOnCurve.x));\n\t\n\tcurves += drawPoint(uv, ptOnCurve, 0.1);\n\tcurves += drawPoint(uv, ptUp, 0.1);\n\tcurves += drawPoint(uv, ptFront, 0.1);\n\t\n\tf.rgb = vec3(curves);\n}\n\n","name":"","description":"","type":"image"}]}}