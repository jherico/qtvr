{"Shader":{"ver":"0.1","info":{"id":"MllGRX","date":"1423938939","viewed":856,"name":"2D FFT Test","username":"Flyguy","description":"Testing a basic 2d fft function, probably not the optimal way of doing it.<br\/>Increase FFT_SIZE to get a higher quality image.","likes":5,"published":3,"flags":0,"tags":["2d","fft","fouriertransform"],"hasliked":0},"renderpass":[{"inputs":[{"id":11,"src":"\/presets\/vid00.ogv","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define FFT_SIZE 48\n#define PI 3.14159265359\n\n#define avg(v) ((v.x+v.y+v.z)\/3.0)\n\nvec2 fft(vec2 uv)\n{\n    vec2 complex = vec2(0,0);\n    \n    uv *= float(FFT_SIZE);\n    \n    float size = float(FFT_SIZE);\n    \n    for(int x = 0;x < FFT_SIZE;x++)\n    {\n    \tfor(int y = 0;y < FFT_SIZE;y++)\n    \t{\n            float a = 2.0 * PI * (uv.x * (float(x)\/size) + uv.y * (float(y)\/size));\n            vec3 sample = texture2D(iChannel0,mod(vec2(x,y)\/size,1.0)).rgb;\n            complex += avg(sample)*vec2(cos(a),sin(a));\n        }\n    }\n    \n    return complex;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    uv.x += (1.0-res.x)\/2.0;\n    uv.y = 1.0-uv.y;\n    \n    vec3 color = vec3(0.0);\n    \n    color = texture2D(iChannel0,uv).rgb;\n    \n    if(uv.x < 1.0 && uv.x > 0.0)\n    {\n    \tcolor = vec3(length(fft(uv-0.5))\/float(FFT_SIZE));\n    }\n    \n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}