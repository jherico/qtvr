{"Shader":{"ver":"0.1","info":{"id":"XdlGzn","date":"1361268206","viewed":3118,"name":"Rasterizer - Cube","username":"iq","description":"This shader implements software rasterization. Tex coordinates (and other vertex attributes) are interpolated correctly. Polygon clipping is not implemented though. See  for a more complex object.","likes":33,"published":3,"flags":0,"tags":["3d","rasterizer"],"hasliked":0},"renderpass":[{"inputs":[{"id":2,"src":"\/presets\/tex01.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ a perspective correct triangle rasterizer, in a shader!! :D\n\nmat4 setRotation( float x, float y, float z )\n{\n    float a = sin(x); float b = cos(x); \n    float c = sin(y); float d = cos(y); \n    float e = sin(z); float f = cos(z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 0.0,      0.0,      0.0, 1.0 );\n}\n\nmat4 setTranslation( float x, float y, float z )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t x,     y,   z, 1.0 );\n}\n\nstruct Triangle\n{\n    vec3 a; vec2 aUV;\n    vec3 b; vec2 bUV;\n    vec3 c; vec2 cUV;\n    vec3 n;\n};\n\n\nTriangle triangles[14];\n\nvoid createCube( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -1.0, -1.0, -1.0 );\n    verts[1] = vec3( -1.0, -1.0,  1.0 );\n    verts[2] = vec3( -1.0,  1.0, -1.0 );\n    verts[3] = vec3( -1.0,  1.0,  1.0 );\n    verts[4] = vec3(  1.0, -1.0, -1.0 );\n    verts[5] = vec3(  1.0, -1.0,  1.0 );\n    verts[6] = vec3(  1.0,  1.0, -1.0 );\n    verts[7] = vec3(  1.0,  1.0,  1.0 );\n\n    triangles[0].a = verts[1]; triangles[0].aUV = vec2(0.0,0.0);\n    triangles[0].b = verts[5]; triangles[0].bUV = vec2(1.0,0.0);\n    triangles[0].c = verts[7]; triangles[0].cUV = vec2(1.0,1.0);\n    triangles[0].n = vec3( 0.0, 0.0, 1.0 );\n    triangles[1].a = verts[1]; triangles[1].aUV = vec2(0.0,0.0),\n    triangles[1].b = verts[7]; triangles[1].bUV = vec2(1.0,1.0),\n    triangles[1].c = verts[3]; triangles[1].cUV = vec2(0.0,1.0),\n    triangles[1].n = vec3( 0.0, 0.0, 1.0 );\n\n    triangles[2].a = verts[5]; triangles[2].aUV = vec2(0.0,0.0);\n    triangles[2].b = verts[4]; triangles[2].bUV = vec2(1.0,0.0);\n    triangles[2].c = verts[6]; triangles[2].cUV = vec2(1.0,1.0);\n    triangles[2].n = vec3( 1.0, 0.0, 0.0 );\n    triangles[3].a = verts[5]; triangles[3].aUV = vec2(0.0,0.0);\n    triangles[3].b = verts[6]; triangles[3].bUV = vec2(1.0,1.0);\n    triangles[3].c = verts[7]; triangles[3].cUV = vec2(0.0,1.0);\n    triangles[3].n = vec3( 1.0, 0.0, 0.0 );\n\n    triangles[4].a = verts[3]; triangles[4].aUV = vec2(0.0,0.0);\n    triangles[4].b = verts[7]; triangles[4].bUV = vec2(1.0,0.0);\n    triangles[4].c = verts[6];;triangles[4].cUV = vec2(1.0,1.0);\n    triangles[4].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[5].a = verts[3]; triangles[5].aUV = vec2(0.0,0.0);\n    triangles[5].b = verts[6]; triangles[5].bUV = vec2(1.0,1.0);\n    triangles[5].c = verts[2]; triangles[5].cUV = vec2(0.0,1.0);\n    triangles[5].n = vec3( 0.0, 1.0, 0.0 );\n\n    triangles[6].a = verts[0]; triangles[6].aUV = vec2(1.0,0.0);\n    triangles[6].b = verts[6]; triangles[6].bUV = vec2(0.0,1.0);\n    triangles[6].c = verts[4]; triangles[6].cUV = vec2(0.0,0.0);\n    triangles[6].n = vec3( 0.0, 0.0, -1.0 );\n    triangles[7].a = verts[0]; triangles[7].aUV = vec2(1.0,0.0);\n    triangles[7].b = verts[2]; triangles[7].bUV = vec2(1.0,1.0);\n    triangles[7].c = verts[6]; triangles[7].cUV = vec2(0.0,1.0);\n    triangles[7].n = vec3( 0.0, 0.0, -1.0 );\n\n    triangles[8].a = verts[1]; triangles[8].aUV = vec2(1.0,0.0);\n    triangles[8].b = verts[2]; triangles[8].bUV = vec2(0.0,1.0);\n    triangles[8].c = verts[0]; triangles[8].cUV = vec2(0.0,0.0);\n    triangles[8].n = vec3( -1.0, 0.0, 0.0 );\n    triangles[9].a = verts[1]; triangles[9].aUV = vec2(1.0,0.0);\n    triangles[9].b = verts[3]; triangles[9].bUV = vec2(1.0,1.0);\n    triangles[9].c = verts[2]; triangles[9].cUV = vec2(0.0,1.0);\n    triangles[9].n = vec3( -1.0, 0.0, 0.0 );\n\n    triangles[10].a = verts[1]; triangles[10].aUV = vec2(0.0,0.0);\n    triangles[10].b = verts[0]; triangles[10].bUV = vec2(0.0,1.0);\n    triangles[10].c = verts[4]; triangles[10].cUV = vec2(1.0,1.0);\n    triangles[10].n = vec3( 0.0, -1.0, 0.0 );\n    triangles[11].a = verts[1]; triangles[11].aUV = vec2(0.0,0.0);\n    triangles[11].b = verts[4]; triangles[11].bUV = vec2(1.0,1.0);\n    triangles[11].c = verts[5]; triangles[11].cUV = vec2(1.0,0.0);\n    triangles[11].n = vec3( 0.0, -1.0, 0.0 );\n}\n\n\t\n\nvoid createFloor( void )\n{\n    vec3 verts[8];\n\n    verts[0] = vec3( -3.0, -1.0, -3.0 );\n    verts[1] = vec3( -3.0, -1.0,  3.0 );\n    verts[2] = vec3(  3.0, -1.0,  3.0 );\n    verts[3] = vec3(  3.0, -1.0, -3.0 );\n\n    triangles[12].a = verts[0]; triangles[12].aUV = vec2(0.0,0.0);\n    triangles[12].b = verts[1]; triangles[12].bUV = vec2(0.0,3.0);\n    triangles[12].c = verts[3]; triangles[12].cUV = vec2(3.0,0.0);\n    triangles[12].n = vec3( 0.0, 1.0, 0.0 );\n    triangles[13].a = verts[1]; triangles[13].aUV = vec2(0.0,3.0),\n    triangles[13].b = verts[2]; triangles[13].bUV = vec2(3.0,3.0),\n    triangles[13].c = verts[3]; triangles[13].cUV = vec2(3.0,0.0),\n    triangles[13].n = vec3( 0.0, 1.0, 0.0 );\n}\n\nfloat cross( vec2 a, vec2 b )\n{\n    return a.x*b.y - a.y*b.x;\n}\n\nvec3 lig = normalize( vec3( 0.3,0.7,0.5) );\n\nvec3 pixelShader( in vec3 nor, in vec2 uv, in float z, in vec3 wnor )\n{\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float brdf = 0.5 + 0.8*dif;\n    brdf *= 6.0*exp( -0.5*abs(z) );\n\t\t\t\n\tvec3 mate = texture2D( iChannel0, uv ).xyz * abs(wnor.x) + \n\t\t        texture2D( iChannel1, uv ).xyz * abs(wnor.y) + \n\t\t        texture2D( iChannel2, uv ).xyz * abs(wnor.z);\n\t\n    vec3 col = brdf * mate;\t\n\t\n    return sqrt( col );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tmat4 mdv = setTranslation( 0.0, 0.5, -5.0 ) * \n\t\t       setRotation( 0.6, 0.0,  0.0 ) * \n\t\t       setRotation( 0.0, 3.1*sin(0.3*iGlobalTime), 0.0 );\n\n    vec2 px = -1.0 + 2.0*fragCoord.xy \/ iResolution.xy;\n    px.x *= iResolution.x\/iResolution.y;\n\n    createCube();\n\tcreateFloor();\n\n    vec3 color = vec3( 0.0, 0.0, 0.0 );\n\n    \/\/ clear zbuffer\n    float mindist = -1000000.0;\n\n    \/\/ render 12 triangles\n    for( int i=0; i<14; i++ )\n    {\n        \/\/ transform to eye space\n        vec3 ep0 = (mdv * vec4(triangles[i].a,1.0)).xyz;\n        vec3 ep1 = (mdv * vec4(triangles[i].b,1.0)).xyz;\n        vec3 ep2 = (mdv * vec4(triangles[i].c,1.0)).xyz;\n        vec3 nor = (mdv * vec4(triangles[i].n,0.0)).xyz;\n\n        \/\/ transform to clip space\n        float w0 = 1.0\/ep0.z;\n        float w1 = 1.0\/ep1.z;\n        float w2 = 1.0\/ep2.z;\n\n        vec2 cp0 = 2.0*ep0.xy * -w0;\n        vec2 cp1 = 2.0*ep1.xy * -w1;\n        vec2 cp2 = 2.0*ep2.xy * -w2;\n\n        \/\/ fetch vertex attributes, and divide by z\n        vec2 u0 = triangles[i].aUV * w0;\n        vec2 u1 = triangles[i].bUV * w1;\n        vec2 u2 = triangles[i].cUV * w2;\n\n        \/\/-----------------------------------\n        \/\/ rasterize\n        \/\/-----------------------------------\n\n        \/\/ calculate areas for subtriangles\n        vec3 di = vec3( cross( cp1 - cp0, px - cp0 ), \n\t\t\t\t\t    cross( cp2 - cp1, px - cp1 ), \n\t\t\t\t\t    cross( cp0 - cp2, px - cp2 ) );\n\t\t\n        \/\/ if all positive, point is inside triangle\n        if( all(greaterThan(di,vec3(0.0))) )\n        {\n            \/\/ calc barycentric coordinates\n            vec3 ba = di.yzx \/ (di.x+di.y+di.z);\n\n            \/\/ barycentric interpolation of attributes and 1\/z\n            float iz = ba.x*w0 + ba.y*w1 + ba.z*w2;\n            vec2  uv = ba.x*u0 + ba.y*u1 + ba.z*u2;\n\n            \/\/ recover interpolated attributes\n            float z = 1.0\/iz;\n            uv *= z;\n\n\t\t\t\/\/ depth (-1\/z) buffer test\n\t\t\tif( z>mindist )\n\t\t\t{\n\t\t\t\tmindist = z;\n\n\t\t\t\t\/\/ perform lighting\/shading\n\t\t\t\tcolor = pixelShader( nor, uv, z, triangles[i].n );\n\t\t\t}\n        }\n    }\n\n    fragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}