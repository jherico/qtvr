{"Shader":{"ver":"0.1","info":{"id":"ll2GD3","date":"1433235426","viewed":7555,"name":"Palettes","username":"iq","description":"Cosine based palettes (faster than linear interpolation or triangle waves). <br\/>More info: <a href=\"http:\/\/iquilezles.org\/www\/articles\/palettes\/palettes.htm\" class=\"regular\" target=\"_blank\">http:\/\/iquilezles.org\/www\/articles\/palettes\/palettes.htm<\/a>","likes":44,"published":3,"flags":0,"tags":["2d","color","palettes"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n\/\/ A simple way to create color variation in a cheap way (yes, trigonometrics ARE cheap\n\/\/ in the GPU, don't try to be smart and use a triangle wave instead).\n\n\/\/ See http:\/\/iquilezles.org\/www\/articles\/palettes\/palettes.htm for more information\n\n\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy \/ iResolution.xy;\n    \n    \/\/ animate\n    p.x += 0.01*iGlobalTime;\n    \n    \/\/ compute colors\n    vec3                col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.33,0.67) );\n    if( p.y>(1.0\/7.0) ) col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.0,0.10,0.20) );\n    if( p.y>(2.0\/7.0) ) col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,1.0),vec3(0.3,0.20,0.20) );\n    if( p.y>(3.0\/7.0) ) col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,1.0,0.5),vec3(0.8,0.90,0.30) );\n    if( p.y>(4.0\/7.0) ) col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(1.0,0.7,0.4),vec3(0.0,0.15,0.20) );\n    if( p.y>(5.0\/7.0) ) col = pal( p.x, vec3(0.5,0.5,0.5),vec3(0.5,0.5,0.5),vec3(2.0,1.0,0.0),vec3(0.5,0.20,0.25) );\n    if( p.y>(6.0\/7.0) ) col = pal( p.x, vec3(0.8,0.5,0.4),vec3(0.2,0.4,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    \n\n    \/\/ band\n    float f = fract(p.y*7.0);\n    \/\/ borders\n    col *= smoothstep( 0.49, 0.47, abs(f-0.5) );\n    \/\/ shadowing\n    col *= 0.5 + 0.5*sqrt(4.0*f*(1.0-f));\n    \/\/ dithering\n    col += (1.0\/255.0)*texture2D( iChannel0, fragCoord.xy\/iChannelResolution[0].xy ).xyz;\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}