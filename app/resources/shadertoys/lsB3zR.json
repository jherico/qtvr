{"Shader":{"ver":"0.1","info":{"id":"lsB3zR","date":"1382567168","viewed":782,"name":"Fractal Soup","username":"P_Malin","description":"Another one of those fractal things.","likes":17,"published":3,"flags":0,"tags":["2d","fractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Fractal Soup - @P_Malin\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 CircleInversion(vec2 vPos, vec2 vOrigin, float fRadius)\n{\t\n\tvec2 vOP = vPos - vOrigin;\n\treturn vOrigin - vOP * fRadius * fRadius \/ dot(vOP, vOP);\n}\n\nfloat Parabola( float x, float n )\n{\n\treturn pow( 4.0*x*(1.0-x), n );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vPos = fragCoord.xy \/ iResolution.xy;\n\n\tvPos = vPos - 0.5;\n\t\n\tvPos.x *= iResolution.x \/ iResolution.y;\n\t\n\tvec2 vScale = vec2(1.2);\n\tvec2 vOffset = vec2( sin(iGlobalTime * 0.123), sin(iGlobalTime * 0.0567));\n\t\t\n\tif(iMouse.z > 0.0)\n\t{\n\t\tvOffset = (vec2(iMouse.x, iMouse.y) \/ iResolution.xy) - 0.5;\n\t}\n\t\n\tfloat l = 0.0;\n\tfloat minl = 10000.0;\n\t\n\tfor(int i=0; i<48; i++)\n\t{\n\t\tvPos.x = abs(vPos.x);\n\t\tvPos = vPos * vScale + vOffset;\t\n\t\t\n\t\tvPos = CircleInversion(vPos, vec2(0.5, 0.5), 1.0);\n\t\t\n\t\tl = length(vPos);\n\t\tminl = min(l, minl);\n\t}\n\t\n\t\n\tfloat t = 4.1 + iGlobalTime * 0.025;\n\tvec3 vBaseColour = normalize(vec3(sin(t * 1.890), sin(t * 1.345), sin(t * 1.123)) * 0.5 + 0.5);\n\n\t\/\/vBaseColour = vec3(1.0, 0.15, 0.05);\n\t\n\tfloat fBrightness = 15.0;\n\t\n\tvec3 vColour = vBaseColour * l * l * fBrightness;\n\t\n\tminl = Parabola(minl, 5.0);\t\n\t\n\tvColour *= minl + 0.1;\n\t\n\tvColour = 1.0 - exp(-vColour);\n\tfragColor = vec4(vColour,1.0);\n}\n","name":"","description":"","type":"image"}]}}