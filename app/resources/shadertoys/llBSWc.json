{"Shader":{"ver":"0.1","info":{"id":"llBSWc","date":"1446851914","viewed":471,"name":"Bias Function","username":"qwert33","description":"A function to tweak the range of 0..1 to give it a bias towards 0 or 1. <br\/>https:\/\/www.desmos.com\/calculator\/c4w7ktzhhk<br\/>It it is similar to a brightness\/contrast function but does not loose information due to clipping.<br\/><br\/>Made by Dominik Schmid. MIT license.","likes":8,"published":3,"flags":0,"tags":["function","tweak","plotting","bias","twang"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Made by Dominik Schmid\n\/\/ MIT license\n\n\n\n\/\/ biases x to be closer to 0 or 1\n\/\/ can act like a parameterized smoothstep\n\/\/ https:\/\/www.desmos.com\/calculator\/c4w7ktzhhk\n\/\/ if b is near 1.0 then numbers a little closer to 1.0 are returned\n\/\/ if b is near 0.0 then numbers a little closer to 0.0 are returned\n\/\/ if b is near 0.5 then values near x are returned\nfloat bias(float x, float b) {\n    b = -log2(1.0 - b);\n    return 1.0 - pow(1.0 - pow(x, 1.\/b), b);\n}\n\n\nfloat PI = 3.1415926;\nfloat t = iGlobalTime;\nfloat bias_number = 0.4*sin(t) + 0.5;\n\nfloat formula(float x) {\n    return bias(x, bias_number);\n}\nbool isClose(float a, float b) { return abs(a-b) < 0.005; }\nvoid plot(out vec4 fragColor, in vec2 uv )\n{\n    float px = 2.0 \/ iResolution.x;\n    float py = 2.0 \/ iResolution.y;\n   \n\n    vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n    vec4 blue  = vec4(0.1, 0.1, 0.9, 1.0);\n    if (isClose(uv.x, 0.5)) color = blue;\n    if (isClose(uv.x, 1.5)) color = blue;\n    if (isClose(uv.y, 0.5)) color = blue;\n    if (isClose(uv.y, 1.0)) color = blue;\n\t\n    \n    float x = (uv.x - .5);\n    float y = formula(x);\n    float y2 = formula(x + px*.5);\n    float dy = max(px*4.0, abs(y2 - y));\n    \n    float modX = floor(.5+10.0*(uv.x-.5)) \/ 10.0;\n    float fmodX = formula(modX);\n\n    \/\/ 2d samples\n    \/\/ ok but wonky and horribly inefficient\n    float avg = 0.0;\n    float screen_y = 0.0;\n    float stroke = 1.0;\n    float dist = 0.0;\n    for (float step_x = -1.0; step_x < 1.0; step_x += .1)\n    {\n        x = (uv.x - .5 +3.0*stroke*(-step_x)*px);\n        \n        for (float step_y = -1.0; step_y < 1.0; step_y += .1)\n        {\n            \n            y = formula(x);\n            screen_y = uv.y + stroke*(-step_y)*py;\n            dist = step_x*step_x + step_y*step_y;\n            dist \/= stroke*stroke;\n            avg += (1.0 - min(1.0,(abs(screen_y-.5  - .5*y)\/py))) \/dist;\n        }\n    }\n    avg \/= 100.0;\n    color.r -= avg;\n    color.g -= avg; \n    color.b -= avg;\n    fragColor = color;\n}\n\n\n\n\/\/ creates white noise in the range 0..1 including 0 excluding 1\nfloat rand(vec2 p){\n    p \/= iResolution.xy;\n    return fract(sin(dot(p.xy, vec2(12.9898, 78.2377))) * 43758.5453);\n}\n\n\/\/ creates white noise in the range 0..1 including 0 including 1\nfloat rand_inclusive(vec2 p){\n    return clamp(rand(p)*1.005, 0.0, 1.0); \n}\n\n\nvoid applyBias(out vec4 fragColor, in vec2 fragCoord) {\n    fragColor = vec4(\n        bias(rand_inclusive(fragCoord), bias_number)\n    );\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    if (isClose(uv.x, 0.5)) {\n        fragColor = vec4(0.5);\n    }\n    else if (uv.x < 0.5) {\n        uv += vec2(0.4, 0.3);\n        uv -= vec2(0.5);\n        uv *= vec2(3.0, 1.0);\n        uv += vec2(0.5);\n        \/\/uv += vec2(0.5, 0.0);\n        plot(fragColor, uv);\n    }\n    else {\n        applyBias(fragColor, fragCoord);\n    }\n}","name":"","description":"","type":"image"}]}}