{"Shader":{"ver":"0.1","info":{"id":"MdlGzn","date":"1361844229","viewed":7272,"name":"Torus Journey","username":"PauloFalcao","description":"Torus Journey (shadertoy version)","likes":29,"published":3,"flags":0,"tags":["3d","raymarching","reflection","torus"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ TorusJourney (shadertoy version) by @paulofalcao\n\nfloat time=iGlobalTime+25.0;\n\n\/\/Util Start\nfloat PI=3.14159265;\n\nvec2 ObjUnion(in vec2 obj0,in vec2 obj1){\n  if (obj0.x<obj1.x)\n    return obj0;\n  else\n    return obj1;\n}\n\nvec3 sim(vec3 p,float s){\n  vec3 ret=p;\n  ret=p+s\/2.0;\n  ret=fract(ret\/s)*s-s\/2.0;\n  return ret;\n}\n\nvec2 rot(vec2 p,float r){\n  vec2 ret;\n  ret.x=p.x*cos(r)-p.y*sin(r);\n  ret.y=p.x*sin(r)+p.y*cos(r);\n  return ret;\n}\n\nvec2 rotsim(vec2 p,float s){\n  vec2 ret=p;\n  ret=rot(p,-PI\/(s*2.0));\n  ret=rot(p,floor(atan(ret.x,ret.y)\/PI*s)*(PI\/s));\n  return ret;\n}\n\nvec2 revolve(vec2 p){\n  p.x=length(p);\n  return p;\n}\n\/\/Util End\n\n\/\/Scene Start\n\n\/\/IQ signed box\nfloat sdBox(vec3 p,vec3 b){\n  vec3 d=abs(p)-b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nvec2 obj0(in vec3 p){\n  p.z=p.z-3.5;\n  float c1=sdBox(p,vec3(0.25,0.25,0.25));\n  float c2=sdBox(p,vec3(1.5,0.15,0.15));\n  float c3=sdBox(p,vec3(0.15,1.5,0.15));\n  return vec2(min(min(c1,c3),c2),0);\n}\n\nvec3 obj0_c(in vec3 p){\n  return vec3(0.2,0.5,1.0);\n}\n\nvec2 obj1(vec3 p){\n  p.z=p.z-6.0;\n  float c1=sdBox(p,vec3(1.5,0.15,0.3));\n  float c2=sdBox(p,vec3(0.15,1.5,0.3));\n  return vec2(min(c1,c2),1);\n}\n\nvec3 obj1_c(in vec3 p){\n  return vec3(1.0,0.7,0.6);\n}\n\nvec2 obj2(vec3 p){\n  vec3 op=p;\n  p.xz=revolve(p.xz);\n  p.x-=32.0;\n  op.xz=rot(op.xz,time*0.3);\n  p.xy=rot(p.xy,atan(op.z,op.x)*24.0*sin(time*0.2));\n  p.x-=sin(time*2.0);\n  return vec2(length(max(abs(p.xy)-vec2(0.5,0.1),0.0))-0.2,2);\n}\n\nvec3 obj2_c(in vec3 p){\n  return vec3(1.0,0.5,0.2);\n}\n\n\nvec2 inObj(in vec3 p){\n  vec3 b=p;\n  p.xz=rotsim(p.xz,64.0);\n  p.z=p.z-32.0;\n  p.yz=rotsim(p.yz,8.0);\n  return ObjUnion(ObjUnion(obj0(p),obj1(p)),obj2(b));\n}\n\n\/\/Scene End\n\n\/\/tetrahedron normal\nvec3 objNormal(vec3 p){\n  const float n_er=0.02;\n  float v1=inObj(vec3(p.x+n_er,p.y-n_er,p.z-n_er)).x;\n  float v2=inObj(vec3(p.x-n_er,p.y-n_er,p.z+n_er)).x;\n  float v3=inObj(vec3(p.x-n_er,p.y+n_er,p.z-n_er)).x;\n  float v4=inObj(vec3(p.x+n_er,p.y+n_er,p.z+n_er)).x;\n  return normalize(vec3(v4+v1-v3-v2,v3+v4-v1-v2,v2+v4-v3-v1));\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n  vec2 vPos=-1.0+2.0*fragCoord.xy\/iResolution.xy;\n  \n  \/\/Camera animation\n  vec3 vuv=vec3(sin(time*0.7),1.0,sin(time*0.9));\n  float camSpeed=time*0.3;\n  vec3 vrp=vec3(sin(camSpeed+0.2)*32.0,0,cos(camSpeed+0.2)*32.0);\n  float camCenterDist=2.1+exp(-20.0*pow(sin(time*0.2)+1.0,20.0))*2.8;\n  vec3 prp=vec3(sin(camSpeed)*32.0,0,cos(camSpeed)*32.0);\n  mat3 camMov=mat3(normalize(prp),vec3(0,1.0,0),normalize(vrp-prp));\n  camSpeed+=sin(time*0.3)*0.5;\n  vrp=vec3(sin(camSpeed)*32.0,0,cos(camSpeed)*32.0);\n  vec3 camMovP=vec3(sin(time)*camCenterDist,cos(time)*camCenterDist,0.0);\n  prp=prp+camMovP*camMov;\n  float vpd=1.5;  \n \n  \/\/Camera setup\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 scrCoord=prp+vpn*vpd+vPos.x*u*iResolution.x\/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  \/\/Raymarching\n  const vec3 e=vec3(0.1,0,0);\n  float maxd=48.0; \/\/Max depth\n\n  vec2 s=vec2(0.1,0.0);\n  vec3 c,p,n;\n\n  float f=1.0;\n  for(int i=0;i<128;i++){\n    if (abs(s.x)<.001||f>maxd) break;\n    f+=s.x;\n    p=prp+scp*f;\n    s=inObj(p);\n  }\n  \n  if (f<maxd){\n    if (s.y==0.0)\n      c=obj0_c(p);\n    else if (s.y==1.0)\n      c=obj1_c(p);\n    else\n      c=obj2_c(p);\n \n    n=objNormal(p);\n    float b=abs(dot(n,normalize(prp-p)));\n    vec3 objColor=b*c+pow(b,8.0);\n  \n    \/\/reflect\n    float f0=f;\n    if (s.y==2.0){\n      prp=p-0.02*scp;\n      scp=reflect(scp,n);\n      f=0.0;\n      s=vec2(0.1,0.0);\n      maxd=16.0;\n      for(int i=0;i<64;i++){\n        if (abs(s.x)<.01||f>maxd) break;\n        f+=s.x;\n        p=prp+scp*f;\n        s=inObj(p);\n      }\n      if (f<maxd){\n        if (s.y==0.0)\n          c=obj0_c(p);\n        else if (s.y==1.0)\n          c=obj1_c(p);\n        else\n          c=obj2_c(p);\n      \n        n=objNormal(p);\n        b=abs(dot(n,normalize(prp-p)));\n        vec3 objColor2=b*c+pow(b,8.0);\n        fragColor=vec4((objColor*0.8+objColor2*0.2)*(1.0-f0*.03),1.0);\n      } else fragColor=vec4(objColor*0.8*(1.0-f0*.03),1.0);\n\n    } else fragColor=vec4(objColor*(1.0-f0*.03),1.0);\n    \n  } else fragColor=vec4(0,0,0,1);\n\n}\n","name":"","description":"","type":"image"}]}}