{"Shader":{"ver":"0.1","info":{"id":"llsSzj","date":"1438189502","viewed":721,"name":"optimal vector test","username":"FabriceNeyret2","description":"sometime you want to test whether 4 components  are all (or any) null (or not null).<br\/>What is the optimal way if testing that ? <br\/>all\/any are powerful for that, even with the casts to bvec and vec back.","likes":0,"published":3,"flags":0,"tags":["test","optimization","2tweets","all","short","parallelism","bvec","any"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 o, vec2 i )\n{\n    \/\/ --- some random example producing a vector of 4 conditions to merge\n\ti= 20.*i\/iResolution.y; \n    float t = iGlobalTime, c=cos(t),s=sin(t);\n    vec4 p = sin(vec4(i,mat2(c,-s,s,c)*i)+vec4(0,1,.5,1.5)*1.57);\n\n    p = step(.5,p); \/\/ --- some vector of conditions. \n                    \/\/ here they are clean 0\/1 values.\n                    \/\/ it is sometime interesting to accept 0 \/ >0 , or even 0 \/ !0 (like bools).\n\n    \/\/ o = p; \/\/ to visualize the vector.\n\n    \/\/ Note that the first vec4( is just here to cast the scalar result into colors.\n    \/\/ Still, some writings use it as an implicit bool to number cast. \n    \/\/ In your application, this vec4( should either disapear (see o+= cases) or be replaced by float(.\n    \n    \n    \/\/ --- what to do if we want to collapse the conditions by OR\n  \n       o = vec4(any(bvec4(p)));                             \/\/ 22 chars\n    \/\/ o = vec4(any(notEqual(p,vec4(0))));                  \/\/ 33 chars \n    \/\/ o = vec4(any(notEqual(p,p-p)));                      \/\/ 29 chars \n    \/\/ p=1.-p; o = vec4(1.-p.x*p.y*p.z*p.w);                \/\/ 34 chars - only for p.i = 0\/1\n    \/\/ p=1.-p; o += 1.-p.x*p.y*p.z*p.w;                     \/\/ 29 chars - only for p.i = 0\/1\n    \/\/ o = vec4( p.x!=0.||p.y!=0.||p.z!=0.||p.w!=0. ? 1. : 0.);  \/\/ 49 chars\n    \/\/ o += p.x!=0.||p.y!=0.||p.z!=0.||p.w!=0. ? 1. : 0.;   \/\/ 44 chars\n    \/\/ o = vec4( p.x!=0.||p.y!=0.||p.z!=0.||p.w!=0.);       \/\/ 43 chars   ( thanks coyote ! )\n    \/\/ o = vec4( p.x>0.||p.y>0.||p.z>0.||p.w>0. ? 1. : 0.); \/\/ 45 chars - only for p.i >= 0\n    \/\/ o += p.x>0.||p.y>0.||p.z>0.||p.w>0. ? 1. : 0.;       \/\/ 41 chars - only for p.i >= 0\n    \/\/ o = vec4( p.x>0.||p.y>0.||p.z>0.||p.w>0.);           \/\/ 39 chars - only for p.i >= 0 ( thanks coyote ! )\n    \/\/ o = vec4( p.x+p.y+p.z+p.w > 0. ? 1. : 0.);           \/\/ 33 chars - only for p.i >= 0\n    \/\/ o = vec4( dot(p,vec4(1)) > 0.  ? 1. : 0.);           \/\/ 32 chars - only for p.i >= 0\n    \/\/ o = vec4( dot(p,vec4(1)) > 0.);                      \/\/ 26 chars - only for p.i >= 0 ( thanks coyote ! )\n    \/\/ o = vec4( dot(p,p-p+1.) > 0.);                       \/\/ 25 chars - only for p.i >= 0 ( thanks coyote ! )\n    \/\/ o = vec4( dot(p,p) > 0. );                           \/\/ 20 chars - only for p.i >= 0 ( thanks coyote ! )\n    \/\/ o += dot(p,p) > 0. ? 1. : 0.;                        \/\/ 21 chars - only for p.i >= 0 ( thanks coyote ! )\n    \/\/ o = vec4( dot(p,p)  );         \/\/ 17 chars - only for p.i >= 0 and res >=0 ( thanks coyote ! )\n    \/\/ o += dot(p,p);                 \/\/ 12 chars - only for p.i >= 0 and res >=0 ( thanks coyote ! )\n\t   \n    \/\/ --- what to do if we want to collapse the conditions by AND\n    \n    \/\/ o = vec4(all(bvec4(p)));                             \/\/ 22 chars\n    \/\/ o = vec4(all(notEqual(p,vec4(0))));                  \/\/ 33 chars \n    \/\/ o = vec4(all(notEqual(p,p-p)));                      \/\/ 29 chars \n    \/\/ o = vec4(p.x*p.y*p.z*p.w!=0. );                      \/\/ 28 chars \n    \/\/ o = vec4(p.x*p.y*p.z*p.w > 0. );                     \/\/ 27 chars - only for p.i >= 0\n    \/\/ o = vec4(p.x*p.y*p.z*p.w);                           \/\/ 24 chars - only for p.i = 0\/1\n    \/\/ o = vec4( p.x>0.&&p.y>0.&&p.z>0.&&p.w>0. ? 1. : 0.); \/\/ 45 chars - only for p.i >= 0\n    \/\/ o = vec4( p.x>0.&&p.y>0.&&p.z>0.&&p.w>0.);           \/\/ 39 chars - only for p.i >= 0 ( thanks coyote ! )\n     \n}","name":"","description":"","type":"image"}]}}