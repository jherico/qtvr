{"Shader":{"ver":"0.1","info":{"id":"4lsXWH","date":"1436429607","viewed":794,"name":"color: texture sampling gamma","username":"hornet","description":"inspired by https:\/\/www.shadertoy.com\/view\/4tfXDH - see also https:\/\/www.shadertoy.com\/view\/XtsSzH<br\/>Note that the sampled texture is not meant to be used as an image, rather for it's values as a lookup-table.<br\/>The result is valid none-the-less.","likes":1,"published":3,"flags":0,"tags":["filtering","mipmap","sampling","gamma","srgb"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const float gamma = 2.4;\n\nvec3 hash32n(vec2 p);\n\nvec3 srgb2lin( vec3 c )\n{\n    return pow( c, vec3(gamma) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - vec2(2.0*iGlobalTime,0.0)) \/ iChannelResolution[0].xy;\n\n\tvec3 colA;\n\n\tif ( fragCoord.y \/ iResolution.y > 2.0\/3.0 )\n\t{\n        \/\/incorrect, as filtering is done in srgb-space\n\t\tcolA = pow( texture2D( iChannel0, uv, 0.0 ).xyz, vec3(gamma) );\n\t}\n    else if ( fragCoord.y \/ iResolution.y > 1.0\/3.0 )\n    {\n        \/\/manual bilinear filtering\n        \/\/emulating proper, correct, filtering in linear space\n        \/\/\n        \/\/note that the texture still blurs\/sharpens in a strobing fashion\n        \/\/since were are sampling below the nyquist frequency\n        vec2 uvpx = uv * iChannelResolution[0].xy;\n        vec2 uvpx_f = fract( uvpx );\n        vec2 uvpx_i = floor( uvpx ) + vec2(0.5);\n        \n        vec2 uv_i = uvpx_i \/ iChannelResolution[0].xy;\n        vec2 uv0 = uv_i;\n        vec2 uv1 = uv_i + vec2(1,0) \/ iChannelResolution[0].xy;\n        vec2 uv2 = uv_i + vec2(0,1) \/ iChannelResolution[0].xy;\n        vec2 uv3 = uv_i + vec2(1,1) \/ iChannelResolution[0].xy;\n            \n        vec3 colA0 = srgb2lin( texture2D( iChannel0, uv0, 0.0 ).rgb );\n        vec3 colA1 = srgb2lin( texture2D( iChannel0, uv1, 0.0 ).rgb );\n        vec3 colA2 = srgb2lin( texture2D( iChannel0, uv2, 0.0 ).rgb );\n        vec3 colA3 = srgb2lin( texture2D( iChannel0, uv3, 0.0 ).rgb );\n        colA = mix ( mix( colA0, colA1, uvpx_f.x ),\n                     mix( colA2, colA3, uvpx_f.x ),\n                     uvpx_f.y );\n    }\n    else\n    {\n        \/\/sampling one mip down (test to go above nyquist frequency)\n        \/\/...shows that mip-creation is incorrectly done in srgb-space too\n        colA = pow( texture2D( iChannel0, uv, 1.0 ).xyz, vec3(gamma) );\n    }\n\n    vec3 outcol = colA;\n\toutcol += hash32n( fragCoord.xy + fract( iGlobalTime ) ) \/ 255.0; \/\/dither for quantisation\n    outcol = pow( outcol, vec3(1.0\/gamma) ); \/\/gamma-correction\n    \n\t\/\/fragColor = vec4( vec3(1.0) - outcol, 1.0 ); \/\/shows middle strobing a lot\n    fragColor = vec4( outcol, 1.0 );\n}\n\n\/\/note: uniform pdf rand [0;1[\nvec3 hash32n(vec2 p)\n{\n\tp  = fract(p * vec2(5.3987, 5.4421));\n    p += dot(p.yx, p.xy +  vec2(21.5351, 14.3137));\n\treturn fract(vec3(p.x * p.y * 95.4307, p.x * p.y * 97.5901, p.x * p.y * 93.8369));\n}\n","name":"","description":"","type":"image"}]}}