{"Shader":{"ver":"0.1","info":{"id":"Xdl3DM","date":"1372013188","viewed":1578,"name":"Gamma","username":"iq","description":"Move the mouse until the circles and the middle of the gradient blend with the background.<br\/>When doing WebGL, once you have performed your lighting computations in linear space, you must apply gamma correction by hand for a perceptually linear display.","likes":11,"published":3,"flags":0,"tags":["2d","gamma"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Shaders must perform lighting computations in linear space, and then apply gamma correction on \n\/\/ their own in order to get a perceptually linear response. WebGL\/Browsers\/OS don't apply gamma \n\/\/ for you, not WebGL supports anything similar to GL_ARB_framebuffer_sRGB\n\t\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces);\nfloat hash1( float n ) { return fract(sin(n)*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\n\t\/\/ gamma value to be tested\n\tfloat gamma = 2.20;\t\n\tif( iMouse.z>0.0 ) gamma = 0.5 + 2.5*iMouse.x\/iResolution.x;\n\t\n    \/\/ background\t\n    float f = mod( fragCoord.x + mod(fragCoord.y,2.0), 2.0 );\n\n    \/\/ patterns\t\n\tf = mix( 0.5,  f, smoothstep(0.1,0.101,length(uv-vec2(0.2,0.2))) );\n\tf = mix( 0.5,  f, smoothstep(0.1,0.101,length(uv-vec2(0.2,0.8))) );\n\tf = mix( 0.5,  f, smoothstep(0.1,0.101,length(uv-vec2(0.8,0.2))) );\n\tf = mix( 0.5,  f, smoothstep(0.1,0.101,length(uv-vec2(0.8,0.8))) );\n\tf = mix( uv.x, f, smoothstep(0.1,0.101,abs(uv.y-0.5) )) ;\n\n    \/\/ apply gamma\t\n    f = pow( f, 1.0\/gamma );\n\t\n    \/\/ print gamma value\t\n\tf = mix( f, 0.0, PrintValue( (uv-vec2(0.43,0.9))*40.0, gamma, 1.0, 2.0) );\n\n    \/\/ dithering\n    f += (1.0\/255.0)*hash1(uv.x+13.0*uv.y);\n    \n\tfragColor = vec4( f, f, f, 1.0 );\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\/\/---------------------------------------------------------------\n\/\/ number rendering code below by P_Malin\n\/\/\n\/\/ https:\/\/www.shadertoy.com\/view\/4sf3RN\n\/\/---------------------------------------------------------------\n\n\nfloat InRect(const in vec2 vUV, const in vec4 vRect)\n{\n\tvec2 vTestMin = step(vRect.xy, vUV.xy);\n\tvec2 vTestMax = step(vUV.xy, vRect.zw);\t\n\tvec2 vTest = vTestMin * vTestMax;\n\treturn vTest.x * vTest.y;\n}\n\nfloat SampleDigit(const in float fDigit, const in vec2 vUV)\n{\n\tconst float x0 = 0.0 \/ 4.0;\n\tconst float x1 = 1.0 \/ 4.0;\n\tconst float x2 = 2.0 \/ 4.0;\n\tconst float x3 = 3.0 \/ 4.0;\n\tconst float x4 = 4.0 \/ 4.0;\n\t\n\tconst float y0 = 0.0 \/ 5.0;\n\tconst float y1 = 1.0 \/ 5.0;\n\tconst float y2 = 2.0 \/ 5.0;\n\tconst float y3 = 3.0 \/ 5.0;\n\tconst float y4 = 4.0 \/ 5.0;\n\tconst float y5 = 5.0 \/ 5.0;\n\n\t\/\/ In this version each digit is made of up to 3 rectangles which we XOR together to get the result\n\t\n\tvec4 vRect0 = vec4(0.0);\n\tvec4 vRect1 = vec4(0.0);\n\tvec4 vRect2 = vec4(0.0);\n\t\t\n\tif(fDigit < 0.5) \/\/ 0\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y1, x2, y4);\n\t}\n\telse if(fDigit < 1.5) \/\/ 1\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y5); vRect1 = vec4(x0, y0, x0, y0);\n\t}\n\telse if(fDigit < 2.5) \/\/ 2\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y3, x2, y4); vRect2 = vec4(x1, y1, x3, y2);\n\t}\n\telse if(fDigit < 3.5) \/\/ 3\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y3, x2, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 4.5) \/\/ 4\n\t{\n\t\tvRect0 = vec4(x0, y1, x2, y5); vRect1 = vec4(x1, y2, x2, y5); vRect2 = vec4(x2, y0, x3, y3);\n\t}\n\telse if(fDigit < 5.5) \/\/ 5\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x3, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 6.5) \/\/ 6\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x3, y4); vRect2 = vec4(x1, y1, x2, y2);\n\t}\n\telse if(fDigit < 7.5) \/\/ 7\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x0, y0, x2, y4);\n\t}\n\telse if(fDigit < 8.5) \/\/ 8\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y1, x2, y2); vRect2 = vec4(x1, y3, x2, y4);\n\t}\n\telse if(fDigit < 9.5) \/\/ 9\n\t{\n\t\tvRect0 = vec4(x0, y0, x3, y5); vRect1 = vec4(x1, y3, x2, y4); vRect2 = vec4(x0, y1, x2, y2);\n\t}\n\telse if(fDigit < 10.5) \/\/ '.'\n\t{\n\t\tvRect0 = vec4(x1, y0, x2, y1);\n\t}\n\telse if(fDigit < 11.5) \/\/ '-'\n\t{\n\t\tvRect0 = vec4(x0, y2, x3, y3);\n\t}\t\n\t\n\tfloat fResult = InRect(vUV, vRect0) + InRect(vUV, vRect1) + InRect(vUV, vRect2);\n\t\n\treturn mod(fResult, 2.0);\n}\n\nconst float kCharBlank = 12.0;\nconst float kCharMinus = 11.0;\nconst float kCharDecimalPoint = 10.0;\n\nfloat PrintValue(const in vec2 vStringCharCoords, const in float fValue, const in float fMaxDigits, const in float fDecimalPlaces)\n{\n\tfloat fAbsValue = abs(fValue);\n\t\n\tfloat fStringCharIndex = floor(vStringCharCoords.x);\n\t\n\tfloat fLog10Value = log2(fAbsValue) \/ log2(10.0);\n\tfloat fBiggestDigitIndex = max(floor(fLog10Value), 0.0);\n\t\n\t\/\/ This is the character we are going to display for this pixel\n\tfloat fDigitCharacter = kCharBlank;\n\t\n\tfloat fDigitIndex = fMaxDigits - fStringCharIndex;\n\tif(fDigitIndex > (-fDecimalPlaces - 1.5))\n\t{\n\t\tif(fDigitIndex > fBiggestDigitIndex)\n\t\t{\n\t\t\tif(fValue < 0.0)\n\t\t\t{\n\t\t\t\tif(fDigitIndex < (fBiggestDigitIndex+1.5))\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharMinus;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\t\t\n\t\t\tif(fDigitIndex == -1.0)\n\t\t\t{\n\t\t\t\tif(fDecimalPlaces > 0.0)\n\t\t\t\t{\n\t\t\t\t\tfDigitCharacter = kCharDecimalPoint;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif(fDigitIndex < 0.0)\n\t\t\t\t{\n\t\t\t\t\t\/\/ move along one to account for .\n\t\t\t\t\tfDigitIndex += 1.0;\n\t\t\t\t}\n\n\t\t\t\t\/\/ This is inaccurate - I think because I treat each digit independently\n\t\t\t\t\/\/ The value 2.0 gets printed as 2.09 :\/\n\t\t\t\tfloat fDigitValue = (fAbsValue \/ (pow(10.0, fDigitIndex)));\n\t\t\t\tfDigitCharacter = mod(floor(fDigitValue+0.0001), 10.0);\n\t\t\t}\t\t\n\t\t}\n\t}\n\n\tvec2 vCharPos = vec2(fract(vStringCharCoords.x), vStringCharCoords.y);\n\n\treturn SampleDigit(fDigitCharacter, vCharPos);\t\n}","name":"","description":"","type":"image"}]}}