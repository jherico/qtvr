{"Shader":{"ver":"0.1","info":{"id":"ltlXRX","date":"1438647228","viewed":908,"name":"Grid thing","username":"janneasdf","description":"3D raymarching some cubes to create a grid","likes":16,"published":3,"flags":0,"tags":["3d","raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float PI = 3.1415;\n\nconst float CamSpeed = 1.0;\nconst vec3 CubeColor = vec3(0.99, 0.1, 0.05) * 0.9;\nconst vec3 BackgroundColor = vec3(0.0, 0.0, 0.0);\nconst float CubeFatness = 0.2;\nconst float CubeDist = 3.0;\nconst float RotationFactor = 0.1;\n\nfloat map(vec3 p);\n\nvec3 approxNormal(vec3 pos)\n{\n    float epsilon = 0.001;\n\tvec2 t = vec2(0.0, epsilon);\n    vec3 n = vec3(map(pos + t.yxx) - map(pos - t.yxx),\n           \t  map(pos + t.xyx) - map(pos - t.xyx),\n              map(pos + t.xxy) - map(pos - t.xxy));\n    return normalize(n);\n}\n\nfloat sdBox(vec3 p, vec3 boxDims)\n{\n  vec3 d = abs(p) - boxDims;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat map(vec3 p)\n{\n    float d = 99999.0;\n\n    float c = cos(RotationFactor * p.z);\n    float s = sin(RotationFactor * p.z);\n    mat2 m = mat2(c, -s, s, c);\n    p = vec3(m * p.xy, p.z);\n\n    p = mod(p, CubeDist) - 0.5 * CubeDist;\n    d = min(d, sdBox(p, vec3(0.5 * CubeDist, CubeFatness, CubeFatness)));\n    d = min(d, sdBox(p, vec3(CubeFatness, 0.5 * CubeDist, CubeFatness)));\n    d = min(d, sdBox(p, vec3(CubeFatness, CubeFatness, 0.5 * CubeDist)));\n\n    return d;\n}\n\nvec3 getColor(vec3 rayPos, vec3 rayDir)\n{\n    vec3 color = BackgroundColor;\n\n    float total_dist = 0.0;\n    float d;\n    int iters = 0;\n    for (int i = 0; i < 128; ++i)\n    {\n    \t++iters;\n    \td = map(rayPos);\n        rayPos += d * rayDir;\n        total_dist += d;\n        if (d < 0.0001)\n        {\n        \tbreak;\n        }\n    }\n    \n    if (d < 0.001)\n    {\n    \tfloat iter_factor = float(iters) \/ 128.0;\n    \tcolor = CubeColor * vec3(1.0 - iter_factor);\n    \tfloat bg_mix_factor = max(0.0, total_dist \/ 100.0);\n    \tcolor = mix(color, BackgroundColor, bg_mix_factor);\n        color = vec3(1.0) - color * 18.0;\n    }\n\n    return color;\n}\n\nvec3 camRail(float t)\n{\n\treturn vec3(0.0, 0.0, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float aspect = iResolution.x \/ iResolution.y;\n    \n    \/\/ Make uv go [-0.5, 0.5] and scale uv.x according to aspect ratio\n    uv -= .5;\n    uv.x = aspect * uv.x;\n    \n    \/\/ Initialize camera stuff\n    vec3 camPos = camRail(CamSpeed * iGlobalTime);\n    vec3 camTarget = camRail(CamSpeed * iGlobalTime + 0.1);\n    vec3 camUp = vec3(0., 1., 0.);\n    vec3 camDir = normalize(camTarget - camPos);\n    vec3 camRight = normalize(cross(camUp, camDir));\n    camUp = normalize(cross(camDir, camRight));\n    \n    vec3 rayPos = camPos;\n    vec3 rayDir = normalize(camDir + uv.x * camRight + uv.y * camUp);\n    \n    \/\/ Raymarch scene to get pixel color\n    vec3 color = getColor(rayPos, rayDir);\n    \n    \/\/ Set pixel color\n\tfragColor = vec4(color, 1.0);\n}\n","name":"","description":"","type":"image"}]}}