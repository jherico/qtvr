{"Shader":{"ver":"0.1","info":{"id":"XsfXD2","date":"1406745710","viewed":1518,"name":"Synesthesia 1","username":"Dave_Hoskins","description":"Instructions:- In the dark, headphones loud, full screen!  <img src=\"\/img\/emoticonHappy.png\"\/>","likes":9,"published":3,"flags":8,"tags":["synesthesia"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define PI 3.14159265359\n\nvec2 HashClap(float n)\n{\n\treturn (texture2D( iChannel0, vec2(n*15.77331, n*35.66927), -100.0).xy-.5)* 2.0;\n}\n\nvec2 Hash22(vec2 n)\n{\n\treturn (texture2D( iChannel1, n, -100.0).xy-.5) * 2.0;\n}\n\nfloat Hash( float x )\n{    \n\treturn fract(sin(1371.1*x)*43758.5453)-.5;\n}\n\nfloat Hash12( vec2 n )\n{\n\treturn (texture2D( iChannel1, n, -100.0).x-.5) * 2.0;\n}\n\nfloat DE_Circle(vec2 uv, vec2 p, float s)\n{\n\tuv -= p;\n\treturn length(uv) - s;\n}\n\nfloat Bass(float n)\n{\n\tvec4 bassNotes1 = vec4(0.0, 12.0, 1.0, 0.0);\n\tvec4 bassNotes2 = vec4(4.0, 16.0, 3.0, 1.0);\n\n\tfloat ret = 0.0;\n\tif (n < 4.0)\n\t{\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tfloat value = bassNotes1[i];\n\t\t\tif (float(i) < n) ret = value;\n\t\t}\n\t}else\n\t{\n\t\tn-=4.0;\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tfloat value = bassNotes2[i];\n\t\t\tif (float(i) < n) ret = value;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\/\/--------------------------------------------------------------------------\nfloat FractalNoise(in vec2 xy)\n{\n    \n    xy *= .03;\n\tfloat w = 1.0;\n\tfloat f = 0.0;\n\n\tfor (int i = 0; i < 7; i++)\n\t{\n\t\tf += (1.0-abs(Hash12(xy))) * w;\n\t\tw *= 0.5;\n\t\txy *= 2.;\n\t}\n\treturn pow(f, 8.0)*.35;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ((fragCoord.xy \/ iResolution.xy) * 2.0 - 1.0) * vec2(iResolution.x\/iResolution.y, 1.0);\n\t\n\tfloat time = iGlobalTime;\n\tfloat bps = time * .95 + time*time*.0165;\n\n\tfloat gain = smoothstep(0.0, .1, bps);\n\tbps *= (1.0 + smoothstep(-2.0, 2.0, bps) * 4.0 * smoothstep(4.0, 2.0, bps));\n\t\n\t\/\/ Do a kick drum...\n\tfloat t = mod(bps, .5);\n\tif (mod(bps, 8.0) > 7.75) t = mod(bps, .125) * 1.25;\n\tfloat kick = exp(-2.0*t)*1.3;\n\t\n\tt = DE_Circle(uv, vec2(0.0, -1.5), kick);\n\tkick = smoothstep(0.5, .0, t) * smoothstep(-0.5, .1, t) * sin(t*18.0);\n\t\n\t\/\/ Do the hand clap...\n\tt = mod(bps, 1.0);\n\tfloat v = mod(bps, 4.0)-3.0;\n\tif (v > 0.0 && v < .5) t = mod(bps, .25);\n    float clap = exp(-6.0*t) * 2.5;\n\tt = DE_Circle(uv, vec2(-1.0, 0.25), clap);\n\tt *= DE_Circle(uv, vec2(1.0, 0.25), clap);\n\tclap = smoothstep(0.01+FractalNoise(uv*t+vec2(sin(bps*PI*.25), 0.0))*.02, -.1, t) * smoothstep(-.5, .0, t);\n\t\n\t\/\/ do the hi-hats with short and long hits...\n\tt = mod(bps, .25);\n\tv = (mod(bps+.25, .5) + .1);\n\tfloat hats = exp(-30.0*t*v);\n\thats = smoothstep(.5, .99, uv.y*hats); \n\t\n\t\/\/ Do the crashing sound every four beats...\n\tt = mod(bps, 4.0);\n\tfloat crash = exp(-2.0*t) * (max(-cos(uv.x*PI*.8), 0.0)*abs(uv.y*.05))*13.0;\n\t\n\t\/\/ Do the bass...\n    float note = 0.0;\n    float tint = 0.0;\n    for (int i = 0; i < 6; i++)\n    {\n        float pos = float(i) \/ 6.0;\n        v = mod(bps+pos, .5);\n        float n = mod(bps*4.0,8.0);\n        n = Bass(n)-10.0;\n\n        t = mod(bps+pos, 8.0) * .5;\n        t = DE_Circle(uv*vec2(.8-v, 1.0), vec2(t*.5-1.0, n*.1+.2), pos*.75);\n        note += smoothstep(0.01+pos*.2, .0, t)  *  smoothstep(-0.2-pos*.2, 0.01, t) * (1.0-pos) * v;\n        tint += -(sin(bps*.125*PI)+.51)*.15 * pos;\n\t}\n    \n\t\/\/ Synth...\n    float synth = 0.0;\n    for (int i = 0; i < 6; i++)\n    {\n        float pos = 1.0-float(i) \/ 6.0;\n        t = mod(bps -pos, 8.0);\n        float vol = exp(-1.0*t) + exp(-2.0* (smoothstep(3.0, 2.0, t) + smoothstep(5.0, 8.0, t)));\n        v = smoothstep(2.0, 5.0, t);\n        v = floor(v*24.0+.5) \/ 12.0;\n        float n = .202-sin(t*PI*4.0)*.2;\n\n        t = smoothstep(2.0, 4.0, t)*smoothstep(6.0, 4.0, t);\n        t = sin(t*PI*8.0)*t;\n        t = DE_Circle(uv, vec2(t, v*.55-.6), n*pos*1.2);\n        \n        synth += smoothstep(0.01+pos*.1, 0.0, t) * vol * (1.0-pos)*1.5;\n    }\n    synth *= step(8.0, bps);\n    \n\tvec3 col = vec3(clap, clap*clap*.9, clap*.5) + vec3(0.0, 0.0, kick) +\n\t\t\t   vec3(crash*.5, crash, crash*.75) + vec3(note, note*tint, 0.0) + vec3(hats, hats*.3, hats) + \n        \t\tvec3(synth);\n\t\n\tcol = mix(col, vec3(0.0), smoothstep(55.0, 60.0, time)  + smoothstep(4.0, 0.0, time)) * 1.3;\n    col = clamp(col, 0.0, 1.0);\n\t\n\tfragColor = vec4(sqrt(col), 1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define PI 3.14159265359\n\nvec2 HashClap(float n)\n{\n\treturn (texture2D( iChannel0, vec2(n*15.77331, n*35.66927), -100.0).xy-.5)* 2.0;\n}\n\nvec2 HashCrash(float n)\n{\n\treturn (texture2D( iChannel1, vec2(n*235.77331, n*15.66927), -100.0).xy-.5) * 2.0;\n}\n\nfloat Hash( float x )\n{    \n\treturn fract(sin(1371.1*x)*43758.5453)-.5;\n}\n\n\/\/ We don't need filters! :)\nfloat Saw(float n, float g, float time)\n{\n\tfloat v = 0.0;\n\tfloat f = 1.0;\n\tfloat filter = (sin(time*.125*PI)+.51)*.02;\n\tfor (int i = 0; i < 64; i++)\n\t{\n\t\tv += (.7 * (sin(2.0*f * n * PI) \/ f )) \/ (g*f*filter);\n\t\tf++;\n\t}\n\treturn v * .002;\n}\n\n\nfloat Bass(float n)\n{\n\tvec4 bassNotes1 = vec4(0.0, 12.0, 1.0, 0.0);\n\tvec4 bassNotes2 = vec4(4.0, 16.0, 3.0, 1.0);\n\n\tfloat ret = 0.0;\n\tif (n < 4.0)\n\t{\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tfloat value = bassNotes1[i];\n\t\t\tif (float(i) < n) ret = value;\n\t\t}\n\t}else\n\t{\n\t\tn-=4.0;\n\t\tfor (int i = 0; i < 4; i++)\n\t\t{\n\t\t\tfloat value = bassNotes2[i];\n\t\t\tif (float(i) < n) ret = value;\n\t\t}\n\t}\n\treturn ret;\n}\n\n\nvec2 mainSound(float time)\n{\n\tfloat bps = time * .95 + time*time*.0165;\n\n    bps *= (1.0 + smoothstep(-2.0, 2.0, bps) * 4.0 * smoothstep(4.0, 2.0, bps));\n\t\n\t\/\/ Do a kick drum...\n\tfloat t = mod(bps, .5);\n\tif (mod(bps, 8.0) > 7.75) t = mod(bps, .125) * 1.25;\n\tfloat kick = sin(t*1300.0 * exp(-(11.0+sin(bps*.5*PI)* 5.0)*t)) * exp(-2.0*t);\n\n\t\/\/ Do the hand clap...\n\tt = mod(bps, 1.0);\n\tfloat v = mod(bps, 4.0)-3.0;\n\tif (v > 0.0 && v < .5) t = mod(bps, .25);\n    vec2 clap = vec2( HashClap(time + exp(-t*3.0))*exp(-8.0*t))* .8;\n\n\t\/\/ do the hi-hats with short and long hits...\n\tt = mod(bps, .25);\n\tv = (mod(bps+.25, .5) + .1);\n\tvec2 hats = vec2( Hash(time)*exp(-30.0*t*v)) * .3;\n\n\t\/\/ Do the crashing sound every four beats...\n\tt = mod(bps, 4.0);\n\tvec2 crash = HashCrash(t*.15+time*.05)*exp(-3.0*t) * .4;\n\t\n\t\/\/ Do the bass...\n\tv = mod(bps, .5);\n\tfloat n = mod(bps*4.0,8.0);\n\tfloat note = Saw(55.0 * (pow(2.0, Bass(n)\/12.0)) * time, (.5001-v), bps);\n\tnote = clamp(note, -.23, .23);\n\n    \/\/ Synth...\n    vec2 synth = vec2(0.0, 0.0);\n    for (int i = 0; i < 4; i++)\n    {\n        float pos = (float(i) \/ 4.0);\n        t = mod(bps-pos*1.0, 8.0);\n        v = smoothstep(2.0, 5.0, t);\n        v = floor(v*24.0+.5) \/ 12.0;\n        n = Saw(220.0 * pow(2.0, v) * time, .402-sin(t*PI*8.0)*.4, time);\n        n = (clamp(n, -.25, .25));\n        v = exp(-1.0*t) * 1.2 + exp(-2.0* (smoothstep(3.0, 2.0, t) + smoothstep(5.0, 8.0, t)));\n        synth += vec2(n * v) * (.5\/(pos+.25)) * .38;\n    }\n    \n    v = smoothstep(2.0, 4.0, t)*smoothstep(6.0, 4.0, t);\n    v = sin(v*PI*4.0)*.75*v+.5;\n    synth *= vec2(v, 1.0 - v) * step(8.0, bps);\n\t\n\t\/\/ Mixer...\n\tvec2 audio = (kick + clap + hats + crash + note + synth) * .8;\n\taudio = clamp(audio, -1.0, 1.0);\n\n    \/\/ Volume controls and maximizer...\n    audio = mix(audio, vec2(0.0), smoothstep(55.0, 60.0, time) + smoothstep(4.0, 0.0, time));\n\treturn (1.5 * audio - 0.5 * audio * audio * audio);\n}","name":"","description":"","type":"sound"}]}}