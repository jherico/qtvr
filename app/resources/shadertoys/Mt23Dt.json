{"Shader":{"ver":"0.1","info":{"id":"Mt23Dt","date":"1433784085","viewed":243,"name":"Guilin","username":"dr2","description":"An idealized version of an amazing landscape.","likes":1,"published":3,"flags":0,"tags":["landscape"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Guilin\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec2 Hashv2v2 (vec2 p)\n{\n  const vec2 cHashVA2 = vec2 (37.1, 61.7);\n  const vec2 e = vec2 (1., 0.);\n  return fract (sin (vec2 (dot (p + e.yy, cHashVA2),\n     dot (p + e.xy, cHashVA2))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nmat3 flMat;\nvec3 flPos, qHit, noiseDisp;\nfloat tCur;\nint idObj;\nconst float dstFar = 100.;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (20. * sin (0.2 * t) * sin (0.11 * t) * cos (0.07 * t) +\n     19. * sin (0.02 * t), 1.3, 0.6 * t);\n}\n\nfloat GrndHt (vec2 p)\n{\n  return 0.1 + 0.05 * smoothstep (0.6, 1.3, Fbm2 (2. * p));\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.3, 0.4 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 4; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy), e.x,\n     ht - GrndHt (p.xz + e.yx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 g, q;\n  float dMin, d, r, ht, rad, a, aa;\n  dMin = dstFar;\n  g.xz = floor ((p.xz + 2.) \/ 4.);\n  q = p;\n  q.xz -= g.xz * 4.;\n  q.xz += 1.6 * (Hashv2v2 (21. * g.zx) - 0.5);\n  q.xz = Rot2D (q.xz, 2. * pi * Hashfv2 (13.55 * g.xz));\n  aa = 0.15 * Hashfv2 (12.4 * g.xz);\n  q.xy = Rot2D (q.xy, aa);\n  a = atan (q.z, q.x) \/ (2. * pi) + 0.5;\n  ht = 0.2 + 0.5 * Hashfv2 (11.2 * g.xz);\n  rad = 0.3 + 0.2 * Hashfv2 (11.7 * g.xz);\n  r = max (0., (ht + rad - q.y) \/ (ht + rad));\n  d = PrCapsDf (q.xzy, (1. + 0.3 * r * r) * rad *\n     (1. + 0.15 * clamp (0.7 * r, 0., 1.) * abs (sin (30. * pi * a))), ht);\n  d = min (d, p.y + 0.1);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  if (ht > 0.5) {\n    q.y -= ht + rad - 0.02;\n    q.xy = Rot2D (q.xy, - aa);\n    d = max (PrCylDf (q.xzy, 0.3 * rad, 0.04),\n       - PrCylDf (q.xzy, 0.25 * rad, 0.05));\n    if (d < dMin) { dMin = d;  idObj = 2;  qHit = q; }\n    d = PrCapsDf (q.xzy, 0.02, 0.11);\n    if (d < dMin) { dMin = d;  idObj = 3;  qHit = q; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat TriNoise3d (vec3 p)\n{\n  vec3 q;\n  float a, f;\n  a = 2.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx) + noiseDisp;\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.y + FrAbsf (p.z))));\n    q = 2. * q + 0.2;\n    a *= 0.7;\n  }\n  return f;\n}\n\nfloat FogAmp (vec3 p, float d)\n{\n  vec3 q;\n  q = p + noiseDisp;\n  q.x += 0.3 * sin (tCur * 1.5);\n  q.z += sin (0.5 * q.x);\n  q.y *= 2.;\n  q.y += 0.2 * sin (0.3 * q.x) + 0.1 * sin (tCur * 0.6);\n  return 0.2 * TriNoise3d (1.5 * q \/ (d + 30.)) *\n     (1. - smoothstep (1., 7., p.y)) * (2. - smoothstep (0., 0.2, p.y));\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit)\n{\n  vec3 q;\n  float d, dq, fFac, f, fa;\n  d = 2.5;\n  dq = 0.2;\n  fFac = 1.;\n  for (int i = 0; i < 6; i ++) {\n    q = ro + rd * d;\n    f = FogAmp (q, d);\n    fa = 1. - clamp (f - FogAmp (q + dq, d), 0., 1.);\n    col = mix (col, vec3 (0.95, 0.95, 0.9) * fa,\n       clamp (fFac * f * smoothstep (0.9 * d, 2.3 * d, dHit), 0., 1.));\n    d *= 1.6;\n    dq *= 0.8;\n    fFac *= 1.1;\n    if (d > dHit) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, roo, ltDir;\n  float dstHit, dstGrnd, dstObj;\n  ltDir = normalize (vec3 (-1., 1., -1.));\n  noiseDisp = 0.05 * tCur * vec3 (-1., 0., 1.);\n  dstHit = dstFar;\n  roo = ro;\n  dstGrnd = GrndRay (ro, rd);\n  idObj = -1;\n  dstObj = ObjRay (ro, rd);\n  if (idObj < 0) dstObj = dstFar;\n  vec3 skyCol = vec3 (0.5, 0.6, 0.9) - rd.y * 0.2 * vec3 (1., 0.5, 1.) +\n     0.2 * vec3 (1., 0.6, 0.1) * pow (clamp (dot (ltDir, rd), 0., 1.), 8.);\n  dstHit = min (dstObj, dstGrnd);\n  if (dstHit >= dstFar) col = skyCol;\n  else {\n    if (dstHit < dstGrnd) {\n      ro += rd * dstHit;\n      vn = ObjNf (ro);\n      if (idObj == 1) {\n\tvn = VaryNf (20. * qHit, vn, 2.);\n\tcol = mix (vec3 (0.3, 0.5, 0.1), vec3 (0.55, 0.5, 0.45),\n\t   clamp (1.4 * ro.y, 0., 1.));\n      } else if (idObj == 2) {\n        vn = VaryNf (10. * qHit, vn, 1.);\n        col = vec3 (0.6, 0.4, 0.3);\n      } else if (idObj == 3) {\n        col = vec3 (1., 1., 0.) * (0.8 - 0.2 * dot (vn, rd));\n      }\n      if (idObj != 3) col = col * (0.55 + 0.45 * max (dot (vn, ltDir), 0.)) ;\n    } else {\n      ro += rd * dstHit;\n      vn = GrndNf (ro, dstHit);\n      vn = VaryNf (10. * ro, vn, 0.3);\n      col = mix (vec3 (0.6, 0.3, 0.2), vec3 (0.4, 0.7, 0.3),\n\t clamp (5. * ro.y, 0., 1.));\n      col = col * (0.6 + 0.4 * max (dot (vn, ltDir), 0.)) ;\n    }\n    col = mix (vec3 (0.5, 0.6, 0.9), col,\n       exp (- 2. * clamp (5. * (dstHit \/ dstFar - 0.8), 0., 1.)));\n  }\n  col = FogCol (col, roo, rd, min (dstGrnd, dstObj));\n  return col;\n}\n\nvoid FlyerPM (float t)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 2.;\n  flPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) \/ (2. * dt);\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  ort = vec3 (0.2, atan (vel.z, vel.x) - 0.5 * pi, 0.2 * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 rd, ro;\n  FlyerPM (tCur);\n  ro = flPos;\n  rd = normalize (vec3 (uv, 2.)) * flMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}