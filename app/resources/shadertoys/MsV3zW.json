{"Shader":{"ver":"0.1","info":{"id":"MsV3zw","date":"1453833480","viewed":123,"name":"Balls and Springs","username":"dr2","description":"Elastic balls connected by springs. Use the mouse to spin the box.","likes":6,"published":3,"flags":32,"tags":["dynamics","quaternions"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Balls and Springs\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/*\nElastic balls connected by springs (diagonal springs are not shown); there are\nalso damping forces and gravity (always acts downwards). The front-facing walls\nare transparent. Use the mouse to spin the box.\n*\/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylEEDf (vec3 p, vec3 e1, vec3 e2, float r)\n{\n  vec3 u;\n  p -= e1;\n  u = e2 - e1;\n  return length (p - clamp (dot (p, u) \/ dot (u, u), 0., 1.) * u) - r;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nconst float pi = 3.14159;\nconst int nMol = 8, nSpring = 12;\nvec3 pMol[nMol], pSpring[2 * nSpring], ltDir, rdSign;\nfloat wSpring[nSpring], dstFar, hbLen;\nint idObj;\n\nfloat ObjDf (vec3 p)\n{\n  vec4 fVec;\n  vec3 q, eLen, eShift;\n  float dMin, d, eWid, sLen;\n  dMin = dstFar;\n  sLen = hbLen - 0.5;\n  eWid = 0.04;\n  eShift = vec3 (0., sLen, sLen);\n  eLen = vec3 (sLen + eWid, eWid, eWid);\n  fVec = sLen * vec4 (rdSign, 0.);\n  d = min (min (PrBoxDf (p - fVec.xww, eLen.yxx),\n     PrBoxDf (p - fVec.wyw, eLen.xyx)), PrBoxDf (p - fVec.wwz, eLen.xxy));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  q = abs (p);\n  d = min (min (PrBoxDf (q - eShift, eLen), PrBoxDf (q - eShift.yxz, eLen.yxz)),\n     PrBoxDf (q - eShift.yzx, eLen.yzx));\n  if (d < dMin) { dMin = d;  idObj = 2; }\n  for (int n = 0; n < nSpring; n ++) {\n    d = PrCylEEDf (p, pSpring[2 * n], pSpring[2 * n + 1], wSpring[n]);\n    if (d < dMin) { dMin = d;  idObj = 3; }\n  }\n  for (int n = 0; n < nMol; n ++) {\n    d = PrSphDf (p - pMol[n], 0.45);\n    if (d < dMin) { dMin = d;  idObj = 10 + n; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 5; j ++) {\n    d = 0.1 + float (j) \/ 8.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return 0.3 + 0.7 * clamp (1. - 0.1 * ao, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, vn, w;\n  float dstHit, ao;\n  int idObjT;\n  idObj = -1;\n  rdSign = sign (rd);\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      w = smoothstep (0., 0.1, abs (fract (1.95 * ro + 0.5) - 0.5));\n      objCol = vec4 (mix (vec3 (0.5, 0.5, 0.2), vec3 (0.4, 0.4, 1.),\n         dot (abs (vn) * w.yzx * w.zxy, vec3 (1.))), 0.4);\n    } else if (idObj == 2) objCol = vec4 (0.5, 0.5, 0.2, 0.4);\n    else if (idObj == 3) objCol = vec4 (0.7, 0.6, 0.6, 1.);\n    else  objCol = vec4 (HsvToRgb (vec3 (float (idObj - 10) \/ float (nMol),\n       1., 1.)), 1.);\n    ao = ObjAO (ro, vn);\n    col = objCol.rgb * (0.4 + 0.6 * ao * max (dot (vn, ltDir), 0.)) +\n       objCol.a * ao * pow (max (0., dot (ltDir, reflect (rd, vn))), 128.);\n  } else col = vec3 (0., 0.1, 0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid GetMols ()\n{\n  vec2 mPair[nSpring];\n  float spLen, sd;\n  for (int n = 0; n < nMol; n ++) pMol[n] = Loadv4 (2 * n).xyz;\n  hbLen = Loadv4 (2 * nMol).y;\n  mPair[0] = vec2 (0, 1);  mPair[1] = vec2 (0, 2);  mPair[2] = vec2 (1, 3);\n  mPair[3] = vec2 (2, 3);  mPair[4] = vec2 (4, 5);  mPair[5] = vec2 (4, 6);\n  mPair[6] = vec2 (5, 7);  mPair[7] = vec2 (6, 7);  mPair[8] = vec2 (0, 4);\n  mPair[9] = vec2 (1, 5);  mPair[10] = vec2 (2, 6); mPair[11] = vec2 (3, 7);\n  spLen = 1.5;\n  for (int n = 0; n < nSpring; n ++) {\n    pSpring[2 * n] = Loadv4 (2 * int (mPair[n].x)).xyz;\n    pSpring[2 * n + 1] = Loadv4 (2 * int (mPair[n].y)).xyz;\n    sd = length (pSpring[2 * n + 1] - pSpring[2 * n]) \/ spLen;\n    wSpring[n] = clamp (0.2 * (1. - sd * sd), 0.05, 0.2);\n  }\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 qtVu;\n  vec3 col, rd, ro;\n  vec2 canvas, uv, ut;\n  float tCur;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  ut = abs (uv) - vec2 (1.);\n  if (max (ut.x, ut.y) > 0.003) col = vec3 (0.82);\n  else {\n    dstFar = 100.;\n    qtVu = Loadv4 (2 * nMol + 1);\n    vuMat = QToRMat (qtVu);\n    rd = normalize (vec3 (uv, 8.)) * vuMat;\n    ro = vec3 (0., 0., -35.) * vuMat;\n    ltDir = normalize (vec3 (1., 1.5, -1.2)) * vuMat;\n    GetMols ();\n    col = ShowScene (ro, rd);\n  }\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Balls and Springs\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nvec4 QMul (vec4 q1, vec4 q2)\n{\n  return vec4 (\n     q1.w * q2.x - q1.z * q2.y + q1.y * q2.z + q1.x * q2.w,\n     q1.z * q2.x + q1.w * q2.y - q1.x * q2.z + q1.y * q2.w,\n   - q1.y * q2.x + q1.x * q2.y + q1.w * q2.z + q1.z * q2.w,\n   - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z + q1.w * q2.w);\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 EulToQ (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst float pi = 3.14159;\nconst int nMol = 8;\nconst int nSpring = 12, nSpringD = 4;\nvec4 qtVu;\nfloat hbLen, spLen;\n\nvoid Step (int mId, out vec3 r, out vec3 v)\n{\n  vec3 rn, vn, dr, f;\n  vec2 mPair[nSpring], mPairD[nSpringD];\n  float fOvlap, fSpring, fDamp, grav, rSep, spLenD, dt;\n  int j1, j2;\n  mPair[0] = vec2 (0, 1);  mPair[1] = vec2 (0, 2);  mPair[2] = vec2 (1, 3);\n  mPair[3] = vec2 (2, 3);  mPair[4] = vec2 (4, 5);  mPair[5] = vec2 (4, 6);\n  mPair[6] = vec2 (5, 7);  mPair[7] = vec2 (6, 7);  mPair[8] = vec2 (0, 4);\n  mPair[9] = vec2 (1, 5);  mPair[10] = vec2 (2, 6); mPair[11] = vec2 (3, 7);\n  mPairD[0] = vec2 (0, 7);  mPairD[1] = vec2 (1, 6);\n  mPairD[2] = vec2 (2, 5);  mPairD[3] = vec2 (3, 4);\n  fOvlap = 1000.;\n  fSpring = 50.;\n  fDamp = 0.3;\n  grav = 2.;\n  r = Loadv4 (2 * mId).xyz;\n  v = Loadv4 (2 * mId + 1).xyz;\n  f = vec3 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rn = Loadv4 (2 * n).xyz;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n  }\n  for (int n = 0; n < nSpring; n ++) {\n    j1 = int (mPair[n].x);\n    j2 = int (mPair[n].y);\n    if (j1 == mId || j2 == mId) {\n      rn = Loadv4 (2 * (j1 + j2 - mId)).xyz;\n      vn = Loadv4 (2 * (j1 + j2 - mId) + 1).xyz;\n      dr = r - rn;\n      rSep = length (dr);\n      f += fSpring * (spLen - rSep) * normalize (dr) - fDamp * (v - vn);\n    }\n  }\n  spLenD = spLen * sqrt (3.);\n  for (int n = 0; n < nSpringD; n ++) {\n    j1 = int (mPairD[n].x);\n    j2 = int (mPairD[n].y);\n    if (j1 == mId || j2 == mId) {\n      rn = Loadv4 (2 * (j1 + j2 - mId)).xyz;\n      vn = Loadv4 (2 * (j1 + j2 - mId) + 1).xyz;\n      dr = r - rn;\n      rSep = length (dr);\n      f += fSpring * (spLenD - rSep) * normalize (dr) - fDamp * (v - vn);\n    }\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr +\n      vec3 (0., grav, 0.) * QToRMat (qtVu) + fDamp * v;\n  dt = 0.02;\n  v += dt * f;\n  r += dt * v;\n}\n\nvec3 VInit (int n)\n{\n  float fn;\n  fn = float (n);\n  return 2. * normalize (vec3 (Hashff (fn), Hashff (fn + 0.3),\n     Hashff (fn + 0.6)) - 0.5);\n}\n\nvoid OrientVu (inout vec4 qtVu, vec4 mPtr, inout vec4 mPtrP, bool init)\n{\n  vec3 vq1, vq2;\n  vec2 dm;\n  float mFac;\n  if (! init) {\n    qtVu = vec4 (0., 0., 0., 1.);\n    mPtrP = vec4 (99., 0., -1., 0.);\n  } else {\n    if (mPtr.z > 0.) {\n      if (mPtrP.x == 99.) mPtrP = mPtr;\n      mFac = 1.5;\n      dm = - mFac * mPtrP.xy;\n      vq1 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      dm = - mFac * mPtr.xy;\n      vq2 = vec3 (dm, sqrt (max (1. - dot (dm, dm), 0.)));\n      qtVu = normalize (QMul (vec4 (cross (vq1, vq2), dot (vq1, vq2)), qtVu));\n      mPtrP = mPtr;\n    } else mPtrP = vec4 (99., 0., -1., 0.);\n  }\n}\n\nvoid Init (int mId, out vec3 r, out vec3 v)\n{\n  vec3 vSum;\n  float fm, fme, fn;\n  fme = 2.;\n  fm = float (mId);\n  r = spLen * floor (vec3 (mod (fm, fme), mod (fm, fme * fme) \/ fme,\n     fm \/ (fme * fme))) - 0.5 * (fme - 1.);\n  v = VInit (mId);\n  vSum = vec3 (0.);\n  for (int n = 0; n < nMol; n ++) vSum += VInit (n);\n  v -= vSum \/ float (nMol);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr, mPtrP, stDat;\n  vec3 p, r, v;\n  float tCur;\n  int mId, pxId;\n  bool doInit;\n  vec2 kv = floor (fragCoord);\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol + 2) discard;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ iResolution.xy - 0.5;\n  qtVu = Loadv4 (2 * nMol + 1);\n  mPtrP = Loadv4 (2 * nMol + 2);\n  mId = pxId \/ 2;\n  doInit = false;\n  spLen = 1.5;\n  if (iFrame < 2) {\n    hbLen = 3.;\n    OrientVu (qtVu, mPtr, mPtrP, false);\n    stDat = vec4 (0., hbLen, tCur, 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    OrientVu (qtVu, mPtr, mPtrP, true);\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    if (mPtrP.z < 0.) qtVu = normalize (QMul (EulToQ (0.2 * (tCur - stDat.z) *\n       pi * vec3 (0.27, 0.34, 0.11)), qtVu));\n    stDat.z = tCur;\n    if (mId < nMol) {\n      Step (mId, r, v);\n      p = (2 * mId == pxId) ? r : v;\n    }\n  }\n  if (doInit) {\n    Init (mId, r, v);\n    p = (2 * mId == pxId) ? r : v;\n  }\n  if (pxId == 2 * nMol + 1) stDat = qtVu;\n  else if (pxId == 2 * nMol + 2) stDat = mPtrP;\n  Savev4 (pxId, ((pxId < 2 * nMol) ? vec4 (p, 0.) : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"}]}}