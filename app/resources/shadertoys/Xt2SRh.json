{"Shader":{"ver":"0.1","info":{"id":"Xt2SRh","date":"1442153956","viewed":640,"name":"Black Pearl","username":"yibojiang","description":"Practice ray tracing.","likes":2,"published":3,"flags":0,"tags":["raytracing"],"hasliked":0},"renderpass":[{"inputs":[{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":28,"src":"\/presets\/tex15.png","ctype":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define pi 3.1415926\n#define intense 1.0\n#define rotspeed 0.5\nvec3 lightDir=vec3(0.0,-3.0,2.0);\nvec3 ambCol=.5*vec3(0.1,0.1,0.1);\nvec3 sphereCol=vec3(1.0,1.,1.0);\nvec3 spherePos=vec3(0.0, 0.1,0.0 );\n\nvec3 cylinderCol=vec3(0.1,0.1,0.1);\nvec3 cylinderPos=vec3(0.3,0.1,0.1);\nvec3 cylinderDir=normalize(vec3(0.1,0.0,-0.1) );\nfloat cylinderHeight=0.1;\nvec3 eye=vec3(0.,.3,-1.0) ;\n\nvec2 noise(vec2 tc){\n    return (2.*texture2D(iChannel1, tc).xy-1.).xy;\n}\n\nvec4 tex(vec2 tc){\n \treturn texture2D(iChannel0, tc,2.);\n}\n\nvec4 tex2(vec2 tc){\n \treturn texture2D(iChannel1, tc,2.);\n}\n\n\nvec4 texCube(vec3 tc){\n \treturn textureCube(iChannel2,tc);\n}\n\nfloat intersectCylinder(inout vec3 color,in vec3 col,in vec3 eye,in vec3 ray,in vec3 p,in vec3 ndir,in float radius,in float height){\n\tfloat k=0.;\n    vec3 hit=vec3(0.);\n\n    \/\/radius=0.1*length(dot(ray,ndir) *ray);\n    \n    k=-dot(eye-p-height*ndir,ndir)\/dot(ray,ndir);\n    \/\/k=(p.y+height-eye.y)\/ray.y;\n    hit=eye+k*ray;\n    if (k>=0.){\n        vec3 rr=hit-p-ndir*height;\n        if ( length(rr)<  radius){\n            vec3 normal=ndir;\n            vec3 l=normalize(lightDir);\n            vec3 v=normalize(ray);\n            vec3 n=normalize(normal );\n            vec3 r=reflect( v , n );\n            vec3 refr=refract(v,n,1.1);\n            float diffuse=max( dot (n , -l ),0. );\n            float spec=3.* pow( max(dot(l,-r),0. ), 50. );\n            vec3 cr=texCube(r).xyz;\n            \n            \/\/col=mix(vec3(1.),vec3(0.) ,length(rr)\/r );\n            \/\/vec3 c=mix(vec3(1.),vec3(0.) ,length(rr)\/radius );\n            vec3 c=vec3(1.)*step(length(rr\/radius),0.8 );\n            \/\/c=vec3(0.9);\n            color=intense*(c*diffuse + c*spec + ambCol );\n\t\t\tcolor=c;\n\t        return k;\n        }\n    }\n    \n\n\n    vec3 aa=ray- dot( ray , ndir ) * ndir ;\n    float a=dot( aa  , aa   );\n    vec3 deltaP = eye - p;\n    float b= 2.0 * dot ( ray - dot( ray, ndir ) * ndir , deltaP - dot (deltaP , ndir) *ndir );\n    vec3 cc=deltaP - dot( deltaP,ndir)*ndir;\n    float c=dot(cc,cc)-radius*radius;\n    float delta=b*b-4.0*a*c;\n\n    if (delta>=0.){\n        k=(-b-sqrt(delta) )\/(2.0*a);\n        if (k<0.){\n         \tk= (-b+sqrt(delta) )\/(2.0*a);\n        }\n        \n        if (k>=0.){\n            vec3 hit=eye+k*ray;\n            vec3 q=hit-p;\n            float dotQ=dot(q,q);\n            if ( dotQ<height*height+radius*radius && dotQ>=0. && dot(q,ndir)>0. ){\n                vec3 q=hit-p;\n                vec3 normal=q-dot(q,ndir)*q;\n\t\t\t\tvec3 l=normalize(lightDir);\n                vec3 v=normalize(ray);\n                vec3 n=normalize(normal );\n                vec3 r=reflect( v , n );\n                vec3 refr=refract(v,n,1.1);\n                float diffuse=max( dot (n , -l ),0. );\n                float spec=3.* pow( max(dot(l,-r),0. ), 50. );\n                vec3 cr=texCube(r).xyz;\n                color=intense*(col*diffuse + c*spec + ambCol );\n                \/\/color=vec3(n);\n                return k;\n           }\n        }\n        \n    }\n    \n    \n    k=-dot(eye-p,ndir)\/dot(ray,ndir);\n    hit=eye+k*ray;\n    if (k>=0.){\n        vec3 rr=hit-p;\n        if ( length(rr)<  radius){\n            vec3 normal=ndir;\n            vec3 l=normalize(lightDir);\n            vec3 v=normalize(ray);\n            vec3 n=normalize(normal );\n            vec3 r=reflect( v , n );\n            vec3 refr=refract(v,n,1.1);\n            float diffuse=max( dot (n , -l ),0. );\n            float spec=3.* pow( max(dot(l,-r),0. ), 50. );\n            vec3 cr=texCube(r).xyz;\n            color=intense*(col*diffuse + c*spec + ambCol );\n\t        return k;\n        }\n    }\n    \n   \n\n    return k;\n}\n\nfloat intersectSphere(inout vec3 color,in vec3 col,in vec3 eye,in vec3 ray,in vec3 p,in float r){\n\tfloat k=0.;\n  \tvec3 c=p-eye;\n\tfloat rc=dot(ray,c);\n\n    float delta=rc*rc +r*r -dot(c,c );\n    if (delta>=0.){\n      \tk=rc - sqrt(delta);\n        if (k<0.){\n         \tk=rc + sqrt(delta);   \n        }\n        \n        if (k>=0.){\n           \tvec3 hit=eye+k*ray;\n            vec3 normal=hit-p;\n            vec3 l=normalize(lightDir-p);\n            vec3 v=normalize(ray);\n            vec3 n=normalize(normal );\n            \n            vec3 r=reflect( v , n );\n            vec3 refr=refract(v,n,1.1);\n\n\t\t\t\n            float diffuse=max( dot (n , -l ),0. );\n            float refrac= 1.0* max( dot(v,refr),0. );\n            float spec=3.* pow( max(dot(l,-r),0. ), 50. );\n            \/\/float spec=2.* pow( max(dot(-h,n),0. ), 4. );\n            float fre =1.7* pow(0.01+ clamp( dot(r,v),0.0,1.0), 3. );\n\t\t\t\/\/float fre =1.0* pow(0.5+ clamp(dot(-refr,v),0.0,1.0), 1.0 );\n\t        vec3 frecol = texCube(r).rgb ;\n            \n            vec3 c=col;\n            \/\/c=tex2( vec2(normal.x,normal.y) ).xyz;\n            \/\/vec3 cr=texCube(r).xyz;\n\n            vec3 crf=texCube(refr).xyz;\n\t\t\t\n            \/\/From Shane\n            vec3 bgCol = color;\n            color = intense*(frecol * fre+ c*spec + ambCol );\n            float edge = smoothstep(0., .2, dot(-ray, n));\n            color= mix(bgCol, color, edge);\n            \n\t\t\t\/\/color=intense*(frecol * fre+ c*spec  +  ambCol );\t\n            return k;\n        }\n        \n    }\n\n    \n    return 0.;\n\n}\n\nfloat intersectPlane(inout vec3 color,in vec3 col,in vec3 eye,in vec3 ray,in vec3 p,in vec3 normal){\n\tfloat k=0.;\n    k=-dot(eye,normal)\/dot(ray,normal);\n    if (k>0.){\n\n        vec3 hit=eye+k*ray;\n        \n        vec3 n=normalize(normal);\n        \/\/vec3 n1=2.*texture2D(iChannel1, vec2( hit.x,hit.z),.9).xyz;\n       \/\/ n=tex(1.0*vec2( hit.x,hit.z)).xyz;\n        vec3 v=normalize(ray);\n        vec3 l=normalize(lightDir);\n\n        float fade=smoothstep(0.0,1.0, k\/2.5 );\n        vec3 c=vec3(0.);\n        c=col*fade;\n        \/\/c=col;\n        \/\/c=1.0*tex(1.0*vec2( hit.x,hit.z)).xyz;\n        \/\/c=0.2*texCube( vec3(hit.x*1.,hit.z*1.,-1.0) ).xyz;\n        float diffuse= max(dot(n , -l ),0. );\n        vec3 r=reflect(v,n );\n\t\t\n\n        \/\/r=-l+v;\n        float spec=1.* pow( max(dot(l,-r),1. ), 9. );\n\n        vec3 refcol=vec3(0.);\n        intersectSphere(refcol, sphereCol,hit ,r, spherePos,.1 );\n       \n        vec3 shadowCol=vec3(1.0);\n        float shadow=1.0-intersectSphere(shadowCol, vec3(0.4),hit ,-l, spherePos,.1 );\n        \/\/shadowCol=clamp(shadowCol, vec3(0.),vec3(1.) );\n        \/\/shadowCol=clamp(sign(shadowCol-vec3(0.99)),vec3(0.),vec3(1.) );\n        \/\/color=(intense*(c* diffuse +intense*2.*ambCol*fade+ intense*0.2*refcol) )* shadowCol  ;\n        color=intense*(c* diffuse + ambCol +0.0*spec*c + 0.2*refcol)*shadow ;\n        \/\/color=vec3(1.,1.,1.)*v;\n        \/\/color=refcol;\n        return k;\n     \n    }\n        \n    return 0.;\n}\n\nmat3 rotate(float rx,float ry,float rz){\n\tmat3 rtx=mat3(\n        1.,0.,0.,\n        0.,cos(rx) , -sin(rx),\n        0.,sin(rx),cos(rx) );  \n    mat3 rtz=mat3( \n        cos(rz) , -sin(rz),0.,\n        sin(rz),cos(rz),0.,\n        0.,0.,1.);\n    mat3 rty=mat3( \n        cos(ry),0. , sin(ry),\n        0.0,1.0,0.0,\n        -sin(ry),0.,cos(ry) );\n    return rtx*rty*rtz;\n}\n\nmat4 move(float mx,float my,float mz){\n    return mat4(\n        1.,0.,0.,mx,\n    \t0.,1.,0.,my,\n        0.,0.,1.,mz,\n        0.,0.,0.,1.\n    );  \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy \/ iResolution.xy;\n    vec2 uv=p-vec2(0.5,0.5);\n    \n\n    uv.y*= iResolution.y\/iResolution.x;\n    vec2 q=uv;\n    vec3 color=vec3(1.0);\n    \n\n\n    float ligthrt=iGlobalTime;\n\tligthrt=0.;\n\tmat3 rtl=rotate(0.,ligthrt,0.);\n    \n    float rt=pi*.4-iGlobalTime*rotspeed;\n\t\/\/rt=0.0;\n    float rtx=abs(sin(iGlobalTime*rotspeed) );\n\n    rtx=pi*.0;\n    rtx=0.25;\n    if (iMouse.z>0.){\n    \trt=iMouse.x*0.01-pi*.5;\n        \/\/rtx=iMouse.y*0.01-pi*.5;\n    }\n    \n\t\n    vec4 eyepos=vec4(eye.xyz,1.0);\n    \/\/eyepos*=move( 0.,sin(rtx),1.0-cos(rtx) );\n    eyepos*=move( sin(-rt) ,0., 1.0-cos(-rt) );\n\n\tlightDir*=rtl;\n    eye=eyepos.xyz;\n    \n    \n    vec3 ray= normalize(vec3(q.x,q.y,1.3) );\n    ray*=rotate(rtx,0.,0.);\n    ray*=rotate(0.,rt,0.);\n    \n\n    \n    \/\/vec3 ww = ray;\n    \/\/vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    \/\/vec3 vv = normalize( cross(uu,ww));\n    \/\/vec3 rd = normalize( q.x*uu + q.y*vv + 4.0*ww );\n    \/\/color = textureCube(iChannel2, rd).rgb;\n\n\n\n    \/\/spherePos=vec3(0.0, 0.1,0.0 );    \n    \/\/spherePos.x=0.+.2*cos(iGlobalTime*1.);\n    \/\/spherePos.z=1.0+.2*sin(iGlobalTime*1.);\n    \/\/spherePos.y=0.1+abs(0.1*sin(iGlobalTime*3.) );\n    \n    intersectPlane(color,vec3(.2),eye,ray,vec3(.0,0.0,.0), vec3(0.,1.0,0.) );    \n    \/\/intersectCylinder(color, cylinderCol  ,eye,ray, cylinderPos,cylinderDir,.1 ,cylinderHeight );\n    intersectSphere(color, sphereCol ,eye ,ray, spherePos,.1 );\n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}