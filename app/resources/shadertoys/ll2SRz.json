{"Shader":{"ver":"0.1","info":{"id":"ll2SRz","date":"1441200977","viewed":342,"name":"Wobbly Blob","username":"dr2","description":"The ancient Temple of the Wobbly Blob; use the mouse for a closer look.","likes":8,"published":3,"flags":0,"tags":["raymarching","reflection","distortion"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Wobbly Blob\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nvec3 qHit, sunDir;\nfloat tCur;\nint idObj;\nconst float dstFar = 100.;\nconst int idBase = 1, idCol = 2, idColEnd = 3, idTop = 4, idReflObj = 5;\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.1, 0.1, 0.5), vec3 (0.2, 0.2, 0.5),\n     1. - max (rd.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, clCol, col;\n  float fCloud, cloudLo, cloudRngI, atFac, colSum, attSum, s,\n     att, a, dDotS, ds;\n  const int nLay = 60;\n  cloudLo = 300.;  cloudRngI = 1.\/200.;  atFac = 0.035;\n  fCloud = 0.45;\n  if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro.xz += 2. * tCur;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz \/ rd.y;\n    p.y = cloudLo;\n    ds = 1. \/ (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      att += atFac * max (fCloud - Fbm3 (0.007 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.) * 2.8 * (colSum + 0.05);\n    cSun = vec3 (1.) * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    col = clamp (mix (SkyBg (rd) + cSun, clCol, attSum), 0., 1.);\n    col = mix (col, SkyBg (rd), pow (1. - rd.y, 16.));\n  } else col = SkyBg (rd);\n  return col;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float w, f;\n  if (rd.y > 0.) col = SkyCol (ro, rd);\n  else {\n    p = ro.xz - ro.y * rd.xz \/ rd.y;\n    w = 1.;\n    f = 0.;\n    for (int j = 0; j < 3; j ++) {\n      f += w * Noisefv2 (0.1 * p);  w *= 0.5;  p *= 2.;\n    }\n    col = mix ((1. + min (f, 1.)) * 0.5 * vec3 (0.2, 0.15, 0.1),\n       0.4 * vec3 (0.3, 0.4, 0.6), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec3 SMap (vec3 p, float t)\n{\n  float f;\n  f = 2.;\n  for (int k = 0; k < 5; k ++) {\n    p += 0.4 * sin (1.7 * p.yzx \/ f + f * t);\n    f *= 0.8;\n  }\n  return p;\n}\n\nfloat BlobDf (vec3 p)\n{\n  float d;\n  p.xz = Rot2D (p.xz, 0.2 * tCur);\n  d = 0.2 * SmoothMin (PrSphDf (SMap (p - vec3 (0.7, 0., 0.), tCur + 2.),\n     1.1 + 0.31 * sin (tCur)),\n     PrSphDf (SMap (p + vec3 (0.7, 0., 0.), 1.3 * tCur),\n     1. + 0.41 * sin (1.7 * tCur)), 0.5);\n  return max (d, - p.y - 2.3);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, da, db, wr;\n  dMin = dstFar;\n  q = p;\n  d = PrBoxDf (q, vec3 (6.8, 0.101, 8.8));\n  q.y -= 0.15;\n  d = min (d, PrBoxDf (q, vec3 (6.5, 0.101, 8.5)));\n  q.y -= 0.15;\n  d = min (d, PrBoxDf (q, vec3 (6.2, 0.101, 8.2)));\n  d = max (d, - PrCylDf (q.xzy, 3.5, 0.5));\n  if (d < dMin) { dMin = d;  idObj = idBase;  qHit = q; }\n  q.y -= 5.52;\n  d = max (PrBoxDf (q, vec3 (5.8, 0.05, 7.8)),\n     - PrBoxDf (q, vec3 (4.2, 0.4, 6.2)));\n  if (d < dMin) { dMin = d;  idObj = idTop;  qHit = q; }\n  q = p;  q.y -= 3.1;\n  db = max (PrBoxDf (q, vec3 (6., 5., 8.)),\n     - PrBoxDf (q, vec3 (4., 5., 6.)));\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y -= 3.1;\n  wr = q.y \/ 2.5;\n  d = max (PrCylDf (q.xzy, 0.27 * (1.05 - 0.05 * wr * wr), 2.55), db);\n  if (d < dMin) { dMin = d;  idObj = idCol;  qHit = q; }\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y = abs (q.y - 3.1) - 2.5;\n  d = PrCylDf (q.xzy, 0.4, 0.07);\n  q.y -= 0.14;\n  d = max (min (d, PrBoxDf (q, vec3 (0.5, 0.07, 0.5))), db);\n  if (d < dMin) { dMin = d;  idObj = idColEnd;  qHit = q; }\n  q = p;  q.y -= 2.2;  \n  d = BlobDf (q);\n  if (d < dMin) { dMin = d;  idObj = idReflObj;  qHit = q; }\n  q.y -= -1.9;\n  d = PrCylDf (q.xzy, 3.5, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idReflObj;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\n#define SHADOW 1\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n#if SHADOW\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int i = 0; i < 50; i ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 30. * h \/ d);\n    d += 0.1 + 0.011 * d;\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.);\n#else\n  return 1.;\n#endif\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, rdd, vn, vnw;\n  vec2 vnC;\n  float dstHit, refl, dif, bk, sh, a, t1, t2;\n  int idObjT, showBg;\n  const int nRefl = 3;\n  refl = 1.;\n  showBg = 0;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar && idObj == idReflObj) {\n    for (int k = 0; k < nRefl; k ++) {\n      ro += rd * dstHit;\n      rd = reflect (rd, ObjNf (ro));\n      ro += 0.01 * rd;\n      refl *= 0.8;\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n      if (dstHit >= dstFar || idObj != idReflObj) break;\n    }\n    if (dstHit >= dstFar) showBg = 1;\n  } else if (dstHit >= dstFar) showBg = 1;\n  if (showBg > 0) col = refl * BgCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idCol || idObj == idColEnd) {\n      a = 0.5 - mod (20. * (atan (qHit.x, qHit.z) \/ (2. * pi) + 0.5), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a));\n    }\n    if (idObj == idBase) {\n      objCol = vec3 (0.3, 0.3, 0.25);\n      vnC = vec2 (10., 3.);\n    } else if (idObj == idTop) {\n      objCol = vec3 (0.8, 0.6, 0.2);\n      vnC = vec2 (40., 0.5);\n    } else if (idObj == idCol || idObj == idColEnd) {\n      objCol = vec3 (0.4, 0.35, 0.3);\n      vnC = vec2 (20., 1.);\n    } else {\n      objCol = vec3 (0.7);\n      vnC = vec2 (0.);\n    }\n    if (vnC.x != 0.) vn = VaryNf (vnC.x * qHit, vn, vnC.y);\n    sh = ObjSShadow (ro, sunDir);\n    bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n    dif = max (dot (vn, sunDir), 0.);\n    col = refl * objCol * (0.2 * (1. + bk) +  dif * (0.2 + 0.8 * sh) +\n       0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n  }\n  return sqrt (clamp (col, 0., 1.));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  float dist, az, f, t;\n  t = 0.02 * tCur + 0.3 * pi;\n  sunDir = normalize (vec3 (sin (t), 1.5, cos (t)));\n  if (mPtr.z <= 0.) {\n    dist = 30.;\n    az = 0.75 * pi - 0.05 * tCur;\n  } else {\n    dist = max (3.5, 30. - 60. * mPtr.y);\n    az =  0.75 * pi + 2.5 * pi * mPtr.x;\n  }\n  ro = dist * vec3 (sin (az), 0., cos (az));\n  ro.y = 5.;\n  vd = normalize (vec3 (0., 3., 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 5.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}