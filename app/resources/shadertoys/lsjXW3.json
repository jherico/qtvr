{"Shader":{"ver":"0.1","info":{"id":"lsjXW3","date":"1416735915","viewed":385,"name":"Schroedinger's Cat","username":"dr2","description":"I'm Felixa, the quantum cat with existential issues... (see comments for more)","likes":7,"published":3,"flags":0,"tags":["raymarching","cat","quantum"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Schroedinger's Cat\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  p *= p;\n  return pow (p.x + p.y, 1.\/4.);\n}\n\nfloat Length8 (vec2 p)\n{\n  p *= p;\n  p *= p;\n  p *= p;\n  return pow (p.x + p.y, 1.\/8.);\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p = mix (vec4 (c.bg, vec2 (-1., 2.\/3.)), vec4 (c.gb, vec2 (0., -1.\/3.)),\n     step (c.b, c.g));\n  vec4 q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  float d = q.x - min (q.w, q.y);\n  const float e = 1.e-10;\n  return vec3 (abs (q.z + (q.w - q.y) \/ (6. * d + e)), d \/ (q.x + e), q.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat PrSphDf (vec3 p, float r)\n{\n  return length (p) - r;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrTorus88Df (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (Length8 (p.xy) - rc, p.z);\n  return Length8 (q) - ri;\n}\n\nint idObj;\nmat3 bodyMat, headMat, tailMat, boxMat, boxMatR;\nvec3 catPos, qHit, ltDir;\nfloat bdLen, boxSize, tCur, tSeq, nSeq;\nbool isLive;\nconst float dstFar = 150.;\nconst float pi = 3.14159;\nconst int idBody = 11, idLegs = 12, idTail = 13, idHead = 14, idEars = 15,\n   idTongue = 16, idEyes = 17, idNose = 18, idWhisk = 19, idFloor = 20,\n   idWall = 21, idWallR = 22, idHinge = 23, idJar = 24;\n\nfloat CatBodyDf (vec3 p, float dHit)\n{\n  vec3 q, qh;\n  float h, d, w, a, ca, sa;\n  q = p;\n  w = q.z \/ bdLen;\n  d = PrCapsDf (q * vec3 (1.3, 1., 1.), 0.7 * bdLen * (1. - 0.07 * w * w), bdLen);\n  if (d < dHit) {\n    dHit = d;  idObj = idBody;  qHit = q;\n  }\n  q = p - bdLen * vec3 (0., -0.8, 0.);\n  vec3 qo = q;\n  q.xz = abs (q.xz) - bdLen * vec2 (0.5, 0.9);\n  q.xz += q.y * vec2 (0.1, 0.3);\n  h = 0.6 * bdLen;\n  w = q.y \/ h;\n  d = PrCapsDf (q.xzy, 0.15 * bdLen * (1. - 0.3 * w * w), h);\n  if (d < dHit + 0.2) {\n    dHit = SmoothMin (dHit, d, 0.2);  idObj = idLegs;  qHit = q * sign (qo.zyx);\n  }\n  q = p - bdLen * vec3 (0., 0., -1.8);\n  w = q.z \/ bdLen;\n  if (isLive) q.y += bdLen * (w * (1.1 - 0.3 * w) - 1.1);\n  h = 0.7 * bdLen;\n  if (isLive) a = 0.8 * sin (0.7 * 2. * pi * tCur);\n  else a = 0.;\n  ca = cos (a);\n  sa = sin (a);\n  tailMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n  q.z -= h;\n  q = tailMat * q;\n  q.z += h;\n  d = PrCapsDf (q, 0.12 * bdLen * (1. - 0.1 * w), h);\n  if (d < dHit + 0.2) {\n    dHit = SmoothMin (dHit, d, 0.2);  idObj = idTail;  qHit = q;\n  }\n  return dHit;\n}\n\nfloat CatHeadDf (vec3 p, float dHit)\n{\n  vec3 q, qh;\n  float r, h, d, w, rw, a, ca, sa;\n  qh = p - bdLen * vec3 (0., 0.9, 1.5);\n  if (isLive) a = 0.8 * sin (0.7 * 2. * pi * tCur);\n  else a = 0.;\n  ca = cos (a);\n  sa = sin (a);\n  headMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n  qh = headMat * qh;\n  q = qh;\n  q.y += 0.4 * q.z;\n  d = PrCapsDf (q * vec3 (1., 1.2, 1.), 0.65 * bdLen, 0.05 * bdLen);\n  d = max (d, - PrCylDf (q * vec3 (1., 2., 1.) - bdLen * vec3 (0., -0.42, 0.7),\n     0.15 * bdLen, 0.2 * bdLen));\n  if (d < dHit + 0.1) {\n    dHit = SmoothMin (dHit, d, 0.1);  idObj = idHead;  qHit = q;\n  }\n  q.y += 0.22 * bdLen;\n  if (isLive) a = 0.15 * sin (0.9 * 2. * pi * tCur);\n  else a = -0.15;\n  q.z -= bdLen * (0.5 + a);\n  d = PrCapsDf (q * vec3 (1., 2., 1.), 0.12 * bdLen, 0.17 * bdLen);\n  if (d < dHit) {\n    dHit = d;  idObj = idTongue;  qHit = q;\n  }\n  vec3 qe = qh - bdLen * vec3 (0., 0.75, -0.1);\n  vec3 qo = qe;\n  qe.x = abs (q.x) - 0.4 * bdLen;\n  r = 0.3 * bdLen;\n  w = qe.x \/ r;\n  rw = r * (1. - 0.5 * w * w);\n  q = qe;\n  q.z -= 0.5 * q.x;\n  float d1 = max (PrCylDf (q.yxz, rw, 0.03 * bdLen), - q.x);\n  q = qe;\n  q.z += 0.1 * q.x;\n  float d2 = max (PrCylDf (q.yxz, rw, 0.03 * bdLen), q.x);\n  d = min (d1, d2);\n  if (d < dHit + 0.1) {\n    dHit = SmoothMin (dHit, d, 0.1);  idObj = idEars;  qHit = q * sign (qo.zyx);\n  }\n  q = qh - bdLen * vec3 (0., 0., 0.37);\n  q.x = abs (q.x) - 0.3 * bdLen;\n  d = PrSphDf (q * vec3 (1., 1.5, 1.), 0.2 * bdLen);\n  if (d < dHit) {\n    dHit = d;  idObj = idEyes;  qHit = q;\n  }\n  q = qh - bdLen * vec3 (0., -0.2, 0.65);\n  q.z += 0.5 * q.y;\n  d = PrCapsDf (q, 0.1 * bdLen, 0.03 * bdLen);\n  if (d < dHit + 0.05) {\n    dHit = SmoothMin (dHit, d, 0.05);  idObj = idNose;  qHit = q;\n  }\n  q = qh - bdLen * vec3 (0., -0.3, 0.65);\n  q.xy = abs (q.xy) - bdLen * vec2 (0.1, -0.005);\n  q.yz += 0.1 * q.x * vec2 (-1., 1.);\n  d = PrCylDf (q.zyx, 0.01 * bdLen, 0.6 * bdLen);\n  if (d < dHit) {\n    dHit = d;  idObj = idWhisk;  qHit = q;\n  }\n  return dHit;\n}\n\nfloat CatDf (vec3 p, float dHit)\n{\n  vec3 q = p; \n  if (! isLive) {\n    q.x -= 1.05 * bdLen;\n    q *= vec3 (1.5, 1., 1.);\n  }\n  dHit = CatBodyDf (q, dHit);\n  dHit = CatHeadDf (q, dHit);\n  return 0.5 * dHit;\n}\n\nvec3 FurCol (vec3 p, vec3 n)\n{\n  const vec3 c1 = vec3 (0.7, 0.6, 0.), c2 = vec3 (0.1), c3 = vec3 (0.9);\n  p *= 2.5;\n  float s = Fbmn (p, n);\n  return mix (mix (c1, c2, smoothstep (0.8, 1.2, s)), c3,\n     smoothstep (1.4, 1.7, s));\n}\n\nvec4 CatCol (vec3 n)\n{\n  vec3 col = vec3 (0.);\n  float spec = 1.;\n  const vec3 wCol = vec3 (0.9);\n  vec3 q = 2. * qHit \/ bdLen;\n  if (idObj >= idBody && idObj <= idEars) {\n    if (idObj == idLegs || idObj == idHead) q *= 1.5;\n    else if (idObj == idTail || idObj == idEars) q *= 2.;\n    if (idObj == idTail) n = tailMat * n;\n    else if (idObj == idHead || idObj == idEars) n = headMat * n;\n    if (idObj == idEars && n.z > 0.4) col = vec3 (0.8, 0.6, 0.6);\n    else {\n      vec3 anis = vec3 (1.);\n      if (idObj == idBody) anis = vec3 (1., 0.7, 1.);\n      else if (idObj == idHead) anis = vec3 (1., 1., 1.3);\n      col = FurCol (q * anis, n);\n    }\n    qHit \/= bdLen;\n    if (idObj == idBody) col = mix (mix (wCol, col,\n       smoothstep (-0.65, -0.35, qHit.y)),\n       wCol, (1. - smoothstep (-1.15, -0.95, qHit.z)) *\n       smoothstep (0.3, 0.5, qHit.y));\n    else if (idObj == idHead)\n       col = mix (col, wCol, smoothstep (0.25, 0.45, qHit.z));\n    else if (idObj == idTail)\n      col = mix (col, wCol, smoothstep (0.25, 0.45, qHit.z));\n    spec = 0.1;\n  } else if (idObj == idTongue) {\n    col = vec3 (0.9, 0.4, 0.4);\n  } else if (idObj == idEyes) {\n    n = headMat * n;\n    col = vec3 (0., 0.7, 0.2);\n    if (length (qHit - bdLen * vec3 (0.16, 0.12, 0.3)) < 0.4) {\n      col = vec3 (0.4, 0., 0.);\n      spec = 5.;\n    }\n  } else if (idObj == idNose) {\n    col = vec3 (0.3, 0.2, 0.1);\n  } else if (idObj == idWhisk) {\n    col = vec3 (0.9, 0.7, 0.);\n    spec = 5.;\n  }\n  if (! isLive && idObj != idTongue)\n     col = HsvToRgb (RgbToHsv (col) * vec3 (1., 0.3, 0.8));\n  return vec4 (col, spec);\n}\n\nfloat BoxDf (vec3 p, float dHit)\n{\n  vec3 q, qb, qh;\n  float d;\n  float bb = 4. * boxSize;\n  float bh = 2.5 * boxSize;\n  float bt = 0.08 * boxSize;\n  q = p - vec3 (0., -0.5 * bt, 0.);\n  d = PrBoxDf (q, vec3 (bb - bt, bt, bb - bt));\n  if (d < dHit) {\n    dHit = d;  idObj = idFloor;  qHit = q;\n  }\n  qb = q;\n  int nx = 0;\n  if (qb.x < 0.) nx = 1;\n  qb.x = abs (qb.x) - 0.5 * bb;\n  qh = qb;\n  float a = 0.;\n  if (tSeq > 1. && tSeq < 2.) a = - pi * (tSeq - 1.);\n  else if (tSeq > 8. && tSeq < 9.) a = - pi * (9. - tSeq);\n  else if (tSeq >= 2. && tSeq <= 8.) a = - pi;\n  float ca = cos (a);\n  float sa = sin (a);\n  boxMat = mat3 (ca, - sa, 0., sa, ca, 0., 0., 0., 1.);\n  boxMatR = mat3 (ca, sa, 0., - sa, ca, 0., 0., 0., 1.);\n  qb.x -= 0.5 * bb;\n  qb = boxMat * qb;\n  qb.x += 0.5 * bb;\n  q = qb - vec3 (0.5 * bb, bh - bt, 0.);\n  d = PrBoxDf (q, vec3 (bt, bh, bb - bt));\n  if (d < dHit) {\n    dHit = d;  idObj = idWall + nx;  qHit = q;\n  }\n  q = qb - vec3 (0., bh - bt, 0.);\n  q.z = abs (q.z) - bb;\n  d = PrBoxDf (q, vec3 (0.5 * bb + bt, bh, bt));\n  if (d < dHit) {\n    dHit = d;  idObj = idWall;  qHit = q;\n  }\n  q = qb - vec3 (0., 2. * bh - 0.5 * bt, 0.);\n  d = PrBoxDf (q, vec3 (0.5 * bb + bt, bt, bb + bt));\n  if (d < dHit) {\n    dHit = d;  idObj = idWall;  qHit = q;\n  }\n\n  q = qb - vec3 (-0.1 * bb, bt + 2. * bh - 0.5 * bt, 0.);\n  d = PrTorus88Df (q.yzx, 1.5 * bt, 0.2 * bb);\n  d = max (d, - q.y);\n  if (d < dHit) {\n    dHit = d;  idObj = idWall;  qHit = q;\n  }\n  q = qh - vec3 (0.5 * bb, 0., 0.);\n  q.z = abs (q.z) - 0.5 * bb;\n  d = PrCylDf (q.yxz, 1.8 * bt, 0.25 * bb);\n  if (d < dHit) {\n    dHit = d;  idObj = idHinge;  qHit = q;\n  }\n  return dHit;\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  p *= 4.;\n  float f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return 2. * mix (vec3 (0.8, 0.4, 0.2), vec3 (0.45, 0.25, 0.1), f);\n}\n\nvec4 BoxCol (vec3 n)\n{\n  vec3 col = vec3 (0.);\n  float spec = 1.;\n  if (idObj == idFloor) {\n    col = WoodCol (qHit, n);\n  } else if (idObj == idWall) {\n    col = WoodCol (qHit, boxMat * n);\n  } else if (idObj == idWallR) {\n    col = WoodCol (qHit, boxMatR * n);\n  } else if (idObj == idHinge) {\n    col = vec3 (0.7, 0.5, 0.1);\n    spec = 10.;\n  }\n  return vec4 (col, spec);\n}\n\nfloat JarDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p - boxSize * vec3 (-3., 0.5, 3.);\n  d = PrCylDf (q.xzy, 0.5 * boxSize, 0.5 * boxSize);\n  if (d < dHit) {\n    dHit = d;  idObj = idJar;  qHit = q;\n  }\n  return dHit;\n}\n\nvec4 JarCol (vec3 n)\n{\n  vec3 col;\n  float spec = 1.;\n  vec3 q = qHit;\n  if (n.y < 0.95) {\n    float a = abs (atan (qHit.x, qHit.z));\n    a = min (a, abs (pi - a));\n    col = vec3 (1., 1., 0.) *\n       (1. - SmoothBump (-0.25, 0.25, 0.03, a - 1.3 * abs (qHit.y))) *\n       (1. - SmoothBump (-0.1, 0.25, 0.03, Length4 (vec2 (a, qHit.y -\n       0.3 * boxSize))));\n  } else {\n    if (isLive) col = vec3 (0., 1., 0.);\n    else col = vec3 (1., 0., 0.);\n    col *= 0.6 * (1. + cos (3. * 2. * pi * tSeq));\n  }\n  return vec4 (col, spec);\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  dHit = CatDf (bodyMat * (p - catPos), dHit);\n  dHit = BoxDf (p, dHit);\n  dHit = JarDf (p, dHit);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  float v0 = ObjDf (p + e.xxx);\n  float v1 = ObjDf (p + e.xyy);\n  float v2 = ObjDf (p + e.yxy);\n  float v3 = ObjDf (p + e.yyx);\n  return normalize (vec3 (v0 - v1 - v2 - v3) + 2. * vec3 (v1, v2, v3));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.1;\n  for (int i = 0; i < 100; i++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.1;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col4 = vec4 (0.);\n  if (idObj >= idBody && idObj <= idWhisk) col4 = CatCol (bodyMat * n);\n  else if (idObj >= idFloor && idObj <= idHinge) col4 = BoxCol (n);\n  else if (idObj == idJar) col4 = JarCol (n);\n  return col4;\n}\n\nvoid CatPM (float t)\n{\n  float frq = 0.44;\n  float rl = 0.;\n  float az = 0.;\n  float el = 0.;\n  if (isLive) {\n    catPos = vec3 (0., bdLen * (1.94 + 0.4 * sin (2. * pi * frq * tCur)), 0.);\n    az += 0.7 * sin (pi * frq * tCur);\n    el -= 0.4 * (1. + sin (2. * pi * frq * tCur));\n  } else {\n    float ps = 2. * mod (nSeq, 2.) - 1.;\n    catPos = vec3 (0., bdLen * (0.45 + 1.05 * ps), 0.);\n    rl -= 0.5 * pi * ps;\n  }\n  vec3 ca = cos (vec3 (el, az, rl));\n  vec3 sa = sin (vec3 (el, az, rl));\n  bodyMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, objCol;\n  float dstHit;\n  vec3 col = vec3 (0., 0., 0.02);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  int idObjT = idObj;\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj >= idBody && idObj <= idTongue) vn = VaryNf (20. * qHit, vn, 0.4);\n    vec4 col4 = ObjCol (vn);\n    objCol = col4.xyz;\n    float spec = col4.w;\n    float dif = max (dot (vn, ltDir), 0.);\n    vec3 vl = 30. * ltDir - ro;\n    float di = 1. \/ length (vl);\n    float br = min (1.1, 40. * di);\n    float f = dot (ltDir, vl) * di;\n    col = (0.1 + pow (f, 16.)) * br * objCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.)) +\n       max (0., dif) * ObjSShadow (ro, ltDir) *\n       (dif + spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.)));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  float zmFac = 4.8;\n  tCur = iGlobalTime;\n  tCur = max (tCur - 2., 0.);\n  const float tPer = 10.;\n  nSeq = floor (tCur \/ tPer);\n  float tBase = tPer * nSeq;\n  tSeq = tCur - tBase;\n  isLive = (sin (tBase) + sin (1.7 * tBase) + sin (2.7 * tBase)) > -0.5;\n  boxSize = 2.;\n  bdLen = boxSize;\n  if (! isLive) {\n    float s = tSeq \/ tPer;\n    bdLen *= 1. - 0.95 * s * s * s;\n  }\n  float dist = 50.;\n  float el = 0.4 + 0.2 * sin (0.042 * tCur);\n  float az = pi + 0.6 * sin (0.093 * tCur);\n  float cEl = cos (el);\n  float sEl = sin (el);\n  float cAz = cos (az);\n  float sAz = sin (az);\n  mat3 vuMat = mat3 (1., 0., 0., 0., cEl, - sEl, 0., sEl, cEl) *\n     mat3 (cAz, 0., sAz, 0., 1., 0., - sAz, 0., cAz);\n  vec3 rd = normalize (vec3 (uv, zmFac)) * vuMat;\n  vec3 ro = - vec3 (0., 0., dist) * vuMat;\n  ro.y += 0.08 * dist;\n  ltDir = normalize (vec3 (0.5, 1., -1.));\n  ltDir *= vuMat;\n  CatPM (tCur);\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}