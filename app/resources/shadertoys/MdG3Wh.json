{"Shader":{"ver":"0.1","info":{"id":"MdG3Wh","date":"1454191766","viewed":47,"name":"Overlaid trig patterns 1","username":"fallicory","description":"Overlapping coloured layers creating visually disorientating movement","likes":1,"published":3,"flags":0,"tags":["2d","interference","trigonometric"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\n#define PI 3.14159265359\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = vec2(fragCoord.x \/ iResolution.y, fragCoord.y \/ iResolution.y);\n    \n    \/\/ Get the coordinates relative to the centre\n    vec2 relative = vec2((uv.x * 2.0) - (iResolution.x \/ iResolution.y), (uv.y * 2.0) - 1.0);\n    \n    \/\/ Convert to polar coords\n    float angle = atan(relative.y, relative.x);\n    float dist = length(relative);\n    \n    \/\/ Work out individual colour rotations\n    float rRotate = angle + sin(iGlobalTime * 0.5) \/ 10.0;\n    float gRotate = angle + sin(iGlobalTime * 0.7) \/ 10.0;\n    float bRotate = angle + sin(iGlobalTime * 1.3) \/ 10.0;\n    \n    \/\/ Magic!\n    float r = (sin(  (dist * PI * 16.0) + iGlobalTime * 4.0 + (sin(rRotate * 3.0 * 24.0) * 1.5) + (sin(rRotate * 3.0 * 4.0) * 10.0) + (sin(rRotate * 3.0 * 3.0)*7.0)   ) + 1.0) \/ 2.0;\n    float g = (sin(  (dist * PI * 16.0) + iGlobalTime * 4.0 + (sin(rRotate * 3.0 * 17.0) * 1.5) + (sin(gRotate * 3.0 * 5.0) * 10.0) + (sin(gRotate * 3.0 * 3.0)*6.0)   ) + 1.0) \/ 2.0;\n    float b = (sin(  (dist * PI * 16.0) + iGlobalTime * 4.0 + (sin(rRotate * 3.0 * 33.0) * 1.5) + (sin(bRotate * 3.0 * 3.0) * 10.0) + (sin(bRotate * 3.0 * 3.0)*8.0)   ) + 1.0) \/ 2.0;\n\n    \/\/ Dull green channel as it's a bit overwhelming as the eye is more sensitive to green\n    g = 0.8 * g;\n    \n    \/\/ Brighten near centre\n    r = r + (clamp(1.2 - dist, 0.0, 1.0) * 0.4 * 2.0);\n    g = g + (clamp(1.2 - dist, 0.0, 1.0) * 0.3 * 2.0);\n    b = b + (clamp(1.2 - dist, 0.0, 1.0) * 0.5 * 2.0);\n    \n    \/\/ Dim very centre\n    float dimming = (clamp(0.35 - dist, 0.0, 0.35) * 7.0);\n    r = r - dimming;\n    g = g - dimming;\n    b = b - dimming;\n     \n    \/\/ Vingette effect\n    float vingette = (1.0 - (dist * 0.5));\n    r = r * vingette;\n    g = g * vingette;\n    b = b * vingette;\n    \n    fragColor = vec4(r, g, b, 1.0);\n}","name":"","description":"","type":"image"}]}}