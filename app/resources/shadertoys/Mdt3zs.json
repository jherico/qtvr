{"Shader":{"ver":"0.1","info":{"id":"Mdt3zs","date":"1451905934","viewed":328,"name":"Everyday004 - MysteryPyramid","username":"Makio64","description":"Another everyday mixing my 2 previous <img src=\"\/img\/emoticonHappy.png\"\/>","likes":13,"published":3,"flags":0,"tags":["raymarching","sss","pyramid","everyday","hgsdf"],"hasliked":0},"renderpass":[{"inputs":[{"id":47,"src":"\/presets\/tex19.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Everyday004 - MysteryPyramid\n\/\/ By David Ronai \/ @Makio64\n\n\/\/ Thanks to XT95 to implement SSS in this shadertoy:\n\/\/ https:\/\/www.shadertoy.com\/view\/MsdGz2\n\/\/ Base on this papper :\n\/\/ http:\/\/colinbarrebrisebois.com\/2011\/03\/07\/gdc-2011-approximating-translucency-for-a-fast\n\n\/\/------------------------------------------------------------------ VISUAL QUALITY\n#define POSTPROCESS\n#define RAYMARCHING_STEP 40\n#define RAYMARCHING_JUMP 1.\n\/\/------------------------------------------------------------------ DEBUG\n\/\/#define RENDER_DEPTH\n\/\/#define RENDER_NORMAL\n\/\/#define RENDER_AO\n\nconst float PI = 3.14159265359;\n\n\/\/------------------------------------------------------------------  SIGNED PRIMITIVES\nfloat pyramid( vec3 p, float h) {\n\tvec3 q=abs(p);\n\treturn max(-p.y, (q.x*1.5+q.y+q.z*1.5-h)\/3.0 );\n}\n\/\/http:\/\/mercury.sexy\/hg_sdf\/\nfloat vmax(vec3 v) {return max(max(v.x, v.y), v.z);}\nfloat fBox(vec3 p, vec3 b) {\n\tvec3 d = abs(p) - b;\n\treturn length(max(d, vec3(0))) + vmax(min(d, vec3(0)));\n}\nfloat pModPolar(inout vec2 p, float repetitions) {\n\tfloat angle = 2.*PI\/repetitions;\n\tfloat a = atan(p.y, p.x) + angle\/2.;\n\tfloat r = length(p);\n\tfloat c = floor(a\/angle);\n\ta = mod(a,angle) - angle\/2.;\n\tp = vec2(cos(a), sin(a))*r;\n\tif (abs(c) >= (repetitions\/2.)) c = abs(c);\n\treturn c;\n}\nvoid pR45(inout vec2 p) {\n\tp = (p + vec2(p.y, -p.x))*sqrt(0.5);\n}\n\n\/\/------------------------------------------------------------------ MAP\nfloat map( in vec3 pos ) {\n    vec3 q = pos;\n    pR45(q.xz);\n\tfloat d = pyramid(q,20.);\n    pModPolar(q.xz,4.); \n    q.x-=11.;\n\td = min(pyramid(q,5.),d); \n    d = min(-2.55+distance(pos.xyz,vec3(0.))\/4.+pos.y-max(.1,texture2D(iChannel0,pos.xz\/20.).x)*2.1,d);\n    d = max(-fBox(pos+vec3(0.,-2.,5.5),vec3(1.,1.,5.5)),d);\n\treturn d;\n}\n\n\/\/------------------------------------------------------------------ RAYMARCHING\n#ifdef RENDER_DEPTH\nfloat castRay( in vec3 ro, in vec3 rd, inout float depth )\n#else\nfloat castRay( in vec3 ro, in vec3 rd )\n#endif\n{\n\tfloat t = 15.0;\n\tfloat res;\n\tfor( int i=0; i<RAYMARCHING_STEP; i++ )\n\t{\n\t\tvec3 pos = ro+rd*t;\n\t\tres = map( pos );\n\t\tif( res < 0.01 || t > 150. ) break;\n\t\tt += res*RAYMARCHING_JUMP;\n\t\t#ifdef RENDER_DEPTH\n\t\tdepth += 1.\/float(RAYMARCHING_STEP);\n\t\t#endif\n\t}\n\treturn t;\n}\n\nvec3 calcNormal(vec3 p) {\n\tfloat eps = 0.01;\n\tconst vec3 v1 = vec3( 1.0,-1.0,-1.0);\n\tconst vec3 v2 = vec3(-1.0,-1.0, 1.0);\n\tconst vec3 v3 = vec3(-1.0, 1.0,-1.0);\n\tconst vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\treturn normalize( v1 * map( p + v1*eps ) +\n\t\t\t\t\t  v2 * map( p + v2*eps ) +\n\t\t\t\t\t  v3 * map( p + v3*eps ) +\n\t\t\t\t\t  v4 * map( p + v4*eps ) );\n}\n\nfloat hash( float n ){\n\treturn fract(sin(n)*3538.5453);\n}\n\nfloat calcAO( in vec3 p, in vec3 n, float maxDist, float falloff ){\n\tfloat ao = 0.0;\n\tconst int nbIte = 6;\n\tfor( int i=0; i<nbIte; i++ )\n\t{\n\t\tfloat l = hash(float(i))*maxDist;\n\t\tvec3 rd = n*l;\n\t\tao += (l - map( p + rd )) \/ pow(1.+l, falloff);\n\t}\n\treturn clamp( 1.-ao\/float(nbIte), 0., 1.);\n}\n\n\/\/ calculate local thickness\n\/\/ base on AO but : inverse the normale & inverse the color\nfloat thickness( in vec3 p, in vec3 n, float maxDist, float falloff )\n{\n\tfloat ao = 0.0;\n\tconst int nbIte = 6;\n\tfor( int i=0; i<nbIte; i++ )\n\t{\n\t\tfloat l = hash(float(i))*maxDist;\n\t\tvec3 rd = -n*l;\n\t\tao += (l + map( p + rd )) \/ pow(1.+l, falloff);\n\t}\n\treturn clamp( 1.-ao\/float(nbIte), 0., 1.);\n}\n\n\/\/------------------------------------------------------------------ POSTEFFECTS\n\n#ifdef POSTPROCESS\nvec3 postEffects( in vec3 col, in vec2 uv, in float time )\n{\n\t\/\/ gamma correction\n\t\/\/ col = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\t\/\/ vigneting\n\tcol *= 0.4+0.6*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.5 );\n\treturn col;\n}\n#endif\n\nvec3 render( in vec3 ro, in vec3 rd, in vec2 uv )\n{\n\tvec3 col = vec3(.0,.0,1.2);\n\n\t#ifdef RENDER_DEPTH\n\tfloat depth = 0.;\n\tfloat t = castRay(ro,rd,depth);\n\t#else\n\tfloat t = castRay(ro,rd);\n\t#endif\n\n\t#ifdef RENDER_DEPTH\n\treturn vec3(depth\/10.,depth\/5.,depth);\n\t#endif\n\n\tvec3 pos = ro + t * rd;\n\tvec3 nor = calcNormal(pos);\n\n\t#ifdef RENDER_NORMAL\n\treturn nor;\n\t#endif\n\n\tfloat ao = calcAO(pos,nor,10.,1.2);\n\t#ifdef RENDER_AO\n\treturn vec3(ao);\n\t#endif\n\n    float thi = thickness(pos, nor, 6., 1.5);\n\n    vec3 lpos1 = vec3(0.0,10.,0.0);\n\tvec3 ldir1 = normalize(lpos1-pos);\n\tfloat latt1 = pow( length(lpos1-pos)*.1, 1.5+.2*abs(sin(iGlobalTime\/2.)) );\n    float trans1 =  pow( clamp( dot(-rd, -ldir1+nor), 0., 1.), 1.) + 1.;\n\tvec3 diff1 = vec3(.0,.5,1.) * (max(dot(nor,ldir1),0.) ) \/ latt1;\n\tcol =  diff1;\n\tcol += vec3(.3,.2,.05) * (trans1\/latt1)*thi;\n    if(pos.y<=15.){\n    \tvec3 lpos2 = vec3(0.);\n\t\tvec3 ldir2 = normalize(lpos2-pos);\n\t\tfloat latt2 = pow( length(lpos2-pos)*.1, 2.);\n    \tfloat trans2 =  pow( clamp( dot(-rd, -ldir2+nor), 0., 1.), 1.) + 1.;\n\t\tvec3 diff2 = vec3(.0,.5,1.) * (max(dot(nor,ldir2),0.) ) \/ latt2;\n\t\tcol *= .1;\n        col +=  diff2;\n\t\tcol += vec3(.1,.2,.3) * (trans2\/latt2)*thi;\n    }\n    float d = distance(pos.xyz,vec3(0.));\n\tcol = max(vec3(.05),col);\n\tcol *= ao;\n\treturn col;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\treturn mat3( cu, cv, cw );\n}\n\nvec3 orbit(float phi, float theta, float radius)\n{\n\treturn vec3(\n\t\tradius * sin( phi ) * cos( theta ),\n\t\tradius * cos( phi ),\n\t\tradius * sin( phi ) * sin( theta )\n\t);\n}\n\n\/\/------------------------------------------------------------------ MAIN\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1. + 2. * uv;\n    p.x *= iResolution.x \/ iResolution.y;\n    \n    \/\/Camera\n\tfloat radius = 50.;\n\tvec3 ro = orbit(PI\/2.-.5,PI\/2.+iGlobalTime,radius);\n   \/\/ ro.z -= iGlobalTime*4.;\n\tvec3 ta  = vec3(0.0, 0., 0.0);\n\tmat3 ca = setCamera( ro, ta, 0. );\n\tvec3 rd = ca * normalize( vec3(p.xy,1.7) );\n\n\t\/\/ Raymarching\n\tvec3 color = render( ro, rd, uv );\n\t#ifdef POSTPROCESS\n\tcolor = postEffects( color, uv, iGlobalTime );\n\t#endif\n\tfragColor = vec4(color,1.0);\n}\n","name":"","description":"","type":"image"}]}}