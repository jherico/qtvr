{"Shader":{"ver":"0.1","info":{"id":"4d2Xzw","date":"1410362903","viewed":1664,"name":"Bokeh disc","username":"Dave_Hoskins","description":"Uses evenly distributed samples from this idea:- http:\/\/blog.marmakoide.org\/?p=1 with a few changes, like not using square roots.<br\/>Update: Removed trig from the loop.<br\/>","likes":63,"published":3,"flags":0,"tags":["2d","blur","bokeh"],"hasliked":0},"renderpass":[{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Bokeh disc.\n\/\/ by David Hoskins.\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define USE_MIPMAP\n\n\/\/ The Golden Angle is (3.-sqrt(5.0))*PI radians, which doesn't precompiled for some reason.\n\/\/ The compiler is a dunce I tells-ya!!\n#define GOLDEN_ANGLE 2.39996323\n\n#define ITERATIONS 140\n\nmat2 rot = mat2(cos(GOLDEN_ANGLE), sin(GOLDEN_ANGLE), -sin(GOLDEN_ANGLE), cos(GOLDEN_ANGLE));\n\n\/\/-------------------------------------------------------------------------------------------\nvec3 Bokeh(sampler2D tex, vec2 uv, float radius, float amount)\n{\n\tvec3 acc = vec3(0.0);\n\tvec3 div = vec3(0.0);\n    vec2 pixel = 1.0 \/ iResolution.xy;\n    float r = 1.0;\n    vec2 vangle = vec2(0.0,radius); \/\/ Start angle\n    amount += radius*500.0;\n    \n\tfor (int j = 0; j < ITERATIONS; j++)\n    {  \n        r += 1. \/ r;\n\t    vangle = rot * vangle;\n        \/\/ (r-1.0) here is the equivalent to sqrt(0, 1, 2, 3...)\n        #ifdef USE_MIPMAP\n\t\tvec3 col = texture2D(tex, uv + pixel * (r-1.) * vangle, radius*1.25).xyz;\n        #else\n        vec3 col = texture2D(tex, uv + pixel * (r-1.) * vangle).xyz;\n        #endif\n        col = col * col * 1.5; \/\/ ...contrast it for better highlights - leave this out elsewhere.\n\t\tvec3 bokeh = pow(col, vec3(9.0)) * amount+.4;\n\t\tacc += col * bokeh;\n\t\tdiv += bokeh;\n\t}\n\treturn acc \/ div;\n}\n\n\/\/-------------------------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float time = iGlobalTime*.2 + .5;\n\tfloat r = .8 - .8*cos(time * 6.283);\n       \n\tfloat a = 40.0;\n    if (iMouse.w >= 1.0)\n    {\n    \tr = (iMouse.x\/iResolution.x)*3.0;\n        a = iMouse.y\/iResolution.y * 50.0;\n    }\n    \n    uv *= vec2(1.0, -1.0);\n    \n    if (mod(time-.5, 3.0) < 1.0)\n    {        \n\t\tfragColor = vec4(Bokeh(iChannel0, uv, r, a), 1.0);\n    }else\n    if (mod(time-.5, 3.0) < 2.0)\n    {\n        fragColor = vec4(Bokeh(iChannel1, uv, r, a), 1.0);    \n    }else\n    {\n\t\tfragColor = vec4(Bokeh(iChannel2, uv, r, a), 1.0);\n    }\n    \n}","name":"","description":"","type":"image"}]}}