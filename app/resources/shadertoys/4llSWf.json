{"Shader":{"ver":"0.1","info":{"id":"4llSWf","date":"1440217637","viewed":1032,"name":"Non-Euclidean Geometry Test","username":"Flyguy","description":"Testing non-euclidean geometry in a distance field ray marcher.<br\/>Mostly fixed artifacts by scaling the map and ray origin upon entering the \"warp zone\" instead of speeding up rays.","likes":6,"published":3,"flags":0,"tags":["distancefield","raymarch","geometry","euclidean","noneuclidean"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define MIN_DIST 0.0005\n#define MAX_DIST 64.0\n#define MAX_STEPS 128\n#define STEP_MULT 0.4\n#define NORMAL_OFFS 0.02\n\n\/\/#define DISABLE_WARP\n\/\/#define HIDE_BOX\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\n\/\/Returns a rotation matrix for the given angles around the X,Y,Z axes.\nmat3 Rotate(vec3 angles)\n{\n    vec3 c = cos(angles);\n    vec3 s = sin(angles);\n    \n    mat3 rotX = mat3( 1.0, 0.0, 0.0, 0.0,c.x,s.x, 0.0,-s.x, c.x);\n    mat3 rotY = mat3( c.y, 0.0,-s.y, 0.0,1.0,0.0, s.y, 0.0, c.y);\n    mat3 rotZ = mat3( c.z, s.z, 0.0,-s.z,c.z,0.0, 0.0, 0.0, 1.0);\n\n    return rotX*rotY*rotZ;\n}\n\n\/\/==== Distance field operators\/functions by iq. ====\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdPlane( vec3 p, vec3 n )\n{\n  return dot(p, normalize(n));\n}\n\nfloat sdBox(vec3 p, vec3 s)\n{\n    p = abs(p) - s \/ 2.0;\n    return max(max(p.x,p.y),p.z);\n}\n\/\/===================================================\n\nvec3 scale = vec3(1,1,1);\n\n\/\/Defines the volume in which rays will speed up\/slow down.\nfloat Warp(vec3 p)\n{\n    return sdBox(p + vec3(0,0,0.5), vec3(3.0,1.5,0.75));\n}\n\nfloat Scene(vec3 p)\n{\n    float d = 1000.0;\n    \n    p *= scale;\n    \n    d = opU(d, -sdPlane(p, vec3(0,0,1)));\n    \n    #ifndef HIDE_BOX\n    d = opU(d, sdBox(p,vec3(3,2,2)));\n    d = opS(sdBox(p + vec3(0,0,0.5), vec3(4,1.5,0.75)), d);\n    #endif\n    \n    d = opU(d, sdSphere(p + vec3(2,0,0.5),0.25));\n    d = opU(d, sdBox(p + vec3(-2,0,0.5), vec3(0.5,0.5,0.5)));\n    \n    d = opU(d, -sdSphere(p,32.0));\n    \n\treturn d;\n}\n\nfloat MarchWarp(vec3 origin,vec3 dir)\n{\n    float dist = 0.0;\n    \n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Warp(origin + dir * dist);\n        \n        dist += sceneDist * STEP_MULT;\n        \n        if(abs(sceneDist) < MIN_DIST || sceneDist > MAX_DIST)\n        {\n            break;\n        }\n    } \n    return dist;\n}\n\nvec3 MarchRay(vec3 origin,vec3 dir)\n{\n    bool inWarp = false;\n    \n    float dist = 0.0;\n    \n    \/\/Distance to the \"warp zone\".\n    float warpDist = MarchWarp(origin,dir);\n    \n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + dir * dist);\n        \n        \/\/Reset the march distance, set the ray origin to the surface of the \"warp zone\", scale the map and ray origin.\n        #ifndef DISABLE_WARP\n        if(warpDist < dist && !inWarp)\n    \t{\n            scale.x = 4.0;\n            \n            dist = 0.0;\n            origin = origin + dir * warpDist;\n            origin \/= scale;\n            \n            inWarp = true;\n    \t}\n        #endif\n        \n        dist += sceneDist * STEP_MULT;\n        \n        if(abs(sceneDist) < MIN_DIST || sceneDist > MAX_DIST)\n        {\n            if(sceneDist < 0.0)\n            {\n                dist += MIN_DIST;\n            }\n            \n            break;\n        }\n    }\n    \n    return origin + dir * dist;\n}\n\nvec3 Normal(vec3 p)\n{\n    vec3 off = vec3(NORMAL_OFFS,0,0);\n    return normalize\n    ( \n        vec3\n        (\n            Scene(p+off.xyz) - Scene(p-off.xyz),\n            Scene(p+off.zxy) - Scene(p-off.zxy),\n            Scene(p+off.yzx) - Scene(p-off.yzx)\n        )\n    );\n}\n\nvec3 Shade(vec3 position, vec3 normal, vec3 direction, vec3 camera)\n{\n    position *= scale;\n    vec3 color = vec3(1.0);\n    \n    color = color * 0.75 + 0.25;\n    \n    color *= normal * .25 + .75;\n    \n    float checker = sin(position.x * pi * 4.0) * sin(position.y * pi * 4.0) * sin(position.z * pi * 4.0);\n    \n    color *= step(0.0,checker) * 0.25 + 0.75;\n    \n    float ambient = 0.1;\n    float diffuse = 0.5 * -dot(normal,direction);\n    float specular = 1.0 * max(0.0, -dot(direction, reflect(direction,normal)));\n    \n    color *= vec3(ambient + diffuse + pow(specular,5.0));\n\n    color *= smoothstep(12.0,6.0,length(position));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    vec3 angles = vec3(0);\n    \n    \n    if(iMouse.xy == vec2(0))\n    {\n    \tangles = vec3(iGlobalTime * 0.2, 1.3, 0.0);\n    }\n    else\n    {\n    \tangles = vec3((iMouse.xy\/iResolution.xy)*pi,0);\n    }\n    \n    angles.xy *= vec2(2.0,1.0);\n    angles.y = clamp(angles.y,-tau\/4.0, 1.5);\n    \n    mat3 rotate = Rotate(angles.yzx);\n    \n    vec3 orig = vec3(0,0,-3) * rotate;\n    vec3 dir = normalize(vec3(uv - res\/2.0,0.5)) * rotate;\n    \n    vec3 hit = MarchRay(orig,dir);\n    vec3 norm = Normal(hit);\n    \n    vec3 color = Shade(hit,norm,dir,orig);\n    \n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}