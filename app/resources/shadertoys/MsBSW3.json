{"Shader":{"ver":"0.1","info":{"id":"MsBSW3","date":"1416418851","viewed":299,"name":"Dragonfly","username":"dr2","description":"A hungry dragonfly.<br\/>","likes":6,"published":3,"flags":0,"tags":["raymarching","flower","flight","insect"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Dragonfly\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Length6 (vec2 p)\n{\n  p *= p * p;\n  p *= p;\n  return pow (p.x + p.y, 1. \/ 6.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 3; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nint idObj;\nmat3 bugMat;\nvec3 bugPos, qHit, sunDir, sunCol;\nfloat tCur, szFac;\nconst float dstFar = 150.;\nconst float pi = 3.14159;\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.5;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = 0.2 * wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.3 * ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.2, 0.25, 0.7);\n  vec3 col;\n  col = sbCol + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const float skyHt = 50.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 10. * tCur;\n    vec2 p = 0.01 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.65;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (5. * (f - 0.5) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  float s = max (dot (rd, sunDir), 0.);\n  col = SkyBg (rd) + sunCol * (0.35 * pow (s, 6.) +\n     0.65 * min (pow (s, 256.), 0.3));\n  col = mix (col, vec3 (0.75), cloudFac);\n  return col;\n}\n\nfloat StoneRingDf (vec3 p, float r, float w, float n)\n{\n  vec2 q = vec2 (length (p.xz) - r, p.y);\n  float a = atan (p.x, p.z);\n  a = 0.2 * pow (abs (sin (a * n)), 0.25) + 0.8;\n  return Length6 (q) - w * a;\n}\n\nstruct WingParm\n{\n  float span, sRad, trans, thck, tapr;\n};\n\nfloat WingDf (vec3 p, WingParm wg)\n{\n  float s = abs (p.x - wg.trans);\n  float dz = s \/ wg.span;\n  return max (length (abs (p.yz) + vec2 (wg.sRad + wg.tapr * dz * dz * dz, 0.))\n     - wg.thck, s - wg.span);\n}\n\nfloat BugDf (vec3 p, float dHit)\n{\n  vec3 q;\n  WingParm wg;\n  float d, wr, ws;\n  float wSpan = 3.;\n  float bdyLen = 2.;\n  float wFreq = 21.3;\n  float wAngF = cos (wFreq * tCur);\n  float wAngB = cos (wFreq * tCur + 0.3 * pi);\n  dHit \/= szFac;\n  p \/= szFac;\n  ws = 0.11 * (wAngF + 0.3) * max (0., abs (p.x) - 0.12 * bdyLen) \/ (wSpan * szFac);\n  q = p - vec3 (0., 14. * ws, 3. * ws);\n  wg = WingParm (0.9 * wSpan, 2.14, 0., 2.17, 0.04);\n  d = WingDf (q, wg);\n  if (d < dHit) {\n    dHit = min (dHit, d);  idObj = 21;  qHit = q;\n  }\n  ws = 0.13 * (wAngB + 0.3) * max (0., abs (p.x) - 0.12 * bdyLen) \/ (wSpan * szFac);\n  q = p - vec3 (0., 14. * ws, 3. * ws);\n  q.z -= 0.38 * bdyLen;\n  wg.span *= 1.1;\n  d = WingDf (q, wg);\n  if (d < dHit) {\n    dHit = min (dHit, d);  idObj = 21;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  q -= bdyLen * vec3 (0.085, 0.035, 1.);\n  d = PrSphDf (q, 0.072 * bdyLen);\n  if (d < dHit) {\n    dHit = d;  idObj = 22;  qHit = q;\n  }\n  q = p;\n  wr = q.z \/ bdyLen;\n  float tr, u;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * bdyLen, bdyLen);\n  if (d < dHit + 0.02) {\n    dHit = SmoothMin (dHit, d, 0.02);  idObj = 23;  qHit = q;\n  }\n  q -= bdyLen * vec3 (0., 0.1 * (wr + 1.) * (wr + 1.), -1.8);\n  d = PrCylDf (q, 0.009 * bdyLen, 0.8 * bdyLen);\n  if (d < dHit) {\n    dHit = min (dHit, d);  idObj = 23;  qHit = q;\n  }\n  q = p;\n  q -= bdyLen * vec3 (0., -0.03, 1.03);\n  d = PrSphDf (q, 0.03 * bdyLen);\n  if (d < dHit) {\n    dHit = d;  idObj = 24;  qHit = q;\n  }\n  q = p;\n  wr = q.y \/ bdyLen;\n  q.x = abs (q.x) - 0.03 * bdyLen;\n  q.xz -= 2.4 * wr * wr;\n  q -= bdyLen * vec3 (0., 0.17, 0.9);\n  d = PrCylDf (q.xzy, 0.01 * bdyLen - 0.2 * wr * wr, 0.1 * bdyLen);\n  if (d < dHit) {\n    dHit = d;  idObj = 25;  qHit = q;\n  }\n  return 0.8 * dHit * szFac;\n}\n\nvec3 BugCol (vec3 n)\n{\n  const vec3 wCol = vec3 (1., 1., 0.7), bCol = vec3 (0., 0.1, 0.6),\n     mCol = vec3 (0.9, 0.3, 0.), gCol = vec3 (0.8, 0.8, 0.1),\n     eCol = vec3 (0.7, 0., 0.1);\n  const vec4 g1 = vec4 (-1.2, -0.5, -0.18, -0.05),\n     g2 = vec4 (1.65, 0.725, 0.225, 0.1),\n     g3 = 1. \/ vec4 (0.1, 0.075, 0.075, 0.075);\n  float cFac = 1.;\n  vec3 col;\n  qHit *= 5. * szFac;\n  if (idObj == 21) {\n    col = wCol;\n    vec4 b = (g1 * abs (qHit.x) + max (qHit.z, - qHit.z) + g2) * g3;\n    vec2 bb = b.xz + step (abs (b.yw), abs (b.xz)) * (b.yw - b.xz);\n    float ds = bb.x + step (abs (bb.y), abs (bb.x)) * (bb.y - bb.x);\n    ds = sqrt (max (0., 1. - ds * ds)) * sign (ds);\n    if (ds != 0.) {\n      col *= (1. - 0.2 * abs (ds));\n      if (dot (n, sunDir) > 0.) {\n\t    vec3 nn = bugMat * n;\n\t    nn.yz = clamp (nn.yz - vec2 (sqrt (1. - ds * ds), ds), -1., 1.);\n\t    nn = normalize (nn) * bugMat;\n\t    col *= (1. + 1.5 * max (dot (nn, sunDir), 0.));\n      }\n    }\n  } else if (idObj == 22) {\n    col = bCol;\n    if (qHit.z > 0.3) {\n      col = eCol;\n      idObj = 29;\n    }\n  } else if (idObj == 23) {\n    vec3 nn = bugMat * n;\n    col = mix (mix (bCol, mCol, smoothstep (0.5, 1.5, nn.y)), wCol,\n       1. - smoothstep (-1.3, -0.7, nn.y));\n    if (qHit.y < 0.) col *= (1. - 0.3 * SmoothBump (-0.07, 0.07, 0.03, qHit.x));\n  } else if (idObj == 24) {\n    col = mCol;\n  } else if (idObj == 25) {\n    col = gCol;\n  }\n  return col * cFac;\n}\n\nstruct FlwParm\n{\n  float spRad, spWid, nRot, bAng, wgThk, wgOff;\n};\n\nfloat FlwDf (vec3 q, float yp, float aa, FlwParm f, float dHit, int id)\n{\n  q.y -= yp;\n  vec3 qq = q;\n  float d = max (PrSphDf (qq, f.spRad),\n     - PrSphDf (qq - vec3 (0., 0.5 * f.spWid, 0.), f.spRad * (1. - f.spWid)));\n  float s = f.nRot \/ (2. * pi);\n  float a = (floor (aa * s) + 0.5) \/ s;\n  qq.xz = cos (a) * qq.xz + sin (a) * qq.zx * vec2 (-1., 1.);\n  qq.xy = cos (f.bAng) * qq.xy + sin (f.bAng) * qq.yx * vec2 (1., -1.);\n  qq.x += f.wgOff * f.spRad;\n  float wgRad = 3. * f.spRad;\n  qq.xz \/= wgRad;\n  d = max (d, wgRad * (sqrt (dot (qq.xz, qq.xz) + 2. * abs (qq.z) + 1.) -\n     (1. + f.wgThk)));\n  if (d < dHit) {\n    dHit = d;  idObj = id;  qHit = q;\n  }\n  d = PrCylDf (q.xzy + vec3 (0., 0., 0.98 * f.spRad),\n     0.05 * f.spRad, 0.04 * f.spRad);\n  if (d < dHit) {\n    dHit = d;  idObj = 13;  qHit = q;\n  }\n  return dHit;\n}\n\nvec3 FlwCol (vec3 n)\n{\n  vec3 col;\n  float h;\n  if (idObj == 11 || idObj == 12) {\n    h = 0.6 * abs (asin (qHit.y \/ length (qHit))) \/ pi;\n  }\n  if (idObj == 11) {\n    col = HsvToRgb (vec3 (h, 1., 1.));\n  } else if (idObj == 12) {\n    col = HsvToRgb (vec3 (0.3, 1. - 2. * h, 1. - 2. * h));\n  } else if (idObj == 13) {\n    col = vec3 (0.3, 0.5, 0.3) * (1. -\n       0.5 * SmoothBump (0.3, 0.5, 0.1, mod (20. * qHit.y, 1.)));\n  } else if (idObj == 15) {\n    col = 0.9 * vec3 (0.6, 0.4, 0.2);\n  }\n  return col * col;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  float flFac = 1.2;\n  vec3 q;\n  float vOff = 1.;\n  float d;\n  float s = 3.3 * (flFac - 1.);\n  float aa = atan (p.z, - p.x);\n  dHit = FlwDf (p, vOff + s + 0.3 * flFac, aa,\n     FlwParm (1. * flFac, 0.02, 21., 0.8, 0.02, 0.9), dHit, 11);\n  dHit = FlwDf (p, vOff + s, aa,\n     FlwParm (3.3 * flFac, 0.015, 42., 1.5, 0.01, 0.8), dHit, 12);\n  d = PrCylDf (p.xzy + vec3 (0.03 * sin (6. * p.y), 0.03 * cos (6. * p.y),\n     - (vOff + s) + 1.9 * flFac), 0.03 * flFac, 1.3 * flFac);\n  if (d < dHit) {\n    dHit = d;  idObj = 13;  qHit = p;\n  }\n  d = PrCylDf (p.xzy - vec3 (0., 0., vOff - 3.3), 6. * flFac, 0.01);\n  if (d < dHit) {\n    dHit = d;  idObj = 14;  qHit = p;\n  }\n  d = StoneRingDf (p - vec3 (0., vOff - 3.1, 0.), 6. * flFac, 0.3 * flFac, 10.);\n  if (d < dHit) {\n    dHit = d;  idObj = 15;  qHit = p;\n  }\n  dHit = BugDf (bugMat * (p - bugPos), dHit);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  float v0 = ObjDf (p + e.xxx);\n  float v1 = ObjDf (p + e.xyy);\n  float v2 = ObjDf (p + e.yxy);\n  float v3 = ObjDf (p + e.yyx);\n  return normalize (vec3 (v0 - v1 - v2 - v3) + 2. * vec3 (v1, v2, v3));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.04;\n  for (int i = 0; i < 100; i++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.04;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvoid BugPM (float t)\n{\n  float aimHt = 2.;\n  float fa = 0.3 * t + pi * (0.3 * sin (0.4 * t) + 0.22 * sin (0.44 * t));\n  float fe = pi * (0.35 + 0.1 * sin (0.3 * t) + 0.05 * sin (0.33 * t));\n  float fd = 5. + 0.6 * sin (2.5 * t) + 0.3 * sin (2.61 * t);\n  bugPos = fd * vec3 (cos (fa) * sin (fe), cos (fe), sin (fa) * sin (fe));\n  bugPos.y += aimHt;\n  vec3 vo = vec3 (0., aimHt, 0.);\n  vec3 vd = normalize (bugPos - vo);\n  float azF = 0.5 * pi + atan (vd.z, vd.x);\n  float elF = asin (vd.y);\n  float rlF = pi * (0.2 * sin (3.2 * t) + 0.15 * sin (3.51 * t));\n  vec3 ori = vec3 (elF, azF, rlF);\n  vec3 ca = cos (ori);\n  vec3 sa = sin (ori);\n  bugMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, objCol;\n  float dstHit;\n  vec3 col = vec3 (0.);\n  float spec = 0.5;\n  float specEx = 128.;\n  dstHit = ObjRay (ro, rd);\n  float refFac = 1.;\n  if (dstHit < dstFar && idObj == 14) {\n    ro += rd * dstHit;\n    rd = reflect (rd, WaterNf (qHit, dstHit));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    refFac = 0.8;\n  }\n  int idObjT = idObj;\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit >= dstFar) {\n    if (refFac == 1.) col = vec3 (0.);\n    else col = refFac * SkyCol (ro, rd);\n  } else {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    spec = 0.5;\n    if (idObj < 20) {\n      if (idObj == 15) {\n        vn = VaryNf (5. * qHit, vn, 1.);\n        spec = 0.1;\n      } else if (idObj != 14) vn = VaryNf (100. * qHit, vn, 0.2);\n      objCol = FlwCol (vn);\n    } else {\n      vec3 vno = vn;\n      if (idObj != 25) vn = VaryNf (100. * qHit, bugMat * vn, 0.3) * bugMat;\n      idObj = idObjT;\n      objCol = BugCol (vn);\n      spec = 2.;\n      if (idObj == 29) {\n\t    spec = 0.5;\n\t    specEx = 8.;\n      }\n    }\n    float dif = max (dot (vn, sunDir), 0.);\n    col = refFac * (0.2 * objCol * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * ObjSShadow (ro, sunDir) *\n       (objCol * dif + spec * pow (max (0., dot (sunDir, reflect (rd, vn))), specEx)));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  float zmFac = 3.;\n  tCur = iGlobalTime;\n  szFac = 1.;\n  sunDir = normalize (vec3 (0.5, 1., -0.4));\n  sunCol = vec3 (1.);\n  float dist = 25.;\n  vec3 rd = normalize (vec3 (uv, zmFac));\n  float el = 0.9;\n  float az = pi * cos (0.01 * tCur) + pi;\n  float cEl = cos (el);\n  float sEl = sin (el);\n  rd = vec3 (rd.x, rd.y * cEl - rd.z * sEl, rd.z * cEl + rd.y * sEl);\n  float cAz = cos (az);\n  float sAz = sin (az);\n  rd = vec3 (rd.x * cAz + rd.z * sAz, rd.y, rd.z * cAz - rd.x * sAz); \n  vec3 ro = - dist * vec3 (cEl * sAz, - sEl, cEl * cAz);\n  BugPM (tCur);\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}