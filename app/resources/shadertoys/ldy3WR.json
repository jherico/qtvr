{"Shader":{"ver":"0.1","info":{"id":"ldy3WR","date":"1454005782","viewed":146,"name":"Lonely Sea Shell","username":"elias","description":"Perhaps it wouldn't be as lonely if the developer were less lazy about adding more creatures. (also missing: light rays and water particles)<br\/>This was going to be something completely different but somehow I got carried away with those spirals.","likes":12,"published":3,"flags":0,"tags":["sea","shell"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":47,"src":"\/presets\/tex19.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define S 256   \/\/ Steps\n#define P 0.001 \/\/ Precision\n#define R 2.    \/\/ Marching substeps\n#define D 20.   \/\/ Max distance\n#define K 8.    \/\/ Shadow softness\n\n#define T iGlobalTime\n#define PI 3.1415926\n#define TAU (PI*2.0)\n\nstruct Ray { vec3 o, d; };\nstruct Camera { vec3 p, t; };\nstruct Hit { vec3 p; float t, d; };\n\n\/\/bool _ignoreParticles = false;\nbool _shadowMarch = false;\nbool _normalMarch = false;\n\nconst vec3 _fog = vec3(0,0,0.2);\nCamera _cam = Camera(vec3(0,1,-2), vec3(0,0.5,0));\nfloat _d, _dfloor, _dshell, _dparticles;\n\nmat3 rotX(float a){float c=cos(a),s=sin(a);return mat3(1,0,0,0,c,-s,0,s,c);}\nmat3 rotY(float a){float c=cos(a),s=sin(a);return mat3(c,0,-s,0,1,0,s,0,c);}\nmat3 rotZ(float a){float c=cos(a),s=sin(a);return mat3(c,-s,0,s,c,0,0,0,1);}\n\n\/\/ http:\/\/www.iquilezles.org\/www\/articles\/smin\/smin.htm\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat length(vec3 v,float e)\n{\n    v = pow(abs(v),vec3(e));\n    return pow(v.x+v.y+v.z,1.\/e);\n}\n                                        \nfloat sdLine(vec3 p, vec3 a, vec3 b, float r)\n{\n    vec3 ab = b-a, ap = p-a;\n    return length(ap-ab*clamp(dot(ap,ab)\/dot(ab,ab),0.,1.),4.0)-r;\n}\n\nfloat scene(vec3 p)\n{\n    _d = _dfloor = 1e10;\n    \n    if (_shadowMarch == false)\n    {\n    \t_dfloor = p.y+texture2D(iChannel1,p.xz*0.1).x*0.3;    \n    }\n   \n    if(_normalMarch == true)\n    {\n        p.y -= texture2D(iChannel0,p.xz).x*0.01;\n    }\n    \n    p *= rotX(0.5);\n    \n    float dshell = sdLine(p*rotY(p.y*TAU),vec3(0,0,0),vec3(0,1,0),0.5*(1.-p.y));\n    \n    _dfloor = smin(_dfloor,dshell,0.12);\n    _dshell = dshell;\n    \/\/_dparticles = 1e10;\n\n    _d = min(_d,_dfloor);\n    _d = min(_d,_dshell);\n    \/\/_d = min(_d,_dparticles);\n    \n    \n    return _d;\n}\n\nvec3 getNormal(vec3 p)\n{\n    _normalMarch = true;\n\n\tvec2 e = vec2(P,0);\n    \n\treturn normalize(vec3(\n\t\tscene(p+e.xyy)-scene(p-e.xyy),\n\t\tscene(p+e.yxy)-scene(p-e.yxy),\n\t\tscene(p+e.yyx)-scene(p-e.yyx)\n\t));\n}\n\nHit march(Ray r)\n{\n    float t = 0.0, d;\n    \n    for(int i = 0; i < S; i++)\n    {\n        d = scene(r.o+r.d*t);\n        t += d\/R;\n        \n        if (d < P || t > D) { break; }\n    }\n    \n    return Hit(r.o+r.d*t, t, d);\n}\n\nfloat getShadow(vec3 source, vec3 target)\n{\n    _shadowMarch = true;\n  \n\tfloat t = 0.05;\n    float s = 1.0;\n    float r = length(target-source);\n    \n\tvec3 dir = normalize(target-source);\n\t\n\tfor(int i = 0; i < S; i++)\n\t{\n\t\tfloat d = scene(source+dir*t);\n        \n        if (d < P) { return 0.0; }\n        if (t > r) { break; }\n        \n        s = min(s,K*d\/t);\n        t += d\/R;\n\t}\n\t\n\treturn s\/exp(r*0.1);\n}\n\nRay lookAt(Camera cam, vec2 uv)\n{\n    vec3 dir = normalize(cam.t-cam.p);\n    vec3 right = normalize(cross(dir, vec3(0,1,0)));\n    vec3 up = cross(right, dir);\n\n    return Ray(cam.p, normalize(right*uv.x + up*uv.y + dir));\n}\n\nvec3 getColor(Hit h)\n{\n    if (h.d > P) { return _fog; }\n    \n    vec3 n = getNormal(h.p);\n    vec3 col = vec3(0);\n    vec3 light = vec3(0,3,0);\n    \n    \n    if(_d == _dfloor)\n    {\n        float diff = max(dot(normalize(light-h.p),n),0.0);\n        col = vec3(diff);\n    }\n    \n    if(_d == _dshell)\n    {\n        float diff = max(dot(normalize(light-h.p),n),0.0);\n        float spec = pow(max(dot(normalize(reflect(h.p-_cam.p,n)),n),0.0),50.);\n        col = texture2D(iChannel0,h.p.xz).rgb*diff+spec;\n    }\n    \n    \/\/if(_d == _dparticles)\n    \/\/{\n    \/\/    col = vec3(0);\n    \/\/}\n    \n    col *= getShadow(h.p,light);\n    col += texture2D(iChannel0,h.p.xz*0.01+vec2(-T*0.003)).x*0.5;\n    \n    return mix(col,_fog,h.t\/D);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (2.0*gl_FragCoord.xy-iResolution.xy)\/iResolution.yy;\n    vec2 uvm = (2.0*iMouse.xy-iResolution.xy)\/iResolution.yy;\n    \n    if (iMouse.y < 10.) { uvm.y = -0.3; }\n    if (iMouse.x < 10.) { uvm.x = -0.5; }\n    \n    _cam.p *= rotX(-uvm.y)*rotY(uvm.x*PI);\n    \n    fragColor = vec4(getColor(march(lookAt(_cam,uv))), 1.0);\n}","name":"","description":"","type":"image"}]}}