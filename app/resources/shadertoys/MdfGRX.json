{"Shader":{"ver":"0.1","info":{"id":"MdfGRX","date":"1375342854","viewed":15187,"name":"Hell","username":"iq","description":"A variation of my Clouds shaders, made to look more like we are sinking to the very center of hell. Some postprocessed bloom effect would look awesome in this.","likes":227,"published":3,"flags":0,"tags":["procedural","3d","raymarching","noise","volumetric"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec4 map( vec3 p )\n{\n\tfloat den = 0.2 - p.y;\n\n    \/\/ invert space\t\n\tp = -7.0*p\/dot(p,p);\n\n    \/\/ twist space\t\n\tfloat co = cos(den - 0.25*iGlobalTime);\n\tfloat si = sin(den - 0.25*iGlobalTime);\n\tp.xz = mat2(co,-si,si,co)*p.xz;\n\n    \/\/ smoke\t\n\tfloat f;\n\tvec3 q = p                          - vec3(0.0,1.0,0.0)*iGlobalTime;;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iGlobalTime;\n    f += 0.25000*noise( q ); q = q*2.03 - vec3(0.0,1.0,0.0)*iGlobalTime;\n    f += 0.12500*noise( q ); q = q*2.01 - vec3(0.0,1.0,0.0)*iGlobalTime;\n    f += 0.06250*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iGlobalTime;\n    f += 0.03125*noise( q );\n\n\tden = clamp( den + 4.0*f, 0.0, 1.0 );\n\t\n\tvec3 col = mix( vec3(1.0,0.9,0.8), vec3(0.4,0.15,0.1), den ) + 0.05*sin(p);\n\t\n\treturn vec4( col, den );\n}\n\nvec3 raymarch( in vec3 ro, in vec3 rd, in vec2 pixel )\n{\n\tvec4 sum = vec4( 0.0 );\n\n\tfloat t = 0.0;\n\n    \/\/ dithering\t\n\tt += 0.05*texture2D( iChannel0, pixel.xy\/iChannelResolution[0].x ).x;\n\t\n\tfor( int i=0; i<100; i++ )\n\t{\n\t\tif( sum.a > 0.99 ) break;\n\t\t\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\tcol.xyz *= mix( 3.1*vec3(1.0,0.5,0.05), vec3(0.48,0.53,0.5), clamp( (pos.y-0.2)\/2.0, 0.0, 1.0 ) );\n\t\t\n\t\tcol.a *= 0.6;\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a);\t\n\n\t\tt += 0.05;\n\t}\n\n\treturn clamp( sum.xyz, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x\/ iResolution.y;\n\t\n    vec2 mo = iMouse.xy \/ iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n\t\n    \/\/ camera\n    vec3 ro = 4.0*normalize(vec3(cos(3.0*mo.x), 1.4 - 1.0*(mo.y-.1), sin(3.0*mo.x)));\n\tvec3 ta = vec3(0.0, 1.0, 0.0);\n\tfloat cr = 0.5*cos(0.7*iGlobalTime);\n\t\n    \/\/ shake\t\t\n\tro += 0.1*(-1.0+2.0*texture2D( iChannel0, iGlobalTime*vec2(0.010,0.014) ).xyz);\n\tta += 0.1*(-1.0+2.0*texture2D( iChannel0, iGlobalTime*vec2(0.013,0.008) ).xyz);\n\t\n\t\/\/ build ray\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize(cross( vec3(sin(cr),cos(cr),0.0), ww ));\n    vec3 vv = normalize(cross(ww,uu));\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\t\n    \/\/ raymarch\t\n\tvec3 col = raymarch( ro, rd, fragCoord );\n\t\n\t\/\/ contrast and vignetting\t\n\tcol = col*0.5 + 0.5*col*col*(3.0-2.0*col);\n\tcol *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\t\n    fragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}