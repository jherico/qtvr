{"Shader":{"ver":"0.1","info":{"id":"Ml23D3","date":"1433266034","viewed":713,"name":"Chebyshev Rotation","username":"eiffie","description":"In euclidean geometry length=(x^2+y^2)^(1\/2) in taxicab geometry manhattan distance =abs(x)+abs(y) but what is this geometry? length=(x^inf+y^inf)^(1\/inf) Does it have a name? Also is there a general formula for superelliptic rotations?","likes":4,"published":3,"flags":8,"tags":["squarerotation","chebyshev"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/in euclidean geometry length=(x^2+y^2)^(1\/2)\n\/\/in taxicab geometry (manhattan distance) length=abs(x)+abs(y)\n\/\/in chebyshev geometry length=(x^inf+y^inf)^(1\/inf) but reduces to max(abs(x),abs(y))\n\n\/\/#define EUCLIDEAN\n\/\/#define TAXICAB\n#define CHEBYSHEV\n\n#ifdef EUCLIDEAN\n\t#define Pi 3.14159\n\t#define Cos cos\n\t#define Atan e_atan\n\t#define Length length\n#endif\n#ifdef TAXICAB\n\t#define Pi (2.0*sqrt(2.0))\n\t#define Cos t_cos\n\t#define Atan t_atan\n\t#define Length t_length\n#endif\n#ifdef CHEBYSHEV\n\t#define Pi 4.0\n\t#define Cos c_cos\n\t#define Atan c_atan\n\t#define Length c_length\n#endif\n\nfloat t_cos(float a){return 2.0*abs(mod(a,2.0*Pi)-Pi)\/Pi-1.0;}\nfloat c_cos(float a){return clamp(abs(mod(a,2.0*Pi)-Pi)-Pi\/2.0,-1.0,1.0);}\nfloat e_atan(vec2 p){return atan(p.y,p.x);}\nfloat t_atan(vec2 p){\n\tfloat a=p.x-p.y,b=p.x+p.y,res; \n\tif(b==0.0)res=(a>0.0?7.0:3.0);\n\tfloat d=a\/b;\n\tif(abs(d)<1.0){\n\t\tif(b>0.0)res=1.0-d;\n\t\telse res=5.0-d;\n\t}else {\n\t\td=b\/a;\n\t\tif(a>0.0)res=7.0+d;\n\t\telse res=3.0+d;\n\t}\n\treturn res*0.25*Pi;\n}\nfloat c_atan(vec2 p){\n\tif(p.y==0.0)return (p.x>0.0?0.0:4.0);\n\tfloat a=p.x\/p.y;\n\tif(abs(a)<1.0){\n\t\tif(p.y>0.0)return 2.0-a;\n\t\telse return 6.0-a;\n\t}else {\n\t\ta=p.y\/p.x;\n\t\tif(p.x>0.0)return mod(a,8.0);\n\t\telse return 4.0+a;\n\t}\n}\nfloat t_length(vec2 p){return abs(p.x)+abs(p.y);}\nfloat c_length(vec2 p){return max(abs(p.x),abs(p.y));}\/\/==(x^inf+y^inf)^(1\/inf)\n\nfloat Sin(float a){return Cos(a-Pi\/2.0);}\nvec3 Cos3(vec3 a){return vec3(Cos(a.x),Cos(a.y),Cos(a.z));}\nvec2 CosSin(float a){return vec2(Cos(a),Sin(a));}\n\nfloat DE(vec2 p){\n\tfloat b=3.0;\n\tfor(int n=0;n<6;n++){\n\t\tp=Length(p)*CosSin(mod(Atan(p)+0.125*Pi,0.25*Pi)-0.125*Pi);\n\t\tp.x-=b\/=3.0;\n\t}\n\treturn Length(p)-b;\n}\n\nvec2 rotate(vec2 p, float a){return Length(p)*CosSin(Atan(p)+a);}\nvec3 rotpic(vec2 p, float a){\n\tp=rotate(p,a);\n\treturn texture2D(iChannel0,p+0.5).rgb;\n}\nvec3 pal( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\/\/from iq's palette tutorial (what NOT to do)\n    return a + b*Cos3( 8.0*(c*t+d) );\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv=3.0*(fragCoord.xy\/iResolution.xy-0.5);\n\tuv=rotate(uv,-iGlobalTime*0.5);\n\tvec3 col=rotpic(uv,iGlobalTime);\n\tfloat d=DE(uv);\n\tcol=mix(vec3(0.0),col,smoothstep(0.0,0.05,d));\n    vec3 c2=pal(d*150.0+iGlobalTime*0.1, vec3(0.8,0.5,0.4),vec3(0.2,0.1,0.2),vec3(2.0,1.0,1.0),vec3(0.0,0.25,0.25) );\n    col=mix(c2,col,smoothstep(0.0,0.01,d));\n\t\/\/col=mix(vec3(0.2,0.4,0.6),col,smoothstep(0.0,0.01,d));\n\t\/\/col=mix(vec3(1.0),col,smoothstep(-0.01,0.001,d));\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/this is the same \"song\" as my last shader, I only changed the synth's waveform\n\/\/to a box wave and the scale to major.\n\n#define BX_TAU 8.0\n#define wav bx_cos\n\/\/a box wave looks like this...\n\/\/      _\n\/\/\\_\/  \\_\/\n\n#define TAU 6.283\n#define bps 8.0\nfloat nofs(float n){\/\/the song's \"random\" ring\n    n=mod(n,8.0);\n    if(n<1.0)return 0.0;\n    if(n<2.0)return 1.0;\n    if(n<3.0)return 2.0;\n    if(n<4.0)return 3.0;\n    if(n<5.0)return 5.0;\n    if(n<6.0)return 4.0;\n    if(n<7.0)return 3.0;\n    return 0.0;\n}\n\nfloat scale(float note){\/\/throws out dissonant tones\n\tfloat n2=mod(note,12.0);\n\tif((n2==1.0)||(n2==3.0)||(n2==6.0)||(n2==8.0)||(n2==10.0))note=-100.0;\/\/major\n\t\/\/if((n2==1.0)||(n2==4.0)||(n2==6.0)||(n2==9.0)||(n2==11.0))note=-100.0;\/\/minor\n\t\/\/if((n2==1.0)||(n2==4.0)||(n2==5.0)||(n2==9.0)||(n2==10.0))note=-100.0;\/\/hungarian minor\n\t\/\/if(note>96)note=96.0+n2;\n\treturn note;\n}\nfloat ntof(float note){\/\/note frequencies from wikipedia\n\tif(note<12.0)return 0.0;\n\tfloat octave=floor((note+0.5)\/12.0)-5.0;\n\tnote=mod(note,12.0);\n\tfloat nt=493.88;\/\/b\n    \tif(note<0.5)nt=261.63;\/\/c\n\telse if(note<1.5)nt=277.18;\/\/c#\n\telse if(note<2.5)nt=293.66;\/\/d\n    \telse if(note<3.5)nt=311.13;\/\/d#\n    \telse if(note<4.5)nt=329.63;\/\/e\n    \telse if(note<5.5)nt=349.23;\/\/f\n    \telse if(note<6.5)nt=369.99;\/\/f#\n    \telse if(note<7.5)nt=392.0;\/\/g\n    \telse if(note<8.5)nt=415.30;\/\/g#\n    \telse if(note<9.5)nt=440.0;\/\/a\n    \telse if(note<10.5)nt=466.16;\/\/a#\n\treturn nt*pow(2.0,octave);\n}\n\n\/\/ note number to frequency  from https:\/\/www.shadertoy.com\/view\/ldfSW2\n\/\/float ntof(float n){return (n>0.0)?440.0 * pow(2.0, (n - 67.0) \/ 12.0):0.0;}\n\nvec2 bx_cos(vec2 t){return clamp(abs(mod(BX_TAU*t,8.0)-4.0)-2.0,-1.0,1.0);}\nvec2 cosine(vec2 t){return cos(TAU*t);}\nvec2 sine(vec2 t){return sin(TAU*t);}\nvec2 saw(vec2 t){return 2.0*(fract(t)-0.5);}\nvec2 ssaw(vec2 t){return 4.0*(abs(fract(t)-0.5)-0.25);}\nvec2 squar(vec2 t){return sign(fract(t)-0.5);}\n\nfloat I(float tf, float c, float s){\/\/ taken from jnorberg https:\/\/www.shadertoy.com\/view\/lt2GRy\n\tfloat wf=c*24.0;\/\/c is number of harmonics to simulate, s suppresses harmonics\n\tvec2 w=vec2(0.125,1.125)+vec2(floor(wf));w*=2.0;\n\tfloat p=fract(tf),sw=1.0-2.0*p,ip=1.0-p;\n\tvec2 sinc=-wav(w*p)\/(1.0+s*p)+wav(w*ip)\/(1.0+s*ip);\n\treturn (sw+mix(sinc.x,sinc.y,fract(wf)))*0.5;\n}\nvec2 inst(float n,float t,float bt,float pan,int i){\n\tfloat f=ntof(scale(n)),c=1.0,s=0.9,fo=3.0;\n\tif(f<12.0)return vec2(0.0);\n\tif(i==0)c=bt*0.2;\n\telse if(i==1){c=0.2-bt*0.2;fo=0.5;}\n\telse if(i==2){c=bt*0.1;s=0.3;fo=1.0;}\n\telse if(i==3){c=bt*2.0;fo=4.0;}\n\telse if(i==4){c=0.01;s=0.01;fo=0.125;}\n\telse {c=20.0-bt*20.0;fo=6.0;}\n\tfloat a=I(f*t,c,s);\n\ta*=exp(-bt*fo)*60.0\/n;\n\treturn vec2(a*(1.0-pan),a*pan);\n}\nvec2 inst2(float nn,float no,float of,float t,float bt,float pan,int i){\n\treturn inst(nn+of,t,bt,pan,i)+inst(no+of,t,bt+1.0,pan,i);\/\/plays new note and tail of last note\n}\n\nvec2 mainSound(float time)\n{\n\tfloat tim=time*bps;\n\tfloat b=floor(tim);\n\tfloat t0=fract(tim),t1=mod(tim,2.0)*0.5,t2=mod(tim,4.0)*0.25;\n\tfloat n2=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n\tfloat n1=n2+nofs(b*0.5),n0=n1+nofs(b);\n\tb-=1.0;\/\/go back in time to finish old notes - clunky\n\tfloat n5=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n\tfloat n4=n5+nofs(b*0.5),n3=n4+nofs(b);\n\tb-=1.0;\n\tn5=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n\tn4=n5+nofs(b*0.5);\n\tb-=2.0;\n\tn5=nofs(b*0.0625)+nofs(b*0.125)+nofs(b*0.25);\n\tvec2 a0=inst2(n0,n3,72.0,time,t0,0.5,0);\n\tvec2 a1=inst2(n1,n4,60.0,time,t1,0.8,1);\n\tvec2 a2=inst2(n2,n5,48.0,time,t2,0.2,2);\n\tvec2 a1h=inst2(n1,n4,21.0,time,t1,0.6,3);\n\tvec2 a2h=inst2(n2,n5,43.0,time,t2,0.4,4);\n\tvec2 a1hb=inst(n1+4.0,time,t1,0.1,5);\n\tvec2 v=0.33*(a0+a1+a2+0.5*a1h+a2h+0.1*a1hb);\n\treturn clamp(v,-1.0,1.0);\n}\n","name":"","description":"","type":"sound"}]}}