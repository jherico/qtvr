{"Shader":{"ver":"0.1","info":{"id":"MsSGRG","date":"1390240758","viewed":320,"name":"buzz","username":"hat","description":"modeling with distance field","likes":0,"published":3,"flags":0,"tags":["deformations"],"hasliked":0},"renderpass":[{"inputs":[{"id":25,"src":"\/presets\/cube03_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\t\/\/#define SHADOWS\n\n\tconst int max_iterations = 150;\n\tconst float stop_threshold = 0.1;\n\tconst float grad_step = 0.1;\n\tconst float clip_far = 6000.0;\n\tconst float PI = 3.14159265359;\n\n\tfloat uAngle = iGlobalTime * 50.0;\n\n\tmat3 rotX(float angle) {\n\t\tangle = radians(angle);\n\t\tfloat c = cos(angle);\n\t\tfloat s = sin(angle);\n\t\treturn mat3(1.0, 0.0, 0.0,\n\t\t\t\t\t0.0, c, -s,\n\t\t\t\t\t0.0, s, c);\n\t}\n\n\tmat3 rotY(float angle) {\n\t\tangle = radians(angle);\n        float c = cos(angle);\n        float s = sin(angle);\n\t\treturn mat3(c, 0.0, s,\n\t\t\t\t\t0.0, 1.0, 0.0,\n\t\t\t\t\t-s, 0.0, c);\n\t}\n\n\tmat3 rotZ(float angle) {\n\t\tangle = radians(angle);\n        float c = cos(angle);\n        float s = sin(angle);\n\t\treturn mat3(c, -s, 0.0,\n\t\t\t\t\ts, c, 0.0,\n\t\t\t\t\t0.0, 0.0, 1.0);\n\t}\n\n\tfloat roundCylinder(in vec3 p, in float h, in float r1, in float r2) {\n\t    float a = abs(p.x)-(h-r2);\n\t    float b = length(p.yz)-r1;\n\t    return min(min(max(a, b), max(a-r2, b+r2)), length(vec2(b+r2,a))-r2);\n\t}\n\n\tfloat roundCylinderH(in vec3 p, in float h, in float r1, in float r2) {\n\t    float a = abs(p.y)-(h-r2);\n\t    float b = length(p.xz)-r1;\n\t    return min(min(max(a, b), max(a-r2, b+r2)), length(vec2(b+r2,a))-r2);\n\t}\n\n\tfloat displace(float u, vec3 xcomp, float smooth) {\n\t\txcomp.x *= 0.5;\n\t\tfloat xD = (u + xcomp.x) * step(-u, xcomp.x) * step(u, xcomp.y - xcomp.x) \/ xcomp.y;\n\t\txD += step(-u, xcomp.x - xcomp.y) * step(u, xcomp.x - xcomp.z);\n\t\txD += (xcomp.x - u) * step(-u, xcomp.z - xcomp.x) * step(u, xcomp.x) \/ xcomp.z;\n\t\treturn xD * xD * (3. - 2. * xD);\n\t}\n\n    vec3 coloring_head(vec3 p) {\n\n        p.y -= 900.;\n        p *= rotY(uAngle);\n\n        vec3 outData = vec3(0.0, 0.0, 0.0);\n        vec3 u = p.xyz;\n\n        float ratio = 150.0;\n        u.y = 0.00225 * u.y * u.y;\n        u.x *= 1.15 * (1.0 + .4 * sin((u.y)\/ ratio) * step(p.y, 0.0)) * (1.0 - .06 * (ratio - p.y) \/ ratio);\n        u.z += (0.05 + step(p.z, 0.0) * clamp(p.z * 0.1, -0.18, 0.0)) * p.y;\n\n        float head = length(u) - 200.0;\n\n        u.z = p.z -40.0 + 5.0 * cos(p.y * 0.011 + 1.1) + 190.0 * cos(p.x * 0.008) - 25.0 * cos(p.y * 0.02 + 1.1) + 0.05 * p.y;\n        head -= 4.0 * clamp(u.z, 0.0, 1.);\n\n        vec3 v = vec3(abs(p.x) - 170., p.yz - vec2(60., 130.));\n        float val = length(v);\n        head -= 4.0 * pow((60.0 - clamp(val, 0.0, 60.0)), 0.5)  * step(val, 60.0);\n\n        float l = 270.0;\n        float c = 50.0;\n        float y0 = 65.0;\n        float w = 190.0;\n        float m = (p.y + y0) * step(p.y, c - y0) \/ c + step(-p.y, -c + y0) * (1.0 - (p.y - c + y0) \/ (l - c));\n        float n = m * m;\n        float s = clamp(w - 2.0 * abs(p.x), 0.0, w) \/ w;\n        s *= s;\n        s = s * s * (3.0 - 2.0 * s);\n        float nose = 0.28 * clamp((w - 2.0 * abs(p.x)) * s, 0.0, w) * step(-p.y, y0) * step(p.y, l - y0) * step(p.z, 0.0);\n        nose *= n;\n\n        head -= nose;\n        outData.y = clamp(u.z, 0.0, 1.);\n\n        float eS = 68.0;\n        v = vec3(abs(p.x) - 60., p.yz + vec2(-110., 130.));\n        val = length(v);\n        m = 4.0 * pow((eS - clamp(val, 0.0, eS)), 0.5) * step(val, eS);\n        head -= m;\n\n        v.x -= 20.0;\n        c = v.x - 20.0;\n\n        s = step(val, eS) * step(v.y + 0.01 * c * c, 35.0);\n        outData.y += (2. - outData.y) * step(val, eS);\n\n        v.xy += vec2(28., 10.);\n        ratio = length(v);\n        vec4 ratios = vec4(59.5, 59.2, 58.4, 57.8);\n        outData.z = atan(v.y, v.x);\n        outData.y += (3. - outData.y) * step(-ratio, -ratios.y) * step(ratio, ratios.x);\n        outData.y += (4. - outData.y) * step(-ratio, -ratios.z) * step(ratio, ratios.y);\n        outData.y += (3. - outData.y) * step(ratio, ratios.z);\n\n        v.xy += vec2(1.7, -5.);\n        ratio = length(v);\n        outData.y += (2. - outData.y) * step(ratio, ratios.w);\n        v.xy -= vec2(1.7, 5.);\n        outData.y += (0. - outData.y) * step(-(v.y + 0.01 * c * c), -20.0) * step(val, eS);\n\n        v.x -= 28.0;\n        v.x *= 0.9;\n        v.y -= 10.0 + 8.0 * cos(v.x * 0.07 - 0.4);\n        s = 10.0;\n        w = 34.0;\n        n = s + 75.0 * cos(v.x * 0.016);\n        m = step(-v.y, -s) * step(v.y, n) * step(abs(v.x), 80.0) * step(p.z, 0.0);\n        c = v.y * step(v.y, w) + w * step(-v.y, -w) - (v.y - n + w ) * step(-v.y, -n + w);\n        c \/= w;\n        c = c * c * c;\n        c = c * c *( 3.0 - 2.0 * c);\n        l = (110.0 - (abs(p.x) - 20.0))\/ 80.0;\n        l = l * l * ( 3.0 - 2.0 * l);\n        head -= 30.0 * c * m * l;\n        c = 5.0;\n\n        outData.y += (5.0 - outData.y) * step(v.y, n - w + c) * step(-v.y, -w + c) * m * step(abs(v.x + 3.0), 60.0) * step(abs(v.x - 3.0), 60.0);\n\n        u = vec3(abs(p.x) - 90., p.yz + vec2(83., 200.));\n        val = length(u);\n        float rad = 180.0;\n        m = (val - rad) \/ rad;\n        m *= m;\n        m = m * m * m * (3.0 - 2.0 * m * m);\n        head += 12.0 * m * step(val, rad);\n\n        u = vec3(abs(p.x) - 110., p.yz + vec2(0., 120.));\n        val = length(u);\n        rad = 130.0;\n        m = (val - rad) \/ rad;\n        m *= m;\n        m = m * m * m * (3.0 - 2.0 * m * m);\n        head -= 10.0 * m * step(val, rad);\n\n        head *= 0.3;\n        outData.x = head;\n\n\n        return outData;\n    }\n\n\n\tvec3 coloring(vec3 p) {\n\n\t\tp.y -= 900.;\n\t\tp *= rotY(uAngle);\n\n\t\tvec3 outData = vec3(0.0, 0.0, 0.0);\n\t\tvec3 u = p.xyz;\n\n\t\tfloat ratio = 150.0;\n\t\tu.y = 0.00225 * u.y * u.y;\n\t\tu.x *= 1.15 * (1.0 + .4 * sin((u.y)\/ ratio) * step(p.y, 0.0)) * (1.0 - .06 * (ratio - p.y) \/ ratio);\n\t\tu.z += (0.05 + step(p.z, 0.0) * clamp(p.z * 0.1, -0.18, 0.0)) * p.y;\n\n\t\tfloat head = length(u) - 200.0;\n\n\t\tu.z = p.z -40.0 + 5.0 * cos(p.y * 0.011 + 1.1) + 190.0 * cos(p.x * 0.008) - 25.0 * cos(p.y * 0.02 + 1.1) + 0.05 * p.y;\n\t\thead -= 4.0 * clamp(u.z, 0.0, 1.);\n\n        vec3 v = vec3(abs(p.x) - 170., p.yz - vec2(60., 130.));\n\t\tfloat val = length(v);\n\t\thead -= 4.0 * pow((60.0 - clamp(val, 0.0, 60.0)), 0.5)  * step(val, 60.0);\n\n\t\tfloat l = 270.0;\n\t\tfloat c = 50.0;\n\t\tfloat y0 = 65.0;\n\t\tfloat w = 190.0;\n\t\tfloat m = (p.y + y0) * step(p.y, c - y0) \/ c + step(-p.y, -c + y0) * (1.0 - (p.y - c + y0) \/ (l - c));\n\t\tfloat n = m * m;\n\t\tfloat s = clamp(w - 2.0 * abs(p.x), 0.0, w) \/ w;\n\t\ts *= s;\n\t\ts = s * s * (3.0 - 2.0 * s);\n\t\tfloat nose = 0.28 * clamp((w - 2.0 * abs(p.x)) * s, 0.0, w) * step(-p.y, y0) * step(p.y, l - y0) * step(p.z, 0.0);\n\t\tnose *= n;\n\n\t\thead -= nose;\n\t\toutData.y = clamp(u.z, 0.0, 1.);\n\n\t\tfloat eS = 68.0;\n\t\tv = vec3(abs(p.x) - 60., p.yz + vec2(-110., 130.));\n\t\tval = length(v);\n\t\tm = 4.0 * pow((eS - clamp(val, 0.0, eS)), 0.5) * step(val, eS);\n\t\thead -= m;\n\n\t\tv.x -= 20.0;\n\t\tc = v.x - 20.0;\n\n\t\ts = step(val, eS) * step(v.y + 0.01 * c * c, 35.0);\n\t\toutData.y += (2. - outData.y) * step(val, eS);\n\n        v.xy += vec2(28., 10.);\n\t\tratio = length(v);\n\t\tvec4 ratios = vec4(59.5, 59.2, 58.4, 57.8);\n\t\toutData.z = atan(v.y, v.x);\n\t\toutData.y += (3. - outData.y) * step(-ratio, -ratios.y) * step(ratio, ratios.x);\n\t\toutData.y += (4. - outData.y) * step(-ratio, -ratios.z) * step(ratio, ratios.y);\n\t\toutData.y += (3. - outData.y) * step(ratio, ratios.z);\n\n        v.xy += vec2(1.7, -5.);\n\t\tratio = length(v);\n\t\toutData.y += (2. - outData.y) * step(ratio, ratios.w);\n        v.xy -= vec2(1.7, 5.);\n\t\toutData.y += (0. - outData.y) * step(-(v.y + 0.01 * c * c), -20.0) * step(val, eS);\n\n\t\tv.x -= 28.0;\n\t\tv.x *= 0.9;\n\t\tv.y -= 10.0 + 8.0 * cos(v.x * 0.07 - 0.4);\n\t\ts = 10.0;\n\t\tw = 34.0;\n\t\tn = s + 75.0 * cos(v.x * 0.016);\n\t\tm = step(-v.y, -s) * step(v.y, n) * step(abs(v.x), 80.0) * step(p.z, 0.0);\n\t\tc = v.y * step(v.y, w) + w * step(-v.y, -w) - (v.y - n + w ) * step(-v.y, -n + w);\n\t\tc \/= w;\n\t\tc = c * c * c;\n\t\tc = c * c *( 3.0 - 2.0 * c);\n\t\tl = (110.0 - (abs(p.x) - 20.0))\/ 80.0;\n\t\tl = l * l * ( 3.0 - 2.0 * l);\n\t\thead -= 30.0 * c * m * l;\n\t\tc = 5.0;\n\n\t\toutData.y += (5.0 - outData.y) * step(v.y, n - w + c) * step(-v.y, -w + c) * m * step(abs(v.x + 3.0), 60.0) * step(abs(v.x - 3.0), 60.0);\n\n        u = vec3(abs(p.x) - 90., p.yz + vec2(83., 200.));\n\t\tval = length(u);\n\t\tfloat rad = 180.0;\n\t\tm = (val - rad) \/ rad;\n\t\tm *= m;\n\t\tm = m * m * m * (3.0 - 2.0 * m * m);\n\t\thead += 12.0 * m * step(val, rad);\n\n        u = vec3(abs(p.x) - 110., p.yz + vec2(0., 120.));\n\t\tval = length(u);\n\t\trad = 130.0;\n\t\tm = (val - rad) \/ rad;\n\t\tm *= m;\n\t\tm = m * m * m * (3.0 - 2.0 * m * m);\n\t\thead -= 10.0 * m * step(val, rad);\n\n\t\thead *= 0.3;\n\t\toutData.x = head;\n\n\t\tu = p;\n\t\tu.y += 80.0;\n\t\tfloat helmet = length(u) - 500.0;\n\t\thelmet = max(helmet, -length(u) + 490.0);\n\t\thelmet = max(helmet, -u.y);\n\t\thelmet = max(helmet, - u.z);\n\n\t\tfloat an = mod(0.1 * uAngle + 0.0, 140.0);\n\t\tif(an > 70.0) an = 140.0 - an;\n\t\tu *= rotX(an);\n\t\tfloat innerHelmet = length(u) - 490.0;\n\t\tinnerHelmet = max(innerHelmet, -length(u) + 480.0);\n\t\tinnerHelmet = max(innerHelmet, -u.y);\n\t\tinnerHelmet = max(innerHelmet, -u.z -0.7* u.y);\n\t\thelmet = min(helmet, innerHelmet);\n\n\t\toutData.x = min(outData.x, helmet);\n\t\tif(outData.x == helmet) {\n\t\t\toutData.y = 6.0;\n\t\t\toutData.z = 4.;\n\t\t}\n\n\t\tu = p;\n\t\tu.y += 110.;\n\t\tfloat base = max(length(u.xz) - 510., abs(u.y) - 30.0);\n\t\tbase = max(base, -max(length(u.xz) - 480., abs(u.y) - 40.0));\n\t\tbase = max(base, -p.z);\n\n\t\tu *= rotX(18.);\n\t\tm = max(length(u.xz) - 510., abs(u.y) - 30.0);\n\t\tm = max(m, -max(length(u.xz) - 480., abs(u.y) - 40.0));\n\t\tm = max(m, p.z);\n\n\n\t\tu = vec3(abs(p.x) - 490., p.yz + vec2(120., 0.));\n\t\tbase = min(base, roundCylinder(u, 30.0, 95.0, 15.0));\n\t\tbase = min(base, roundCylinder(u, 60.0, 55.0, 20.0));\n\t\tbase = min(base, m);\n\n\t\toutData.x = min(outData.x, base);\n\t\tif(outData.x == base) {\n\t\t\toutData.z = 4.;\n\t\t\toutData.y = 7.;\n\t\t\tif(length(u.yz) <= 51.0) outData.y = 1.;\n\t\t}\n\n        u = vec3(abs(p.x), p.y + 445., abs(p.z));\n\t\tm = u.y - 275.;\n\t\tn = 1. + 0.000001 * m * m;\n\t\tu.x *= n;\n\t\tu.z *= n;\n\t\tfloat body = max(length(u.xz) - 500.0, abs(u.y) - 300.0);\n\n\t\tfloat inner = step(length(u.xz), 490.0);\n\t\tbody = max(body, -max(length(u.xz) - 490.0, abs(u.y - 250.) - 150.0));\n\n\t\tv = u = p;\n\t\tv.x = u.x = abs(p.x);\n\n\t\tv.y += 0.3 * v.x;\n\t\tm = displace(v.y, vec3(1150., vec2(30.)), 2.);\n\n\t\tv.y = -p.y  + 0.3 * (u.x - 250.0);\n\t\tm *= displace(v.y, vec3(1150., vec2(30.)), 2.);\n\n\t\tv.y = -p.y + 1.6 * (u.x - 380.0);\n\t\tm *= displace(v.y, vec3(1150., vec2(30.)), 2.);\n\n\t\tbody -= 26.0 * m;\n\n\t\tv.y = 280.0 + p.y + 0.9 * v.x;\n\t\tn = displace(v.y, vec3(150., vec2(20.)), 2.) * (1. - m);\n\t\tbody -= 23. * n;\n\n\t\tv.y = p.y - 0.3 * v.x;\n\t\tw = displace(v.y, vec3(920., vec2(30.)), 2.);\n\n\t\tv.y = p.y -5. * (u.x - 110.0);\n\t\tw *= displace(v.y, vec3(750., vec2(30.)), 2.) * step(p.z, 0.);\n\n\t\tv.y = p.y - 0.3 * v.x;\n\t\tan = displace(v.y, vec3(885., vec2(30.)), 2.);\n\n\t\tv.y = p.y -5. * (u.x - 90.0);\n\t\tan *= displace(v.y, vec3(750., vec2(30.)), 2.) * step(p.z, 0.);\n\n\t\tbody += 26.0 * w;\n\n\t\tbody = max(body, p.y - 0.3 * p.z + 150.0);\n\t\tbody = max(body, p.y + 140.0);\n\n\t\tfloat f = 3.;\n\t\tfloat k = 1. \/ pow(10., 4.5);\n\n\t\tu = vec3(p.xy + vec2(170., 430.), p.z);\n\t\tu *= rotZ(-5.0);\n\t\tu.y *= 0.4;\n\t\tfloat bh = length(u.xy);\n\t\tbh *= (bh * bh);\n\t\tc = step(length(u.xy), 30.) * step(p.z, 0.) * clamp(exp( -k * bh), 0., 1.);\n\n\t\tu = vec3(p.xy + vec2(250., 420.), p.z);\n\t\tu *= rotZ(-5.0);\n\t\tu.y *= 0.4;\n\t\tbh = length(u.xy);\n        bh *= (bh * bh);\n\t\tl = step(length(u.xy), 30.) * step(p.z, 0.) * clamp(exp( -k * bh), 0., 1.);\n\n\t\tu = vec3(p.xy + vec2(330., 410.), p.z);\n\t\tu *= rotZ(-5.0);\n\t\tu.y *= 0.4;\n\t\tbh = length(u.xy);\n        bh *= (bh * bh);\n\t\ts = step(length(u.xy), 30.) * step(p.z, 0.) * clamp(exp( -k * bh), 0., 1.);\n\n\t\tu = vec3(p.xy + vec2(-230., 430.), p.z);\n\t\tf = 10.;\n\t\tk = 1. \/ pow(10., 18.);\n\t\tf = step(length(u.xy), 60.) * step(p.z, 0.) * clamp(exp( -k * pow(length(u.xy), f)), 0., 1.);\n\n\t\tbody -= 20.0 * (c + l + s + 1.3 * f);\n\n\t\tu = p;\n\t\tu.y += 500.;\n\t\tbody += 15. * displace(u.x, vec3(35., vec2(15.)), 2.) * displace(u.y, vec3(150., vec2(15.)), 2.) * step(p.z, 0.);\n\n\t\tu = p;\n\t\tu.x += 9.0 * cos(u.y * 0.1);\n\t\tu.z += 10.0 * cos(u.y * 0.1 - 0.5 * PI);\n\t\tu.y += 800.0;\n\n\t\tbody = min(body, max(length(u.xz) - 325., abs(u.y) - 130.));\n\n\t\tbody *= 0.5;\n\t\toutData.x = min(outData.x, body);\n\t\tif(outData.x == body){\n\t\t\toutData.y = 2.;\n\t\t\toutData.y += (8. - outData.y) * step(1. - m, 0.99);\n\t\t\toutData.y += (2. - outData.y) * step(1. - w, 0.);\n\t\t\toutData.y += (12. - outData.y) * step(1. - an, 0.);\n\t\t\toutData.y += (1. - outData.y) * step(1. - n, 0.99);\n\t\t\toutData.y += (7. -outData.y) * inner;\n\t\t\toutData.y += (3. - outData.y) * step(u.y, 50.);\n\t\t\toutData.y += (9. - outData.y) * step(1. - c, 0.9);\n\t\t\toutData.y += (9. - outData.y) * step(1. - f, 0.9);\n\t\t\toutData.y += (10. - outData.y) * step(1. - l, 0.9);\n\t\t\toutData.y += (11. - outData.y) * step(1. - s, 0.9);\n\t\t\toutData.z = 4.;\n\t\t}\n\n\t\tu= p;\n\t\tu.x = abs(p.x);\n\t\tu.x -= 500.0;\n\t\tu.y += 370.;\n\t\tu *= rotZ(15.);\n\t\tfloat arms = roundCylinder(u, 20.0, 200.0, 15.0);\n\t\tu.x -= 30.;\n\t\tarms = min(arms, roundCylinder(u, 20.0, 190.0, 15.0));\n\t\tu *= rotX(90.);\n\t\tw = length(u);\n\t\tm = w - 160.;\n\t\tm += 7.* displace(u.x, vec3(1270.0, vec2(80.0)), 2.) * displace(u.y, vec3(27.0, vec2(8.0)), 2.);\n\t\tarms = min(arms, m);\n\n\t\tu = p;\n\t\tu.x = -abs(u.x);\n\t\tu.x += 760.0;\n\t\tu.y += 380.;\n\n\t\tu.y = abs(u.y);\n\t\tu.y -= 0.04 * u.x;\n\t \tm = u.y * u.y * 0.005;\n\t\tu.x -= m * step(u.x, 50.);\n\t\tn = roundCylinder(u, 130., 135., 10.);\n\n\t\tu= p;\n\t\tf = 10.;\n\t\tk = 1. \/ pow(10.,17.5);\n\t\tu.x = -abs(u.x);\n\t\tu.x += 660.0;\n\t\tu.y += 380.;\n\t\tu.x += 0.1 * (110. - abs(u.y));\n\t\tu.y *= 0.45;\n\t\tu.x *= 0.5;\n\t\tc = step(length(u.xy), 110.) * step(p.z, 0.) * clamp(exp( -k*pow(length(u.xy), f)), 0., 1.);\n\n\t\tn -= 20. * c;\n\t\tarms = min(arms, n);\n\n\t\tu = p;\n\t\tu.x = -abs(u.x);\n\t\tu.x += 890.0;\n\t\tu.y += 380.;\n\t\tm = length(u);\n\t\ts = m - 130.;\n\t\tu *= rotX(90.);\n\t\ts += 10.* displace(u.x, vec3(1270.0, vec2(80.0)), 2.) * displace(u.y, vec3(27.0, vec2(8.0)), 2.);\n\t\tarms = min(arms, s);\n\n\t\tu = p;\n\t\tu.x = -abs(u.x);\n\t\tu.y += 50. + 380.;\n\t\tu.x += 1140.;\n\t\tl = u.x - 200.;\n\t\tl = 1.0 +  0.000005 * l * l;\n\t\tu.y *= l;\n\t\tu.z *= l;\n\t\tu.y -= 50.;\n\n\t\tf = roundCylinder(u, 170., 110., 15.);\n\n\t\tu.x -= 190.;\n\t\tu.x -= 0.5 * u.y;\n\t\tl = 10. * displace(u.x, vec3(400., vec2(20.)), 1.);\n\t\tf -= l;\n\n\t\tarms = min(arms, f);\n\n\t\tarms *= 0.5;\n\t\toutData.x = min(outData.x, arms);\n\t\tif(outData.x == arms) {\n\t\t\toutData.y = 3.;\n\t\t\toutData.y += (7.0 - outData.y) * step(w, 160.2);\n\t\t\toutData.y += (7.0 - outData.y) * step(m, 130.2);\n\t\t\tif(arms == n * 0.5) outData.y = 2.0;\n\t\t\tif(arms == f * 0.5) {\n\t\t\t\toutData.y = 2.0;\n\t\t\t\toutData.y += (8. - outData.y) * step(1. - l, 0.99);\n\t\t\t};\n\t\t\toutData.z = 4.;\n\t\t}\n\n\t\tu = p;\n\t\tfloat h = 160.;\n\t\tc = 70.;\n\t\tu.y += c + 1100.;\n\t\tm = (u.y - h) * step(u.y, h);\n\t\tu.y -= c;\n\t\tu.x *= 1.0 - 0.0011 * u.y * step(u.y, h);\n\t\tu.x *= 1.0 + 0.00002 * m * m;\n\t\tu.z *= 1.0 + 0.00001 * m * m;\n\n\n\t\tfloat hips = roundCylinderH(u, h, 290., 20.);\n\t\thips = max(hips, p.y + 970.);\n\n\t\tv = u = p;\n\t\tv.x = u.x = abs(p.x);\n\n\t\tv.y += 0.2 * v.x + 910.;\n\t\tm = displace(v.y, vec3(230., vec2(10.)), 2.);\n\n\n\t\tv.y = p.y + 920. - 0.2 * (u.x - 250.0);\n\t\tm *= displace(v.y, vec3(230., vec2(10.)), 2.);\n\n\t\thips -= 20.0 * m;\n\n\t\tu= p;\n\t\tf = 10.;\n\t\tk = 1. \/ pow(10., 17.);\n\t\tu.y += 950.;\n\t\tu.x *= 0.5;\n\t\ts = step(length(u.xy), 100.) * step(p.z, 0.) * clamp(exp( -k*pow(length(u.xy), f)), 0., 1.);\n\n\t\thips -= 20. * s;\n\n\t\thips *= 0.5;\n\t\toutData.x = min(outData.x, hips);\n\t\tif(outData.x == hips){\n\t\t\toutData.y = 2.;\n\t\t\toutData.y += (8. - outData.y) * step(1. - m, 0.99);\n\t\t\toutData.z = 4.;\n\t\t}\n\n\t\tu = p;\n\t\tu.x = -abs(u.x);\n\t\tu.y += 1440.;\n\t\tu.x += 190.;\n\n\t\tu.x *= 1.0 - 0.0003 * u.y;\n\t\tm = u.z * u.z * 0.004;\n\t\tu.z *= 0.8;\n\t\tu.y -= m * step(u.y, 50.);\n\n\t\tfloat legs = roundCylinderH(u, 240., 140., 5.);\n\n\t\tu.y -= 240.;\n\t\tlegs = min(legs, length(u)- 140.);\n\n\t\tu = p;\n\t\tu.x = -abs(p.x);\n\t\tu.x += 190.;\n\t\tu.y += 1660.;\n\t\tu.z -= 30.;\n\t\tm = length(u);\n\t\tlegs = min(legs, m - 125.);\n\n\t\tu = p;\n\t\tu.x = -abs(p.x);\n\t\tu.x += 190.;\n\t\tu.y += 2020.;\n\n\t\tl = u.z + 200.;\n\t\tn = l * l * 0.0015;\n\t\tf = u.z * .5;\n\t\tu.z *= 0.9;\n\n\t\tu.y += f;\n\t\tu.y -= n * step(u.y, 260.);\n\n\t\tu.x *= 1.0 + 0.0004 * u.y;\n\t\tu.z *= 1.0 + 0.001 * u.y;\n\t\ts = roundCylinderH(u, 280., 150., 10.);\n\t\tf = 15. * step(u.y, -190.);\n\t\ts -= f;\n\n\t\tan = 5.;\n\t\tu.y -= 200.;\n\t\tu.y *= 0.8;\n\t\tk = 1. \/ pow(10., 10.7);\n\t\tan = step(length(u.xy), 200.) * step(p.z, 0.) * clamp(exp( -k * pow(length(u.xy), an)), 0., 1.);\n\n\t\ts -= an * 55.;\n\n\t\tlegs = min(legs, s);\n\n\t\tu = p;\n\t\tu.x = abs(p.x);\n\t\tu.x -= 190.;\n\t\tu.y += 2200.;\n\t\tc = length(u);\n\t\tlegs = min(legs, c - 140.);\n\n\t\tu = p;\n\t\tu.x = -abs(p.x);\n\t\tu.x += 190.;\n\t\tlegs += 10. * displace(u.x, vec3(25., vec2(12.)), 2.);\n\n\t\tu = p;\n\t\tu.x = abs(p.x);\n\t\tu.x -= 350.;\n\t\tu.y += 2200.;\n\t\tn = roundCylinder(u, 30.0, 85.0, 20.0);\n\t\tu.x += 315.;\n\t\tn = min(n, roundCylinder(u, 30.0, 85.0, 20.0));\n\n\t\th = 10.;\n\t\tk = 1. \/ pow(10., 17.5);\n\t\tn += 10.* step(length(u.yz), 80.) * clamp(exp( -k*pow(length(u.yz), h)), 0., 1.);\n\n\t\tlegs = min(legs, n);\n\t\tn = length(u.yz);\n\n\t\tlegs *= 0.7;\n\t\toutData.x = min(outData.x, legs);\n\t\tif(outData.x == legs) {\n\t\t\toutData.y = 2.;\n\t\t\toutData.y += (7.0 - outData.y) * step(m, 126.);\n\t\t\toutData.y += (8. - outData.y) * step(1. - f, 0.9);\n\t\t\toutData.y += (8. - outData.y) * step(n, 86.);\n\t\t\toutData.y += (7.0 - outData.y) * step(c, 141.);\n\t\t\toutData.z = 4.;\n\t\t}\n\n\t\tu = p;\n\t\tu.x = abs(p.x);\n\t\tu.x -= 190.;\n\t\tu.y += 2500.;\n\t\tv = u;\n\t\tu.z += 90.;\n\t\tu.z *= 0.5;\n\t\tu.y = 0.002 * u.y * u.y;\n\t\tu.x *= 0.85 - u.z *u.z * 0.00001;\n\t\tu.y *= 1.2;\n\t\tfloat shoes = length(u) - 150.;\n\t\tshoes = max(shoes, -v.y + 60.);\n\t\tv.y -= 40.;\n\t\tm = displace(v.y, vec3(100., vec2(7.)), 2.);\n\t\tshoes -= 15. * m;\n\n\t\tf = displace(v.x, vec3(700, vec2(50.)), 2.) * step(-v.y, -59.) * step(v.z + v.y, -140.);\n\t\tshoes -= 10. * f;\n\n\t\tn = displace(v.x, vec3(180, vec2(50.)), 2.) * step(-v.y, -59.) * step(-v.z, 30.);\n\t\tshoes -= 10. * n;\n\n\t\toutData.x = min(outData.x, shoes);\n\t\tif(outData.x == shoes) {\n\t\t\toutData.y = 2.;\n\t\t\toutData.y += (1. - outData.y) * step(1. - m, 0.99);\n\t\t\toutData.y += (8. - outData.y) * step(1. - f, 0.99);\n\t\t\toutData.y += (8. - outData.y) * step(1. - n, 0.99);\n\t\t}\n\n\t\tp.x = abs(p.x);\n\t\tp.xy += vec2(-1450., 400.);\n\t\tp *= 1.2;\n\t\tp *= rotX(-50.);\n\n\t\tu = p;\n\t\tbh = u.x \/ 30. + 0.5;\n\t\tbh *= bh * bh;\n\t\tvec2 g = vec2(1. \/ max(1. + (bh * bh), 0.00001), 0.);\n\n\t\tu.z = abs(p.z);\n        bh = u.x \/ 35. + 2.5;\n        bh *= bh * bh;\n\t\tu.yz *= vec2(1.0 + 0.6 * (1. \/ max(1. + (bh * bh), 0.00001), 0.));\n\n\t\tu.z += 1.9 * u.x;\n\t\tu.z *= 1.0 - 0.305 * g.x * step(p.z, 0.);\n\t\tu.z -= 1.9 * u.x;\n\n\t\tg.x = clamp((u.x + 123.) \/ 200., 0., 1.);\n\t\tu.y *= 1.0 + 2.2 * pow(g.x, 0.8);\n\t\tu.x = 0.00002 * u.x * u.x * u.x;\n\n\t\tfloat hands = length(u) - 100.;\n\n\t\tg.x = displace(u.y, vec3(225., vec2(100.)), 2.) * displace(u.z, vec3(140., vec2(20.)), 2.);\n\t\tg.x *= step(-p.x, -110.);\n\t\thands += 300. * g.x;\n\n\t\tg.x = displace(u.x - 12., vec3(18., vec2(7.)), 2.);\n\t\thands -= 10. * g.x;\n\n\t\tg.x = p.x - 10.;\n\t\tu.z = abs(p.z);\n\t\tu.z += 0.005 * g.x * g.x;\n\t\tg.x = displace(u.x, vec3(2.1, vec2(1.)), 2.) * displace(u.z + 10., vec3(175., vec2(30.)), 2.);\n\t\thands -= 15. * g.x * step(-u.y, 0.);\n\n\t\thands *= 0.3;\n\n\t\tu = vec3(p) + vec3(-140., 50., -100.);\n\t\tg.x = 55.;\n\t\tu.y -= 50. * cos(0.008 * u.x);\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tu.xz += vec2(-17., 40.);\n\t\t\tg.x += 17.;\n\t\t\tif(i == 3) {\n\t\t\t\tg.x -= 30.;\n\t\t\t\tu.x += 30.;\n\t\t\t}\n\t\t\tg.y = roundCylinder(u, g.x, 20., 20.);\n\t\t\thands = min(hands, g.y);\n\t\t}\n\n\t\tu = vec3(p) + vec3(-60., 0., 135. + 26. * cos(.024 * p.x + 0.8));\n\t\tu *= rotY(-33.);\n\t\tg.x = roundCylinder(u, 75., 20., 20.);\n\n\t\toutData.x = min(outData.x, hands);\n\t\tif(outData.x == hands) outData.y = 2.;\n\n\n\t\treturn outData;\n\t}\n\n\n\tvec3 gradient( vec3 v ) {\n\t\tconst vec3 delta = vec3( grad_step, 0.0, 0.0 );\n\t\tfloat va = coloring( v ).x;\n\t\treturn normalize (\n\t\t\tvec3(\n\t\t\t\tcoloring( v + delta.xyy).x - va,\n\t\t\t\tcoloring( v + delta.yxy).x - va,\n\t\t\t\tcoloring( v + delta.yyx).x - va\n\t\t\t)\n\t\t);\n\t}\n\n    vec3 ray_marching_head( vec3 origin, vec3 dir, float start, float end ) {\n        float depth = start;\n        vec3 salida = vec3(end);\n        vec3 dist = vec3(2800.0);\n        for ( int i = 0; i < max_iterations; i++ ) \t\t{\n            if ( dist.x < stop_threshold || depth > end ) break;\n\n                dist = coloring_head( origin + dir * depth );\n                depth += dist.x;\n        }\n\n        salida = vec3(depth, dist.y, dist.z);\n        return salida;\n    }\n\n\tvec3 ray_marching( vec3 origin, vec3 dir, float start, float end ) {\n\t\tfloat depth = start;\n\t\tvec3 salida = vec3(end);\n\t\tvec3 dist = vec3(2800.0);\n\t\tfor ( int i = 0; i < max_iterations; i++ ) \t\t{\n\t\t\tif ( dist.x < stop_threshold || depth > end ) break;\n\n                dist = coloring( origin + dir * depth );\n                depth += dist.x;\n\t\t}\n\n\t\tsalida = vec3(depth, dist.y, dist.z);\n\t\treturn salida;\n\t}\n\n\tfloat shadow( vec3 v, vec3 light ) {\n\t\tvec3 lv = v - light;\n\t\tfloat end = length( lv );\n\t\tlv \/= end;\n\n\t\tfloat depth = ray_marching( light, lv, 2800.0, end ).x;\n\n\t\treturn step( end - depth, 0.5);\n\t}\n\n\tvec3 shading( vec3 v, vec3 n, vec3 eye, vec3 lightMix) {\n\n\t\tvec3 final = vec3( 0.0 );\n\n\t\tvec3 ev = normalize( v - eye );\n\t\tvec3 ref_ev = reflect( ev, n );\n\n\t\t{\n\t\t\tvec3 light_pos   = vec3(0.0, 5000.0, -5000.0);\n\t\t\tvec3 vl = normalize( light_pos - v );\n\t\t\tfloat diffuse  = max( 0.0, dot( vl, n ) );\n\t\t\tfloat specular = max( 0.0, dot( vl, ref_ev ) );\n\t\t\tspecular = pow( specular, lightMix.x );\n\t\t\tfinal += vec3( 0.9 ) * ( diffuse * lightMix.y + specular * lightMix.z);\n\n\t\t\t#ifdef SHADOWS\n\t\t\tfinal = final * (0.75 + 0.25 * shadow( v, light_pos ));\n\t\t\t#endif\n\n\t\t\tfinal += vec3(0.19);\n\t\t}\n\n\n\t\treturn final;\n\t}\n\n\tvec3 ray_dir( float fov, vec2 size, vec2 pos ) {\n\t\tvec2 xy = pos - size * 0.5;\n\n\t\tfloat cot_half_fov = tan(radians( 90.0 - fov * 0.5 ));\n\t\tfloat z = size.y * 0.5 * cot_half_fov;\n\n\t\treturn normalize( vec3( xy, z ) );\n\t}\n\n\tvec3 getColor(vec3 data) {\n\t\tvec3 color = vec3(0.0);\n\t\tif(data.y == 0.0) color = vec3(0.9803, 0.8627, 0.7058);\n\n\t\tif(data.y == 1.0) color = vec3(0.4313, 0.1960, 0.5098);\n\n\t\tif(data.y == 2.0) color = vec3(1.0);\n\n\t\tif(data.y == 3.0) color = vec3(0.15); \/\/ negro\n\n\t\tif(data.y == 4.0) color = vec3(0.5, 0.7, 0.9) * (0.2 + 0.8 * abs(cos(data.z - 1.7)));\n\n\t\tif(data.y == 5.0) color = vec3(0.2745, 0.1960, 0.1176);\n\n\t\tif(data.y == 6.0) color = vec3(0.1); \/\/ casco\n\t\tif(data.y == 7.0) color = vec3(0.7);\n\n\t\tif(data.y == 8.0) color = vec3(0.3764, 0.6784, 0.0);\n\n\t\tif(data.y == 9.0) color = vec3(0.7, 0.0, 0.0);\n\n\t\tif(data.y == 10.0) color = vec3(0.0, 0.3607, 0.2078);\n\n\t\tif(data.y == 11.0) color = vec3(0.0, 0.4745, 0.7372);\n\n\t\tif(data.y == 12.0) color = vec3(0.2627, 0.5882, 0.6980);\n\n\t\treturn color;\n\t}\n\n\tvec3 getMat(float data) {\n\t\tvec3 lightMix = vec3(0.0);\n\t\tbool cond = data >= 4.;\n\t\tlightMix.x = cond ? 64. : 1.;\n\t\tlightMix.y = cond ? 0.4 : 0.36;\n\t\tlightMix.z = cond ? 1.9 : 0.1;\n\t\treturn lightMix;\n\t}\n\n\tvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n\t{\n\t\tvec3 rd = ray_dir(50.0, iResolution.xy, fragCoord.xy );\n\n\t\tvec3 eye = vec3( 0.0, 000.0, -4800.0 );\n\n\t\tvec3 color = vec3(0.12);\n\n\t\tvec3 data = ray_marching( eye, rd, 2800.0, clip_far );\n\t\tif ( data.x < clip_far ) {\n\n\t\t\tvec3 pos = eye + rd * data.x;\n\t\t\tvec3 n = gradient( pos );\n\n\t\t\tvec3 lightColor =  shading( pos, n, eye, getMat(data.z)) * 2.0;\n\t\t\tcolor = getColor(data) * lightColor;\n\n\t\t\t\/\/Casco...\n\t\t\tif(data.y == 6.0) {\n\t\t\t\tcolor += 0.1 * textureCube(iChannel0, n).rgb;\n\t\t\t\trd = refract(rd, n, 1.01);\n\t\t\t\tdata = ray_marching_head( eye, rd, data.x + 50.0, clip_far);\n\t\t\t\tif ( data.x < clip_far ) {\n\t\t\t\t\tpos = eye + rd * data.x;\n\t\t\t\t\tn = gradient( pos );\n\t\t\t\t\tlightColor =  shading( pos, n, eye, getMat(data.z)) * 2.0;\n\t\t\t\t\tcolor += 0.37 * getColor(data) * lightColor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfragColor = vec4(color, 1.0 );\n\t}","name":"","description":"","type":"image"}]}}