{"Shader":{"ver":"0.1","info":{"id":"llsSz7","date":"1435741901","viewed":730,"name":"magnifier","username":"wawan60","description":"My first public shader used for my internship. Here is a magnifying glass with no border occlusion. <br\/>Inspired from: https:\/\/www.shadertoy.com\/view\/ls2GWc by FabriceNeyret2","likes":2,"published":3,"flags":0,"tags":["magnifymagnifierlenszoom"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"const float radius=2.;\nconst float depth=radius\/2.;\n\n\n\/\/ === main loop ===\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = fragCoord.xy\/iResolution.xy;\n\tvec2 center = iMouse.xy\/iResolution.xy;\n\tfloat ax = ((uv.x - center.x) * (uv.x - center.x)) \/ (0.2*0.2) + ((uv.y - center.y) * (uv.y - center.y)) \/ (0.2\/ (  iResolution.x \/ iResolution.y )) ;\n\tfloat dx = 0.0 + (-depth\/radius)*ax + (depth\/(radius*radius))*ax*ax;\n    float f =  (ax + dx );\n\tif (ax > radius) f = ax;\n    vec2 magnifierArea = center + (uv-center)*f\/ax;\n    fragColor = vec4(texture2D( iChannel0, vec2(1,-1) * magnifierArea ).rgb, 1.);  \n}\n","name":"","description":"","type":"image"}]}}