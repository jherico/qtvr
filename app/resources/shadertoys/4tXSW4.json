{"Shader":{"ver":"0.1","info":{"id":"4tXSW4","date":"1436589410","viewed":794,"name":"2d primitives and sound","username":"tmpvar","description":"practice","likes":0,"published":3,"flags":0,"tags":["2d","sdf"],"hasliked":0},"renderpass":[{"inputs":[{"id":35,"src":"\/presets\/mzk06.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float square(vec2 uv, vec2 pos, vec2 dim) {\n  vec2 center = pos + dim \/ 2.0;\n  vec2 diff = uv - pos;\n  vec2 d = abs(diff) - dim;\n\n  return min(max(d.x, d.y),0.0) + length(max(d,0.0));\n}\n\nfloat circle(vec2 uv, vec2 pos, float r) {\n    return length(uv - pos) - r;\n}\n\nvec3 rgb(int r, int g, int b) {\n    \n    return vec3(float(r)\/255., float(g)\/255., float(b)\/255.);\n}\n\nvec3 fill(float d, vec3 color, vec3 c) {\n  \n\/\/    if (d<0.0) {\n        return mix(c, color, smoothstep(1.0, 0.0, d));\n\/\/    } else {\n\/\/        return c;\n\/\/    }\n}\n\nvec3 stroke(float d,vec3 color, vec3 c, float width) { \n    if (abs(d) <= width) {\n        return mix(c, color,\n        \tsmoothstep(1.0, 0.0, d-width\/2.) - smoothstep(1.0, 0.0, d+width\/2.0)\n        );\n    } else {\n        return c;\n    }\n}\n\nvec3 ostroke(float d,vec3 color, vec3 c, float width) {\n    if (d < width && d >= 0.0) {\n        return mix(c, color,\n        \tsmoothstep(1.0, 0.0, d-width\/2.) - smoothstep(1.0, 0.0, d+width\/2.)\n        );\n    } else {\n        return c;\n    }\n}\n\nfloat join(float a, float b) {\n    return min(a, b);\n}\n\nfloat cut(float a, float b) {\n  return max(-b, a);   \n}\n\nfloat and(float a, float b) {\n  return max(a, b);   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float scale = 1.;\n    vec2 tr = vec2(-22., -9.);\n\tfloat aspect = iResolution.x\/iResolution.y;\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\/\/vec3 c = vec3(uv.x, uv.y, 0.0) * abs(sin(iGlobalTime));\n    vec3 c = vec3(0.0);\n    uv.y \/= aspect;\n    uv = fragCoord.xy \/ scale;\n    uv -= tr * scale;\n    c = stroke(\n        circle(uv, vec2(200, 100), 50.),\n        vec3(1.0, 1.0, 0.0),\n        c,\n        2.\n    );\n    \n    \n    \n    vec4 sound = texture2D(iChannel0, vec2(0, 0));\n    \n    c = fill(\n        and(\n            square(uv, vec2(200, 100), vec2(20, 20)),\n            cut(\n                sin(uv.y),\n                square(\n                    vec2(uv.x, uv.y + cos(uv.x) * 10.),\n                    vec2(200, 100),\n                    \/\/vec2(20., 20. * sin(iGlobalTime * 10.))\n                    vec2(20., 20. * sin(sound.y * 10.0))\n                )\n        \t)\n    \t),\n       \trgb(255, 255, 0),\n        c\n    );\n\n    c = ostroke(\n        square(uv, vec2(200, 100), vec2(20, 20)),\n        rgb(84, 255, 47),\n        c,\n        5.\n    );\n\n    \n    float a = join(\n        square(uv, vec2(300, 100), vec2(20, 10)),\n        circle(uv, vec2(325, 100), 30.)\n    );\n    \n    a = cut(a, circle(uv, vec2(325, 100), 20. + normalize(sound).y * 20.));\/\/sin(sound.x * iGlobalTime) * 5.));\n    a = join(a, circle(uv, vec2(325, 100), 1.));\n\n    \n    \n    c = fill(a, rgb(255, 0, 127), c);\n    c = ostroke(a, rgb(141, 116, 245), c, 20.);\n    c = ostroke(a, rgb(255, 88, 68), c, 10.);\n    \n        \n    fragColor = vec4(c, 1.0);\n}","name":"","description":"","type":"image"}]}}