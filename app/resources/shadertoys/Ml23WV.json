{"Shader":{"ver":"0.1","info":{"id":"Ml23WV","date":"1432733725","viewed":391,"name":"Sailing Home","username":"dr2","description":"Choppy seas and patchy fog.","likes":5,"published":3,"flags":0,"tags":["ocean","fog"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Sailing Home\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Choppy seas and patchy fog. Based on \"Wavescape\"; blended fog\n\/\/ idea from nimitz's \"Xyptonjtroz\".\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nvec2 Noisev2v2 (vec4 p)\n{\n  vec4 i, f, t1, t2;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  t1 = Hashv4f (dot (i.xy, cHashA3.xy));\n  t2 = Hashv4f (dot (i.zw, cHashA3.xy));\n  return vec2 (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n               mix (mix (t2.x, t2.y, f.z), mix (t2.z, t2.w, f.z), f.w));\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;  p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat FrNoise3d (vec3 p, vec3 disp)\n{\n  vec3 q;\n  float a, f;\n  a = 2.;\n  f = 0.;\n  q = p;\n  for (int j = 0; j < 4; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx) + disp;\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.y + FrAbsf (p.z))));\n    q = 2. * q + 0.2;\n    a *= 0.7;\n  }\n  return f;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nint idObj;\nmat3 ballMat, ballMatX[4];\nvec3 qHit, ballPos, ballPosX[4], sunCol, sunDir, cloudDisp, waterDisp,\n   fogDisp;\nvec2 bGap;\nfloat tCur, fCloud, fogAmp;\nconst float dstFar = 250.;\n\nvec3 SkyGrndCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, skyBg, clCol, col;\n  float colSum, attSum, s, att, a, dDotS, ds;\n  const vec3 cCol1 = 0.5 * vec3 (0.15, 0.2, 0.4),\n     cCol2 = 0.5 * vec3 (0.25, 0.5, 0.7), gCol = vec3 (0.08, 0.12, 0.08);\n  const float cloudLo = 200., cloudRngI = 1.\/200., atFac = 0.09;\n  const int nLay = 20;\n  if (rd.y < 0.015 * Fbm1 (16. * rd.x + 0.01 * tCur)- 0.0075) col = gCol *\n     (0.7 + 0.3 * Noisefv2 (1000. * vec2 (5. * atan (rd.x, rd.z), rd.y)));\n  else {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro += cloudDisp;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz \/ rd.y;\n    p.y = cloudLo;\n    ds = 1. \/ (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      q.z *= 0.7;\n      att += atFac * max (fCloud - Fbm3 (0.01 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.) * colSum + 0.05 * sunCol;\n    cSun = sunCol * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    skyBg = mix (cCol1, cCol2, 1. - rd.y);\n    col = clamp (mix (skyBg + cSun, 1.6 * clCol, attSum), 0., 1.);\n  }\n  return col;\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, t4o, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.18;  wAmp = 0.6;  pRough = 8.;\n  t4o.xz = tCur * vec2 (1., -1.);\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    t4 = (t4o.xxzz + vec4 (q2, q2)) * wFreq;\n    t2 = Noisev2v2 (t4);\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + sqrt (1. - ta4 * ta4));\n    v2 = pow (1. - pow (v4.xz * v4.yw, vec2 (0.65)), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.2;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 70; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.4, 1.2 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 5; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.1, 5e-5 * d * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db;\n  int ih;\n  dMin = dstFar;\n  db = max (abs (p.x) - 2. * bGap.x, 0.);\n  p.z = mod (p.z + 2. * bGap.y, 4. * bGap.y) - 2. * bGap.y;\n  q = p;\n  if (p.z > 0.) {\n    if (p.x > 0.) {\n      q -= ballPosX[0];  q *= ballMatX[0];  ih = 0;\n    } else {\n      q -= ballPosX[1];  q *= ballMatX[1];  ih = 1;\n    }\n  } else {\n    if (p.x > 0.) {\n      q -= ballPosX[2];  q *= ballMatX[2];  ih = 0;\n    } else {\n      q -= ballPosX[3];  q *= ballMatX[3];  ih = 1;\n    }\n  }\n  d = max (PrSphDf (q, 1.2), db);\n  if (d < dMin) { dMin = d;  idObj = 1;  qHit = q; }\n  q.y -= 2.2;\n  d = max (PrCylDf (q.xzy, 0.05, 1.), db);\n  if (d < dMin) { dMin = d;  idObj = 2;  qHit = q; }\n  q.y -= 1.3;\n  d = max (PrCylDf (q.xzy, 0.15, 0.3), db);\n  if (d < dMin) { dMin = d;  idObj = 3 + ih;  qHit = q; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d, dHit;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjCol (vec3 n)\n{\n  vec3 col;\n  col = vec3 (0.);\n  if (idObj == 1) {\n    col = vec3 (1., 0.5, 0.);\n    if (abs (qHit.y) < 0.125) col =\n       (mod (floor (7. * (atan (qHit.x, qHit.z) \/ pi + 1.)), 2.) == 0.) ?\n       vec3 (1., 0., 0.) : vec3 (0.04);\n    else if (qHit.y > 1.16) col = vec3 (0., 0.5, 0.);\n    else if (abs (qHit.y) < 0.15) col = vec3 (1., 0., 0.);\n    else if (abs (abs (qHit.y) - 0.33) < 0.03) col = vec3 (1.);\n    else if (abs (abs (qHit.y) - 0.39) < 0.03) col = vec3 (0.05);\n  } else if (idObj == 2) {\n    col = vec3 (0.7, 0.4, 0.);\n  } else if (idObj == 3) {\n    if (abs (qHit.y) < 0.2) \n       col = vec3 (0., 1., 0.) * (3. + 2.5 * cos (10. * tCur));\n    else col = vec3 (0.6, 0.4, 0.2);\n  } else if (idObj == 4) {\n    if (abs (qHit.y) < 0.2) \n       col = vec3 (1., 0., 0.) * (3. + 2.5 * sin (10. * tCur));\n    else col = vec3 (0.6, 0.4, 0.2);\n  }\n  return col;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 40; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.1;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ObjRender (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float sh, cc;\n  int idObjT;\n  idObjT = idObj;\n  vn = ObjNf (ro);\n  idObj = idObjT;\n  col = ObjCol (rd);\n  cc = 1. - smoothstep (0.3, 0.6, fCloud);\n  sh = ObjSShadow (ro, sunDir);\n  return col * (0.3 + 0.7 * max (0., max (dot (vn, sunDir), 0.)) *\n     (0.7 + 0.3 * cc * sh)) + 0.3 * cc * sh * sunCol *\n     pow (max (0., dot (sunDir, reflect (rd, vn))), 32.);\n}\n\nfloat FogAmp (vec3 p, float d)\n{\n  vec3 q;\n  float s1, s2;\n  q = p + fogDisp;\n  q.y *= 2.;\n  s1 = sin (tCur * 0.6);\n  q.x += 0.3 * s1;\n  s2 = sin (0.5 * q.x);\n  q.y += 0.1 * s1 + 0.2 * s2;\n  q.z += s2;\n  return fogAmp * FrNoise3d (q \/ (d + 30.), fogDisp);\n}\n\nvec3 FogCol (vec3 col, vec3 ro, vec3 rd, float dHit)\n{\n  vec3 q;\n  float d, dq, fFac, f, fa;\n  d = 3.;\n  dq = 0.2;\n  fFac = 1.;\n  for (int j = 0; j < 5; j ++) {\n    q = ro + rd * d;\n    f = FogAmp (q, d);\n    fa = 1. - clamp (f - FogAmp (q + dq, d), 0., 1.);\n    col = mix (col, vec3 (0.8, 0.8, 0.75) * fa,\n      clamp (fFac * f * smoothstep (0.9 * d, 2.3 * d, dHit), 0., 1.));\n    d *= 1.6;\n    dq *= 0.8;\n    fFac *= 1.1;\n    if (d > dHit) break;\n  }\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn, rdd, refCol, roo, rdo;\n  float dstHit, dstWat, dstFog, dif, bk, sh, foamFac, tWeathr;\n  const float eta = 0.75, att = 0.5;\n  int idObjT;\n  bool doReflect;\n  cloudDisp = 5. * tCur * vec3 (1., 0., 1.);\n  waterDisp = 0.25 * tCur * vec3 (-1., 0., 1.);\n  fogDisp = 0.05 * tCur * vec3 (1., 0., 0.);\n  sunDir = normalize (vec3 (0.2, 0.5, 0.5));\n  sunCol = vec3 (1., 0.4, 0.3) + vec3 (0., 0.5, 0.2) * sunDir.y;\n  tWeathr = mod (0.05 * tCur, 2. * pi);\n  fCloud = 0.5 + 0.15 * sin (tWeathr);\n  fogAmp = 0.25 * SmoothBump (0.35 * pi, 0.65 * pi, 0.15 * pi, tWeathr);\n  roo = ro;\n  rdo = rd;\n  ro.y = max (ro.y, WaveHt (ro) + 0.1);\n  dstWat = WaveRay (ro, rd);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  dstFog = min (dstHit, dstWat);\n  doReflect = (dstWat < dstFar && dstWat < dstHit);\n  if (doReflect) {\n    ro += rd * dstWat;\n    vn = WaveNf (ro, dstWat);\n    rdd = rd;\n    rd = reflect (rd, vn);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    dstFog = min (dstFog + dstHit, dstFar);\n  } \n  col = (dstHit < dstFar) ? ObjRender (ro + rd * dstHit, rd) :\n     SkyGrndCol (ro, rd);\n  if (doReflect) {\n    refCol = col;\n    rd = refract (rdd, vn, eta);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    dstFog = min (dstFog + dstHit, dstFar);\n    col = (dstHit < dstFar) ? ObjRender (ro + rd * dstHit, rd) *\n       exp (- att * dstHit) : vec3 (0., 0.05, 0.05);\n    col = mix (col, 0.8 * refCol, pow (1. - abs (dot (rdd, vn)), 5.));\n    foamFac = 0.9 * pow (clamp (WaveHt (ro) +\n       0.004 * Fbm3 (256. * ro) - 0.55, 0., 1.), 8.);\n    col = mix (col, vec3 (0.9), foamFac);\n  }\n  col = FogCol (col, roo, rdo, dstFog);\n  return col;\n}\n\nvoid BallPM (float bOffset)\n{\n  const vec3 e = vec3 (1., 0., 0.);\n  float h[5], b;\n  ballPos.z += bOffset;\n  h[0] = WaveHt (ballPos);\n  h[1] = WaveHt (ballPos + e.yyx);\n  h[2] = WaveHt (ballPos - e.yyx);\n  h[3] = WaveHt (ballPos + e);\n  h[4] = WaveHt (ballPos - e);\n  ballPos.y = 0.1 + (2. * h[0] + h[1] + h[2] + h[3] + h[4]) \/ 15.;\n  ballPos.z -= bOffset;\n  b = (h[1] - h[2]) \/ (6. * e.x);\n  ballMat[2] = normalize (vec3 (0., b, 1.));\n  b = (h[3] - h[4]) \/ (6. * e.x);\n  ballMat[1] = normalize (cross (ballMat[2], vec3 (1., b, 0.)));\n  ballMat[0] = cross (ballMat[1], ballMat[2]);\n}\n\nvoid SetBuoys (vec3 ro)\n{\n  float bOffset;\n  bOffset = mod (ro.z + 2. * bGap.y, 4. * bGap.y) - 2. * bGap.y;\n  ballPos = vec3 (bGap.x, 0., bGap.y);\n  BallPM (bOffset);\n  ballPosX[0] = ballPos;\n  ballMatX[0] = ballMat;\n  ballPos = vec3 (- bGap.x, 0., bGap.y);\n  BallPM (bOffset);\n  ballPosX[1] = ballPos;\n  ballMatX[1] = ballMat;\n  ballPos = vec3 (bGap.x, 0., - bGap.y);\n  BallPM (bOffset);\n  ballPosX[2] = ballPos;\n  ballMatX[2] = ballMat;\n  ballPos = vec3 (- bGap.x, 0., - bGap.y);\n  BallPM (bOffset);\n  ballPosX[3] = ballPos;\n  ballMatX[3] = ballMat;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  vec2 uvs = uv;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  vec3 col, ro, rd, ca, sa;\n  float el, az, rl;\n  az = 0.;\n  el = 0.02 * pi + 0.04 * (1. + sin (0.5 * tCur + 0.3)) +\n     0.024 * (1. + sin (0.8 * tCur));\n  rl = 0.1 * sin (0.5 * tCur) + 0.06 * sin (0.8 * tCur + 0.3);\n  ca = cos (vec3 (el, az, rl));\n  sa = sin (vec3 (el, az, rl));\n  vuMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  rd = normalize (vec3 (uv, 3.1)) * vuMat;\n  ro = vec3 (0., 1.5, -20.) * vuMat;\n  ro.z += 2. * tCur;\n  bGap = vec2 (8., 16.);\n  SetBuoys (ro);\n  col = pow (clamp (ShowScene (ro, rd), 0., 1.), vec3 (0.45));\n  uvs *= uvs * uvs;\n  col = mix (vec3 (0.2), col,\n     pow (max (0., 0.8 - length (uvs * uvs)), 0.2));\n  fragColor = vec4 (col, 1.);\n}\n\n","name":"","description":"","type":"image"}]}}