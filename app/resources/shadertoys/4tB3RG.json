{"Shader":{"ver":"0.1","info":{"id":"4tB3RG","date":"1429774164","viewed":714,"name":"ngEyeWarp0","username":"netgrind","description":"stare into the center of the screen for at least ten seconds (the longer the better) then look away<br\/><br\/>change define WARP to 0 for a hyper symmetric experience<br\/><br\/>based off of part of Illustrated Equations by sben - https:\/\/www.shadertoy.com\/view\/MtBGDW","likes":2,"published":3,"flags":0,"tags":["blackandwhite","trippy","lsd","white","black","netgrind","eyewarp"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/based off of part of Illustrated Equations by sben - https:\/\/www.shadertoy.com\/view\/MtBGDW\n\/\/stare into the center of the screen for at least ten seconds (the longer the better) then look away\n\n\/\/change define WARP to 0 for a hyper symmetric experience\n#define BLUR 3\n#define WARP 1\n\nvec2 wolfFaceEQ(vec3 p, float t){\n\tvec2 fx = p.xy;\n\tp=(abs(p*2.0));\n\tconst float j=float(15);\n\tvec2 ab = vec2(2.0-p.x);\n\tfor(float i=0.0; i<j; i++){\n\t\tab+=(p.xy)-cos(length(p));\n\t\tp.y+=sin(ab.x-p.z)*0.5;\n\t\tp.x+=sin(ab.y+t)*0.5;\n\t\tp-=(p.x+p.y)*(sin(t)*.001+.97);\n\t\tp+=(fx.y+cos(fx.x));\n\t\t\/\/ab += vec2(p.y);\n\t}\n\tp\/=10.;\n\tfx.x=(p.x+p.x+p.y);\n\treturn fx;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy-.5;\n    uv.y*=1.1;\n    uv.y = abs(uv.y);\n    uv.x+=tan(uv.y)*float(WARP);\n    uv.y+=iGlobalTime*.1;\n    uv.y = abs(mod(uv.y,1.8)-.9);\n    uv.y+=sin(iGlobalTime*.1)*.1+.1;\n    \/\/uv.y = sin(uv.y*2.)*.5+.5;\n    \/\/uv.x = mod(uv.x+.2,.4)-.2;\n    \n    vec3 c = vec3(0.0);\n   \n    \n    for(int i = 0; i<BLUR; i++){\n        c += wolfFaceEQ(vec3(uv.xy,5.)*30., iGlobalTime-.05*float(i)).xyx; \n    }\n    c\/= float(BLUR);\n    \n    c.x = pow(c.x,2.);\n\tfragColor = vec4(c.xxx,1.0);\n}","name":"","description":"","type":"image"}]}}