{"Shader":{"ver":"0.1","info":{"id":"4ls3R2","date":"1423401643","viewed":711,"name":"Julia Folding","username":"TheJimJames40","description":"a visualization of how a Julia fractal is generated.","likes":6,"published":3,"flags":0,"tags":["fractal","julia","folding","complex","explanation"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define speed 0.5\n#define iterations 32\n\n#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)\n\n\nvec2 cx_pow(vec2 z,float p){\n\tfloat rad = pow(length(z),p);\n\tfloat ang = atan(z.y,z.x)*p;\n\treturn vec2(\n        cos(ang)*rad,\n\t\tsin(ang)*rad\n\t);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy-iResolution.xy) \/ iResolution.x * 4.;\n    vec2 mouse = (2.0*iMouse.xy-iResolution.xy) \/ iResolution.x * 4.;\n    \n    vec2 z = uv;\n    \n    vec2 c = mouse;\n    \n\tfloat n = abs(sin(iGlobalTime\/float(iterations)*speed))*float(iterations);\n    float o = fract(n)*2.8;\n    \n    if(dot(iMouse.xy,iMouse.xy) < 1.)\n     c = vec2(0.28,0.008);\n    \n  \tz-=c;\n    z = z + c*(min(1.0,o));\n    \n    vec3 col = vec3(1.,1.,1.);\n    \n    float o2 = min(2.0,max(1.0,o));\n    if(o > 2.4 || abs(atan(z.y,z.x)*o2) < 3.1416)\n   \t\tz = cx_pow(z,o2);\n    else \n        col *= 0.;\n    \n    float i = 0.;\n    for (int m = 0; m < iterations; m++){\n        if(i > n ||  dot(z,z) > 8.) break;\n        z = z + (c);\n    \tz = cx_mul(z,z);\n        i += 1.;\n    }\n    \n   \tfloat v = i\/floor(n+1.);\n    col *= vec3(v,v,v);\n    if(abs(uv.x) < 0.01 || abs(uv.y) < 0.01){\n        col = vec3(1.0);\n    }\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}