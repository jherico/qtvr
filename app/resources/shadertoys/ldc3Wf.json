{"Shader":{"ver":"0.1","info":{"id":"ldc3Wf","date":"1452469607","viewed":179,"name":"3D Spectrogram","username":"elias","description":"Because why not.","likes":7,"published":3,"flags":32,"tags":["3d","spectrogram"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define P 0.005\n#define S 128\n#define Z 1.0\n#define D 100.\n#define R 1.0\n\nstruct Ray\n{\n\tvec3 o;\n    vec3 d;\n};\n\nstruct Hit\n{\n    vec3 p;\n    float t;\n    float d;\n};\n    \nstruct Camera\n{\n    vec3 p;\n    vec3 t;\n};\n    \nfloat dfloor;\nfloat dsound;\nfloat dbox;\n    \nCamera cam = Camera(vec3(0,0.4,-1), vec3(0,0,0));\n\n\/\/ http:\/\/lolengine.net\/blog\/2013\/07\/27\/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nmat3 rotX(float a){float c=cos(a);float s=sin(a);return mat3(1,0,0,0,c,-s,0,s,c);}\nmat3 rotY(float a){float c=cos(a);float s=sin(a);return mat3(c,0,-s,0,1,0,s,0,c);}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat scene(vec3 p)\n{\n    dsound = 1e10;\n        \n    dsound = max(\n        p.y-texture2D(iChannel0,(p.xz*R+1.0)\/2.).x*0.1,\n        sdBox(p,vec3(1.\/R,1,1.\/R))\n    );\n    \n    dbox = max(sdBox(p,vec3(1.\/R+0.01,0.1,1.\/R+0.01))-0.01,-sdBox(p,vec3(1.\/R,1,1.\/R)));\n    dfloor = p.y;\n    \n    return min(min(dsound,dbox),dfloor);\n}\n   \nvec3 getNormal(vec3 p)\n{\n\tvec2 e = vec2(P,0);\n\n\treturn normalize(vec3(\n\t\tscene(p+e.xyy)-scene(p-e.xyy),\n\t\tscene(p+e.yxy)-scene(p-e.yxy),\n\t\tscene(p+e.yyx)-scene(p-e.yyx)\n\t));\n}\n\nHit march(Ray r)\n{\n    float d = 1e10, t = 0.0;\n    \n    for(int i = 0; i < S; i++)\n    {\n        d = scene(r.o+r.d*t);\n        t += d*0.4;\n        if (d <= P || t > D) { break; }\n    }\n    \n    Hit h;\n    \n    h.p = r.o+r.d*t;\n    h.t = t;\n    h.d = d;\n    \n    return h;\n}\n\n\nRay lookAt(Camera cam)\n{\n    vec2 uv = (2.0*gl_FragCoord.xy-iResolution.xy)\/iResolution.xx;\n    vec3 dir = normalize(cam.t-cam.p);\n    vec3 right = normalize(cross(dir, vec3(0,1,0)));\n    vec3 up = cross(right, dir);\n \n    return Ray(cam.p*Z, normalize(right*uv.x + up*uv.y + dir));\n}\n\nvec3 getColor(Hit h)\n{\n    if (h.d > P) { return vec3(0); }\n    \n    vec3 col = vec3(1);\n    vec3 light = vec3(0,1,0);\n    vec3 n = getNormal(h.p);\n    \n    float d = 1e10;\n    \n    float diff = max(dot(n, normalize(light-h.p)),0.0);\n    float fade = min(2.\/exp(log2(length(light-h.p))),1.0);\n    float spec = pow(max(dot(reflect(normalize(h.p-light),n),normalize(cam.p)),0.0),100.0)*0.4;\n\n    if (dsound<d)\n    {\n        vec4 h = texture2D(iChannel0,(h.p.xz*R+1.0)\/2.);\n        \n        col = h.y == 1.0 ? vec3(0.1) : hsv2rgb(vec3(0.5+h.x*0.5,1,1));\n        if (h.y == 0.0) { col = col*diff*fade+spec; }\n        \n        d = dsound;\n    }\n    \n    if (dbox<d)   { col = vec3(0); d = dbox;   }\n    if (dfloor<d) { col = vec3(diff*fade)*(0.5+texture2D(iChannel0,vec2(0)).x*0.5)*vec3(0.5,0.5,1); d = dfloor; }\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uvMouse = (iMouse.xy\/iResolution.xy-0.5)*2.0;\n    if (uvMouse.x < -0.95 && uvMouse.y < -0.95) { uvMouse=vec2(0,0); }\n    cam.p *= rotX(-uvMouse.y)*rotY(uvMouse.x*6.281);\n    \n    fragColor = vec4(getColor(march(lookAt(cam))), 1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":34,"src":"\/presets\/mzk05.mp3","ctype":"music","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = texture2D(iChannel1, uv);\n    \n    if(fragCoord.x == 0.5 && fragCoord.y == 0.5)\n    {\n        fragCoord.x = texture2D(iChannel1, vec2(0.0,0)).x;\n    }\n    \n    if (iFrame == 0)\n    {\n        fragColor.y = 1.;\n    }\n    else if (fragCoord.x+0.5 == iResolution.x)\n    {\n        fragColor = texture2D(iChannel1, vec2(uv.y,0));\n        fragColor.y = 0.0;\n    }\n    else\n    {\n        fragColor = texture2D(iChannel0, (fragCoord+vec2(1,0))\/iResolution.xy);\n    }\n}","name":"","description":"","type":"buffer"}]}}