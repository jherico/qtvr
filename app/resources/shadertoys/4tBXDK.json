{"Shader":{"ver":"0.1","info":{"id":"4tBXDK","date":"1446406258","viewed":567,"name":"2015\/11\/01","username":"hughsk","description":"Mucking around with a few new techniques.","likes":8,"published":3,"flags":0,"tags":["noise","tunnel","reactive","light","audio","point","tropes"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\n#define beat1 (texture2D(iChannel0, vec2(0.1)).r * 2.)\n#define beat2 (texture2D(iChannel0, vec2(0.8)).r * 2.)\n\nvec2 doModel(vec3 p, vec2 beats);\n\nvec2 calcRayIntersection_2_0(vec3 rayOrigin, vec3 rayDir, float maxd, float precis, vec2 beats) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 90; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist, beats);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_2_0(vec3 rayOrigin, vec3 rayDir, vec2 beats) {\n  return calcRayIntersection_2_0(rayOrigin, rayDir, 20.0, 0.001, beats);\n}\n\n\n\nvec3 calcNormal_4_1(vec3 pos, float eps, vec2 beats) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps, beats ).x +\n                    v2 * doModel( pos + v2*eps, beats ).x +\n                    v3 * doModel( pos + v3*eps, beats ).x +\n                    v4 * doModel( pos + v4*eps, beats ).x );\n}\n\nvec3 calcNormal_4_1(vec3 pos, vec2 beats) {\n  return calcNormal_4_1(pos, 0.002, beats);\n}\n\nvec4 texcube( sampler2D sam, in vec3 p, in vec3 n )\n{\n\tvec4 x = texture2D( sam, p.yz );\n\tvec4 y = texture2D( sam, p.zx );\n\tvec4 z = texture2D( sam, p.xy );\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n\n\nfloat orenNayarDiffuse_3_2(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo \/ (sigma2 + 0.13) + 0.5 \/ (sigma2 + 0.33));\n  float B = 0.45 * sigma2 \/ (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s \/ t) \/ 3.14159265;\n}\n\n\nfloat gaussianSpecular_5_3(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta \/ shininess;\n  return exp(-w*w);\n}\n\n\n\/\/\n\/\/ Description : Array and textureless GLSL 2D\/3D\/4D simplex\n\/\/               noise functions.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/\n\nvec4 mod289_1_4(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nfloat mod289_1_4(float x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nvec4 permute_1_5(vec4 x) {\n     return mod289_1_4(((x*34.0)+1.0)*x);\n}\n\nfloat permute_1_5(float x) {\n     return mod289_1_4(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_1_6(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_1_6(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_1_7(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n\/\/ (sqrt(5) - 1)\/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise_1_8(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  \/\/ (5 - sqrt(5))\/20  G4\n                        0.276393202250021,  \/\/ 2 * G4\n                        0.414589803375032,  \/\/ 3 * G4\n                       -0.447213595499958); \/\/ -1 + 4 * G4\n\n\/\/ First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n\/\/ Other corners\n\n\/\/ Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n\/\/  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\/\/  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  \/\/ i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  \/\/  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  \/\/  x1 = x0 - i1  + 1.0 * C.xxxx\n  \/\/  x2 = x0 - i2  + 2.0 * C.xxxx\n  \/\/  x3 = x0 - i3  + 3.0 * C.xxxx\n  \/\/  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n\/\/ Permutations\n  i = mod289_1_4(i);\n  float j0 = permute_1_5( permute_1_5( permute_1_5( permute_1_5(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_1_5( permute_1_5( permute_1_5( permute_1_5 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n\/\/ Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n\/\/ 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0\/294.0, 1.0\/49.0, 1.0\/7.0, 0.0) ;\n\n  vec4 p0_1_9 = grad4_1_7(j0,   ip);\n  vec4 p1 = grad4_1_7(j1.x, ip);\n  vec4 p2 = grad4_1_7(j1.y, ip);\n  vec4 p3 = grad4_1_7(j1.z, ip);\n  vec4 p4 = grad4_1_7(j1.w, ip);\n\n\/\/ Normalise gradients\n  vec4 norm = taylorInvSqrt_1_6(vec4(dot(p0_1_9,p0_1_9), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_1_9 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_1_6(dot(p4,p4));\n\n\/\/ Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_1_9, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\n\n\nfloat fogFactorExp2_6_10(\n  const float dist,\n  const float density\n) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\n\/\/\n\/\/ Description : Array and textureless GLSL 2D\/3D\/4D simplex\n\/\/               noise functions.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise3(vec3 v)\n  {\n  const vec2  C = vec2(1.0\/6.0, 1.0\/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\/\/ First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n\/\/ Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  \/\/   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  \/\/   x1 = x0 - i1  + 1.0 * C.xxx;\n  \/\/   x2 = x0 - i2  + 2.0 * C.xxx;\n  \/\/   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; \/\/ 2.0*C.x = 1\/3 = C.y\n  vec3 x3 = x0 - D.yyy;      \/\/ -1.0+3.0*C.x = -0.5 = -D.y\n\n\/\/ Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\/\/ Gradients: 7x7 points over a square, mapped onto an octahedron.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; \/\/ 1.0\/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  \/\/  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    \/\/ mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  \/\/vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  \/\/vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n\/\/Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\/\/ Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\nconst float PI_7_11 = 3.14159265359;\n\n\n\n\nvec3 ta = vec3(0, 0, iChannelTime[0] * 2.75);\nvec3 ro = ta - vec3(0, 0, 2.5);\nvec3 l1 = ro + vec3(0, sin(iChannelTime[0] * 5.) * 0.5, 11.25 + cos(iChannelTime[0] * 0.97) * 9.);\nvec3 l2 = ta + vec3(0, 0, 5.25 + sin(iChannelTime[0] * 0.85) * 7.);\nvec3 c1 = vec3(0.1, 0.3, 0.9) * 1.;\nvec3 c2 = vec3(0.4, 0.1, 0.2) * 1.;\nvec3 c3 = vec3(0.3, 0.08, 0.05) * 0.25;\nvec3 bg = vec3(0.2, 0.5, 0.925);\n  \nvec2 path(float progress) {\n  return 1.2 * vec2(cos(progress * 0.59), 1.5 * sin(progress * 0.5));\n}\n\nvec2 sU(vec2 p1, vec2 p2) {\n  return p1.x > p2.x ? p2 : p1;\n}\n\nfloat smin(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) \/ k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvec2 doModel(vec3 p, vec2 beats) {\n  float m = snoise3(p.xyz);\n  float n  = beats.x * m * 0.2 + beats.x;\n    \n  float r  = n + 2.0 + sin(p.z + p.y * 2. + iChannelTime[0] * 2.) * 0.35;\n  float d1 = r - length(p.xy - path(p.z));\n  float d2 = length(p - l2) - 0.125 * beats.y;\n  float d3 = length(p - l1) - 0.125 * beats.x;\n    \n  d1 = -d1;\n  d1 = smin(d1, length(p - l2) - 3.0, 4.05);\n  d1 = smin(d1, length(p - l1) - 3.0, 4.05);\n  d1 = -d1;\n  \n  return sU(\n    vec2(d1, clamp(n, 0., 0.99)),\n    sU(\n      vec2(d2, 1.0),\n      vec2(d3, 2.0)\n    )\n  );\n}\n\nfloat attenuate(float d) {\n  return pow(clamp(1.0 - d \/ 20.0, 0.0, 1.0), 2.95);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 color = bg;\n\n  float rotation = 0.0;\n  float height   = 0.0;\n  float dist     = 5.9;\n  \n  vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) \/ iResolution.y;\n\n  ta.xy += path(ta.z);\n  ro.xy += path(ro.z);\n  l1.xy += path(l1.z);\n  l2.xy += path(l2.z);\n\n  float fov = PI_7_11 \/ 1.5;\n  vec3 forward = normalize(ta - ro);\n  vec3 right = normalize(vec3(forward.z, 0, -forward.x));\n  vec3 up = cross(forward, right);\n  vec3 rd = normalize(forward + fov * uv.x * right + fov * uv.y * up);\n    \n  vec2 beats = vec2(beat1, beat2);\n    \n  vec2 t = calcRayIntersection_2_0(ro, rd, 40., 0.001, beats);\n  if (t.x > -0.5) {\n    vec3 surface;\n    \n    if (t.y == 1.0) {\n      surface = c2 * 5. * beat2;\n    } else\n    if (t.y == 2.0) {\n      surface = c1 * 4. * beat1;\n    } else {\n      vec3 pos = ro + rd * t.x;\n      vec3 nor = calcNormal_4_1(pos, beats);\n      vec3 mat = vec3(1.0, 0.8, 0.7);\n\n      vec3 d1 = normalize(l1 - pos);\n      vec3 d2 = normalize(l2 - pos);\n\n      float attn1 = attenuate(length(l1 - pos));\n      float attn2 = attenuate(length(l2 - pos));\n      float diff1 = orenNayarDiffuse_3_2(d1, -rd, nor, 0.29, 2.5 * beat1);\n      float diff2 = orenNayarDiffuse_3_2(d2, -rd, nor, 0.29, 3.5 * beat2);\n      float spec1 = gaussianSpecular_5_3(d1, -rd, nor, 0.08) * beat1;\n      float spec2 = gaussianSpecular_5_3(d2, -rd, nor, 0.08) * beat2;\n      \n      float glow = max(0., pow(clamp(2. * (t.y - 0.8), 0., 1.), 1.5) * 3.);\n      \n        \n      surface = (\n        c3 * glow * max(0., dot(nor, normalize(ro - pos))) +\n        (c1 * spec1 * attn1 + c2 * spec2 * attn2) +\n        (c1 * diff1 * attn1 + c2 * diff2 * attn2) * mat\n      );\n    }\n    \n    color = mix(surface, color, fogFactorExp2_6_10(t.x, 0.055));\n  }\n\n  color = pow(color, vec3(0.75));\n  color.r = smoothstep(-0.1, 0.975, color.r);\n  color *= vec3(1.0) - dot(uv, uv) * 0.65; \n  \n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}","name":"","description":"","type":"image"}]}}