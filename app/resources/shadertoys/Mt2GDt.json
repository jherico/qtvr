{"Shader":{"ver":"0.1","info":{"id":"Mt2GDt","date":"1433772242","viewed":683,"name":"Worley , n-Voronoi","username":"FabriceNeyret2","description":"dmin(n) = distance to nth closest seed.<br\/>Red: dmin2-dmin1=0: borders of  cells of min distance to seeds.<br\/>Green: dmin3-dmin2=0: continuation of these borders inside neighbor cells.<br\/>Blue: dmin3-dmin1=0:  nodes of  cells of min distance to seeds.","likes":4,"published":3,"flags":0,"tags":["voronoi","worley","distance"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float scale = 5.; \n\n#define PI 3.14159\n\n\/\/ --- noise functions from https:\/\/www.shadertoy.com\/view\/XslGRr\n\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n\/\/ --- End of: Created by inigo quilez --------------------\n\n\/\/ more 2D noise\nvec2 hash12( float n ) {\n    return fract(sin(n+vec2(1.,12.345))*43758.5453);\n}\nfloat hash21( vec2 n ) {\n    return hash(n.x+10.*n.y);\n}\nvec2 hash22( vec2 n ) {\n    return hash12(n.x+10.*n.y);\n}\nfloat cell;   \/\/ id of closest cell\nvec2  center; \/\/ center of closest cell\nfloat dist;   \/\/ diss to closest cell\n\nvec3 worley( vec2 p ) {\n    vec3 d = vec3(1e15);\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n                vec2 p0 = ip+vec2(i,j);\n            \tfloat a0 = hash21(p0), a=5.*a0*iGlobalTime+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n                float d0 = dot(c,c);\n                if      (d0<d.x) { d.yz=d.xy; d.x=d0; cell=hash21(p0); center=c+p;}\n                else if (d0<d.y) { d.z =d.y ; d.y=d0; }\n                else if (d0<d.z) {            d.z=d0; }  \n            }\n\tdist = d.x;\n    return sqrt(d);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 2.*(fragCoord.xy \/ iResolution.y -vec2(.9,.5));\n  \n    \n\tvec3 w = scale*worley(scale*p);\n \tfloat d21 = w.y-w.x, d32=w.z-w.y, d31=w.z-w.x;\n    vec3 col = 1.-clamp(vec3(d21,d32,d31),0.,1.); col = vec3((1.-col.b)*col.rg,col.b);\n    \/\/col = 1.-smoothstep(0.,.5,col);\n    float seed = smoothstep(0.003,.0, dist); col = seed+(1.-seed)*col;\n\n   fragColor = vec4(col,1.);\n}","name":"","description":"","type":"image"}]}}