{"Shader":{"ver":"0.1","info":{"id":"XdG3D1","date":"1454180504","viewed":61,"name":"Gravitation field in 2d","username":"EntityBlack","description":"Behavior of objects in force field<br\/><br\/>THIS IS PUBLISHED DRAFT!","likes":0,"published":3,"flags":48,"tags":["procedural","3d","interactive","buffering","keyinput","memory"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ A list of usefull distance function to simple primitives, and an example on how to \n\/\/ do some interesting boolean operations, repetition and displacement.\n\/\/\n\/\/ More info here: http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\nfloat sdPlane( vec3 p )\n{\n\treturn p.y;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n    return length(p)-s;\n}\n\n\/\/----------------------------------------------------------------------\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec2 opU( vec2 d1, vec2 d2 )\n{\n\treturn (d1.x<d2.x) ? d1 : d2;\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nvec3 opTwist( vec3 p )\n{\n    float  c = cos(10.0*p.y+10.0);\n    float  s = sin(10.0*p.y+10.0);\n    mat2   m = mat2(c,-s,s,c);\n    return vec3(m*p.xz,p.y);\n}\n\n\/\/----------------------------------------------------------------------\n\nvec2 map( in vec3 pos )\n{\n    \n    vec2 res = opU( vec2(sdPlane(pos), 1.0 ), \n                    vec2( sdSphere(pos-vec3( 0.0, 0.25, 0.0), 0.25 ), 46.9 ) );\n    res = opU( res, vec2( sdSphere(pos-vec3( 1.0, 0.25, 0.0), 0.25), 534.9 ));\n    \n    return res;\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 1.0;\n    float tmax = 20.0;\n    \n#if 0\n    float tp1 = (0.0-ro.y)\/rd.y; if( tp1>0.0 ) tmax = min( tmax, tp1 );\n    float tp2 = (1.6-ro.y)\/rd.y; if( tp2>0.0 ) { if( ro.y>1.6 ) tmin = max( tmin, tp2 );\n                                                 else           tmax = min( tmax, tp2 ); }\n#endif\n    \n\tfloat precis = 0.002;\n    float t = tmin;\n    float m = -1.0;\n    for( int i=0; i<10; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.0;\n    return vec2( t, m );\n}\n\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<16; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\n\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.7, 0.9, 1.0) +rd.y*0.8;\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        \/\/ material        \n\t\tcol = 0.45 + 0.3*sin( vec3(0.05,0.08,0.10)*(m-1.0) );\n\t\t\n        if( m<1.5 )\n        {\n            \n            float f = mod( floor(5.0*pos.z) + floor(5.0*pos.x), 2.0);\n            col = 0.4 + 0.1*f*vec3(1.0);\n        }\n\n        \/\/ lighitng        \n        float occ = calcAO( pos, nor );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n        float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, ref.y );\n        float fre = pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( ref, lig ), 0.0, 1.0 ),16.0);\n        \n        dif *= softshadow( pos, lig, 0.02, 2.5 );\n        dom *= softshadow( pos, ref, 0.02, 2.5 );\n\n\t\tvec3 lin = vec3(0.0);\n        lin += 1.20*dif*vec3(1.00,0.85,0.55);\n\t\tlin += 1.20*spe*vec3(1.00,0.85,0.55)*dif;\n        lin += 0.20*amb*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*dom*vec3(0.50,0.70,1.00)*occ;\n        lin += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        lin += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tcol = col*lin;\n\n    \tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.002*t*t ) );\n\n    }\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    vec2 mo = iMouse.xy\/iResolution.xy;\n\t\t \n\tfloat time = 15.0 + iGlobalTime;\n\n\t\/\/ camera\n    vec3 cta = vec4((texture2D(iChannel0, vec2(1.\/iResolution.x))) * 5. ).xyz;\n\tvec3 ro = vec3( -0.5 + 3.5*cos(6.0*mo.x), 1.0 + 2.0*mo.y, 0.5 + 3.5*sin(6.0*mo.x) ) + cta;\n\tvec3 ta = vec3( -0.5, -0.4, 0.5 ) + cta;\n\t\n\t\/\/ camera-to-world transformation\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \n    \/\/ ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,2.0) );\n\n    \/\/ render\t\n    vec3 col = render( ro, rd );\n\n\tcol = pow( col, vec3(0.4545) );\n    \n    fragColor=vec4( col, 1.0 );\n    fragColor=texture2D(iChannel0, q);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ buffer used as simple memory\n\n\/\/\n\nconst int MSIZE = 2;\n\nconst float KEY_LEFT  = 37.5\/256.0;\nconst float KEY_UP    = 38.5\/256.0;\nconst float KEY_RIGHT = 39.5\/256.0;\nconst float KEY_DOWN  = 40.5\/256.0;\n\nconst vec2 KEYPRESS_LEFT = vec2(KEY_LEFT,0.5);\nconst vec2 KEYPRESS_UP = vec2(KEY_UP,0.5);\nconst vec2 KEYPRESS_RIGHT = vec2(KEY_RIGHT,0.5);\nconst vec2 KEYPRESS_DOWN = vec2(KEY_DOWN,0.5);\n\nconst float MIN_BUFFER_SIZE = 0.04;\n\nbool bufferPosition( in vec2 fragCoord, in int coordX, in int coordY) {\n    if(int(fragCoord.x) < coordX && int(fragCoord.x) >= coordX - 1 && \n       int(fragCoord.y) < coordY && int(fragCoord.y) >= coordY - 1) {\n    \treturn true;    \n    }\n    return false;\n}\n\n\/\/ color2float, float2color\n\/\/ allows to convert vec3 color <0.0 - 1.0> with 256 shades\n\/\/ to signed number with max size 8388608 and back\n\/\/ decimal places are lost during conversion to color\n\nfloat color2float(in vec3 c) {\n    c *= 255.;\n    c = floor(c); \/\/ without this value could be shifted for some intervals\n    return c.r*256.*256. + c.g*256. + c.b - 8388608.;\n}\n\nvec3 float2color(in float val) {\n    val += 8388608.; \/\/ this makes values from \n    if(val < 0.) {\n        return vec3(0.);\n    }\n    if(val > 16777216.) {\n        return vec3(1.);\n    }\n    vec3 c = vec3(0.);\n    c.b = mod(val, 256.);\n    val = floor(val\/256.);\n    c.g = mod(val, 256.);\n    val = floor(val\/256.);\n    c.r = mod(val, 256.);\n    return c\/255.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy\/iResolution.xy;\n    \n    if(iGlobalTime < 0.5) {\n        for(float i=0.;i<20.;i++) {\n        \tif(q.x < i\/20.) {\n            \tfragColor = vec4(float2color(i * 800000. - 8388608.), 1.);\n           \t\treturn;\n     \t   }\n        }\n    }\n    \/\/if(bufferPosition(fragCoord, 20, 20)) {\n    \n        fragColor = texture2D(iChannel0, q);\n\n    \tfloat pos =  color2float(fragColor.xyz);\n    \t\n    pos += texture2D(iChannel1, KEYPRESS_LEFT).x * 100000.;\n    \n    fragColor = vec4(float2color(pos), 1.);\n    \/\/    fragColor.x += texture2D(iChannel1, KEYPRESS_LEFT).x * MIN_BUFFER_SIZE;\n    \/\/    fragColor.z += texture2D(iChannel1, KEYPRESS_UP).x * MIN_BUFFER_SIZE;\n    \/\/    fragColor.x -= texture2D(iChannel1, KEYPRESS_RIGHT).x * MIN_BUFFER_SIZE;\n    \/\/    fragColor.z -= texture2D(iChannel1, KEYPRESS_DOWN).x * MIN_BUFFER_SIZE;    \n    \/\/}\n}","name":"","description":"","type":"buffer"}]}}