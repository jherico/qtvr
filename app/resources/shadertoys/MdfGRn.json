{"Shader":{"ver":"0.1","info":{"id":"MdfGRn","date":"1360048951","viewed":2586,"name":"Vorotissue","username":"iq","description":"A Voronoi pattern used to mimic tissue","likes":15,"published":3,"flags":0,"tags":["procedural","2d","voronoi"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat2 m = mat2( 0.80,  0.60,\n              -0.60,  0.80 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    float res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                    mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n    return -1.0 + 2.0*res;\n}\n\nfloat fbm4( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f\/0.9375;\n}\n\n\nvoid cell( in vec2 li, inout vec2 dmin, inout vec3 info, in vec2 ip, in vec2 f )\n{\n    float nn = (ip.x+li.x) + 57.0*(ip.y+li.y) ;\n    vec2 di = li - f + vec2(hash(nn), hash(nn+1217.0));\n    float d2 = dot(di,di);\n    if( d2<dmin.x )\n    {\n        info.xy = di;\n        info.z = nn;\n        dmin.y = dmin.x;\n        dmin.x = d2;\n    }\n    else if( d2<dmin.y )\n    {\n        dmin.y = d2;\n    }\n}\n\nvec2 celular( in vec2 x, inout vec3 info )\n{\n    vec2 ip = floor(x);\n    vec2 fp = fract(x);\n    \n    vec2 dmin = vec2( 2.0 );\n    cell( vec2(-1.0, -1.0), dmin, info, ip, fp );\n    cell( vec2( 0.0, -1.0), dmin, info, ip, fp );\n    cell( vec2( 1.0, -1.0), dmin, info, ip, fp );\n    cell( vec2(-1.0,  0.0), dmin, info, ip, fp );\n    cell( vec2( 0.0,  0.0), dmin, info, ip, fp );\n    cell( vec2( 1.0,  0.0), dmin, info, ip, fp );\n    cell( vec2(-1.0,  1.0), dmin, info, ip, fp );\n    cell( vec2( 0.0,  1.0), dmin, info, ip, fp );\n    cell( vec2( 1.0,  1.0), dmin, info, ip, fp );\n    return sqrt(dmin);\n}\n\n\/\/------------------------------------------------------\n\nfloat funcS( vec2 p )\n{\n    p *= 1.1 + 0.2*sin(1.0*iGlobalTime)*(1.0-0.75*length(p));\n    p.x += iGlobalTime*0.04;\n    p *= 0.7;\n    p.x += 0.3*fbm4( 1.0*p.xy + vec2(-iGlobalTime,0.0)*0.04 );\n    p.y += 0.3*fbm4( 1.0*p.yx + vec2(0.0,-iGlobalTime)*0.04 );\n    vec3 info = vec3(0.0);\n    vec2 c = celular( 4.0*p, info );\n    float f = smoothstep( 0.0,0.5, c.y - c.x );\n    f -= 0.025*fbm4(48.0*info.xy);\n\n    return f;\n}\n\nfloat funcC( vec2 p, out vec4 res )\n{\n    p *= 1.1 + 0.2*sin(1.0*iGlobalTime)*(1.0-0.75*length(p));\n    p.x += iGlobalTime*0.04;\n    p *= 0.7;\n    p.x += 0.3*fbm4( 1.0*p.xy + vec2(-iGlobalTime,0.0)*0.04 );\n    p.y += 0.3*fbm4( 1.0*p.yx + vec2(0.0,-iGlobalTime)*0.04 );\n    vec3 info = vec3(0.0);\n    vec2 c = celular( 4.0*p, info );\n    float f = smoothstep( 0.0,0.5, c.y - c.x );\n    res  = vec4( c.xy, info.z, fbm4( 2.0*vec2(info.xy)) );\n    return f;\n}\n\nvec3 doMagic(vec2 p)\n{\n    \/\/ patternn    \n    vec4 c = vec4(0.0);\n    float f = funcC( p, c );\n\n    \/\/ normal\n    vec2 e = vec2( 2.0\/iResolution.x, 0.0 );\n    vec3 nor = normalize(vec3(funcS(p+e.xy) - f,\n               funcS(p+e.yx) - f,\n                              16.0*e.x ));\n\n    vec3 col = vec3(1.0,1.0,1.0)*0.5;\n    col *= f;\n    col = mix( col, vec3(0.2,0.3,0.4), 1.0-c.x );\n    col *= 1.0 + 1.0*vec3(c.w*c.w);\n    col *= 1.0 + 0.2*f;\n\n    float dif = clamp( 0.2+0.8*dot( nor, vec3(0.57703) ), 0.0, 1.0 );\n    vec3 lig = dif*vec3(1.2,1.15,0.8) + nor.z*vec3(0.1,0.2,0.5) + vec3(0.5);\n    col *= lig;\n    col = 1.0-col;\n\n    return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    fragColor = vec4( doMagic( p ), 1.0 );\n}","name":"","description":"","type":"image"}]}}