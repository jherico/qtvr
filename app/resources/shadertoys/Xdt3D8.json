{"Shader":{"ver":"0.1","info":{"id":"Xdt3D8","date":"1449363386","viewed":320,"name":"hexagonal truchet ( 408 )","username":"FabriceNeyret2","description":"optimisation of hexagonal truchet","likes":13,"published":3,"flags":0,"tags":["truchet","short"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ inspired from https:\/\/www.shadertoy.com\/view\/4d2GzV#\n\/\/ and https:\/\/www.shadertoy.com\/view\/4dS3Dc\n\/\/ still longer than the 2D version \/-) https:\/\/www.shadertoy.com\/view\/lst3R7\n\nvec2 H(vec2 p) {                   \/\/ closestHexCenters(p)\n\tvec2  f = fract(p);  p -= f;\n\tfloat v = fract((p.x + p.y)\/3.);\n    return  v<.6 ?   v<.3 ?  p  :  ++p  :  p + step(f.yx,f) ; \n}\n\nvoid mainImage( out vec4 o,  vec2 p ) {\n\t\n\tvec2  R = iResolution.xy, h; \n    float Z = 10.\/R.y;\n\t\t\n    p = (p - .5*R)*Z - 9.*sin(.1*iGlobalTime+vec2(1.6,0));  \/\/ demo referential\n\n    \/\/ NB: M^-1.H(M.p) converts back and forth to hex grid, which is mostly a tilted square grid\n\th = H( p+ vec2(.58,.15)*p.y ); \/\/ closestHex( mat2(1,0, .58, 1.15)*p ); \/\/ 1\/sqrt(3), 2\/sqrt(3)\n\tp -=   h- vec2(.5, .13)*h.y;   \/\/ p -= mat2(1,0,-.5, .87) * h;          \/\/ -1\/2, sqrt(3)\/2\n    \n\tfloat \/\/ s = sign( texture2D(iChannel0, fract(h\/9.)).x -.5 ), \n          \/\/ s = sign( fract(1e5*cos(h.x+9.*h.y)) -.5 ), \n             s = sign( cos(1e5*cos(h.x+9.*h.y)) ),   \/\/ rnd (tile) = -1 or 1\n        \n#define L(x,y)  length( p - s*vec2(x,y) )            \/\/ dist to neighbor 1,3,5 or 2,4,6\n\/\/#define L(a)  length( p - s*sin(a+vec2(1.57,0)) )  \/\/ variant L(0), L(2.1), L(-2.1)\n\t      l = min(min(L(-1, 0  ),                    \/\/ closest neigthborh (even or odd set, dep. s)\n\t\t\t\t\t  L(.5, .87)),                   \/\/ 1\/2, sqrt(3)\/2\n\t\t\t\t      L(.5,-.87));\n\n    o -=o-- -.2 \/ abs(l-.5);\n \/\/ o -=o- smoothstep(.1+Z, .1, abs(l-.5));              \/\/ precise anti-aliasing\n \/\/ o -=o- cos(l*25.1);                                  \/\/ nice variant 1 by Shane\n \/\/ o -=o- vec4(sqrt(2.*cos(vec3(1, 3, 3)*l*6.28)), 1.); \/\/ nice variant 2 by Shane\n}\n","name":"","description":"","type":"image"}]}}