{"Shader":{"ver":"0.1","info":{"id":"XdsGWH","date":"1368889425","viewed":2441,"name":"Mars demo","username":"reinder","description":"Tribute to Tim Clarke's Mars demo from 1993. Click and move your mouse to look around.<br\/><br\/>http:\/\/pouet.net\/prod.php?which=4662&howmanycomments=25&page=0","likes":10,"published":3,"flags":0,"tags":["mars","timclarke","terrainmarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Mars demo. Created by Reinder Nijhoff 2013\n\/\/ @reindernijhoff\n\/\/\n\/\/ https:\/\/www.shadertoy.com\/view\/XdsGWH\n\/\/\n\n#define RAYMARCHSTEPS 150\n\nfloat time = iGlobalTime;\n\n\/\/\n\/\/ math functions\n\/\/\n\nconst mat2 mr = mat2 (0.84147,  0.54030,\n\t\t\t\t\t  0.54030, -0.84147 );\nfloat hash( in float n ) {\n\treturn fract(sin(n)*43758.5453);\n}\nfloat noise(in vec2 x) {\n\tvec2 p = floor(x);\n\tvec2 f = fract(x);\n\t\t\n\tf = f*f*(3.0-2.0*f);\t\n\tfloat n = p.x + p.y*57.0;\n\t\n\tfloat res = mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n\t\t\t\t\tmix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y);\n\treturn res;\n}\nfloat fbm( in vec2 p ) {\n\tfloat f;\n\tf  =      0.5000*noise( p ); p = mr*p*2.02;\n\tf +=      0.2500*noise( p ); p = mr*p*2.33;\n\tf +=      0.1250*noise( p ); p = mr*p*2.01;\n\tf +=      0.0625*noise( p ); p = mr*p*5.21;\n\/\/\tf +=      0.005*noise( p ); \n\treturn f\/(0.9375);\n}\nfloat detailFbm( in vec2 p ) {\n\tfloat f;\n\tf  =      0.5000*noise( p ); p = mr*p*2.02;\n\tf +=      0.2500*noise( p ); p = mr*p*2.33;\n\tf +=      0.1250*noise( p ); p = mr*p*2.01;\n\tf +=      0.0625*noise( p ); p = mr*p*5.21;\n\tf +=      0.005*noise( p ); \n\treturn f\/(0.9375);\n}\n\n\/\/\n\/\/ intersection functions\n\/\/\n\nbool intersectPlane(vec3 ro, vec3 rd, float height, out float dist) {\t\n\tif (rd.y==0.0) {\n\t\treturn false;\n\t}\n\t\n\tfloat d = -(ro.y - height)\/rd.y;\n\td = min(100000.0, d);\n\tif( d > 0. ) {\n\t\tdist = d;\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n\/\/\n\/\/ Scene\n\/\/\n\nfloat skyDensity( vec2 p ) {\n\treturn fbm( p*0.125 );\n}\nfloat mapHeight( vec2 p ) {\n\treturn fbm(  p*0.35 )*4.;\n}\nfloat detailMapHeight( vec2 p ) {\n\treturn detailFbm(  p*0.35 )*4.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n\tvec2 p = vec2(-1.0)+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n\t\n\tvec2 pos = iMouse.xy*0.025 + vec2( 0.8, 10.);\n\t\n\tvec3 ro = vec3( pos.x, mapHeight( pos )+0.25, pos.y );\n\tvec3 rd = ( vec3(p, 1. ) );\n\t\n\tfloat dist;\n\tvec3 col = vec3(0.);\n\tvec3 intersection = vec3(9999.);\n\t\n\t\/\/ sky\n\tif( intersectPlane( ro, rd, 8., dist ) ) {\n\t\tintersection = ro+rd*dist;\n\t\tcol = mix( vec3(240.\/255., 0.\/255., 0.\/255.), vec3(1.), skyDensity( intersection.xz ) );\n\t} else {\n\t\tcol = mix( vec3(112.\/255.,2.\/255.,6.\/255.), vec3(0.), clamp(-p.y*3., 0., 1.) );\n\t}\n\t\/\/ terrain - raymarch\n\tfloat t, h = 0.;\n\tconst float dt=0.05;\n\t\n\tt = mod( ro.z, dt );\n\t\n\tfor( int i=0; i<RAYMARCHSTEPS; i++) {\n\t\tif( h < intersection.y ) {\n\t\t\tt += dt;\n\t\t\tintersection = ro + rd*t;\n\t\t\t\n\t\t\th = mapHeight( intersection.xz );\n\t\t}\n\t}\n\tif( h > intersection.y ) {\t\n\t\t\/\/ calculate projected height of intersection and previous point\n\t\tfloat h1 = (h-ro.y)\/(rd.z*t);\n\t\tvec3 prev =  ro + rd*(t-dt);\n\t\tfloat h2 = (mapHeight( prev.xz )-ro.y)\/(rd.z*(t-dt));\n\t\t\t\t\n\t\tfloat dx1 = detailMapHeight( intersection.xz+vec2(0.001,0.0) ) - detailMapHeight( intersection.xz+vec2(-0.001, 0.0) );\n\t\tdx1 *= (1.\/0.002);\n\t\tfloat dx2 = detailMapHeight( prev.xz+vec2(0.001,0.0) ) - detailMapHeight( prev.xz+vec2(-0.001, 0.0) );\n\t\tdx2 *= (1.\/0.002);\n\t\t\n\t\t\n\t\tfloat dx = mix( dx1, dx2, clamp( (h1-p.y)\/(h1-h2), 0., 1.));\n\t\t\n\t\tcol = mix( vec3(232.\/201.,121.\/255.,101.\/255.), vec3(31.\/255.,0.,0.), 0.5+0.25*dx );\n\n\t}\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}