{"Shader":{"ver":"0.1","info":{"id":"XtsGRM","date":"1420040711","viewed":323,"name":"Nessie","username":"dr2","description":"Nessie, the Loch Ness Monster.","likes":4,"published":3,"flags":0,"tags":["nighttime","serpent"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Nessie\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Noiseff (float p)\n{\n  float i = floor (p);\n  float f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Fbm1 (float p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (length (p.xy) - rc, p.z);\n  return length (q) - ri;\n}\n\nint idObj;\nmat3 serpMat;\nvec3 serpPos, ltPos, qHit, qHitTransObj, qHitFlame, qHitFlameR, sunDir, sunCol,\n   moonDir, moonCol, waterDisp, cloudDisp;\nfloat tCur, flameLen, flameInt, cvRad, bdRad, flameDir;\nbool isNight;\nconst float dstFar = 200.;\n\nfloat WaterHt (vec3 p)\n{\n  float ht, w;\n  const float wb = 1.414;\n  p *= 0.1;\n  w = wb;\n  p += waterDisp;\n  ht = 0.;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    p += waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.5 * ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyGrndCol (vec3 ro, vec3 rd)\n{\n  const vec3 sbCol1 = vec3 (0.02, 0.02, 0.06), sbCol2 = 0.7 * vec3 (0.2, 0.25, 0.5),\n     sCol1 = vec3 (0.06, 0.04, 0.02), sCol2 = vec3 (0.1, 0.1, 0.2),\n     mBrite = vec3 (-0.5, -0.4, 0.77), gCol = vec3 (0.05, 0.1, 0.05);\n  const float moonRad = 0.04;\n  vec3 col, bgCol, vn, rdd, st;\n  vec2 p;\n  float cloudFac, bs, cs, ts, dDotS, w, f;\n  bool mHit;\n  if (rd.y > 0.) {\n    ro.xz += cloudDisp.xz;\n    p = 0.02 * (rd.xz * (150. - ro.y) \/ rd.y + ro.xz);\n    w = 0.8;\n    f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.3, 0., 1.);\n  } else cloudFac = 0.;\n  if (isNight) {\n    bgCol = 0.3 * clamp (sbCol1 - 0.12 * rd.y * rd.y, 0., 1.) +\n       sCol1 * pow (clamp (dot (rd, moonDir), 0., 1.), 30.);\n    col = bgCol;\n    mHit = false;\n    bs = - dot (rd, moonDir);\n    cs = dot (moonDir, moonDir) - moonRad * moonRad;\n    ts = bs * bs - cs;\n    if (ts > 0.) {\n      ts = - bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - moonDir) \/ moonRad);\n        mHit = true;\n      }\n    }\n    if (mHit) col += 1.4 * moonCol * clamp (dot (mBrite, vn) *\n         (0.3 + Noisefv3 (5. * vn)), 0., 1.);\n    else {\n      rdd = rd;\n      rdd.xz = Rot2D (rdd.xz, 0.002 * tCur);\n      st = (rdd + vec3 (1.));\n      for (int j = 0; j < 10; j ++)\n         st = 11. * abs (st) \/ dot (st, st) - 3.;\n      col += min (1., 1.5e-6 * pow (min (16., length (st)), 4.5));\n    }\n    col = mix (col, sCol2, cloudFac) + bgCol;\n  } else {\n    dDotS = max (dot (rd, sunDir), 0.);\n    col = sbCol2 + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.) +\n       0.7 * sunCol * min (1.3 * pow (dDotS, 1024.) +\n       0.25 * pow (dDotS, 256.), 1.);\n    col = mix (col, vec3 (0.55), cloudFac);\n  }\n  if (rd.y > 0. && rd.y < 0.005 + 0.01 * Fbm1 (20. * rd.x - 0.05 * tCur)) {\n    col = gCol;\n    if (isNight) col *= 0.1;\n  }\n  return col;\n}\n\nfloat FlameDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, wr, tr, u;\n  q = p;\n  q.z = - q.z + flameLen;\n  wr = 0.5 * (1. + q.z \/ flameLen);\n  tr = 0.3 * clamp (1. - 0.7 * wr, 0., 1.);\n  d = max (PrCapsDf (q, tr * flameLen, flameLen), -1.2 * flameLen - q.z);\n  if (d < dHit) { dHit = d; qHitTransObj = q; }\n  return dHit;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit;\n  dHit = dstFar;\n  p = serpMat * (p - serpPos);\n  q = p;\n  q.z -= 8. * cvRad;\n  q.xz = Rot2D (q.xz, flameDir);\n  q.x = abs (q.x);\n  q -= vec3 (0.6 * bdRad, cvRad, 2. * cvRad);\n  q.xz = Rot2D (q.xz,  0.1 + 0.4 * (1. + sin (3. * tCur)));\n  q.yz = Rot2D (q.yz, -0.1 + 0.2 * sin (tCur));\n  dHit = FlameDf (q, dHit);\n  return dHit;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float d, dHit;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit, d, sz, wr, u;\n  dHit = dstFar;\n  p = serpMat * (p - serpPos);\n  q = p;\n  sz = abs (q.z + 3. * cvRad);\n  q.z = mod (q.z + 2. * cvRad, 4. * cvRad) - 2. * cvRad;\n  d = max (PrTorusDf (q.yzx, bdRad, cvRad), - q.y);\n  q.z = mod (q.z, 4. * cvRad) - 2. * cvRad;\n  d = min (d, max (PrTorusDf (q.yzx, bdRad, cvRad), q.y));\n  d = max (d, sz - 11. * cvRad);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = 1; }\n  p.z -= 8. * cvRad;\n  p.xz = Rot2D (p.xz, flameDir);\n  q = p;  q -= vec3 (0., cvRad, 0.5 * cvRad);\n  u = q.z + bdRad;  wr = 1. - 0.2 * u * u \/ (3. * bdRad);\n  d = PrCapsDf (q, 1.5 * wr * bdRad, 3. * bdRad);\n  if (d < dHit + 0.3 * bdRad) {\n    dHit = SmoothMin (d, dHit, 0.3 * bdRad);  qHit = q;  idObj = 1;\n  }\n  q = p;  q -= vec3 (0., cvRad + 1.7 * bdRad, 0.5 * cvRad - bdRad);\n  u = q.z - 2. * bdRad;  wr = 1. - 0.5 * u * u \/ (2. * bdRad);\n  d = PrCapsDf (q, 0.8 * wr * bdRad, 2. * bdRad);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = 1; }\n  q.z -= 2. * bdRad;\n  d = PrCylDf (q.yzx, 0.5 * bdRad, 0.8 * bdRad);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = 2; }\n  q = p;  q.x = abs (q.x);  q -= vec3 (0.5 * bdRad, cvRad, 1.7 * cvRad);\n  d = PrCylDf (q, 0.3 * bdRad, 0.4 * bdRad);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = 3; }\n  return dHit;\n}\n\nfloat ObjRay (in vec3 ro, in vec3 rd)\n{\n  float d, dHit;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.002 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ObjCol (vec3 n)\n{\n  vec3 col;\n  if (idObj == 1) {\n    col = vec3 (0.5, 0.3, 0.2);\n    if (isNight) col *= 0.2;\n  } else if (idObj == 2) col = vec3 (0.2, 5., 0.2) * (1. + 0.8 * cos (3. * tCur));\n  else if (idObj == 3) col = vec3 (5., 0.3, 0.2);\n  return col;\n}\n\nvec3 FlameCol (vec3 col)\n{\n  vec3 q;\n  float fFac, c;\n  q = qHitTransObj;\n  fFac = clamp (mod (2. * (q.z \/ flameLen + 1.) + 3. * Noisefv2 (q.xy *\n     vec2 (7., 7.3) + tCur * vec2 (11., 14.)) + 4.1 * tCur, 1.), 0., 1.);\n  c = clamp (q.z, 0., 1.);\n  if (flameInt > 0.1) col = 2. * flameInt * fFac *\n     vec3 (c + 0.5, 0.7 * c + 0.1, 0.2 * c + 0.1) + 0.8 * (1. - c) * col;\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, objCol, vLight;\n  int idObjT;\n  float dstHit, dstWat, dstFlame, dstFlameR, dstLightI, reflFac, dif;\n  bool doRefD, doRefR;\n  reflFac = 1.;\n  dstFlame = TransObjRay (ro, rd);\n  qHitFlame = qHitTransObj;\n  dstFlameR = dstFar;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFlame) dstFlame = dstFar;\n  doRefD = (dstFlame < min (dstHit, dstFar));\n  dstWat = - ro.y \/ rd.y;\n  if (rd.y < 0. && dstHit >= min (dstWat, dstFar)) {\n    ro += dstWat * rd;\n    rd = reflect (rd, WaterNf (ro, dstWat));\n    ro += 0.01 * rd;\n    dstFlameR = TransObjRay (ro, rd);\n    qHitFlameR = qHitTransObj;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    if (dstHit < dstFlameR) dstFlameR = dstFar;\n    doRefR = (dstFlameR < min (dstHit, dstFar));\n    reflFac *= 0.7;\n  }\n  idObjT = idObj;\n  if (dstHit >= dstFar) col = reflFac * SkyGrndCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) vn = VaryNf (8. * qHit.yzx, vn, 10.);\n    objCol = ObjCol (vn);\n    dif = max (dot (vn, sunDir), 0.);\n    col = reflFac * objCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) *  (dif + pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    if (isNight && idObj == 1) {\n      vLight = ro - ltPos;\n      dstLightI = 1. \/ length (vLight);\n      if (dstLightI < 10. && flameInt > 0.1) col +=\n         15. * flameInt * col * (0.2 + max (0., - dot (vn, normalize (vLight)))) *\n\t min (1., 200. * dstLightI * dstLightI);\n    }\n  }\n  if (doRefD) {\n    qHitTransObj = qHitFlame;\n    col = FlameCol (col);\n  }\n  if (doRefR) {\n    qHitTransObj = qHitFlameR;\n    col = FlameCol (col);\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  sunDir = normalize (vec3 (0.2, 0.1, 0.5));\n  moonDir = normalize (vec3 (0.2, 0.1, 0.5));\n  sunCol = vec3 (1., 0.9, 0.8);\n  moonCol = vec3 (1., 0.9, 0.5);\n  cloudDisp = 10. * tCur * vec3 (1., 0., 1.);\n  waterDisp = 0.05 * tCur * vec3 (-1., 0., 1.);\n  vec3 rd, ro;\n  float az, el;\n\n  az = pi * (0.6 + 0.2 * sin (0.03 * tCur));\n  el = 0.005 * pi * sin (0.022 * tCur);\n  vec3 ca = cos (vec3 (el, az, 0.));\n  vec3 sa = sin (vec3 (el, az, 0.));\n  serpMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  serpPos = vec3 (0., 0.4 + 0.35 * cos (1.5 * tCur), 25.);\n  cvRad = 1.;\n  bdRad = 0.35;\n  isNight = true;\/\/mod (floor (tCur \/ 4.), 2.) != 0.;\n  flameDir = 0.2 * pi * sin (2. * tCur);\n  flameLen = 0.6 + 1.4 * max (0.2, Fbm1 (5.1 * tCur));\n  flameInt = 2. * max (Fbm1 (2.3 * tCur) - 0.7, 0.);\n  ltPos = serpPos + vec3 (0., 1.5 * cvRad, 13. * cvRad) * serpMat;\n  rd = normalize (vec3 (uv, 3.6));\n  ro = vec3 (0., 3., -20.);\n  vec3 col;\n  col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}