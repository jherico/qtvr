{"Shader":{"ver":"0.1","info":{"id":"MdlXDr","date":"1399633656","viewed":759,"name":"spiral illusion","username":"FabriceNeyret2","description":"Only big circles of small squares here !<br\/>mouse.x tunes rotation.   mouse.y tunes squares size. 2: toggles 1 every 2 circles.<br\/>C:  toggles alternate B\/W.   E: toggles empty square.   I: toggles inverse rotation at every circle.","likes":6,"published":3,"flags":0,"tags":["illusion"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ some examples here : http:\/\/www.psy.ritsumei.ac.jp\/~akitaoka\/uzu8e.html\n\n#define N 36. \t\t \/\/ squares on a circle\n#define TEST 4\t\t \/\/ pattern\n\nfloat  R1=.7;        \/\/ square side relative to its cell.\n#define R2 (R1-.2)   \/\/ optionnal internal circle\n\n#define PI 3.1415927\nfloat  t=iGlobalTime;\n\nbool keyToggle(int ascii) {\n\treturn (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy \/ iResolution.y - vec2(.85,.5));\n\tfloat v,c, da, s;\n\tif (iMouse.z<=0.) {\n\t\tda = t;\n\t\tR1 = .6+.45*sin(t\/10.);\n\t\ts = (mod(t\/(10.*2.*PI),2.)<1.) ? .5 : 1.;  \n\t} else {\n\t\tda = 2.*PI*iMouse.x\/iResolution.x;\n\t\tR1 = iMouse.y\/iResolution.y;\n\t\ts = (!keyToggle(50)) ? .5 : 1.;  \t   \/\/ '2':  toggles 1 every 2 circles.\n\t}\n\t\n\tfloat r = length(uv), a = atan(uv.y,uv.x); \/\/ to polar\n\t\t\n\t\/\/ cells in polar\n\tr = 3.+log(r)*s*N\/6. +.5; \/\/ r*N+.5;\n\ta = N*a\/(2.*PI)+.5;\n\tfloat ix = floor(r),\n\t\t  iy = floor(a),\n\t      x = 2.*(fract(a)-.5),             \/\/ -1..1\n\t      y = 2.\/s*(fract(r)-.5);  \t\t\t\/\/ -1..1\n\n\tr = sqrt(x*x+y*y); a = atan(y,x); \/\/ to local polar\n#if TEST>= 3\t\t\t\t\t\t  \/\/ rotate local cell\n\tif (!keyToggle(64+9)&&(mod(ix,2.)<1.)) da = -da;   \/\/ 'I':  toggles inverse rotation at every circle.\n\tx = r*cos(a+da); y = r*sin(a+da);\n\tv = max(abs(x),abs(y));\n#endif\n\t\n\t\n#if TEST==0\n\tc = max(abs(x),abs(y));\n#elif TEST==1\n\tc = cos(PI*y)*cos(PI*x);\n\t\n#elif TEST==2\n\tc = max(abs(x),abs(y)); c = sin(2.*PI*6.*c);\n\n#elif TEST==3 \/\/ rotating patterns\n\tv = 2.*PI*6.*v;\n#  if 0\n\tc = sin(v);\n#  else\n\tvec2 dF=vec2(dFdx(v),dFdy(v)); float d = length(dF); c = -(cos(v+d\/2.)-cos(v-d\/2.))\/d;\n#  endif\n\t\n#elif TEST==4 \/\/ rotating squares\n\tc = smoothstep(R1,R1-.1,v);\n\tif (keyToggle(64+5)) c -= smoothstep(R2,R2-.1,v);\n\tif ((!keyToggle(64+3)) && (mod(ix+iy,2.)<1.)) c = -c;\n\tc += .5;\n#endif\n\tfragColor = vec4(c);\n}","name":"","description":"","type":"image"}]}}