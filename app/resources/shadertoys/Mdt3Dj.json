{"Shader":{"ver":"0.1","info":{"id":"Mdt3Dj","date":"1452288009","viewed":197,"name":"Instability","username":"knighty","description":"Trying to implement DLA.<br\/>Update: hit Space bar to reinit. Useful when in full screen.","likes":12,"published":3,"flags":48,"tags":["fractal","laplacian","dla","instability"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\/\/vec2 p = (fragCoord.xy - 0.5*iResolution.xy) \/ iResolution.y;\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = texture2D(iChannel0,uv).xywz;\n    fragColor.y = sin(0.01*fragColor.w-0.5)*0.5+0.5;\n}","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Don't ask me about the accurate definition of these parameters\n\/\/Initial substance density\n#define INITIAL_DENSITY .5\n\/\/Advection factor\n#define PARAM_0 1.5\n\/\/Crystallization trigger 0..small_value\n#define PARAM_1 0.005\n\/\/Crystallization probability 0..1\n\/\/Low values->smoother. High values -> hairy. :)\n#define PARAM_2 0.2\n\nfloat hash12(vec2 p)\/\/from Dave Hoskins\n{\n#define MOD3 vec3(.1031,.11369,.13787)\n\tvec3 p3  = fract(vec3(p.xyx) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nbool SpcPressed(){\n    return texture2D(iChannel1, vec2(32.5\/256., 0.5\/256.)).x > 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (fragCoord.xy - 0.5*iResolution.xy) \/ iResolution.y;\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    if(iFrame==0 || SpcPressed()){\n        float v = float(length(p+vec2(0.3,0.6)\/iResolution.y)<3.\/iResolution.y);\n        float rnd = hash12(1000.*p + iGlobalTime * 1.256);\n        fragColor = vec4(v,v,0.,(0.9+0.1*rnd)*INITIAL_DENSITY);\n        return;\n    }\n    vec4 data = texture2D(iChannel0,uv);\n    vec2 nx = vec2(1.\/ iResolution.x, 0.);\n    vec2 ny = vec2(0., 1.\/ iResolution.y);\n    if(data.x == 0.) {\n        vec4 data_left  = texture2D(iChannel0,uv-nx);\n        vec4 data_right = texture2D(iChannel0,uv+nx);\n        vec4 data_up    = texture2D(iChannel0,uv+ny);\n        vec4 data_down  = texture2D(iChannel0,uv-ny);\n        \n        \/\/ advect substance\n        float factor = PARAM_0;\n        data.w += data_left.x == 0. ? factor*((data_left.y - data.y) * data.w) : 0.;\n        data.w += data_right.x == 0. ? factor*((data_right.y - data.y) * data.w) : 0.;\n        data.w += data_up.x == 0. ? factor*((data_up.y - data.y) * data.w) : 0.;\n        data.w += data_down.x == 0. ? factor*((data_down.y - data.y) * data.w) : 0.;\n        float rnd = hash12(500.*p + iGlobalTime * 1.256);\n        \n        \/\/ update potential\n        data.y = 0.25 *  ( data_left.y +\n                           data_right.y +\n                           data_up.y +\n                           data_down.y);\n        \n        \/\/\"Crystallization\"\n        \/\/ There are other possibilities\n        if (data.w < PARAM_1 && rnd>PARAM_2)\n            data = vec4(1.,1.,float(iFrame),0.1);       \n    }\n    fragColor = data;\n}","name":"","description":"","type":"buffer"}]}}