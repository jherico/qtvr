{"Shader":{"ver":"0.1","info":{"id":"4slGWH","date":"1368915920","viewed":5769,"name":"Fractal Nyancat","username":"iq","description":"Instead of using a mathematically defined shape for orbit trapping in fractals, a bitmap can be used just as easily ^_^","likes":31,"published":3,"flags":0,"tags":["2d","fractal","julia","orbittrap","orbit","nyancat"],"hasliked":0},"renderpass":[{"inputs":[{"id":14,"src":"\/presets\/tex14.png","ctype":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Instead of using a pont, circle, line or any mathematical shape for traping the orbit\n\/\/ of fc(z), one can use any arbitrary shape. For example, a NyanCat :)\n\/\/\n\/\/ I invented this technique more than 10 years ago (can have a look to those experiments \n\/\/ here http:\/\/www.iquilezles.org\/www\/articles\/ftrapsbitmap\/ftrapsbitmap.htm).\n\nvec4 getNyanCatColor( vec2 p )\n{\n\tp = clamp(p,0.0,1.0);\n\tp.x = p.x*40.0\/256.0;\n\tp.y = 0.5 + 1.2*(0.5-p.y);\n\tp = clamp(p,0.0,1.0);\n\tfloat fr = floor( mod( 20.0*iGlobalTime, 6.0 ) );\n\tp.x += fr*40.0\/256.0;\n\treturn texture2D( iChannel0, p );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0+2.0*fragCoord.xy \/ iResolution.xy;\n\tp.x *= iResolution.x\/iResolution.y;\n\n    \/\/ zoom\t\n\tp = vec2(0.5,-0.05)  + p*0.75 * pow( 0.9, 20.0*(0.5+0.5*cos(0.25*iGlobalTime)) );\n\t\n    vec4 col = vec4(0.0);\n\tvec3 s = mix( vec3( 0.2,0.2, 1.0 ), vec3( 0.5,-0.2,0.5), 0.5+0.5*sin(0.5*iGlobalTime) );\n\n    \/\/ iterate Jc\t\n\tvec2 c = vec2(-0.76, 0.15);\n\tfloat f = 0.0;\n\tvec2 z = p;\n\tfor( int i=0; i<100; i++ )\n\t{\n\t\tif( (dot(z,z)>4.0) || (col.w>0.1) ) continue; \/\/ break;\n\n        \/\/ fc(z) = z\u00b2 + c\t\t\n\t\tz = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;\n\t\t\n\t\tcol = getNyanCatColor( s.xy + s.z*z );\n\t\tf += 1.0;\n\t}\n\t\n\tvec3 bg = 0.5*vec3(1.0,0.5,0.5) * sqrt(f\/100.0);\n\t\n\tcol.xyz = mix( bg, col.xyz, col.w );\n\t\n\tfragColor = vec4( col.xyz,1.0);\n}","name":"","description":"","type":"image"}]}}