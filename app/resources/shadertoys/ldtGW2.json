{"Shader":{"ver":"0.1","info":{"id":"ldtGW2","date":"1452296856","viewed":190,"name":"\"Star Wars\" Life Rule","username":"Flyguy","description":"A cellular automata thing showing the \"Star Wars\" rule. The shader can be easily configured for any 3x3 kernel, Survive\/Birth\/History type cellular automata rule.","likes":10,"published":3,"flags":32,"tags":["automata","life","cell","conway"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = texture2D(iChannel0,uv);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\/\/See: http:\/\/psoup.math.wisc.edu\/mcell\/rullex_gene.html for more rules.\n\n\/\/Rule format (Survive\/Birth\/History)\n\n\/\/\"Star Wars\" rule 345\/2\/4\n#define RULE_S (n == 3 || n == 4 || n == 5)\n#define RULE_B (n == 2)\n#define RULE_H 4.0\n\n#define MOUSE_SIZE 16.0\n#define RANDOMIZE true\n\nfloat getCell(vec2 uv)\n{\n    return texture2D(iChannel0, fract(uv \/ iResolution.xy)).x;\n}\n\nint getNeighbors(vec2 uv)\n{\n    float n = floor(getCell(uv + vec2( 1, 0)))\n            + floor(getCell(uv + vec2(-1, 0)))\n        \t+ floor(getCell(uv + vec2( 0, 1)))\n        \t+ floor(getCell(uv + vec2( 0,-1)))\n            + floor(getCell(uv + vec2( 1, 1)))\n        \t+ floor(getCell(uv + vec2(-1, 1)))\n        \t+ floor(getCell(uv + vec2( 1,-1)))\n            + floor(getCell(uv + vec2(-1,-1)));\n    \n    return int(n);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord;\n    \n    float cell = getCell(uv);\n    \n    int n = getNeighbors(uv);\n    \n    if(!(cell == 1.0 && RULE_S))\n    {\n        if(cell == 0.0 && RULE_B)\n        {\n            cell = 1.0;\n        }\n        else\n        {\n            cell = max(0.0, cell - (1.0 \/ RULE_H));\n        }\n    }\n    \n    if(distance(uv, iMouse.xy) < MOUSE_SIZE || (iFrame == 0 && RANDOMIZE))\n    {\n        cell = floor(texture2D(iChannel1,fract(uv \/ iChannelResolution[1].xy)).r + 0.5);\n    }\n    \n    fragColor = vec4(cell,float(n)\/8.0,0.0,1.0);\n}","name":"","description":"","type":"buffer"}]}}