{"Shader":{"ver":"0.1","info":{"id":"4tl3z4","date":"1419368177","viewed":2036,"name":"Simple path tracer","username":"reinder","description":"This shader shows the difference between a path tracer with, and without, direct light sampling.","likes":25,"published":3,"flags":0,"tags":["light","sampling","tracer","path","direct"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Simple path tracer. Created by Reinder Nijhoff 2014\n\/\/ @reindernijhoff\n\/\/\n\/\/ https:\/\/www.shadertoy.com\/view\/4tl3z4\n\/\/\n\n#define eps 0.0001\n#define EYEPATHLENGTH 4\n#define SAMPLES 12\n\n#define SHOWSPLITLINE\n#define FULLBOX\n\n#define DOF\n#define ANIMATENOISE\n#define MOTIONBLUR\n\n#define MOTIONBLURFPS 12.\n\n#define LIGHTCOLOR vec3(16.86, 10.76, 8.2)*1.3\n#define WHITECOLOR vec3(.7295, .7355, .729)*0.7\n#define GREENCOLOR vec3(.117, .4125, .115)*0.7\n#define REDCOLOR vec3(.611, .0555, .062)*0.7\n\nfloat seed = iGlobalTime;\n\nfloat hash1() {\n    return fract(sin(seed += 0.1)*43758.5453123);\n}\n\nvec2 hash2() {\n    return fract(sin(vec2(seed+=0.1,seed+=0.1))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 hash3() {\n    return fract(sin(vec3(seed+=0.1,seed+=0.1,seed+=0.1))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\n\/\/-----------------------------------------------------\n\/\/ Intersection functions (by iq)\n\/\/-----------------------------------------------------\n\nvec3 nSphere( in vec3 pos, in vec4 sph ) {\n    return (pos-sph.xyz)\/sph.w;\n}\n\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph ) {\n    vec3 oc = ro - sph.xyz;\n    float b = dot(oc, rd);\n    float c = dot(oc, oc) - sph.w * sph.w;\n    float h = b * b - c;\n    if (h < 0.0) return -1.0;\n\n\tfloat s = sqrt(h);\n\tfloat t1 = -b - s;\n\tfloat t2 = -b + s;\n\t\n\treturn t1 < 0.0 ? t2 : t1;\n}\n\nvec3 nPlane( in vec3 ro, in vec4 obj ) {\n    return obj.xyz;\n}\n\nfloat iPlane( in vec3 ro, in vec3 rd, in vec4 pla ) {\n    return (-pla.w - dot(pla.xyz,ro)) \/ dot( pla.xyz, rd );\n}\n\n\/\/-----------------------------------------------------\n\/\/ scene\n\/\/-----------------------------------------------------\n\nvec3 cosWeightedRandomHemisphereDirection( const vec3 n ) {\n  \tvec2 r = hash2();\n    \n\tvec3  uu = normalize( cross( n, vec3(0.0,1.0,1.0) ) );\n\tvec3  vv = cross( uu, n );\n\t\n\tfloat ra = sqrt(r.y);\n\tfloat rx = ra*cos(6.2831*r.x); \n\tfloat ry = ra*sin(6.2831*r.x);\n\tfloat rz = sqrt( 1.0-r.y );\n\tvec3  rr = vec3( rx*uu + ry*vv + rz*n );\n    \n    return normalize( rr );\n}\n\nvec3 randomSphereDirection() {\n    vec2 r = hash2()*6.2831;\n\tvec3 dr=vec3(sin(r.x)*vec2(sin(r.y),cos(r.y)),cos(r.x));\n\treturn dr;\n}\n\nvec3 randomHemisphereDirection( const vec3 n ) {\n\tvec3 dr = randomSphereDirection();\n\treturn dot(dr,n) * dr;\n}\n\n\/\/-----------------------------------------------------\n\/\/ light\n\/\/-----------------------------------------------------\n\nvec4 lightSphere;\n\nvoid initLightSphere( float time ) {\n\tlightSphere = vec4( 3.0+2.*sin(time),2.8+2.*sin(time*0.9),3.0+4.*cos(time*0.7), .5 );\n}\n\nvec3 sampleLight( const in vec3 ro ) {\n    vec3 n = randomSphereDirection() * lightSphere.w;\n    return lightSphere.xyz + n;\n}\n\n\/\/-----------------------------------------------------\n\/\/ scene\n\/\/-----------------------------------------------------\n\nvec2 intersect( in vec3 ro, in vec3 rd, inout vec3 normal ) {\n\tvec2 res = vec2( 1e20, -1.0 );\n    float t;\n\t\n\tt = iPlane( ro, rd, vec4( 0.0, 1.0, 0.0,0.0 ) ); if( t>eps && t<res.x ) { res = vec2( t, 1. ); normal = vec3( 0., 1., 0.); }\n\tt = iPlane( ro, rd, vec4( 0.0, 0.0,-1.0,8.0 ) ); if( t>eps && t<res.x ) { res = vec2( t, 1. ); normal = vec3( 0., 0.,-1.); }\n    t = iPlane( ro, rd, vec4( 1.0, 0.0, 0.0,0.0 ) ); if( t>eps && t<res.x ) { res = vec2( t, 2. ); normal = vec3( 1., 0., 0.); }\n#ifdef FULLBOX\n    t = iPlane( ro, rd, vec4( 0.0,-1.0, 0.0,5.49) ); if( t>eps && t<res.x ) { res = vec2( t, 1. ); normal = vec3( 0., -1., 0.); }\n    t = iPlane( ro, rd, vec4(-1.0, 0.0, 0.0,5.59) ); if( t>eps && t<res.x ) { res = vec2( t, 3. ); normal = vec3(-1., 0., 0.); }\n#endif\n\n\tt = iSphere( ro, rd, vec4( 1.5,1.0, 2.7, 1.0) ); if( t>eps && t<res.x ) { res = vec2( t, 1. ); normal = nSphere( ro+t*rd, vec4( 1.5,1.0, 2.7,1.0) ); }\n    t = iSphere( ro, rd, vec4( 4.0,1.0, 4.0, 1.0) ); if( t>eps && t<res.x ) { res = vec2( t, 6. ); normal = nSphere( ro+t*rd, vec4( 4.0,1.0, 4.0,1.0) ); }\n    t = iSphere( ro, rd, lightSphere ); if( t>eps && t<res.x ) { res = vec2( t, 0.0 );  normal = nSphere( ro+t*rd, lightSphere ); }\n\t\t\t\t\t  \n    return res;\t\t\t\t\t  \n}\n\nbool intersectShadow( in vec3 ro, in vec3 rd, in float dist ) {\n    float t;\n\t\n\tt = iSphere( ro, rd, vec4( 1.5,1.0, 2.7,1.0) );  if( t>eps && t<dist ) { return true; }\n    t = iSphere( ro, rd, vec4( 4.0,1.0, 4.0,1.0) );  if( t>eps && t<dist ) { return true; }\n\n    return false; \/\/ optimisation: planes don't cast shadows in this scene\n}\n\n\/\/-----------------------------------------------------\n\/\/ materials\n\/\/-----------------------------------------------------\n\nvec3 matColor( const in float mat ) {\n\tvec3 nor = vec3(0., 0.95, 0.);\n\t\n\tif( mat<3.5 ) nor = REDCOLOR;\n    if( mat<2.5 ) nor = GREENCOLOR;\n\tif( mat<1.5 ) nor = WHITECOLOR;\n\tif( mat<0.5 ) nor = LIGHTCOLOR;\n\t\t\t\t\t  \n    return nor;\t\t\t\t\t  \n}\n\nbool matIsSpecular( const in float mat ) {\n    return mat > 4.5;\n}\n\nbool matIsLight( const in float mat ) {\n    return mat < 0.5;\n}\n\n\/\/-----------------------------------------------------\n\/\/ brdf\n\/\/-----------------------------------------------------\n\nvec3 getBRDFRay( in vec3 n, const in vec3 rd, const in float m, inout bool specularBounce ) {\n    specularBounce = false;\n    \n    vec3 r = cosWeightedRandomHemisphereDirection( n );\n    if(  !matIsSpecular( m ) ) {\n        return r;\n    } else {\n        specularBounce = true;\n        \n        float n1, n2, ndotr = dot(rd,n);\n        \n        if( ndotr > 0. ) {\n            n1 = 1.\/1.5; n2 = 1.;\n            n = -n;\n        } else {\n            n2 = 1.\/1.5; n1 = 1.;\n        }\n                \n        float r0 = (n1-n2)\/(n1+n2); r0 *= r0;\n\t\tfloat fresnel = r0 + (1.-r0) * pow(1.0-abs(ndotr),5.);\n        \n        vec3 ref;\n        \n        if( hash1() < fresnel ) {\n            ref = reflect( rd, n );\n        } else {\n            ref = refract( rd, n, n2\/n1 );\n        }\n        \n        return ref; \/\/ normalize( ref + 0.1 * r );\n\t}\n}\n\n\/\/-----------------------------------------------------\n\/\/ eyepath\n\/\/-----------------------------------------------------\n\nvec3 traceEyePath( in vec3 ro, in vec3 rd, const in bool directLightSampling ) {\n    vec3 tcol = vec3(0.);\n    vec3 fcol  = vec3(1.);\n    \n    bool specularBounce = true;\n    \n    for( int j=0; j<EYEPATHLENGTH; ++j ) {\n        vec3 normal;\n        \n        vec2 res = intersect( ro, rd, normal );\n        if( res.y < -0.5 ) {\n            return tcol;\n        }\n        \n        if( matIsLight( res.y ) ) {\n            if( directLightSampling ) {\n            \tif( specularBounce ) tcol += fcol*LIGHTCOLOR;\n            } else {\n                tcol += fcol*LIGHTCOLOR;\n            }\n         \/\/   basecol = vec3(0.);\t\/\/ the light has no diffuse component, therefore we can return col\n            return tcol;\n        }\n        \n        ro = ro + res.x * rd;\n        rd = getBRDFRay( normal, rd, res.y, specularBounce );\n        \n        fcol *= matColor( res.y );\n\n        vec3 ld = sampleLight( ro ) - ro;\n        \n        if( directLightSampling ) {\n\t\t\tvec3 nld = normalize(ld);\n            if( !specularBounce && j < EYEPATHLENGTH-1 && !intersectShadow( ro, nld, length(ld)) ) {\n\n                float cos_a_max = sqrt(1. - clamp(lightSphere.w * lightSphere.w \/ dot(lightSphere.xyz-ro, lightSphere.xyz-ro), 0., 1.));\n                float weight = 2. * (1. - cos_a_max);\n\n                tcol += (fcol * LIGHTCOLOR) * (weight * clamp(dot( nld, normal ), 0., 1.));\n            }\n        }\n    }    \n    return tcol;\n}\n\n\/\/-----------------------------------------------------\n\/\/ main\n\/\/-----------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    \n\tfloat splitCoord = (iMouse.x == 0.0) ? iResolution.x\/2. + iResolution.x*cos(iGlobalTime*.5) : iMouse.x;\n    bool directLightSampling = fragCoord.x < splitCoord;\n    \n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\n    vec2 p = -1.0 + 2.0 * (fragCoord.xy) \/ iResolution.xy;\n    p.x *= iResolution.x\/iResolution.y;\n\n#ifdef ANIMATENOISE\n    seed = p.x + p.y * 3.43121412313 + fract(1.12345314312*iGlobalTime);\n#else\n    seed = p.x + p.y * 3.43121412313;\n#endif\n    \n    vec3 ro = vec3(2.78, 2.73, -8.00);\n    vec3 ta = vec3(2.78, 2.73,  0.00);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n    \/\/-----------------------------------------------------\n    \/\/ render\n    \/\/-----------------------------------------------------\n\n    vec3 col = vec3(0.0);\n    vec3 tot = vec3(0.0);\n    vec3 uvw = vec3(0.0);\n    \n    for( int a=0; a<SAMPLES; a++ ) {\n\n        vec2 rpof = 4.*(hash2()-vec2(0.5)) \/ iResolution.xy;\n\t    vec3 rd = normalize( (p.x+rpof.x)*uu + (p.y+rpof.y)*vv + 3.0*ww );\n        \n#ifdef DOF\n\t    vec3 fp = ro + rd * 12.0;\n   \t\tvec3 rof = ro + (uu*(hash1()-0.5) + vv*(hash1()-0.5))*0.125;\n    \trd = normalize( fp - rof );\n#else\n        vec3 rof = ro;\n#endif        \n        \n#ifdef MOTIONBLUR\n        initLightSphere( iGlobalTime + hash1() \/ MOTIONBLURFPS );\n#else\n        initLightSphere( iGlobalTime );        \n#endif\n        \n        col = traceEyePath( rof, rd, directLightSampling );\n\n        tot += col;\n        \n        seed = mod( seed*1.1234567893490423, 13. );\n    }\n    \n    tot \/= float(SAMPLES);\n    \n#ifdef SHOWSPLITLINE\n\tif (abs(fragCoord.x - splitCoord) < 1.0) {\n\t\ttot.x = 1.0;\n\t}\n#endif\n    \n\ttot = pow( clamp(tot,0.0,1.0), vec3(0.45) );\n\n    fragColor = vec4( tot, 1.0 );\n}","name":"","description":"","type":"image"}]}}