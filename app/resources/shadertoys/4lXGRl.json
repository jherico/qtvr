{"Shader":{"ver":"0.1","info":{"id":"4lXGRl","date":"1424107832","viewed":311,"name":"Albert's Canyon","username":"dr2","description":"Yet another relativistic shader (do a keyword search for previous<br\/>examples). Here our flying aces are hitting lightspeed (not to be taken<br\/>seriously); use the mouse to change speed. The distortion of the visual field is the Penrose-Terrell effect.<br\/><br\/>","likes":3,"published":3,"flags":0,"tags":["flight","relativity"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Albert's Canyon\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Rather than changing the flying speed we change the value of c (the\n\/\/ speed of light); this is of course forbidden, but who cares (the\n\/\/ Einstein centenary exhibition in Berne used a similar trick)?\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 6; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nint idObj, idObjGrp;\nmat3 flyerMat[3], flMat;\nvec3 flyerPos[3], flPos, qHit, qHitTransObj, sunDir;\nfloat fusLen, flameLen, tCur;\nconst float dstFar = 150.;\nconst int idCkp = 11, idFus = 12, idEng = 13, idWngI = 14, idWngO = 15,\n   idTlf = 16, idRfl = 17;\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.1, 0.2, 0.5);\n  vec3 col;\n  col = sbCol + 0.25 * pow (1. - max (rd.y, 0.), 8.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 10. * tCur;\n    vec2 p = 0.02 * (rd.xz * (150. - ro.y) \/ rd.y + ro.xz);\n    float w = 0.8;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.3, 0., 1.);\n  } else cloudFac = 0.;\n  float s = max (dot (rd, sunDir), 0.);\n  col = SkyBg (rd) + (0.35 * pow (s, 6.) + 0.65 * min (pow (s, 256.), 0.3));\n  col = mix (col, vec3 (1.), cloudFac);\n  return col;\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (30. * sin (0.035 * t) * sin (0.012 * t) * cos (0.01 * t) +\n     26. * sin (0.0032 * t), 1. + 3. * sin (0.021 * t) * sin (1. + 0.023 * t), t);\n}\n\nfloat GrndHt (vec2 p)\n{\n  float u;\n  u = max (abs (p.x - TrackPath (p.y).x) - 2.5, 0.);\n  u *= u;\n  return SmoothMin ((0.2 + 0.003 * u) * u, 12., 1.) +\n     0.5 * Noisefv2 (0.6 * p) + 4. * Fbm2 (0.1 * p) - 3.;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.25, 0.4 * h) + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy), e.x,\n     ht - GrndHt (p.xz + e.yx)));\n}\n\nvec4 GrndCol (vec3 p, vec3 n)\n{\n  const vec3 gCol1 = vec3 (0.3, 0.25, 0.25), gCol2 = vec3 (0.1, 0.1, 0.1),\n     gCol3 = vec3 (0.3, 0.3, 0.1), gCol4 = vec3 (0., 0.5, 0.);\n  vec3 col, wCol, bCol;\n  float cSpec;\n  wCol = mix (gCol1, gCol2, clamp (1.4 * (Noisefv2 (p.xy +\n     vec2 (0., 0.3 * sin (0.14 * p.z)) *\n     vec2 (2., 7.3)) + Noisefv2 (p.zy * vec2 (3., 6.3))) - 1., 0., 1.));\n  bCol = mix (gCol3, gCol4, clamp (0.7 * Noisefv2 (p.xz) - 0.3, 0., 1.));\n  col = mix (wCol, bCol, smoothstep (0.4, 0.7, n.y));\n  cSpec = clamp (0.3 - 0.1 * n.y, 0., 1.);\n  return vec4 (col, cSpec);\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 2.;\n  for (int i = 0; i < 10; i++) {\n    p = ro + rd * d;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, 20. * h \/ d);\n    d += 4.;\n    if (h < 0.01) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nfloat FlameDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, wr;\n  q = p;\n  q.x = abs (q.x);\n  q -= fusLen * vec3 (0.5, 0., -0.55);\n  q.z -= - 1.1 * flameLen;\n  wr = 0.5 * (q.z \/ flameLen - 1.);\n  d = PrCapsDf (q, 0.045 * (1. + 0.65 * wr) * fusLen, flameLen);\n  if (d < dHit) {\n    dHit = d;\n    qHitTransObj = q;\n  }\n  return dHit;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  dHit = FlameDf (flyerMat[0] * (p - flyerPos[0]), dHit);\n  dHit = FlameDf (flyerMat[1] * (p - flyerPos[1]), dHit);\n  dHit = FlameDf (flyerMat[2] * (p - flyerPos[2]), dHit);\n  return dHit;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.01 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 FlameCol (vec3 col)\n{\n  vec3 q = qHitTransObj;\n  float fFac = 0.3 + 0.7 * clamp (mod (3. * (q.z \/ flameLen + 1.) +\n     0.7 * Noisefv2 (10. * q.xy + tCur * vec2 (200., 210.)) +\n     170. * tCur, 1.), 0., 1.);\n  float c = clamp (0.5 * q.z \/ flameLen + 0.5, 0., 1.);\n  return fFac * vec3 (c, 0.4 * c * c * c, 0.4 * c * c) +\n     (1. - c) * col;\n}\n\nfloat FlyerDf (vec3 p, float dHit)\n{\n  vec3 pp, q;\n  float d, wr, ws;\n  q = p;\n  q.yz = Rot2D (q.yz, 0.07 * pi);\n  d = PrCapsDf (q - fusLen * vec3 (0., 0.05, 0.),\n      0.11 * fusLen, 0.1 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idCkp;  qHit = q; }\n  q = p;\n  q -= fusLen * vec3 (0., 0., -0.12);\n  wr = -0.05 + q.z \/ fusLen;\n  q.xz *= 0.8;\n  d = PrCapsDf (q, (0.14 - 0.14 * wr * wr) * fusLen, fusLen);\n  if (d < dHit + 0.01) {\n    dHit = SmoothMin (dHit, d, 0.01);  idObj = idFus;  qHit = q;\n  }\n  pp = p;\n  pp.x = abs (pp.x);\n  q = pp - fusLen * vec3 (0.5, 0., -0.2);\n  ws = q.z \/ (0.4 * fusLen);\n  wr = ws - 0.1;\n  d = PrCylDf (q, (0.05 - 0.035 * ws * ws) * fusLen, 0.45 * fusLen);\n  d = min (d, PrCylDf (q, (0.09 - 0.05 * wr * wr) * fusLen, 0.35 * fusLen));\n  if (d < dHit) { dHit = d;  idObj = idEng;  qHit = q; }\n  q = pp - fusLen * vec3 (0.1, 0., -0.15);\n  q.xz = Rot2D (q.xz, 0.12 * pi);\n  wr = 1. - 0.6 * q.x \/ (0.4 * fusLen);\n  d = PrFlatCylDf (q.zyx, 0.25 * wr * fusLen, 0.02 * wr * fusLen, 0.4 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idWngI;  qHit = q; }\n  q = pp - fusLen * vec3 (0.6, 0., -0.37);\n  q.xy = Rot2D (q.xy, -0.1 * pi);\n  q -= fusLen * vec3 (0.07, 0.01, 0.);\n  q.xz = Rot2D (q.xz, 0.14 * pi);\n  wr = 1. - 0.8 * q.x \/ (0.2 * fusLen);\n  d = PrFlatCylDf (q.zyx, 0.06 * wr * fusLen, 0.005 * wr * fusLen, 0.2 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idWngO;  qHit = q; }\n  q = pp - fusLen * vec3 (0.03, 0., -0.85);\n  q.xy = Rot2D (q.xy, -0.24 * pi);\n  q -= fusLen * vec3 (0.2, 0.02, 0.);\n  wr = 1. - 0.5 * q.x \/ (0.17 * fusLen);\n  q.xz = Rot2D (q.xz, 0.1 * pi);\n  d = PrFlatCylDf (q.zyx, 0.1 * wr * fusLen, 0.007 * wr * fusLen, 0.17 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idTlf;  qHit = q; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, gp;\n  float d, dHit, cSep;\n  dHit = dstFar;\n  idObjGrp = 1 * 256;\n  dHit = FlyerDf (flyerMat[0] * (p - flyerPos[0]), dHit);\n  idObjGrp = 2 * 256;\n  dHit = FlyerDf (flyerMat[1] * (p - flyerPos[1]), dHit);\n  idObjGrp = 3 * 256;\n  dHit = FlyerDf (flyerMat[2] * (p - flyerPos[2]), dHit);\n  dHit *= 0.8;\n  cSep = 10.;\n  gp.z = cSep * floor (p.z \/ cSep) + 0.5 * cSep;\n  gp.x = TrackPath (gp.z).x;\n  gp.y = GrndHt (gp.xz);\n  q = p - gp;\n  d = 0.8 * PrCapsDf (q.xzy, 0.4, 0.1);\n  if (d < dHit) { dHit = d;  idObj = 1;  qHit = p; }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float d, h, sh;\n  sh = 1.;\n  d = 0.02;\n  for (int i = 0; i < 40; i++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.02;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec4 FlyerCol (vec3 n)\n{\n  vec3 col;\n  float spec;\n  spec = 1.;\n  int ig = idObj \/ 256;\n  int id = idObj - 256 * ig;\n  vec3 qq = qHit \/ fusLen;\n  float br = 4. + 3.5 * cos (10. * tCur);\n  col = vec3 (0.7, 0.7, 1.);\n  if (qq.y > 0.) col *= 0.3;\n  else col *= 1.2;\n  if (id == idTlf) {\n    if (abs (qq.x) < 0.1)\n       col *= 1. - SmoothBump (-0.005, 0.005, 0.001, qq.z + 0.05);\n    if (qq.z < - 0.05)\n       col *= 1. - SmoothBump (- 0.005, 0.005, 0.001, abs (qq.x) - 0.1);\n  }\n  if (id == idCkp && qq.z > 0.) col = vec3 (0.4, 0.2, 0.);\n  else if (id == idEng) {\n    if (qq.z > 0.36) col = vec3 (1., 0., 0.);\n    else if (qq.z > 0.33) {\n      col = vec3 (0.01);\n      spec = 0.;\n    }\n  } else if (id == idWngO && qq.x > 0.17 ||\n     id == idTlf && qq.x > 0.15 && qq.z < -0.03) col = vec3 (1., 0., 0.) * br;\n  else if (id == idFus && qq.z > 0.81) col = vec3 (0., 1., 0.) * br;\n  idObj = idRfl;\n  return vec4 (col, spec);\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col4;\n  if (idObj == 1) col4 = vec4 (1., 0.3, 0., 1.) *\n     (0.6 + 0.4 * sin (6. * tCur - 0.1 * qHit.z));\n  else col4 = FlyerCol (n);\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn;\n  float dstHit, dstGrnd, dstObj, dstFlame, f, bk, sh;\n  int idObjT;\n  bool isGrnd;\n  dstHit = dstFar;\n  dstGrnd = GrndRay (ro, rd);\n  dstFlame = TransObjRay (ro, rd);\n  idObj = -1;\n  dstObj = ObjRay (ro, rd);\n  idObjT = idObj;\n  if (dstObj < dstFlame) dstFlame = dstFar;\n  isGrnd = false;\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    dstHit = dstObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col4 = ObjCol (vn);\n    if (idObj == idRfl) col4.rgb = 0.5 * col4.rgb +\n       0.3 * SkyCol (ro, reflect (rd, vn));\n    sh = ObjSShadow (ro, sunDir);\n    bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n    col = col4.rgb * (0.2 + 0.1 * bk  + sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n  } else {\n    dstHit = dstGrnd;\n    if (dstHit < dstFar) {\n      ro += dstGrnd * rd;\n      isGrnd = true;\n    } else col = SkyCol (ro, rd);\n  }\n  if (isGrnd) {\n    vn = VaryNf (3.2 * ro, GrndNf (ro, dstHit), 1.5);\n    col4 = GrndCol (ro, vn);\n    sh = GrndSShadow (ro, sunDir);\n    bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n    col = col4.rgb * (0.2 + 0.1 * bk  + sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n  }\n  if (dstFlame < dstFar) col = FlameCol (col);\n  if (dstHit < dstFar) {\n    f = dstHit \/ dstFar;\n    col = mix (col, 0.8 * SkyBg (rd), clamp (1.03 * f * f, 0., 1.));\n  }\n  return sqrt (clamp (col, 0., 1.));\n}\n\nvoid FlyerPM (float t, float vu)\n{\n  vec3 fpF, fpB, vel, acc, ort, cr, sr, va;\n  float tInterp, dt, vy, m1, m2, tDisc, s, vFly;\n  tInterp = 5.;\n  tDisc = floor ((t) \/ tInterp) * tInterp;\n  s = (t - tDisc) \/ tInterp;\n  vFly = 18.;\n  t *= vFly;\n  dt = 2.;\n  flPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) \/ (2. * dt);\n  vy = vel.y;\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  if (vu == 0.) { m1 = 1.;  m2 = 25.; }\n  else { m1 = 0.2;  m2 = 15.; }\n  vel.y = vy;\n  ort = vec3 (- m1 * asin (vel.y \/ length (vel)),\n     atan (vel.z, vel.x) - 0.5 * pi, m2 * length (va) * sign (va.y));\n  if (vu > 0.) { ort.xz *= -1.;  ort.y += pi; }\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n  flPos.y = (1. - s) * GrndHt (TrackPath (tDisc).xz) +\n     s * GrndHt (TrackPath (tDisc + tInterp).xz) + 7.;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  vec2 uvs = uv;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  vec3 ro, rd, col;\n  float tGap, zmFac, beta, cPhi, w, cLen;\n  sunDir = normalize (vec3 (cos (0.031 * tCur), 1.5, sin (0.031 * tCur)));\n  fusLen = 1.;\n  flameLen = 0.25 * fusLen;\n  tGap = 0.3;\n  tCur += tGap;\n  FlyerPM (tCur, 0.);  flyerPos[0] = flPos;  flyerMat[0] = flMat;\n  FlyerPM (tCur, 0.);  flyerPos[1] = flPos;  flyerMat[1] = flMat;\n  FlyerPM (tCur + 0.5 * tGap, 0.);  flyerPos[2] = flPos;  flyerMat[2] = flMat;\n  flyerPos[0].x += 1.2 * fusLen;\n  flyerPos[1].x -= 1.2 * fusLen;\n  FlyerPM (tCur - 0.2 * tGap, -1.);\n  ro = flPos;\n  ro.y += 0.3;\n  zmFac = 1.5;\n  rd = normalize (vec3 (uv, zmFac)) * flMat;\n  w = (mPtr.z > 0.) ? clamp (0.5 + mPtr.y, 0.07, 1.) : 0.9;\n  beta = clamp (pow (w, 0.25), 0.1, 0.999);\n  cPhi = (rd.z - beta) \/ (1. - rd.z * beta);\n  rd = vec3 (0., 0., cPhi) +\n     sqrt (1. - cPhi * cPhi) * normalize (rd - vec3 (0., 0., rd.z));\n  col = ShowScene (ro, rd);\n  cLen = 0.2;\n  uvs.y = abs (uvs.y - 0.96);\n  if (uvs.y < 0.02 && abs (uvs.x) < cLen) {\n    col = 0.3 * col + 0.5;\n    uvs.x += cLen - 0.01;\n    if (uvs.y < 0.015 && uvs.x > 0. && uvs.x < (2. * cLen - 0.02) *\n       (2. * beta - 1.)) col = vec3 (1., 0.9, 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}