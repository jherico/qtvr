{"Shader":{"ver":"0.1","info":{"id":"4lj3zG","date":"1429961026","viewed":859,"name":"Singularity","username":"mu6k","description":"The supermassive gravity is bending the light. I made them glow so that it's not boring. You can undefine glow if you want. Rotate with mouse.","likes":13,"published":3,"flags":0,"tags":["3d","raymarch","glow","distorsion","gravity"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*by musk License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.*\/\n\n#define glow\n\nfloat time = iGlobalTime; \/\/i hate the name in the uniforms\n\nvoid angularRepeat(const float a, inout vec2 v)\n{\n    float an = atan(v.y,v.x);\n    float len = length(v);\n    an = mod(an+a*.5,a)-a*.5;\n    v = vec2(cos(an),sin(an))*len;\n}\n\n \t\n\/\/ iq's polynomial smooth min (k = 0.1);\n\/\/ http:\/\/iquilezles.org\/www\/articles\/smin\/smin.htm\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat mBox(vec3 p, vec3 b)\n{\n\treturn max(max(abs(p.x)-b.x,abs(p.y)-b.y),abs(p.z)-b.z);\n}\n\nfloat mSphere(vec3 p, float r)\n{\n    return length(p)-r;\n}\n\nfloat rtime1 = time*.082;\nfloat rtime2 = time*.027;\nfloat rtime3 = time*.013;\nmat3 rot = mat3(cos(rtime1),0,sin(rtime1),0,1,0,-sin(rtime1),0,cos(rtime1))*\n    mat3(cos(rtime2),sin(rtime2),.0,-sin(rtime2),cos(rtime2),.0,0,0,1)*\n    mat3(1,0,0,0,cos(rtime3),sin(rtime3),0,-sin(rtime3),cos(rtime3));\n\n\nfloat size = time*0.1\n    -1.0;\n\nfloat df(vec3 p)\n{\n    float e = .5;\n    for (int i=0; i<2; i++)\n    {\n        p *= rot;\n        p.x = smin(p.x,-p.x,.5)+e*size;\n        p.y = smin(p.y,-p.y,.5)+e*size;\n        p.z = smin(p.z,-p.z,.5)+e*size;\n        e = e*.5;\n    }\n    return length(p)-0.1;\n}\n\nvec3 nf(vec3 p)\n{\n    vec2 e = vec2(0,0.005);\n    float c = df(p);\n    return normalize(vec3(df(p+e.yxx)-c,df(p+e.xyx)-c,df(p+e.xxy)-c));\n}\n\nvoid rotate(const float a, inout vec2 v)\n{\n    float cs = cos(a), ss = sin(a);\n    vec2 u = v;\n    v.x = u.x*cs + u.y*ss;\n    v.y = u.x*-ss+ u.y*cs;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy-iResolution.xy*.5) \/ iResolution.yy;\n    vec2 mouse = (iMouse.xy-iResolution.xy*.5) \/ iResolution.yy;\n    \n    vec3 pos = vec3(0,0,-7.0);\n    vec3 dir = normalize(vec3(uv,.5));\n    pos += dir*fract(fract((fragCoord.x*64.51230+fragCoord.y*42.123)*2.1512523)*351.2512313)*.5;\n    \n    float rx = mouse.x*8.0 + time*.04 +.1;\n    float ry = mouse.y*8.0 + time*.024+.4;\n    \n    rotate(rx,pos.xz);\n    rotate(rx,dir.xz);    \n    rotate(ry,pos.yx);\n    rotate(ry,dir.yx);\n    \n    float td = .0;\n    \n    for (int i=0; i<100; i++)\n    {\n     \tfloat dist = df(pos);\n        vec3 n = nf(pos);\n       \tpos += dist*dir*.5;\n        dir = normalize(dir - n\/(1.0+dist*dist)*.2);\n        td += 1.0\/(1.0+dist*dist);\n        if (dist<0.001||dist>1000.0)break;\n    }\n    \n    vec3 color;\n    \n    if (df(pos)>.1)\n    {\n        color = pow(textureCube(iChannel0,dir).xyz,vec3(2.2));\n    }\n    else\n    {\n    \n        color = vec3(.0,.0,.0);\n    }\n    color \/= 1.0+td;\n    #ifdef glow\n      color += vec3(td)*.2*vec3(.4,.1,.05);\n    #endif\n    color *= 1.0-length(uv)*.8;\n   \tcolor *= mix(vec3(.8,1.0,1.1),vec3(1.1,.9,.5), fragCoord.y\/iResolution.y);\n    \n\tfragColor = vec4(pow(color,vec3(1.0\/2.2)),1.0);\n}","name":"","description":"","type":"image"}]}}