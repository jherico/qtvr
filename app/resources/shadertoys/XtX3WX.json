{"Shader":{"ver":"0.1","info":{"id":"XtX3WX","date":"1425479210","viewed":766,"name":"Octahedral Interpolation","username":"paniq","description":"A method for linear interpolation of six octahedral corners that regresses to simple barycentric interpolation on the faces; drag the mouse for a cutaway; hit P to toggle the cutting plane. Hit N to toggle nearest neighbor interpolation.","likes":1,"published":3,"flags":0,"tags":["mattdamon"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\/\/ linearly interpolates the three axes inside the octahedron with an average\n\/\/ of all edges at the center; it's not the most beautiful method\n\/\/ for some cases but meshes very well with the regular linear tetrahedral\n\/\/ interpolation.\n\n\/\/ see doMaterial for the interpolation routine\n\nvec2 m;\n\n\/\/ keys are javascript keycode: http:\/\/www.webonweboff.com\/tips\/js\/event_key_codes.aspx\nconst int Key_A = 65; const int Key_B = 66; const int Key_C = 67; const int Key_D = 68; const int Key_E = 69;\nconst int Key_F = 70; const int Key_G = 71; const int Key_H = 72; const int Key_I = 73; const int Key_J = 74;\nconst int Key_K = 75; const int Key_L = 76; const int Key_M = 77; const int Key_N = 78; const int Key_O = 79;\nconst int Key_P = 80; const int Key_Q = 81; const int Key_R = 82; const int Key_S = 83; const int Key_T = 84;\nconst int Key_U = 85; const int Key_V = 86; const int Key_W = 87; const int Key_X = 88; const int Key_Y = 89;\nconst int Key_Z = 90;\nconst int Key_0 = 48; const int Key_1 = 49; const int Key_2 = 50; const int Key_3 = 51; const int Key_4 = 52;\nconst int Key_5 = 53; const int Key_6 = 54; const int Key_7 = 55; const int Key_8 = 56; const int Key_9 = 57;\n\nbool ReadKey( int key )\/\/, bool toggle )\n{\n\tbool toggle = true;\n\tfloat keyVal = texture2D( iChannel3, vec2( (float(key)+.5)\/256.0, toggle?.75:.25 ) ).x;\n\treturn (keyVal>.5)?true:false;\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Camera\n\/\/\n\/\/ Move the camera. In this case it's using time and the mouse position\n\/\/ to orbitate the camera around the origin of the world (0,0,0), where\n\/\/ the yellow sphere is.\n\/\/------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.3*iGlobalTime;\n    float d = 3.0;\n\tcamPos = vec3(d*sin(an),1.2,d*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\/\/------------------------------------------------------------------------\n\/\/ Background \n\/\/\n\/\/ The background color. In this case it's just a black color.\n\/\/------------------------------------------------------------------------\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\n\/\/ 3D distance of XYZ cross diagonal plane\nfloat octahedron(vec3 p, float r) {\n    vec3 o = abs(p);\n\tfloat s = o.x+o.y+o.z;\n\treturn (s-r)\/sqrt(3.0);\n}\n\nfloat sdf_round_box(vec3 p, vec3 b, float r) {\n  return length(max(abs(p)-b,0.0))-r;\n}\n\nvec2 min2(vec2 a, vec2 b) {\n    return (a.x <= b.x)?a:b;\n}\n\nvec2 max2(vec2 a, vec2 b) {\n    return (a.x > b.x)?a:b;\n}\n\nfloat doModel( vec3 p ) {\n    \n    float mouse_delta = clamp(m.x,0.0,1.0)*2.0-1.0;\n    float plane = p.y  + mouse_delta;\n    if (ReadKey(Key_P)) {\n\t\tplane = ((p.x+p.y+p.z) + mouse_delta)\/sqrt(3.0);\n       \tplane = abs(plane)-0.01;\n    }\n    \n    return max(octahedron(p,1.0), plane);\n  \n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Material \n\/\/\n\/\/ Defines the material (colors, shading, pattern, texturing) of the model\n\/\/ at every point based on its position and normal. In this case, it simply\n\/\/ returns a constant yellow color.\n\/\/------------------------------------------------------------------------\n\n#define TEST 0\n\nvec3 hue2rgb(float hue) {\n    return clamp( \n        abs(mod(hue * 6.0 + vec3(0.0, 4.0, 2.0), 6.0) - 3.0) - 1.0, \n        0.0, 1.0);\n}\n\nfloat gray(vec3 color) {\n    return dot(vec3(1.0\/3.0), color);\n}\n\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    \n#if TEST == 0\n    const vec3 c0 = vec3(1.0,0.0,0.0);\n    const vec3 c1 = vec3(0.0,1.0,1.0);\n    const vec3 c2 = vec3(0.0,1.0,0.0);\n    const vec3 c3 = vec3(1.0,0.0,1.0);\n    const vec3 c4 = vec3(0.0,0.0,1.0);\n    const vec3 c5 = vec3(1.0,1.0,0.0);\n#elif TEST == 1\n    \/\/ edge case\n    const vec3 c0 = vec3(0.0,0.0,0.0);\n    const vec3 c1 = vec3(1.0,1.0,1.0);\n    const vec3 c2 = vec3(1.0,1.0,1.0);\n    const vec3 c3 = vec3(1.0,1.0,1.0);\n    const vec3 c4 = vec3(1.0,1.0,1.0);\n    const vec3 c5 = vec3(1.0,1.0,1.0);\n#else\n    \/\/ edge case\n    const vec3 c0 = vec3(1.0,1.0,1.0);\n    const vec3 c1 = vec3(0.0,0.0,0.0);\n    const vec3 c2 = vec3(0.0,0.0,0.0);\n    const vec3 c3 = vec3(0.0,0.0,0.0);\n    const vec3 c4 = vec3(0.0,0.0,0.0);\n    const vec3 c5 = vec3(0.0,0.0,0.0);\n#endif\n    \n    pos = vec3(pos.x, -pos.z, pos.y);\n    if (max(pos.x,max(pos.y,pos.z)) > 1.01)\n        return vec3(0.0);\n    \n    vec3 s,t;\n    vec3 col = vec3(0.0);\n\n    float d = (1.0 - (abs(pos.x)+abs(pos.y)+abs(pos.z)))\/6.0;\n\n    s = d+max(-pos,0.0);\n    t = d+max(pos,0.0);\n    \n    if (ReadKey(Key_N)) {\n        vec3 ps = floor(1.0+s-max(max(s.yzx,s.zxy),max(t.zxy,max(t.xyz,t.yzx))));\n        vec3 pt = floor(1.0+t-max(max(t.yzx,t.zxy),max(s.zxy,max(s.xyz,s.yzx))));\n        \n        s = ps;\n        t = pt;\n    }\n    \n    \n    col = c0*s.x + c1*s.y + c2*s.z + c3*t.x + c4*t.y + c5*t.z;\n\n#if 0\n    \/\/ check if total energy of colors is below 1\n    if ((abs(col.x)+abs(col.y)+abs(col.z)) < 0.99)\n        return vec3(1.0);\n\n#endif\n    \n#if 0\n    if (max(col.x,max(col.y,col.z)) > 1.01)\n        return vec3(1.0,0.0,0.0);\n#endif\n    \n    if (ReadKey(Key_C)) {\n    \treturn hue2rgb(gray(col));\n    } else {\n        return col;\n    }\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \/\/ max trace distance\n\tconst float precis = 0.001;        \/\/ precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          \/\/ max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             \/\/ precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ) + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ) + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ) + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ) );\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n    m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    \n    \/\/ camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iGlobalTime, m.x );\n\n    \/\/ camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  \/\/ 0.0 is the camera roll\n    \n\t\/\/ create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \/\/ 2.0 is the lens length\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t\/\/ raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        col = doMaterial( pos, nor );\n\t}\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}