{"Shader":{"ver":"0.1","info":{"id":"4dVGzw","date":"1453746488","viewed":471,"name":"Derivative Arithmetic","username":"paniq","description":"A demo for derivative arithmetic aka dual numbers aka automatic differentiation, where a gradient is calculated as a byproduct, usually faster than using central differences and always precise.","likes":27,"published":3,"flags":0,"tags":["numbers","derivative","dual","arithmetic","automatic","differential"],"hasliked":0},"renderpass":[{"inputs":[{"id":25,"src":"\/presets\/cube03_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\/\/ inspired by https:\/\/www.shadertoy.com\/view\/Mdl3Ws, I implemented a full\n\/\/ arithmetic set for automatic differentiation or as I like to call it,\n\/\/ derivative arithmetic.\n\n\/\/ uncomment to see rendering of a non-C1 continuous surface; another\n\/\/ advantage that DA affords.\n\/\/ #define TANGLE\n\n#define DAValue vec4\n\nstruct DAVec3 {\n    DAValue x;\n    DAValue y;\n    DAValue z;\n};\n\nDAVec3 da_domain(vec3 p) {\n\treturn DAVec3(\n        DAValue(1.0,0.0,0.0,p.x),\n        DAValue(0.0,1.0,0.0,p.y),\n        DAValue(0.0,0.0,1.0,p.z));\n}\n\nDAValue da_const(float a) {\n    return DAValue(0.0,0.0,0.0,a);\n}\n\nfloat safeinv(float x) {\n    return (x == 0.0)?x:1.0\/x;\n}\n\nDAValue da_sub(DAValue a, DAValue b) {\n    return a - b;\n}\nDAValue da_sub(DAValue a, float b) {\n    return DAValue(a.xyz, a.w - b);\n}\nDAValue da_sub(float a, DAValue b) {\n    return DAValue(-b.xyz, a - b.w);\n}\n\nDAValue da_add(DAValue a, DAValue b) {\n    return a + b;\n}\nDAValue da_add(DAValue a, float b) {\n    return DAValue(a.xyz, a.w + b);\n}\nDAValue da_add(float a, DAValue b) {\n    return DAValue(b.xyz, a + b.w);\n}\n\nDAValue da_mul(DAValue a, DAValue b) {\n    return DAValue(a.xyz * b.w + a.w * b.xyz, a.w * b.w);\n}\nDAValue da_mul(DAValue a, float b) {\n    return a * b;\n}\nDAValue da_mul(float a, DAValue b) {\n    return a * b;\n}\n\nDAValue da_div(DAValue a, DAValue b) {\n    return DAValue((a.xyz * b.w - a.w * b.xyz) \/ (b.w * b.w), a.w \/ b.w);\n}\nDAValue da_div(DAValue a, float b) {\n    return a \/ b;\n}\nDAValue da_div(float a, DAValue b) {\n    return DAValue((-a * b.xyz) \/ (b.w * b.w), a \/ b.w);\n}\n\nDAValue da_min(DAValue a, DAValue b) {\n    return (a.w <= b.w)?a:b;\n}\nDAValue da_min(DAValue a, float b) {\n    return (a.w <= b)?a:da_const(b);\n}\nDAValue da_min(float a, DAValue b) {\n    return (a < b.w)?da_const(a):b;\n}\n\nDAValue da_max(DAValue a, DAValue b) {\n    return (a.w >= b.w)?a:b;\n}\nDAValue da_max(DAValue a, float b) {\n    return (a.w >= b)?a:da_const(b);\n}\nDAValue da_max(float a, DAValue b) {\n    return (a > b.w)?da_const(a):b;\n}\n\nDAValue da_pow2 (DAValue a) {\n    return DAValue(2.0 * a.w * a.xyz, a.w * a.w);\n}\n\nDAValue da_sqrt (DAValue a) {\n    float q = sqrt(a.w);\n    return DAValue(0.5 * a.xyz * safeinv(q), q);\n}\n        \nDAValue da_abs(DAValue a) {\n    return DAValue(a.xyz * sign(a.w), abs(a.w));\n}\nDAValue da_sin(DAValue a) {\n    return DAValue(a.xyz * cos(a.w), sin(a.w));\n}\nDAValue da_cos(DAValue a) {\n    return DAValue(a.xyz * sin(a.w), cos(a.w));\n}\nDAValue da_log(DAValue a) {\n    return DAValue(a.xyz \/ a.w, log(a.w));\n}\nDAValue da_exp(DAValue a) {\n    float w = exp(a.w);\n    return DAValue(a.xyz * w, w);\n}\n\n\nDAValue da_length(DAValue x,DAValue y) {\n    float q = length(vec2(x.w,y.w));\n    return DAValue((x.xyz * x.w + y.xyz * y.w) * safeinv(q), q);\n}\nDAValue da_length(DAValue x,DAValue y,DAValue z) {\n    float q = length(vec3(x.w,y.w,z.w));\n    return DAValue((x.xyz * x.w + y.xyz * y.w + z.xyz * z.w) * safeinv(q), q);\n}\n\n\/\/ s: width, height, depth, thickness\n\/\/ r: xy corner radius, z corner radius\nDAValue sdSuperprim(DAVec3 p, vec4 s, vec2 r) {\n    DAValue dx = da_sub(da_abs(p.x),s.x);\n    DAValue dy = da_sub(da_abs(p.y),s.y);\n    DAValue dz = da_sub(da_abs(p.z),s.z);\n    DAValue q = \n       \tda_sub(\n            da_abs(\n                da_add(\n                    da_add(\n                        da_length(\n                            da_max(da_add(dx, r.x), 0.0),\n                            da_max(da_add(dy, r.x), 0.0)),\n                  \t\tda_min(-r.x,da_max(dx,dy))),\n                    s.w)), \n                s.w);\n    return da_add(\n                da_length(\n                    da_max(da_add(q, r.y),0.0),\n                    da_max(da_add(dz, r.y),0.0)),\n                da_min(-r.y,da_max(q,dz)));\n}\n\nDAValue sdTangle(DAVec3 p) {\n    p.x = da_mul(p.x, 2.0);\n    p.y = da_mul(p.y, 2.0);\n    p.z = da_mul(p.z, 2.0);\n    DAValue d = \n        da_add(11.8,\n            da_sub(\n                da_add(\n                    da_pow2(da_pow2(p.x)), \n                    da_add(\n                        da_pow2(da_pow2(p.y)),\n                        da_pow2(da_pow2(p.z)))),\n                da_add(\n                    da_mul(5.0,da_pow2(p.x)),\n                    da_add(\n                        da_mul(5.0,da_pow2(p.y)),\n                        da_mul(5.0,da_pow2(p.z))))));\n    return da_div(d, max(11.8,length(d.xyz)));\n}\n\n\/\/ example parameters\n#define SHAPE_COUNT 10.0\nvoid getfactor (int i, out vec4 s, out vec2 r) {\n    \/\/i = 8;\n    if (i == 0) { \/\/ cube\n        s = vec4(1.0);\n        r = vec2(0.0);\n    } else if (i == 1) { \/\/ corridor\n        s = vec4(vec3(1.0),0.25);\n        r = vec2(0.0);\n    } else if (i == 2) { \/\/ pipe\n        s = vec4(vec3(1.0),0.25);\n        r = vec2(1.0,0.0);\n    } else if (i == 3) { \/\/ cylinder\n        s = vec4(1.0);\n        r = vec2(1.0,0.0);\n\t} else if (i == 4) { \/\/ pill\n        s = vec4(1.0,1.0,2.0,1.0);\n        r = vec2(1.0);\n    } else if (i == 5) { \/\/ sphere\n        s = vec4(1.0);\n        r = vec2(1.0);\n    } else if (i == 6) { \/\/ pellet\n        s = vec4(1.0,1.0,0.25,1.0);\n        r = vec2(1.0,0.25);\n    } else if (i == 7) { \/\/ torus\n        s = vec4(1.0,1.0,0.25,0.25);\n        r = vec2(1.0,0.25);\n    } else if (i == 8) { \/\/ sausage mouth\n        s = vec4(2.0,0.5,0.25,0.25);\n        r = vec2(0.5,0.25);\n    } else if (i == 9) { \/\/ beveled O\n        s = vec4(0.7,1.0,1.0,0.25);\n        r = vec2(0.125);\n\t}\n}\n\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 1.5 + sin(time * 0.1) * 0.7;\n\tcamPos = vec3(4.5*sin(an),2.0,4.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\nstruct DAMValue {\n    DAValue d;\n    float mat;\n};\n\nDAMValue min2(DAMValue a, DAMValue b) {\n    if (a.d.w <= b.d.w)\n        return a;\n    else\n        return b;\n}\n\nDAMValue plane(DAVec3 p) {\n    return DAMValue(da_add(p.y,2.0),1.0);\n}\n\nDAMValue add_plane(DAVec3 p, DAMValue m) {\n    return min2(plane(p),m);\n}\n\nDAMValue doScene (DAVec3 p) {\n    float k = iGlobalTime*0.5;\n    float u = smoothstep(0.0,1.0,smoothstep(0.0,1.0,fract(k)));\n    int s1 = int(mod(k,SHAPE_COUNT));\n    int s2 = int(mod(k+1.0,SHAPE_COUNT));\n    \n    vec4 sa,sb;\n    vec2 ra,rb;\n    getfactor(s1,sa,ra);\n    getfactor(s2,sb,rb);\n    \n    DAValue d;\n#ifdef TANGLE\n    d = sdTangle(p);\n#else\n    DAVec3 pp = DAVec3(p.z,p.y,p.x);\n    if (iMouse.z > 0.5) {\n    \tvec2 m = iMouse.xy\/iResolution.xy;\n    \td = sdSuperprim(pp, vec4(vec3(1.0),mix(sa.w,sb.w,u)), m);\n\t} else {\n    \td = sdSuperprim(pp, mix(sa,sb,u), mix(ra,rb,u));\n\t}\n#endif\n    \n    return add_plane(p, DAMValue(d,0.0));\n}\n\n\nvec2 doModel( vec3 p ) {\n    DAMValue d = doScene(da_domain(p));\n\treturn vec2(d.d.w, d.mat);\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Material \n\/\/\n\/\/ Defines the material (colors, shading, pattern, texturing) of the model\n\/\/ at every point based on its position and normal. In this case, it simply\n\/\/ returns a constant yellow color.\n\/\/------------------------------------------------------------------------\nvec4 doMaterial( in vec3 pos, in vec3 nor )\n{\n    float k = doModel(pos).y;\n    DAValue d = doScene(da_domain(vec3(pos.x,0.0,pos.z))).d;\n    \n    float w = abs(mod(d.w, 0.1)\/0.1 - 0.5);\n    \n    return mix(vec4(nor * 0.5 + 0.5,0.1),\n               vec4(d.xyz * 0.5 + 0.5,0.0) * w,\n               clamp(k,0.0,1.0));\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Lighting\n\/\/------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec4 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n\tfloat cos_Ol = max(0.0, dot(nor, lig));\n    vec3 h = normalize(lig - rd);\n    float cos_Oh = max(0.0,dot(nor, h));\n    float dif = cos_Ol;\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(0.8,0.7,0.6)*sha;\n    \n    lin += vec3(0.20,0.30,0.30);\n\n    \n    vec3 col = mal.rgb*lin;\n\n    \/\/ specular\n    col += cos_Ol * pow(cos_Oh,40.0) * sha;\n    \n    \/\/ envmap\n    col += mal.w*textureCube(iChannel0, reflect(rd,nor)).rgb;\n    \n    \/\/ fog    \n    \/\/-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \/\/ max trace distance\n\tconst float precis = 0.001;        \/\/ precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          \/\/ max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    DAMValue d = doScene(da_domain(pos));\n    return d.d.xyz;\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \/\/ selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         \/\/ 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h\/t );   \/\/ 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   \/\/ limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec3 ff_filmic_gamma3(vec3 linear) {\n    vec3 x = max(vec3(0.0), linear-0.004);\n    return (x*(x*6.2+0.5))\/(x*(x*6.2+1.7)+0.06);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n    vec2 m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    \n    \/\/ camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iGlobalTime, m.x );\n    \/\/doCamera( ro, ta, 3.0, 0.0 );\n\n    \/\/ camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  \/\/ 0.0 is the camera roll\n    \n\t\/\/ create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \/\/ 2.0 is the lens length\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t\/\/ raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        \/\/ materials\n        vec4 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\tcol = ff_filmic_gamma3(col * 0.6); \/\/pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}