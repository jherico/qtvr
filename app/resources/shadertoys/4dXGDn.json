{"Shader":{"ver":"0.1","info":{"id":"4dXGDn","date":"1366754575","viewed":1087,"name":"Invaders","username":"movAX13h","description":"random space invaders for everyone ;) <br\/>NOTE: This was the first shader on Shadertoy using encoded bitmaps (that's why I keep it public)","likes":4,"published":3,"flags":0,"tags":["procedural","2d"],"hasliked":0},"renderpass":[{"inputs":[{"id":19,"src":"\/presets\/mzk02.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/*\nInvaders fragment shader by movAX13h, April 2013\n\nNOTE: This was the first shader on Shadertoy using encoded bitmaps\n      (that's why I keep it public)\n\n  - adjust space coords (5x5 grid)\n  - calc pseudorandom number n (sync to music) \n  - calc segment to get k (x+y*3) and mirror x\n  - calc bit of n at position k; if set, paint invader color\n\n  [NOTE] binary AND operator (&) is not available in GLSL ES\n         thus using: (n\/2^k)%2, assuming n and k integer\n         which in GLSL is: mod(n\/(pow(2.0,k)),2.0)\n*\/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = mod(fragCoord.xy\/iResolution.y*5.0, iResolution.xy);\n\tp.x = abs(floor(p.x - 2.25*iResolution.x\/iResolution.y));\n\tp.y = -floor(p.y - 5.0);\n\t\n\tvec3 c = vec3(0.0, 0.0, 0.1 + 0.1*length(vec2(p.x, p.y - 3.0)) + 0.1*sin(iGlobalTime));\n\t\n\tif (p.x <= 2.0) \n\t{\n\t\tc.z *= 0.5;\n\t\tfloat n = floor(32768.0*fract(sin(floor(iChannelTime[0]*1.89-0.08))*43758.5453));\n\t\tif (int(mod(n\/(pow(2.0,float(p.x + p.y*3.0))),2.0)) == 1) c = vec3(1.0);\n\t}\n\tfragColor = vec4(c, 1.0);\n}","name":"","description":"","type":"image"}]}}