{"Shader":{"ver":"0.1","info":{"id":"4tX3DM","date":"1422367155","viewed":708,"name":"2D Snack Explosion","username":"aiekick","description":"2D Snack Explosion","likes":0,"published":3,"flags":0,"tags":["2dsnackexplosion"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iGlobalTime;\n        \n    \/\/ vars\n    float z = 1.;\n    \n    const int n = 500;\n        \n    vec3 startColor = normalize(vec3(1.5,0.,1.));\n    vec3 endColor = normalize(vec3(1.,1.,0.5));\n    \n    float startRadius = 0.4;\n    float endRadius = 0.7;\n    \n    float power = 0.3;\n    float duration = 0.6;\n    \/\/\n    \n    vec2 \n        s = iResolution.xy,\n\t\tv = z*(2.*fragCoord.xy-s)\/s.y;\n    \n    if(iMouse.z>0.) v *= iMouse.y\/s.y * 20.;\n    if(iMouse.z>0.) duration = iMouse.x\/s.x * 10.;\n    \n    vec3 col = vec3(0.);\n    \n    float dMax = duration;\n    \n    float mb = 0.;\n    float mbRadius = 0.;\n    float sum = 0.;\n    for(int i=0;i<n;i++)\n    {\n       \tfloat d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \tfloat a = 6.28*float(i)\/float(n);\n        \n        float x = d*cos(a);\n        float y = d*sin(a);\n        \n        float distRatio = d\/dMax;\n        \n        mbRadius = mix(startRadius, endRadius, distRatio);\n        \n        vec2 p = v - vec2(x,y);\n    \tmb = mbRadius\/dot(p,p);\n    \t\n        sum += mb;\n        \n        col = mix(col, mix(startColor, endColor, distRatio), mb\/sum);\n    }\n    \n    sum \/= float(n);\n    \n    col = normalize(col) * sum;\n    \n    sum = clamp(sum, 0., .4);\n    \n    vec3 tex = texture2D(iChannel0, v).rgb;\n     \n    col *= smoothstep(tex, vec3(0.), vec3(sum));\n        \n\tfragColor.rgb = col;\n}\n\n\/\/ 2\n\/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iGlobalTime;\n        \n    \/\/ vars\n    float z = 1.;\n    \n    const int n = 400;\n        \n    vec3 startColor = normalize(vec3(1.5,0.,1.));\n    vec3 endColor = normalize(vec3(1.,1.,0.5));\n    \n    float startRadius = 0.3;\n    float endRadius = 0.3;\n    \n    float power = 0.2;\n    float duration = 0.6;\n    \/\/\n    \n    vec2 \n        s = iResolution.xy,\n\t\tv = z*(2.*fragCoord.xy-s)\/s.y;\n    \n    if(iMouse.z>0.) v *= iMouse.y\/s.y * 20.;\n    if(iMouse.z>0.) duration = iMouse.x\/s.x * 10.;\n    \n    vec3 col = vec3(0.);\n    \n    float dMax = duration;\n    \n    float mb = 0.;\n    float mbRadius = 0.;\n    float sum = 0.;\n    for(int i=0;i<n;i++)\n    {\n       \tfloat d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \tfloat a = 6.28*float(i)\/float(n);\n        \n        float x = d*cos(a);\n        float y = d*sin(a);\n        \n        float distRatio = d\/dMax;\n        \n        mbRadius = mix(startRadius, endRadius, distRatio);\n        \n        vec2 p = v - vec2(x,y);\n    \tmb = mbRadius\/dot(p,p);\n    \t\n        sum += mb;\n        \n        col = mix(col, mix(startColor, endColor, distRatio), mb\/sum);\n    }\n    \n    sum \/= float(n);\n    \n    col = normalize(col) * sum;\n    \n    sum = clamp(sum, 0., 0.5);\n    \n    col = mix(col, texture2D(iChannel0, v).rgb, sum);\n    \n\tfragColor = vec4(col,1);\n}\n*\/\n\n\/\/ 1\n\/*\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float \n        z = 25.,\n        t = iGlobalTime;\n    \n    vec2 \n        s = iResolution.xy,\n\t\tv = z*(2.*fragCoord.xy-s)\/s.y;\n    \n    v\/=10.;\n    if(iMouse.z>0.) v *= iMouse.y\/s.y*20.;\n    \n    const int n = 100;\n        \n    vec3 startColor = normalize(vec3(0.8,0.5,0.5));\n    vec3 endColor = normalize(vec3(0.5,0.5,0.2));\n    \n    float radius = 0.005;\n    float power = 1.2;\n    float duration = 1.2;\n    \n    \n    float sum = 0.;\n    for(int i=0;i<n;i++)\n    {\n       \tfloat d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \tfloat a = 6.28*float(i)\/float(n);\n        \n        float x = d*cos(a);\n        float y = d*sin(a);\n        \n        vec2 p = v - vec2(x,y);\n    \tfloat mb = radius\/dot(p,p);\n    \t\n        sum += mb;\n    }\n    \n    vec3 col = vec3(sum)*endColor;\n    \n    sum = clamp(sum, 0., 0.5);\n    \n    col = mix(col, texture2D(iChannel0, v).rgb, sum);\n    \n\tfragColor = vec4(col,1);\n}\n*\/","name":"","description":"","type":"image"}]}}