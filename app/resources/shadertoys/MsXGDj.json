{"Shader":{"ver":"0.1","info":{"id":"MsXGDj","date":"1379355206","viewed":954,"name":"Curve fitting","username":"Dave_Hoskins","description":"Just some basic curve fitting algorithms. If I've got anything wrong, or you'll like to add some other splines, please comment below. <img src=\"\/img\/emoticonHappy.png\"\/>  I think Catmull-Rom wins the best curve so far.","likes":31,"published":3,"flags":0,"tags":["curvefitting"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/#define Use_Linear\n\/\/#define Use_Cosine\n\/\/#define Use_Smoothstep\n\/\/#define Use_Cubic\n\/\/#define Use_ThirdOrderSpline\n#define Use_Catmull_Rom\n\n\n\/\/--------------------------------------------------------------------------------\n\/\/  1 out, 1 in...\n#define HASHSCALE .1031\nfloat Hash(float p)\n{\n\tvec3 p3  = fract(vec3(p) * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat Cubic(float x, float v0,float v1, float v2,float v3) \n{\n\tfloat p = (v3 - v2) - (v0 - v1);\n\treturn p*(x*x*x) + ((v0 - v1) - p)*(x*x) + (v2 - v0)*x + v1;\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat Catmull_Rom(float x, float v0,float v1, float v2,float v3) \n{\n\tfloat c2 = -.5 * v0\t+ 0.5*v2;\n\tfloat c3 = v0\t\t+ -2.5*v1 + 2.0*v2 + -.5*v3;\n\tfloat c4 = -.5 * v0\t+ 1.5*v1 + -1.5*v2 + 0.5*v3;\n\treturn(((c4 * x + c3) * x + c2) * x + v1);\n\t\n\/\/\tOr, the same result with...\n\/\/\tfloat x2 = x  * x;\n\/\/\tfloat x3 = x2 * x;\n\/\/\treturn 0.5 * ( ( 2.0 * v1) + (-v0 + v2) * x +\n\/\/                  (2.0 * v0 - 5.0 *v1 + 4.0 * v2 - v3) * x2 +\n\/\/                  (-v0 + 3.0*v1 - 3.0 *v2 + v3) * x3);\n\n\t\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat ThirdOrderSpline(float x, float L1,float L0, float H0,float H1) \n{\n\treturn \t\t  L0 +.5 *\n\t\t\tx * ( H0-L1 +\n\t\t\tx * ( H0 + L0 * -2.0 +  L1 +\n\t\t\tx * ((H0 - L0)* 9.0\t + (L1 - H1)*3.0 +\n\t\t\tx * ((L0 - H0)* 15.0 + (H1 - L1)*5.0 +\n\t\t\tx * ((H0 - L0)* 6.0\t + (L1 - H1)*2.0 )))));\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat Cosine(float x, float v0, float v1) \n{\n\tx = (1.0-cos(x*3.1415927)) * .5;\n\treturn (v1-v0)*x + v0;\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat Linear(float x, float v0, float v1) \n{\n\treturn (v1-v0)*x + v0;\n}\n\n\/\/--------------------------------------------------------------------------------\nfloat Smoothstep(float x, float v0, float v1) \n{\n\tx = x*x*(3.0-2.0*x);\n\treturn (v1-v0)*x + v0;\n}\n\n\/\/================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tuv.x *= iResolution.x\/iResolution.y;\n\t\n\tfloat pos = (iGlobalTime*.5+uv.x) * 4.0;\n\tfloat x  = fract(pos);\n\tfloat v0 = Hash(floor(pos));\n\tfloat v1 = Hash(floor(pos)+1.0);\n\tfloat v2 = Hash(floor(pos)+2.0);\n\tfloat v3 = Hash(floor(pos)+3.0);\n\tfloat f;\n\t\n#ifdef Use_Linear\n\tf = Linear(x, v1, v2);\n#elif defined Use_Cosine\n\tf = Cosine(x, v1, v2);\n#elif defined Use_Smoothstep\n\tf = Smoothstep(x, v1, v2);\n#elif defined Use_Cubic\n\tf = Cubic(x, v0, v1, v2, v3);\n#elif defined Use_Catmull_Rom\n\tf = Catmull_Rom(x, v0, v1, v2, v3);\n#elif defined Use_ThirdOrderSpline\n\tf = ThirdOrderSpline(x, v0, v1, v2, v3);\n#endif\n\n\t\/\/ Blobs...\n\tf = .02 \/ abs(f-uv.y);\n\tfloat d = .03\/length((vec2(((uv.x)\/9.0*.25), uv.y)-vec2(x+.03, v1)) * vec2(.25,1.0));\n\tf = max(f, d*d);\n\td = .03\/length((vec2(((uv.x)\/9.0*.25), uv.y)-vec2(x-.97, v2)) * vec2(.25,1.0));\n\tf = max(f, d*d);\n\n\tfragColor = vec4(vec3(1.0,.2, .05) * f, 1.0);\n}","name":"","description":"","type":"image"}]}}