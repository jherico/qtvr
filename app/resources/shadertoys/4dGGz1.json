{"Shader":{"ver":"0.1","info":{"id":"4dGGz1","date":"1453196090","viewed":191,"name":"Fourier Gabor noise","username":"FabriceNeyret2","description":"Draw your spectrum profile in BufA<br\/>application of https:\/\/www.shadertoy.com\/view\/4s3GDs","likes":4,"published":3,"flags":48,"tags":["fft","fourier","gabor"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ application of https:\/\/www.shadertoy.com\/view\/4s3GDs\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\n\/\/Display modes\n#define MAGNITUDE 0\n#define PHASE 1\n#define COMPONENT 2\n\nint DISPLAY_MODE = MAGNITUDE;\n\n\/\/Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\n\nvec4 rainbow(float x)  { return .5 + .5 * cos(6.2832*(x - vec4(0,1,2,0)\/3.)); }\n\nvec4 paintDFT(vec2 F) {\n  if (DISPLAY_MODE == MAGNITUDE)\n     #if MAG_SCALE == LOG\n        return vec4( log(length(F)) \/ log(SIZE*SIZE) );\n     #elif MAG_SCALE == LINEAR\n        return vec4( length(F) \/ SIZE );\n     #endif\n\n    else if ( DISPLAY_MODE == PHASE )     return rainbow(atan(F.y,F.x)\/3.1416 + .5);        \n    else \/* if ( DISPLAY_MODE == COMPONENT ) *\/ return vec4(.5 + .5*F\/SIZE, 0,0);        \n}\n\nfloat message(vec2 p) {  \/\/ the alert function to add to your shader\n    int x = int(p.x+1.)-1, y=int(p.y)-10,  i;\n    if (x<1||x>32||y<0||y>2) return -1.; \n    i = ( y==2? i=  757737252: y==1? i= 1869043565: y==0? 623593060: 0 )\/ int(exp2(float(32-x)));\n \treturn i==2*(i\/2) ? 1. : 0.;\n}\n\n\nvoid mainImage( out vec4 O,  vec2 uv )\n{\n    if (iResolution.y<200.) \/\/ alert for the icon\n        {   float c=message(uv\/8.); if(c>=0.){ O=vec4(c,0,0,0);return; } }\n    \n    DISPLAY_MODE = int(texture2D(iChannel3, .5\/iResolution.xy).w); \/\/ persistant key flag.\n    \n    vec2 pixel = ( uv - iResolution.xy\/2.) \/ SIZE  + vec2(2,1)\/2.,\n         tile  = floor(pixel),\n         stile = floor(mod(2.*pixel,2.));\n    \n\tuv = fract(pixel) * SIZE \/ iResolution.xy ;\n\n    O-=O;\n    \n    if(tile == vec2(0,0))  \/\/Input + DFT (Left)\n         O += paintDFT(texture2D(iChannel3, uv).xy);\n\n    if(tile == vec2(1,0))  \/\/ Output +DFT (Right)\n         O += length(texture2D(iChannel2, uv).xy);\n\n}","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ do your operation in spectral domain here\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nbool keyPress(int ascii) { return (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.25)).x > 0.); }\nfloat rand(vec2 uv) { return fract(1e5*sin(dot(uv,vec2(17.4,123.7)))); }\nfloat gauss(float x) { return exp(-.5*x*x); }\n#define ang(a)  vec2(cos(a), sin(a))\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x) * vec2(cos(b),sin(b)); } \n\nvoid mainImage( out vec4 O, vec2 U )\n{\n    if ( U==vec2(.5)) {\n        O.w = texture2D(iChannel1,U\/iResolution.xy).w;\n        if ( keyPress(32) ) O.w = mod(O.w+.2, 3.) ; \/\/ persistant key flag\n        return;\n    }\n    \n    vec2 T = texture2D(iChannel0, U \/ iResolution.xy).xy;\n    U = 2.*U-SIZE;\n    vec2 X = U\/SIZE;\n    float l = length(X), F;\n    \n    T = ang(6.2832*rand(U));                \/\/ white noise\n    \n    \/\/ --- your custom Fourier-space function here ------------\n#define CASE 3 \/\/ spectrum profile\n    \n#if CASE==1\n    F *= gauss(l\/.05)*10.;                  \/\/ modulus profile : gauss\n#elif CASE==2\n    float l1 = length(X-vec2(.07,0)),\n          l2 = length(X+vec2(.07,0)); \n    F = ( gauss(l1\/.02)+gauss(l2\/.02) )*10.;  \/\/ bi-lobe\n  \/\/l1 = length(X-vec2(.1,.05)),\n  \/\/l2 = length(X+vec2(.1,.05)); \n  \/\/F += ( gauss(l1\/.015)+gauss(l2\/.015) )*5.;  \/\/ additionnal bi-lobe\n#elif CASE==3\n    F = gauss(abs(l-.12)\/.005)*10.;        \/\/ modulus profile : ring (blue noise)\n#elif CASE==4\n    F = gauss(abs(l-.12)\/.007)*10.*gauss(length(X*vec2(.1,1))\/.03)*3.;  \n#endif\n \n    \n    T = F*cmul(T,2.*iGlobalTime*sign(-X.x));  \/\/ phase shift with time            \n    O = vec4(T,T)*SIZE;\n    \n    \n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ invFourier transform \n\n\/\/ Horizontal + Vertical Discrete Fourier Transform of the input \n\/\/ 2 passes pipelined : in -> buf.zw -> buf.xy -> out\n\/\/ ( adapted from  Flyguy's https:\/\/www.shadertoy.com\/view\/MscGWS# )\n\n\n#define SIZE 256. \/\/Size must be changed in each tab.\n\nvec2 cmul (vec2 a,float b) { return mat2(a,-a.y,a.x)*vec2(cos(b), sin(b)); } \n\n\nvoid mainImage( out vec4 O, vec2 uv )\n{\n    O-=O; \n    \n    if(uv.x > SIZE || uv.y > SIZE) return;\n\n    for(float n = 0.; n < SIZE; n++)  {\n        vec2 xn = texture2D(iChannel0, vec2(n+.5, uv.y) \/ iResolution.xy).xy,\n             yn = texture2D(iChannel1, vec2(uv.x, n+.5) \/ iResolution.xy).zw,\n             a =  6.2831853 *  (uv-.5) * n\/SIZE;\n        \n        O.zw += cmul(xn, a.x);\n        O.xy += cmul(yn, a.y);\n    }\n    O \/= SIZE;\n}","name":"","description":"","type":"buffer"}]}}