{"Shader":{"ver":"0.1","info":{"id":"4lSXR3","date":"1445191903","viewed":431,"name":"Hot Rocks","username":"dr2","description":"Night flight over hot terrain (with spotlight).","likes":21,"published":3,"flags":0,"tags":["raymarching","rocks"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Hot Rocks\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 ip = floor (p);\n  vec2 fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  vec4 t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nmat3 flMat;\nvec3 flPos, ltPos, ltAx;\nfloat tCur;\nfloat dstFar = 100.;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (10. * sin (0.1 * t) * sin (0.06 * t) * cos (0.033 * t) +\n     3. * cos (0.025 * t), 6., t);\n}\n\nfloat GrndDf (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec2 q, t, ta, v;\n  float wAmp, pRough, ht;\n  wAmp = 1.;\n  pRough = 0.5;\n  q = 0.4 * p.xz;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    t = q + 2. * Noisefv2 (q) - 1.;\n    ta = abs (sin (t));\n    v = (1. - ta) * (ta + abs (cos (t)));\n    v = pow (1. - v, vec2 (pRough));\n    ht += (v.x + v.y) * wAmp;\n    q *= 1.5 * qRot;\n    wAmp *= 0.25;\n    pRough = 0.6 * pRough + 0.2;\n  }\n  return p.y - ht;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 100; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += 0.8 * h + 0.005 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 8; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., GrndDf (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = 0.0001 * vec3 (1., -1., 0.);\n  v = vec4 (GrndDf (p + e.xxx), GrndDf (p + e.xyy),\n     GrndDf (p + e.yxy), GrndDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat GrndGlow (vec3 ro, vec3 rd)\n{\n  float gl, f, d;\n  gl = 0.;\n  f = 1.;\n  d = 0.;\n  for (int j = 0; j < 5; j ++) {\n    d += 0.4;\n    gl += f * max (d - GrndDf (ro + rd * d), 0.);\n    f *= 0.5;\n  }\n  return clamp (gl, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, ltDir;\n  float dstGrnd, di, atten, glw, dk;\n  dstGrnd = GrndRay (ro, rd);\n  vec3 bgCol = vec3 (0., 0., 0.03);\n  vec3 col = bgCol;\n  if (dstGrnd < dstFar) {\n    ro += rd * dstGrnd;\n    ltDir = ro - ltPos;\n    di = 1. \/ max (length (ltDir), 0.01);\n    ltDir *= di;\n    atten = 30. * pow (min (di, 1.), 1.3) * pow (max (dot (ltAx, ltDir), 0.), 64.);\n    vn = GrndNf (ro);\n    vn = VaryNf (5. * ro, vn, max (2., 6. - 0.3 * dstGrnd));\n    glw = GrndGlow (ro, vn);\n    col += (1. - glw) * atten * (min (0.5 * Fbmn (31. * ro, vn), 1.) *\n       (0.1 + 0.5 * max (dot (vn, - ltDir), 0.)) +\n       pow (max (dot (reflect (- ltDir, vn), rd), 0.), 64.));\n    col = mix (col, 2. * HsvToRgb (clamp (vec3 (0.06 * glw * glw,\n       1.,  5. * glw), 0., 1.)), 1.2 * glw * glw);\n    dk = clamp (2. * (dstGrnd \/ dstFar - 0.1), 0., 1.);\n    col = mix (col, bgCol, dk * dk);\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid FlyerPM (float t)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 0.2;\n  flPos = TrackPath (t);\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  vel = (fpF - fpB) \/ (2. * dt);\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  ort = vec3 (0.2, atan (vel.z, vel.x) - 0.5 * pi, length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec3 rd, ro;\n  FlyerPM (tCur);\n  ro = flPos;\n  rd = normalize (vec3 (uv, 3.)) * flMat;\n  ltPos = flPos;\n  ltPos.y += 1.;\n  ltAx = vec3 (0., 0., 1.);\n  ltAx.yz = Rot2D (ltAx.yz, 0.3 + 0.3 * sin (tCur));\n  ltAx = ltAx * flMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}