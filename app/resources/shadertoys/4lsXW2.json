{"Shader":{"ver":"0.1","info":{"id":"4lsXW2","date":"1439834273","viewed":1029,"name":"MetaLight Danse Grid 1","username":"aiekick","description":"click on cell to see cell in fullscreen<br\/>the time reset each 30 sec","likes":21,"published":3,"flags":0,"tags":["2d","light","metaball","grdi","danse"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 gridSize = vec2(4.,2.);\/\/grid size (columns, rows)\n    \nvec2 s,g,h,m;\nfloat z,t;\n   \t\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec2 e0(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(a*t);\n\tc.y = a\/t * sin(a*t);\n   \treturn uv-c;\n}\nvec2 e1(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(a\/t);\n\tc.y = a\/t * sin(a*t);\n   \treturn uv-c;\n}\nvec2 e2(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(a+t);\n\tc.y = a\/t * sin(a*t);\n   \treturn uv-c;\n}\nvec2 e3(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(a*t);\n\tc.y = sin(a*t);\n   \treturn uv-c;\n}\nvec2 e4(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = cos(mod(a,t));\n\tc.y = a\/t * sin(mod(a,t));\n   \treturn uv-c;\n}\nvec2 e5(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(a-t);\n\tc.y = sin(a+t);\n   \treturn uv-c;\n}\nvec2 e6(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = 1.\/a * cos(a\/t);\n\tc.y = a\/t * sin(a*t);\n   \treturn uv-c;\n}\nvec2 e7(vec2 uv, float a, float p, float t) \/\/ ok\n{\n    vec2 c;\n    c.x = a\/t * cos(sin(a)*t);\n\tc.y = a\/t * sin(sin(a)*t);\n   \treturn uv-c;\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat EncID(vec2 s, vec2 h, vec2 sz) \/\/ encode id from coord \/\/ s:screenSize \/ h:pixelCoord \/ sz=gridSize\n{\n    float cx = floor(h.x\/(s.x\/sz.x));\n    float cy = floor(h.y\/(s.y\/sz.y));\n    return cy*sz.x+cx;\n}\nvec2 DecID(float id, vec2 sz) \/\/ decode id to coord \/\/ id:cellId \/ sz=gridSize\n{\n    float cx = mod(float(id), sz.x);\n    float cy = (float(id)-cx)\/sz.x;\n    return vec2(cx,cy);\n}\nvec3 getcell(vec2 s, vec2 h, vec2 sz) \/\/ return id \/ uv\n{\n    float cx = floor(h.x\/(s.x\/sz.x));\n    float cy = floor(h.y\/(s.y\/sz.y));\n    \n    float id = cy*sz.x+cx;\n    \n    vec2 size = s\/sz;\n    float ratio = size.x\/size.y;\n    vec2 uv = (2.*(h)-size)\/size.y - vec2(cx*ratio,cy)*2.;\n    uv*=1.5;\n    \n    return vec3(id, uv);\n}\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const int n = 100;\n    z = 3.;\n    t = mod(iGlobalTime, 30.);\n    s = iResolution.xy;\n    h = fragCoord.xy;\n    g = z*(2.*h-s)\/s.y;\n    m = iMouse.xy;\n    \n    vec3 cell = getcell(s,h,gridSize);\n    if(iMouse.z>0.) {cell.x = EncID(s,m,gridSize);cell.yz = g\/3.;}\n    \n    float astep = 3.14159 * 2.0 \/ float(n);\n    vec2 d;\n    float mb = 0.;\n\tfor (int i=0;i<n;i++)\n\t{\n\t\tfloat a = astep * float(i);\n\t\t\t\n\t\tif (cell.x == 0.) d = e0(cell.yz, a, 10., t);\n        else if (cell.x == 1.) d = e1(cell.yz, a, 10., t);\n        else if (cell.x == 2.) d = e2(cell.yz, a, 10., t);\n        else if (cell.x == 3.) d = e3(cell.yz, a, 10., t);\n        else if (cell.x == 4.) d = e4(cell.yz, a, 10., t);\n        else if (cell.x == 5.) d = e5(cell.yz, a, 10., t);\n        else if (cell.x == 6.) d = e6(cell.yz, a, 10., t);\n        else if (cell.x == 7.) d = e7(cell.yz, a, 10., t);\n\n\t\t\n\t\tmb += 0.01\/dot(d,d);\/\/ * normalize(vec3(r,g,0.));\n\t}\n\tmb \/= float (n);\n\n    fragColor.rgb = vec3(mb);\n}","name":"","description":"","type":"image"}]}}