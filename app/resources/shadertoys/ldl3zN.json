{"Shader":{"ver":"0.1","info":{"id":"ldl3zn","date":"1362179912","viewed":4124,"name":"Timewarp","username":"P_Malin","description":"A raymarching shader with a Dali theme. <br\/>Use the mouse to rotate.","likes":66,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ TimeWarp @P_Malin\r\n \r\n#define ENABLE_REFLECTIONS\r\n#define ENABLE_FOG\r\n#define ENABLE_SPECULAR\r\n#define ENABLE_DIRECTIONAL_LIGHT\r\n\/\/#define ENABLE_MONTE_CARLO\r\n\r\nfloat kPI = acos(0.0);\r\nfloat kTwoPI = kPI * 2.0;\r\n\r\n#ifdef ENABLE_MONTE_CARLO\r\nuniform sampler2D backbuffer;\r\nvec4 gPixelRandom;\r\nvec3 gRandomNormal;\r\n \r\nvoid CalcPixelRandom()\r\n{\r\n    \/\/ Nothing special here, just numbers generated by bashing keyboard\r\n    vec4 s1 = sin(iGlobalTime * 3.3422 + fragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;\r\n    vec4 s2 = sin(iGlobalTime * 1.3422 + fragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;\r\n    gPixelRandom = fract(2142.4 + s1 + s2);\r\n    gRandomNormal = normalize( gPixelRandom.xyz - 0.5);\r\n}\r\n\r\nfloat GetTime()\r\n{\r\n\treturn 0.0;\r\n}\r\n#else\r\nfloat GetTime()\r\n{\r\n\treturn iGlobalTime;\r\n}\r\n#endif\r\n \r\nstruct C_Ray\r\n{\r\n    vec3 vOrigin;\r\n    vec3 vDir;\r\n};\r\n \r\nstruct C_HitInfo\r\n{\r\n    vec3 vPos;\r\n    float fDistance;\r\n    vec3 vObjectId;\r\n};\r\n \r\nstruct C_Material\r\n{\r\n    vec3 cAlbedo;\r\n    float fR0;\r\n    float fSmoothness;\r\n    vec2 vParam;\r\n};\r\n \r\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n   \r\n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\r\n   \r\n    return vResult;\r\n}\r\n \r\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n   \r\n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\r\n   \r\n    return vResult;\r\n}\r\n   \r\nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n   \r\n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\r\n   \r\n    return vResult;\r\n}\r\n \r\nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    \/\/if(v1.x < v2.x) return v1; else return v2;\r\n    return mix(v1, v2, step(v2.x, v1.x));\r\n}\r\n \r\nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    return mix(v2, v1, step(v2.x,v1.x));\r\n}\r\n \r\nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    return DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\r\n}\r\n \r\nvec3 DomainRepeatXZGetTile( const in vec3 vPos, const in vec2 vRepeat, out vec2 vTile )\r\n{\r\n    vec3 vResult = vPos;\r\n    vec2 vTilePos = (vPos.xz \/ vRepeat) + 0.5;\r\n    vTile = floor(vTilePos + 1000.0);\r\n    vResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\r\n    return vResult;\r\n}\r\n \r\nvec3 DomainRepeatXZ( const in vec3 vPos, const in vec2 vRepeat )\r\n{\r\n    vec3 vResult = vPos;\r\n    vec2 vTilePos = (vPos.xz \/ vRepeat) + 0.5;\r\n    vResult.xz = (fract(vTilePos) - 0.5) * vRepeat;\r\n    return vResult;\r\n}\r\n \r\nvec3 DomainRepeatY( const in vec3 vPos, const in float fSize )\r\n{\r\n    vec3 vResult = vPos;\r\n    vResult.y = (fract(vPos.y \/ fSize + 0.5) - 0.5) * fSize;\r\n    return vResult;\r\n}\r\n \r\nvec3 DomainRotateSymmetry( const in vec3 vPos, const in float fSteps )\r\n{\r\n    float angle = atan( vPos.x, vPos.z );\r\n \r\n    float fScale = fSteps \/ (kTwoPI);\r\n    float steppedAngle = (floor(angle * fScale + 0.5)) \/ fScale;\r\n \r\n    float s = sin(-steppedAngle);\r\n    float c = cos(-steppedAngle);\r\n \r\n    vec3 vResult = vec3( c * vPos.x + s * vPos.z,\r\n                vPos.y,\r\n                -s * vPos.x + c * vPos.z);\r\n \r\n    return vResult;\r\n}\r\n \r\nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 )\r\n{\r\n    vec2 q = vec2(length(p.xy)-r1,p.z);\r\n    return length(q)-r2;\r\n}\r\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\r\n{\r\n    vec2 q = vec2(length(p.yz)-r1,p.x);\r\n    return length(q)-r2;\r\n}\r\nfloat GetDistanceCylinderY(const in vec3 vPos, const in float r)\r\n{\r\n    return length(vPos.xz) - r;\r\n}\r\nfloat GetDistanceBox( const in vec3 vPos, const in vec3 vSize )\r\n{\r\n    vec3 vDist = (abs(vPos) - vSize);\r\n    return max(vDist.x, max(vDist.y, vDist.z));\r\n}\r\n \r\nfloat GetDistanceRoundedBox( const in vec3 vPos, const in vec3 vSize, float fRadius )\r\n{\r\n    vec3 vClosest = max(min(vPos, vSize), -vSize);\r\n    return length(vClosest - vPos) - fRadius;\r\n}\r\n \r\nfloat GetDistanceWinder( const in vec3 vPos )\r\n{\r\n   float fWinderSize = 0.15;\r\n   float fAngle = atan(vPos.x, vPos.z) + vPos.y * 2.0;\r\n\t\r\n   float fBump = 1.0 + sin(fAngle * 10.0 * kPI) * 0.05;\r\n   return length(vPos + vec3(0.0, -1.0 - 0.2, 0.0)) * fBump - fWinderSize;\t\r\n}\r\n\r\nvec4 GetDistanceClock( const in vec3 vPos )\r\n{\r\n\tconst float fRadius = 1.0;\r\n\tconst float fThickness = 0.1;\r\n\tconst float fInsetRadius = 0.9;\r\n\tconst float fInsetDepth = 0.1;\r\n\tfloat fTorusDist = GetDistanceXYTorus(vPos, 1.0, fThickness);\r\n\t\r\n\tfloat fCylinderDist = length(vPos.xy) - fRadius;\r\n\tfloat fCylinderCap = abs(vPos.z) - fThickness;\r\n\tfCylinderDist = max(fCylinderDist, fCylinderCap);\r\n\tfloat fDist = min(fTorusDist, fCylinderDist);\r\n\t\r\n\tfloat fWinderDist = GetDistanceWinder(vPos);\r\n\tfDist = min(fDist, fWinderDist);\r\n\tvec4 vResult = vec4(fDist, 2.0, 0.0, 0.0);\r\n\t\r\n\tfloat fInsetDist = length(vPos.xy) - fInsetRadius;\r\n\tfloat fInsetCap = abs(vPos.z - fThickness) - fInsetDepth;\r\n\t\r\n\tvec4 vInsetCapDist = vec4(fInsetCap, 3.0, vPos.x, vPos.y);\r\n\tvec4 vInsetDist = vec4(fInsetDist, 2.0, 0.0, 0.0);\r\n\t\r\n\tvInsetDist = DistCombineIntersect(vInsetDist, vInsetCapDist);\r\n\t\r\n\tvResult = DistCombineSubtract(vResult, vInsetDist);\r\n\t\r\n\t\r\n\tfloat fHandSeconds = iGlobalTime;\r\n\t\r\n\tfHandSeconds = floor(fHandSeconds) + (pow(fract(fHandSeconds), 50.0));\r\n\tfloat fHandAngle = -fHandSeconds * kPI * 2.0 \/ 60.0;\r\n\t\r\n\tvec3 vHandDomain = RotateZ(vPos, fHandAngle);\r\n\tfloat fHandHeight = 0.05;\r\n\tvHandDomain.z -= fThickness - fInsetDepth + fHandHeight;\r\n\tfloat fHandDist = length(vHandDomain.xz) - 0.01;\r\n\tfHandDist = max(fHandDist, (abs(vHandDomain.y + 0.4) - 0.4));\r\n\t\r\n\tvec4 vHandDist = vec4(fHandDist, 4.0, 0.0, 0.0);\r\n\t\r\n\tvResult = DistCombineUnion(vResult, vHandDist);\r\n\t\r\n\treturn vResult;\r\n}\r\n \r\nvec3 WarpDomain( const in vec3 vPos )\r\n{\r\n    vec3 vResult = vPos + vec3(0.0, 0.1, 0.1);\r\n\r\n    float fUnbend = clamp(atan(vResult.y, vResult.z), 0.0, kPI * 0.9);\r\n    vResult = RotateX(vResult, -fUnbend);\r\n     \r\n    float fDroopBlend = max(-vResult.y, 0.0);\t\r\n    vResult.y += fDroopBlend * 0.4;\r\n    vResult.z += sin(vResult.x * 4.0  + vResult.y * 6.0 + GetTime()) * fDroopBlend * 0.05;\r\n    return vResult;\r\n}\r\n\r\n\/\/ result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\r\nvec4 GetDistanceScene( const in vec3 vPos )\r\n{         \r\n    vec4 vResult = vec4(10000.0, -1.0, 0.0, 0.0);\r\n                    \r\n    vec3 vClockDomain = WarpDomain(vPos + vec3(0.0, -0.1, -0.45));\r\n    vClockDomain.y += 0.2;\t\r\n    vResult = DistCombineUnion(vResult, GetDistanceClock(vClockDomain));\r\n        \r\n    vec4 vWallDist1 = vec4(vPos.z - 0.2, 1.0, vPos.xy);\r\n    vec4 vWallDist2 = vec4(vPos.y, 1.0, vPos.xz);\r\n    vWallDist1 = DistCombineIntersect(vWallDist1, vWallDist2);\r\n    vResult = DistCombineUnion(vResult, vWallDist1);\r\n             \r\n\t\r\n    vec4 vFloorDist = vec4(vPos.y + 2.3, 5.0, vPos.xz);\r\n    vResult = DistCombineUnion(vResult, vFloorDist);\r\n\t\r\n    return vResult;\r\n}\r\n \r\nvec3 GetWatchFaceColour( const vec2 vUV )\r\n{\r\n        float fRadius = length(vUV);\r\n       \r\n        float fFraction = (atan(vUV.x, -vUV.y) \/ (kPI * 2.0)) + (0.5 \/ 60.0);\r\n               \r\n        float fTickValue = fFraction * 60.0;   \r\n        float fTickIndex = floor(fTickValue);\r\n        float fTickFraction = fract(fTickValue);\r\n               \r\n\tfloat fTickLength = 0.25;       \r\n\tfTickLength += step( fract(fTickIndex \/ 10.0), 0.5 \/ 10.0 ) * 0.1;\r\n\tfTickLength += step( fract(fTickIndex \/ 5.0), 0.5 \/ 5.0 ) * 0.05;\r\n\t\r\n\tfloat fTickWidth = 0.2;\r\n\tfloat fInTickSegment = step(abs(fTickFraction - 0.5), fTickWidth);\r\n\t\r\n\tfloat fInTickRadiusOuter = step(fRadius, 0.8);\r\n\tfloat fInTickRadiusInner = step(1.0 - fTickLength, fRadius);\r\n\t\r\n\t\/\/ 1.0 if not one of these...\r\n\tfloat fBlend = 1.0 - fInTickSegment * fInTickRadiusOuter * fInTickRadiusInner;\r\n\t\r\n\t\/\/ central dot\r\n\tfBlend = fBlend * step(0.025, fRadius);                                 \r\n\t\r\n\treturn mix(vec3(0.05), vec3(0.95), fBlend);\r\n}\r\n \r\nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos, const in vec3 vNormal )\r\n{\r\n    C_Material mat;\r\n             \r\n    if(vObjId.x < 1.5)\r\n    {\r\n        \/\/ wall\r\n        mat.fR0 = 0.2;\r\n\t\tvec3 cTextureSample = texture2D(iChannel0, vObjId.yz).rgb;\r\n        mat.fSmoothness = cTextureSample.r * cTextureSample.b;\r\n        mat.cAlbedo = cTextureSample * cTextureSample;\r\n    }\r\n    else\r\n    if(vObjId.x < 2.5)\r\n    {\r\n        \/\/ silver\r\n        mat.fR0 = 0.95;\r\n        mat.fSmoothness = 0.9;\r\n        mat.cAlbedo = vec3(0.9, 0.9, 0.91);\r\n    }\r\n    else\r\n    if(vObjId.x < 3.5)\r\n    {\r\n\t    \/\/ clock face\r\n            mat.fR0 = 0.01;\r\n            mat.fSmoothness = 0.9;\r\n            mat.cAlbedo = GetWatchFaceColour( vObjId.yz );\r\n    }\r\n    else\r\n    if(vObjId.x < 4.5)\r\n    {\r\n        \/\/ hand\r\n        mat.fR0 = 0.01;\r\n        mat.fSmoothness = 0.9;\r\n        mat.cAlbedo = vec3(0.95, 0.05, 0.05);\r\n    }\r\n    else\r\n    if(vObjId.x < 5.5)\r\n    {\r\n        \/\/ floor\r\n        mat.fR0 = 0.01;\r\n\t\tvec3 cTextureSample = texture2D(iChannel1, vObjId.yz).rgb;\r\n        mat.cAlbedo = cTextureSample * cTextureSample;\r\n        mat.fSmoothness = cTextureSample.r * cTextureSample.g;\r\n    }\r\n \r\n    return mat;\r\n}\r\nvec3 GetLightDirection()\r\n{\r\n    vec3 vLightDir = vec3(1.0, 2.0, 1.0);\r\n\r\n    #ifdef ENABLE_MONTE_CARLO       \r\n    vLightDir += gRandomNormal * 0.01;\r\n    #endif\r\n    return normalize(vLightDir);\r\n}\r\nvec3 GetLightCol()\r\n{\r\n    return vec3(1.0, 0.7, 0.5) * 10.0;\r\n}\r\n\r\nvec3 GetSkyGradient( const in vec3 vDir )\r\n{\r\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\r\n\treturn mix(vec3(0.0, 0.0, 0.0), vec3(0.25, 0.5, 1.0) * 4.0, fBlend);\r\n}\r\n \r\nvec3 GetAmbientLight(const in vec3 vNormal)\r\n{\r\n    return GetSkyGradient(vNormal);\r\n}\r\n \r\n#define kFogDensity 0.075\r\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\r\n{\r\n    #ifdef ENABLE_FOG\r\n    \/\/ fog\r\n    float fFogAmount = exp(intersection.fDistance * -kFogDensity);\r\n    vec3 cFog = GetSkyGradient(ray.vDir);\r\n    col = mix(cFog, col, fFogAmount);\r\n    #endif\r\n}\r\n\r\nvec3 GetSceneNormal( const in vec3 vPos )\r\n{\r\n    \/\/ tetrahedron normal\r\n    float fDelta = 0.01;\r\n \r\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\r\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\r\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\r\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\r\n \r\n    float f1 = GetDistanceScene( vPos + vOffset1 ).x;\r\n    float f2 = GetDistanceScene( vPos + vOffset2 ).x;\r\n    float f3 = GetDistanceScene( vPos + vOffset3 ).x;\r\n    float f4 = GetDistanceScene( vPos + vOffset4 ).x;\r\n \r\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\r\n \r\n    return normalize( vNormal );\r\n}\r\n \r\n#define kRaymarchEpsilon 0.01\r\n#define kRaymarchMatIter 20\r\n#define kRaymarchStartDistance 0.01\r\n\/\/ This is an excellent resource on ray marching -> http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\r\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\r\n{       \r\n    result.fDistance = kRaymarchStartDistance;\r\n    result.vObjectId.x = 0.0;\r\n                             \r\n    for(int i=0;i<=kRaymarchMatIter;i++)             \r\n    {\r\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\r\n        vec4 vSceneDist = GetDistanceScene( result.vPos );\r\n        result.vObjectId = vSceneDist.yzw;\r\n \r\n        \/\/ abs allows backward stepping - should only be necessary for non uniform distance functions\r\n        if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\r\n        {\r\n            break;\r\n        }                       \r\n \r\n        result.fDistance = result.fDistance + vSceneDist.x;   \r\n    }\r\n     \r\n      \r\n    if(result.fDistance >= fMaxDist)\r\n    {\r\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\r\n        result.vObjectId.x = 0.0;\r\n        result.fDistance = 1000.0;\r\n    }\r\n}\r\n \r\nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\r\n{\r\n    C_Ray shadowRay;\r\n    shadowRay.vDir = vLightDir;\r\n    shadowRay.vOrigin = vPos;\r\n \r\n    C_HitInfo shadowIntersect;\r\n    Raymarch(shadowRay, shadowIntersect, fLightDistance, 32);\r\n                                                                                                       \r\n    return step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );         \r\n}\r\n \r\n\/\/ http:\/\/en.wikipedia.org\/wiki\/Schlick's_approximation\r\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\r\n{\r\n    float fDot = dot(vNormal, -vView);\r\n    fDot = min(max((1.0 - fDot), 0.0), 1.0);\r\n    float fDot2 = fDot * fDot;\r\n    float fDot5 = fDot2 * fDot2 * fDot;\r\n    return fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\r\n}\r\n \r\nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\r\n{\r\n    return max(0.0, dot(vLightDir, vNormal));\r\n}\r\n \r\nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\r\n{         \r\n    vec3 vHalf = normalize(vLightDir - ray.vDir);\r\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\r\n \r\n    float fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\r\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\r\n \r\n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\r\n}\r\n \r\n\/\/ use distance field to evaluate ambient occlusion\r\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\r\n{\r\n    vec3 vPos = intersection.vPos;\r\n     \r\n    float fAmbientOcclusion = 1.0;\r\n     \r\n    float fDist = 0.0;\r\n    for(int i=0; i<=5; i++)\r\n    {\r\n        fDist += 0.1;\r\n \r\n        vec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\r\n \r\n        fAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 \/ fDist );                                 \r\n    }\r\n     \r\n    return fAmbientOcclusion;\r\n}\r\n \r\nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\r\n{\r\n    vec3 cScene ;\r\n   \r\n    vec3 vSpecularReflection = vec3(0.0);\r\n    vec3 vDiffuseReflection = vec3(0.0);\r\n   \r\n    float fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\r\n    vec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\r\n   \r\n    vDiffuseReflection += vAmbientLight;\r\n   \r\n    vSpecularReflection += cReflection * fAmbientOcclusion;\r\n             \r\n    #ifdef ENABLE_DIRECTIONAL_LIGHT\r\n    vec3 vLightDir = GetLightDirection();\r\n      \r\n    float fShadowBias = 0.05;           \r\n    float fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, 10.0 );\r\n    vec3 vIncidentLight = GetLightCol() * fShadowFactor;\r\n   \r\n    vDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                               \r\n    vSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\r\n    #endif \/\/ ENABLE_DIRECTIONAL_LIGHT\r\n   \r\n    vDiffuseReflection *= material.cAlbedo;             \r\n    \r\n    #ifdef ENABLE_SPECULAR\r\n    float fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\r\n    cScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\r\n    #else\r\n    cScene = vDiffuseReflection;\r\n    #endif\r\n   \r\n    return cScene;\r\n}\r\n \r\nvec3 GetSceneColourSimple( const in C_Ray ray )\r\n{\r\n    C_HitInfo intersection;\r\n    Raymarch(ray, intersection, 10.0, 32);\r\n                       \r\n    vec3 cScene;\r\n \r\n    if(intersection.vObjectId.x < 0.5)\r\n    {\r\n        cScene = GetSkyGradient(ray.vDir);\r\n    }\r\n    else\r\n    {\r\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\r\n        C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos, vNormal);\r\n \r\n        \/\/ use sky gradient instead of reflection\r\n        vec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\r\n \r\n        \/\/ apply lighting\r\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\r\n    }\r\n \r\n    ApplyAtmosphere(cScene, ray, intersection);\r\n \r\n    return cScene;\r\n}\r\n \r\nvec3 GetSceneColour( const in C_Ray ray )\r\n{                                                         \r\n    C_HitInfo intersection;\r\n    Raymarch(ray, intersection, 30.0, 256);\r\n               \r\n    vec3 cScene;\r\n     \r\n    if(intersection.vObjectId.x < 0.5)\r\n    {\r\n        cScene = GetSkyGradient(ray.vDir);\r\n    }\r\n    else\r\n    {\r\n        vec3 vNormal = GetSceneNormal(intersection.vPos);\r\n        C_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos, vNormal);\r\n \r\n        #ifdef ENABLE_MONTE_CARLO\r\n        vNormal = normalize(vNormal + gRandomNormal \/ (5.0 + material.fSmoothness * 200.0));\r\n        #endif\r\n \r\n        vec3 cReflection;\r\n        #ifdef ENABLE_REFLECTIONS   \r\n        {\r\n            \/\/ get colour from reflected ray\r\n            float fSepration = 0.05;\r\n            C_Ray reflectRay;\r\n            reflectRay.vDir = reflect(ray.vDir, vNormal);\r\n            reflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\r\n                                                                 \r\n            cReflection = GetSceneColourSimple(reflectRay);                                                                       \r\n        }\r\n        #else\r\n        cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                             \r\n        #endif\r\n        \/\/ apply lighting\r\n        cScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\r\n    }\r\n     \r\n    ApplyAtmosphere(cScene, ray, intersection);\r\n     \r\n    return cScene;\r\n}\r\n \r\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\r\n{\r\n    vec2 vPixelCoord = fragCoord.xy;\r\n    #ifdef ENABLE_MONTE_CARLO\r\n    vPixelCoord += gPixelRandom.zw;\r\n    #endif\r\n    vec2 vUV = ( vPixelCoord \/ iResolution.xy );\r\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\r\n \r\n    vViewCoord *= 0.75;\r\n     \r\n    float fRatio = iResolution.x \/ iResolution.y;\r\n \r\n    vViewCoord.y \/= fRatio;                         \r\n \r\n    ray.vOrigin = vPos;\r\n \r\n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\r\n    vec3 vUp = cross(vRight, vForwards);\r\n       \r\n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);       \r\n}\r\n \r\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\r\n{\r\n    vec3 vForwards = normalize(vInterest - vPos);\r\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\r\n \r\n    GetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\r\n}\r\n \r\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\r\n{\r\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\r\n}\r\n \r\nvec3 Gamma( const in vec3 cCol )\r\n{\r\n    return sqrt(cCol);\r\n}\r\n \r\nvec3 InvGamma( const in vec3 cCol )\r\n{\r\n    return cCol * cCol;\r\n}\r\n \r\n \r\nvec3 Tonemap( const in vec3 cCol )\r\n{\r\n    \r\n    vec3 vResult = 1.0 - exp2(-cCol);\r\n \r\n    return Gamma(vResult);\r\n}\r\n \r\nvec3 InvTonemap( const in vec3 cCol )\r\n{\r\n    vec3 vResult = cCol;\r\n    vResult = clamp(vResult, 0.01, 0.99);\r\n    vResult = InvGamma(vResult);\r\n    return - log2(1.0 - vResult);\r\n}\r\n \r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    #ifdef ENABLE_MONTE_CARLO           \r\n    CalcPixelRandom();\r\n    #endif\r\n     \r\n    C_Ray ray;\r\n     \r\n    const float fCamreaHeadingMin = -0.8;\r\n    const float fCamreaHeadingMax = 1.8;\r\n    const float fCamreaElevationMin = 0.1;\r\n    const float fCamreaElevationMax = 0.7;\r\n    const float fCamreaDistMin = 3.0;\r\n    const float fCamreaDistMax = 2.0;\r\n\r\n    vec2 vMouse = iMouse.xy \/ iResolution.xy;\r\n\t\r\n\t\/\/ If we have never moved the mouse\r\n\tif(iMouse.x <= 0.0)\r\n\t{\r\n\t\tvMouse.xy = vec2(0.0, 1.0);\r\n\t}\r\n\t\t\t\r\n\t\r\n    float fHeading = mix(fCamreaHeadingMin, fCamreaHeadingMax, vMouse.x);\r\n    float fElevation = mix(fCamreaElevationMin, fCamreaElevationMax, vMouse.y);\r\n    float fCameraDist = mix(fCamreaDistMax, fCamreaDistMin, vMouse.y);\r\n   \r\n    vec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCameraDist;\r\n   \r\n    #ifdef ENABLE_MONTE_CARLO           \r\n    float fDepthOfField = 0.025;\r\n    vCameraPos += gRandomNormal * fDepthOfField;\r\n    #endif\r\n     \r\n    GetCameraRayLookat( vCameraPos, vec3(0.0, -0.5, 0.2), fragCoord, ray);\r\n     \r\n    vec3 cScene = GetSceneColour( ray ); \r\n      \r\n    float fExposure = 0.4;\r\n    cScene = cScene * fExposure;\r\n\r\n\t\/\/ vignette\r\n\tvec2 vUV = ((fragCoord.xy \/ iResolution.xy) - 0.5) * 2.0;\r\n\tfloat fDist = dot(vUV, vUV);\r\n\tfDist = fDist * fDist;\r\n\tfloat fAmount = 1.0 \/ (fDist * 5.0 + 1.0);\r\n\tcScene = cScene * fAmount;\r\n\r\n    #ifdef ENABLE_MONTE_CARLO                             \r\n    vec3 cPrev = texture2D(backbuffer, vUV).xyz;\r\n    \/\/ add noise to pixel value (helps values converge)\r\n    cPrev += (gPixelRandom.xyz - 0.5) * (1.0 \/ 255.0);\r\n    cPrev = InvTonemap(cPrev);\r\n    \/\/ converge speed\r\n    \/\/float fBlend = 0.1;\r\n\tfloat fBlend = 1.0;\r\n    vec3 cFinal = mix(cPrev, cScene, fBlend);\r\n    #else\r\n    vec3 cFinal = cScene;\r\n    #endif\r\n   \r\n    cFinal = Tonemap(cFinal);\r\n         \r\n    float fAlpha = 1.0;\r\n     \r\n    fragColor = vec4( cFinal, fAlpha );\r\n}\r\n ","name":"","description":"","type":"image"}]}}