{"Shader":{"ver":"0.1","info":{"id":"Xsc3Df","date":"1452416938","viewed":123,"name":"Phoney Reflections","username":"dr2","description":"How many Androids (use the mouse)?","likes":7,"published":3,"flags":0,"tags":["raymarching","reflection","android"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Phoney Reflections\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrShCylDf (vec3 p, float rIn, float rEx, float h)\n{\n  float s;\n  s = length (p.xy);\n  return max (max (s - rEx, rIn - s), abs (p.z) - h);\n}\n\nfloat PrERCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z - 0.5 * h) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nmat3 RMatFromEuAng (vec3 eu)\n{\n  vec4 q, p1, p2, p3;\n  float a1, a2, a3, c1, s1, p4w;\n  a1 = 0.5 * eu.y;\n  a2 = 0.5 * (eu.x - eu.z);\n  a3 = 0.5 * (eu.x + eu.z);\n  s1 = sin (a1);\n  c1 = cos (a1);\n  q = vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3), c1 * cos (a3));\n  p1 = 2. * q.x * q;\n  p2.yzw = 2. * q.y * q.yzw;\n  p3.zw  = 2. * q.z * q.zw;\n  p4w    = 2. * q.w * q.w - 1.;\n  return mat3 (p1.x + p4w,  p1.y - p3.w, p1.z + p2.w,\n               p1.y + p3.w, p2.y + p4w,  p2.z - p1.w,\n               p1.z - p2.w, p2.z + p1.w, p3.z + p4w);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nmat3 objMat;\nvec3 sunDirMv, qHit, ltDir, phSize, bxSize;\nvec2 scrnSize;\nfloat dstFar, dstFarMv, tCur, rAngH, rAngL, rAngA, gDisp;\nint idObj, idObjMv;\nbool walk, hOr, vOr;\nconst int idFrame = 1, idFloor = 2, idCeil = 3, idWall = 4, idMir = 5,\n   idPhScrn = 10, idPhFace = 11, idRing = 12, idLens = 13, idBut = 14,\n   idSock = 15;\n\nvec3 BgColMv (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDirMv), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    f = Fbm2 (0.05 * (ro.xz + rd.xz * (50. - ro.y) \/ rd.y));\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    sd = - ro.y \/ rd.y;\n    col = mix (vec3 (0.6, 0.5, 0.3),\n       0.9 * (vec3 (0.1, 0.2, 0.4) + 0.2) + 0.1, pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nfloat ObjDfMv (vec3 p)\n{\n  vec3 q, pp;\n  vec2 ip;\n  float dMin, d, bf, hGap, bFac, ah;\n  hGap = 2.5;\n  bf = PrBox2Df (p.xz, vec2 (7. * hGap));\n  pp = p;\n  ip = floor ((pp.xz + hGap) \/ (2. * hGap));\n  pp.xz = pp.xz - 2. * hGap * ip;\n  bFac = (ip.x == 0. && ip.y == 0.) ? 1.6 : 1.;\n  ah = rAngH * (walk ? sign (1.1 - bFac) : - step (1.1, bFac));\n  dMin = dstFarMv;\n  q = pp;\n  q.y -= 1.2;\n  d = max (PrSphDf (q, 0.85), - q.y);\n  q = pp;\n  q.y -= 0.2;\n  d = min (d, PrERCylDf (q.xzy, 0.9, 0.28, 0.7));\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  q.x = abs (q.x) - 0.4;\n  q.y -= 1.9;\n  q.xy = Rot2D (q.xy, 0.2 * pi);\n  d = min (d, PrERCylDf (q.xzy, 0.06, 0.04, 0.4 * (2. * bFac - 1.)));\n  q = pp;\n  q.x = abs (q.x) - 1.05;\n  q.y -= 1.1;\n  q.yz = Rot2D (q.yz, rAngA * (walk ? sign (pp.x) : 1.));\n  q.y -= -0.9;\n  d = min (d, PrERCylDf (q.xzy, 0.2, 0.15, 0.6));\n  q = pp;\n  q.x = abs (q.x) - 0.4;\n  q.yz = Rot2D (q.yz, - rAngL * sign (pp.x));\n  q.y -= -0.8;\n  d = min (d, PrERCylDf (q.xzy, 0.25, 0.15, 0.55));\n  d = max (d, bf);\n  if (d < dMin) { dMin = d;  idObjMv = 1; }\n  q = pp;\n  q.xz = Rot2D (q.xz, ah);\n  q.x = abs (q.x) - 0.4;\n  q -= vec3 (0., 1.6 + 0.3 * (bFac - 1.), 0.7 - 0.3 * (bFac - 1.));\n  d = PrSphDf (q, 0.15 * bFac);\n  d = max (d, bf);\n  if (d < dMin) { dMin = d;  idObjMv = 2; }\n  d = p.y + 1.;\n  if (d < dMin) { dMin = d;  idObjMv = 0;  qHit = p; }\n  return dMin;\n}\n\nfloat ObjRayMv (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDfMv (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFarMv) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNfMv (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDfMv (p + e.xxx), ObjDfMv (p + e.xyy),\n     ObjDfMv (p + e.yxy), ObjDfMv (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ChqPat (vec3 p, float dHit)\n{\n  vec2 q, iq;\n  float f, s;\n  p.z += gDisp;\n  q = p.xz + vec2 (0.5, 0.25);\n  iq = floor (q);\n  s = 0.5 + 0.5 * Noisefv2 (q * 107.);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = smoothstep (0., 0.02, abs (fract (q + 0.5) - 0.5));\n  f = dHit \/ dstFarMv;\n  return s * (1. - 0.9 * exp (-2. * f * f) * (1. - q.x * q.y));\n}\n\nvec3 ObjColMv (vec3 rd, vec3 vn, float dHit)\n{\n  vec3 col;\n  if (idObjMv == 1) col = vec3 (0.65, 0.8, 0.2);\n  else if (idObjMv == 2) col = vec3 (0.8, 0.8, 0.);\n  else col = mix (vec3 (0.4, 0.3, 0.2), vec3 (0.6, 0.5, 0.4),\n     (0.5 + 0.5 * ChqPat (qHit \/ 5., dHit)));\n  return col * (0.3 + 0.7 * max (dot (vn, sunDirMv), 0.)) +\n     0.3 * pow (max (0., dot (sunDirMv, reflect (rd, vn))), 64.);\n}\n\nfloat ObjSShadowMv (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 15; j ++) {\n    h = ObjDfMv (ro + rd * d);\n    sh = min (sh, 10. * h \/ d);\n    d += 0.2;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 TrackPathMv (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[5], rPath, a, r, tC, tL, tWf, tWb;\n  bool rotStep;\n  rPath = 28.;\n  tC = pi * rPath \/ 8.;\n  tL = 2. * rPath \/ 5.;\n  tWf = 4.;\n  tWb = 2.;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tWf;\n  ti[2] = ti[1] + tL;\n  ti[3] = ti[2] + tWb;\n  ti[4] = ti[3] + tC;\n  p.y = 1.;\n  t = mod (t, ti[4]);\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    tr.y = rPath;\n  } else if (t < ti[2]) {\n    tr.y = rPath - 2. * rPath * (t - ti[1]) \/ (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    tr.y = - rPath;\n  } else {\n    rotStep = true;\n    a = 1.5 + (t - ti[3]) \/ (ti[4] - ti[3]);\n    r = rPath;\n  }\n  if (rotStep) {\n    a *= pi;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    p.xz = tr;\n  }\n  p.xz -= 2.5;\n  return p;\n}\n\nvec3 ShowSceneMv (vec3 ro, vec3 rd)\n{\n  vec3 vn, col, c;\n  float dstHit, refl;\n  int idObjT;\n  dstHit = ObjRayMv (ro, rd);\n  if (dstHit < dstFarMv) {\n    ro += rd * dstHit;\n    idObjT = idObjMv;\n    vn = ObjNfMv (ro);\n    col = ObjColMv (rd, vn, dstHit);\n    idObjMv = idObjT;\n    if (idObjMv > 0) {\n      rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      refl = 0.2 + 0.3 * pow (1. - dot (vn, rd), 4.);\n      dstHit = ObjRayMv (ro, rd);\n      if (dstHit < dstFarMv) {\n        ro += rd * dstHit;\n        c = ObjColMv (rd, ObjNfMv (ro), dstHit);\n      } else {\n        c = BgColMv (ro, rd);\n      }\n      col = mix (col, c, refl);\n    }\n    col *= (0.8 + 0.2 * ObjSShadowMv (ro, sunDirMv));\n  } else {\n    col = BgColMv (ro, rd);\n  }\n  return col;\n}\n\nvec3 ScrnCol (vec2 w)\n{\n  mat3 vuMat;\n  vec3 ro, rd, vd, u, col;\n  float f;\n  bool isMv;\n  isMv = true;\n  if (hOr) {\n    w = w.yx;\n    w.x *= -1.;\n    w \/= scrnSize.y;\n  } else {\n    w \/= scrnSize.x;\n    if (abs (w.y) > scrnSize.x \/ scrnSize.y) isMv = false;\n  }\n  if (! vOr) w *= -1.;\n  if (isMv) {\n    ro = TrackPathMv (tCur);\n    vd = normalize (vec3 (0., 2., 0.) - ro);\n    u = - vd.y * vd;\n    f = 1. \/ sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    rd = vuMat * normalize (vec3 (w, 1.));\n    col = ShowSceneMv (ro, rd);\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid SetState (vec3 sv)\n{\n  float tCyc, wkSpd;\n  wkSpd = 0.7;\n  tCyc = mod (wkSpd * tCur, 7.);\n  if (tCyc < 4.) {\n    walk = true;\n    tCyc = mod (tCyc, 1.);\n    gDisp = mod (wkSpd * tCur, 1.);\n    rAngH = -0.7 * sin (2. * pi * tCyc);\n    rAngA = 1.1 * sin (2. * pi * tCyc);\n    rAngL = 0.6 * sin (2. * pi * tCyc);\n  } else {\n    walk = false;\n    tCyc = mod (tCyc, 1.);\n    gDisp = 0.;\n    rAngH = 0.4 * sin (2. * pi * tCyc);\n    rAngA = 2. * pi * (0.5 - abs (tCyc - 0.5)); \n    rAngL = 0.;\n  }\n  sunDirMv = normalize (vec3 (1., 2., 1.));\n  dstFarMv = 150.;\n  if (abs (sv.y) > 4. * max (abs (sv.x), abs (sv.z))) {\n    hOr = false;\n    vOr = true;\n  } else {\n    hOr = (abs (sv.z) < abs (sv.x));\n    vOr = (hOr ? (sv.x >= 0.) : (sv.z >= 0.));\n  }\n  phSize = vec3 (0.85, 0.015, 1.55);\n  scrnSize = phSize.xz - vec2 (0.05, 0.2);\n  bxSize = vec3 (3.6, 3.8, 3.6);\n}\n\nfloat PhoneDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d;\n  p = objMat * p;\n  q = p;\n  d = min (PrCylDf (q - vec3 (0.5, 0., 1.) * phSize, phSize.y, 0.05 * phSize.z),\n     PrCylDf (q - vec3 (0., 0., -1.) * phSize, 1.2 * phSize.y, 0.05 * phSize.z));\n  d = max (PrRoundBoxDf (q, phSize, 0.03), - d); \n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idPhFace; }\n  q = p;\n  q.yz -= vec2 (- 2.3, 0.8) * phSize.yz;\n  d = PrShCylDf (q.xzy, 0.1 * phSize.x, 0.12 * phSize.x, 2.3 * phSize.y);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idRing; }\n  d = PrCylDf (q.xzy, 0.1 * phSize.x, 1.5 * phSize.y);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idLens; }\n  q = p;\n  q.yz -= vec2 (- 1.8, 0.75) * phSize.yz;\n  q.x = abs (q.x) - 0.3 * phSize.x;\n  d = PrShCylDf (q.xzy, 0.04 * phSize.x, 0.05 * phSize.x, 1.8 * phSize.y);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idRing; }\n  q = p;\n  q.yz -= vec2 (- 2., 0.45) * phSize.yz;\n  q.z = abs (q.z) - 0.09 * phSize.z;\n  d = PrRoundBoxDf (q, vec3 (0.16, 0.05, 0.06) * phSize, 0.03);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idBut; }\n  q = p;\n  d = min (PrCylDf (q - vec3 (0.5, 0., 0.97) * phSize, phSize.y, 0.05 * phSize.z),\n     PrCylDf (q - vec3 (0., 0., -0.97) * phSize, 1.2 * phSize.y, 0.05 * phSize.z));\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idSock; }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, bl, bt;\n  bt = 0.06;\n  dMin = dstFar;\n  p.y -= 3.6;\n  q = p;\n  q = abs (q) - bxSize - bt;\n  d = min (PrBox2Df (q.xz, vec2 (bt)), \n     min (PrBox2Df (q.yz, vec2 (bt)), PrBox2Df (q.yx, vec2 (bt))));\n  if (d < dMin) { dMin = d;  idObj = idFrame;  qHit = q; }\n  q = p;\n  q.y += bxSize.y - 0.25 * bt;\n  d = PrBoxDf (q, vec3 (bxSize.x + bt, 0.25 * bt, bxSize.z + bt));\n  if (d < dMin) { dMin = d;  idObj = idFloor;  qHit = q; }\n  q = p;\n  q.y -=  bxSize.y - 0.05 * bt;\n  d = PrBoxDf (q, vec3 (bxSize.x, 0.05 * bt, bxSize.z));\n  if (d < dMin) { dMin = d;  idObj = idCeil;  qHit = q; }\n  q = p;\n  d = - PrBox2Df (q.xz, bxSize.xz + 1.5 * bt);\n  if (d < dMin) { dMin = d;  idObj = idMir;  qHit = q; }\n  dMin = PhoneDf (p, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn, vnn, vltDir, col, qd;\n  vec2 uu;\n  float dstHit, reflFac, spec, nRefl;\n  int idObjT;\n  bool isFBut;\n  const int maxRefl = 7;\n  dstFar = 15.;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  nRefl = 0.;\n  for (int nf = 0; nf < maxRefl; nf ++) {\n    if (idObj == idMir) {\n      ro += rd * dstHit;\n      qd = abs (qHit) \/ bxSize;\n      uu = vec2 (min (qd.x, qd.z), qd.y);\n      uu *= uu;\n      uu *= uu;\n      if (dot (uu, uu) > 0.8) {\n        idObj = idWall;\n\tbreak;\n      }\n      rd = reflect (rd, ObjNf (ro));\n      ro += 0.002 * rd;\n      ++ nRefl;\n      idObj = -1;\n      dstHit = ObjRay (ro, rd);\n    } else break;\n  }\n  if (idObj < 0 || idObj == idMir) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idFloor) vn = VaryNf (10. * vec3 (5., 1., 1.) * qHit, vn, 0.4);\n    spec = 0.3;\n    if (idObj == idPhFace) {\n      vnn = objMat * vn;\n      if (vnn.y > 0.999) {\n        if (abs (qHit.x) < scrnSize.x && abs (qHit.z) < scrnSize.y) {\n          col = ScrnCol (qHit.xz);\n          idObj = idPhScrn;\n        } else {\n\t  uu = vec2 (abs (qHit.x) - 0.1 * phSize.x,\n\t      abs (qHit.z + 0.93 * phSize.z) - 0.03 * phSize.z);\n\t  isFBut = (max (uu.x, uu.y) < 0.);\n\t  uu = abs (uu);\n\t  isFBut = isFBut && (min (uu.x, uu.y) < 0.015 * phSize.x);\n\t  col = isFBut ? vec3 (0.4, 0.4, 0.3) : vec3 (0.05);\n\t }\n      } else if (vnn.y < -0.999) {\n        if (abs (abs (qHit.x) - 0.02 * phSize.x) < 0.007 * phSize.x) {\n          col = vec3 (0.7, 0., 0.) * SmoothBump (0.15, 0.85, 0.1,\n             mod (30. * qHit.z \/ phSize.z, 1.));\n        } else {\n          vnn = VaryNf (31. * qHit, vec3 (0., -1., 0.), 0.5);\n          vn = vnn * objMat;\n          col = vec3 (0.2, 0.05, 0.);\n        }\n      } else col = vec3 (0.3, 0.1, 0.);\n    } else if (idObj == idRing) col = vec3 (0.6, 0.65, 0.6);\n    else if (idObj == idLens) col = vec3 (0.1);\n    else if (idObj == idBut) col = vec3 (0.65, 0.6, 0.6);\n    else if (idObj == idSock) col = vec3 (0.1);\n    else if (idObj == idFrame || idObj == idWall) {\n      col = vec3 (0.3, 0.2, 0.1);\n      spec = 0.2;\n    } else if (idObj == idFloor) {\n      col = vec3 (0., 0.45, 0.3);\n      spec = 0.1;\n    } else if (idObj == idCeil) {\n      col = vec3 (1., 1., 0.8) * (1. - 0.5 * min (1.,\n         length (pow (abs (qHit.xz) \/ 3.6, vec2 (8.)))));\n    }\n    if (idObj != idPhScrn && idObj != idCeil) {\n      vltDir = vec3 (0., 1., 0.);\n      col = col * (0.2 + 0.6 * max (dot (vn, ltDir), 0.) +\n         0.8 * max (dot (vn, vltDir), 0.)) +\n         spec * (0.6 * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.) +\n\t 0.8 * pow (max (0., dot (vltDir, reflect (rd, vn))), 64.));\n    }\n  } else col = vec3 (0., 0.3, 0.4);\n  col = clamp (col * pow (0.85, nRefl), 0., 1.);\n  if (idObj != idPhScrn) col = pow (col, vec3 (0.65));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec4 mPtr;\n  vec3 ro, rd, eu;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  az = -0.1 * tCur;\n  el = 0.;\n  if (mPtr.z > 0.) {\n    az += 1.5 * pi * mPtr.x;\n    el += pi * mPtr.y;\n  }\n  el = clamp (el, -0.4 * pi, 0.4 * pi);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  eu = -2. * pi * mod (vec3 (0.27, 0.21, 0.43) * 0.3 * tCur, 1.);\n  objMat = RMatFromEuAng (eu);\n  SetState (objMat[1]);\n  rd = normalize (vec3 (uv, 1.6)) * vuMat;\n  ro = vec3 (0., 0., - bxSize.x) * vuMat;\n  ro.y += 0.9 * bxSize.y;\n  ltDir = normalize (vec3 (0.5, 1., -2.)) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}