{"Shader":{"ver":"0.1","info":{"id":"Mtl3z4","date":"1419440496","viewed":953,"name":"Seabirds at Sunset","username":"dr2","description":"Searching for dinner.","likes":31,"published":3,"flags":0,"tags":["raymarching","birds","atmospherics"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Seabirds at Sunset\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Clouds and sky colors borrowed from nimitz's \"PostCard\".\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nint idObj, idObjGrp;\nmat3 bdMat, birdMat[2];\nvec3 bdPos, birdPos[2], fltBox, qHit, sunDir, waterDisp, cloudDisp;\nfloat tCur, birdVel, birdLen, legAng;\nconst float dstFar = 100.;\nconst int idWing = 21, idBdy = 22, idEye = 23, idBk = 24, idLeg = 25;\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.03;\n  p += waterDisp;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x) + 20. * waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  float ht = WaterHt (p);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nfloat FbmS (vec2 p)\n{\n  float a = 1.;\n  float v = 0.;\n  for (int i = 0; i < 5; i ++) {\n    v += a * (sin (6. * Noisefv2 (p)) + 1.);\n    a *= 0.5;\n    p *= 2.;\n    p *= mat2 (0.8, -0.6, 0.6, 0.8);\n  }\n  return v;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col, skyCol, sunCol, p;\n  float ds, fd, att, attSum, d, dDotS, skyHt;\n  skyHt = 200.;\n  p = ro + rd * (skyHt - ro.y) \/ rd.y;\n  ds = 0.1 * sqrt (distance (ro, p));\n  fd = 0.001 \/ (smoothstep (0., 10., ds) + 0.1);\n  p.xz *= fd;\n  p.xz += cloudDisp.xz;\n  att = FbmS (p.xz);\n  attSum = att;\n  d = fd;\n  ds *= fd;\n  for (int i = 0; i < 4; i ++) {\n    attSum += FbmS (p.xz + d * sunDir.xz);\n    d += ds;\n  }\n  attSum *= 0.27;\n  att *= 0.27;\n  dDotS = clamp (dot (sunDir, rd), 0., 1.);\n  skyCol = mix (vec3 (0.7, 1., 1.), vec3 (1., 0.4, 0.1), 0.25 + 0.75 * dDotS);\n  sunCol = vec3 (1., 0.8, 0.7) * pow (dDotS, 1024.) +\n     vec3 (1., 0.4, 0.2) * pow (dDotS, 256.);\n  col = mix (vec3 (0.5, 0.75, 1.), skyCol, exp (-2. * (3. - dDotS) *\n     max (rd.y - 0.1, 0.))) + 0.3 * sunCol;\n  attSum = 1. - smoothstep (1., 9., attSum);\n  col = mix (vec3 (0.4, 0., 0.2), mix (col, vec3 (0.2), att), attSum) +\n     vec3 (1., 0.4, 0.) * pow (attSum * att, 3.) * (pow (dDotS, 10.) + 0.5);\n  return col;\n}\n\nfloat AngQnt (float a, float s1, float s2, float nr)\n{\n  return (s1 + floor (s2 + a * (nr \/ (2. * pi)))) * (2. * pi \/ nr);\n}\n\nfloat BdWingDf (vec3 p, float dHit)\n{\n  vec3 q, qh;\n  float d, dd, a, wr;\n  float wngFreq = 6.;\n  float wSegLen = 0.15 * birdLen;\n  float wChord = 0.3 * birdLen;\n  float wSpar = 0.03 * birdLen;\n  float fTap = 8.;\n  float tFac = (1. - 1. \/ fTap);\n  q = p - vec3 (0., 0., 0.3 * birdLen);\n  q.x = abs (q.x) - 0.1 * birdLen;\n  float wf = 1.;\n  a = -0.1 + 0.2 * sin (wngFreq * tCur);\n  d = dHit;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x \/ (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar,\n         wr * wChord), - q.x));\n    }\n    if (dd < d) { d = dd;  qh = q; }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idWing;  qHit = qh; }\n  return dHit;\n}\n\nfloat BdBodyDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, a, wr;\n  float bkLen = 0.15 * birdLen;\n  q = p;\n  wr = q.z \/ birdLen;\n  float tr, u;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * birdLen, birdLen);\n  if (d < dHit) {\n    dHit = d;  idObj = idObjGrp + idBdy;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= birdLen * vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009 * birdLen, 0.2 * birdLen);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idBdy;  qHit = q; }\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04 * birdLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idEye;  qHit = q; }\n  q = p;  q -= birdLen * vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z \/ bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.25 * wr * bkLen, 0.25 * wr * bkLen, bkLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idBk;  qHit = q; }\n  return dHit;\n}\n\nfloat BdFootDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  float lgLen = 0.1 * birdLen;\n  float ftLen = 0.5 * lgLen;\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.1, -0.12, 0.6);\n  q.yz = Rot2D (q.yz, legAng);\n  q.xz = Rot2D (q.xz, -0.05 * pi);\n  q.z += lgLen;\n  d = PrCylDf (q, 0.15 * lgLen, lgLen);\n  if (d < dHit) { dHit = d;  idObj = idLeg;  qHit = q; }\n  q.z += lgLen;\n  q.xy = Rot2D (q.xy, 0.5 * pi);\n  q.xy = Rot2D (q.xy, AngQnt (atan (q.y, - q.x), 0., 0.5, 3.));\n  q.xz = Rot2D (q.xz, - pi + 0.4 * legAng);\n  q.z -= ftLen;\n  d = PrCapsDf (q, 0.2 * ftLen, ftLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idLeg;  qHit = q; }\n  return dHit;\n}\n\nfloat BirdDf (vec3 p, float dHit)\n{\n  dHit = BdWingDf (p, dHit);\n  dHit = BdBodyDf (p, dHit);\n  dHit = BdFootDf (p, dHit);\n  return dHit;\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec3 col;\n  int ig = idObj \/ 256;\n  int id = idObj - 256 * ig;\n  float spec = 1.;\n  if (id == idWing) {\n    float gw = 0.15 * birdLen;\n    float w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col = mix (vec3 (0.05), vec3 (1.), w);\n  } else if (id == idEye) {\n    col = vec3 (0., 0.6, 0.);\n    spec = 5.;\n  } else if (id == idBdy) {\n    vec3 nn;\n    if (ig == 1) nn = birdMat[0] * n;\n    else nn = birdMat[1] * n;\n    col = mix (mix (vec3 (1.), vec3 (0.1), smoothstep (0.5, 1., nn.y)), vec3 (1.),\n       1. - smoothstep (-1., -0.7, nn.y));\n  } else if (id == idBk) {\n    col = vec3 (1., 1., 0.);\n  } else if (id == idLeg) {\n    col = (0.5 + 0.4 * sin (100. * qHit.z)) * vec3 (0.6, 0.4, 0.);\n  }\n  col.gb *= 0.7;\n  return vec4 (col, spec);\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  idObjGrp = 1 * 256;\n  dHit = BirdDf (birdMat[0] * (p - birdPos[0]), dHit);\n  idObjGrp = 2 * 256;\n  dHit = BirdDf (birdMat[1] * (p - birdPos[1]), dHit);\n  return 0.9 * dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 vn;\n  vec4 objCol;\n  float dstHit;\n  float htWat = -1.5;\n  float reflFac = 1.;\n  vec3 col = vec3 (0.);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (rd.y < 0. && dstHit >= dstFar) {\n    float dw = - (ro.y - htWat) \/ rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    reflFac *= 0.7;\n  }\n  int idObjT = idObj;\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit >= dstFar) col = reflFac * SkyCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = BirdCol (vn);\n    float dif = max (dot (vn, sunDir), 0.);\n    col = reflFac * objCol.xyz * (0.2 + max (0., dif) *\n       (dif + objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.)));\n  }\n  return col;\n}\n\nvec3 BirdTrack (float t)\n{\n  t = - t;\n  vec3 bp;\n  float rdTurn = 0.45 * min (fltBox.x, fltBox.z);\n  float tC = 0.5 * pi * rdTurn \/ birdVel;\n  vec3 tt = vec3 (fltBox.x - rdTurn, length (fltBox.xy), fltBox.z - rdTurn) *\n     2. \/ birdVel;\n  float tCyc = 2. * (2. * tt.z + tt.x  + 4. * tC + tt.y);\n  float tSeq = mod (t, tCyc);\n  float ti[9];  ti[0] = 0.;  ti[1] = ti[0] + tt.z;  ti[2] = ti[1] + tC;\n  ti[3] = ti[2] + tt.x;  ti[4] = ti[3] + tC;  ti[5] = ti[4] + tt.z;\n  ti[6] = ti[5] + tC;  ti[7] = ti[6] + tt.y;  ti[8] = ti[7] + tC;\n  float a, h, hd, tf;\n  h = - fltBox.y;\n  hd = 1.;\n  if (tSeq > 0.5 * tCyc) { tSeq -= 0.5 * tCyc;  h = - h;  hd = - hd; }\n  float rSeg = -1.;\n  vec3 fbR = vec3 (1.);\n  fbR.xz -= vec2 (rdTurn) \/ fltBox.xz;\n  bp.xz = fltBox.xz;\n  bp.y = h;\n  if (tSeq < ti[4]) {\n    if (tSeq < ti[1]) {\n      tf = (tSeq - ti[0]) \/ (ti[1] - ti[0]);\n      bp.xz *= vec2 (1., fbR.z * (2. * tf - 1.));\n    } else if (tSeq < ti[2]) {\n      tf = (tSeq - ti[1]) \/ (ti[2] - ti[1]);  rSeg = 0.;\n      bp.xz *= fbR.xz;\n    } else if (tSeq < ti[3]) {\n      tf = (tSeq - ti[2]) \/ (ti[3] - ti[2]);\n      bp.xz *= vec2 (fbR.x * (1. - 2. * tf), 1.);\n    } else {\n      tf = (tSeq - ti[3]) \/ (ti[4] - ti[3]);  rSeg = 1.;\n      bp.xz *= fbR.xz * vec2 (-1., 1.);\n    }\n  } else {\n    if (tSeq < ti[5]) {\n      tf = (tSeq - ti[4]) \/ (ti[5] - ti[4]);\n      bp.xz *= vec2 (- 1., fbR.z * (1. - 2. * tf));\n    } else if (tSeq < ti[6]) {\n      tf = (tSeq - ti[5]) \/ (ti[6] - ti[5]);  rSeg = 2.;\n      bp.xz *= - fbR.xz;\n    } else if (tSeq < ti[7]) {\n      tf = (tSeq - ti[6]) \/ (ti[7] - ti[6]);\n      bp.xz *= vec2 (fbR.x * (2. * tf - 1.), - 1.);\n      bp.y = h + 2. * fltBox.y * hd * tf;\n    } else {\n      tf = (tSeq - ti[7]) \/ (ti[8] - ti[7]);  rSeg = 3.;\n      bp.xz *= fbR.xz * vec2 (1., -1.);\n      bp.y = - h;\n    }\n  }\n  if (rSeg >= 0.) {\n    a = 0.5 * pi * (rSeg + tf);\n    bp += rdTurn * vec3 (cos (a), 0., sin (a));\n  }\n  bp.y -= - 1.1 * fltBox.y;\n  return bp;\n}\n\nvoid BirdPM (float t)\n{\n  float dt = 1.;\n  bdPos = BirdTrack (t);\n  vec3 bpF = BirdTrack (t + dt);\n  vec3 bpB = BirdTrack (t - dt);\n  vec3 vel = (bpF - bpB) \/ (2. * dt);\n  float vy = vel.y;\n  vel.y = 0.;\n  vec3 acc = (bpF - 2. * bdPos + bpB) \/ (dt * dt);\n  acc.y = 0.;\n  vec3 va = cross (acc, vel) \/ length (vel);\n  vel.y = vy;\n  float el = - 0.7 * asin (vel.y \/ length (vel));\n  vec3 ort = vec3 (el, atan (vel.z, vel.x) - 0.5 * pi, 0.2 * length (va) * sign (va.y));\n  vec3 cr = cos (ort);\n  vec3 sr = sin (ort);\n  bdMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n  legAng = pi * clamp (0.4 + 1.5 * el, 0.12, 0.8);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 ro, rd, vd;\n  float zmFac = 2.4;\n  sunDir = normalize (vec3 (-1., 0.05, 0.));\n  waterDisp = -0.002 * tCur * vec3 (-1., 0., 1.);\n  cloudDisp = -0.05 * tCur * vec3 (1., 0., 1.);\n  birdLen = 1.2;\n  birdVel = 7.;\n  float tGap = 10.;\n  fltBox = vec3 (12., 4., 12.);\n  BirdPM (tCur);\n  birdMat[0] = bdMat;\n  birdPos[0] = bdPos;\n  BirdPM (tCur + tGap);\n  birdMat[1] = bdMat;\n  birdPos[1] = bdPos;\n  float el = 0.;\n  float az = -0.5 * pi;\n  vec2 ca = cos (vec2 (el, az));\n  vec2 sa = sin (vec2 (el, az));\n  mat3 vuMat = mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  ro = vuMat * vec3 (0., 0., -30.);\n  ro.y = 4.;\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}