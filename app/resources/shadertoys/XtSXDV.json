{"Shader":{"ver":"0.1","info":{"id":"XtSXDV","date":"1446428140","viewed":443,"name":"Texture-Based Noise","username":"jackdavenport","description":"Creating a perlin-like noise function using a texture, cutting out the computation time of procedural noise.","likes":3,"published":3,"flags":0,"tags":["noise","texture"],"hasliked":0},"renderpass":[{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float noise(vec2 p) {\n    \n    vec2 uv = mod(p, 100000.) \/ 100000.;\n    vec4 tx = texture2D(iChannel0, uv);\n    \n    return (tx.x + tx.y + tx.z) \/ 3.;\n    \n}\n\nfloat smoothNoise(vec2 p) {\n \n    vec2 sw = vec2(floor(p.x),floor(p.y));\n    vec2 se = vec2( ceil(p.x),floor(p.y));\n    vec2 nw = vec2(floor(p.x), ceil(p.y));\n    vec2 ne = vec2( ceil(p.x), ceil(p.y));\n    \n    vec2 interp = smoothstep(0., 1., fract(p));\n    float s = mix(noise(sw),noise(se),interp.x);\n    float n = mix(noise(nw),noise(ne),interp.x);\n    return mix(s, n, interp.y);\n    \n}\n\nfloat fractalNoise(vec2 p) {\n \n    float sum = 0.;\n    sum += smoothNoise(p);\n    sum += smoothNoise(p * 2.) \/ 2.;\n    sum += smoothNoise(p * 4.) \/ 4.;\n    sum += smoothNoise(p * 8.) \/ 8.;\n    sum += smoothNoise(p * 16.) \/ 16.;\n    sum \/= 1. + 1.\/2. + 1.\/4. + 1.\/8. + 1.\/16.;\n    return sum;\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord \/ iResolution.xy;\n\tfragColor = vec4(fractalNoise(uv * 5000.));\n}","name":"","description":"","type":"image"}]}}