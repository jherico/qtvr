{"Shader":{"ver":"0.1","info":{"id":"4dXGWS","date":"1377741096","viewed":1332,"name":"IFS - random","username":"iq","description":"Random linear IFS fractal (4 affine transforms) inverted and twisted. Very noisy due to the low iteration count (rendering approach is brute force gathering). Some more info ","likes":9,"published":3,"flags":0,"tags":["2d","fractal","ifs"],"hasliked":0},"renderpass":[{"inputs":[{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash( in float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\nfloat determinant( in mat2 m )\n{\n    return abs( m[0][0]*m[1][1] - m[0][1]*m[1][0] );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = -1.0 + 2.0*fragCoord.xy\/iResolution.xy;\n\tuv *= 2.0;\n\tfloat t = 0.1*iGlobalTime - 1.0;\n#if 0\n\tmat2 am = mat2( cos(t*1.71+0.18), cos(t*1.31+3.18), cos(t*1.13+3.29), cos(t*1.44+4.21) );\n\tmat2 bm = mat2( cos(t*2.57+1.66), cos(t*1.08+0.74), cos(t*2.25+2.78), cos(t*1.23+1.29) );\n\tmat2 cm = mat2( cos(t*1.15+6.33), cos(t*2.94+2.92), cos(t*1.78+0.82), cos(t*2.58+2.36) );\n\tmat2 dm = mat2( cos(t*1.42+4.89), cos(t*2.73+6.34), cos(t*1.82+5.91), cos(t*1.21+3.84) );\n\tvec2 at = vec2( cos(t*2.13+0.94), cos(t*1.19+0.29) )*0.8;\n\tvec2 bt = vec2( cos(t*1.09+5.25), cos(t*1.27+1.77) )*0.8;\n\tvec2 ct = vec2( cos(t*2.76+4.39), cos(t*2.35+2.04) )*0.8;\n\tvec2 dt = vec2( cos(t*1.42+4.71), cos(t*2.81+3.51) )*0.8;\n#else\n\tmat2 am = mat2( cos(t*1.71+0.18), -cos(t*1.31+3.18), cos(t*1.31+3.18), cos(t*1.44+4.21) );\n\tmat2 bm = mat2( cos(t*2.57+1.66), -cos(t*1.08+0.74), cos(t*1.08+0.74), cos(t*1.23+1.29) );\n\tmat2 cm = mat2( cos(t*1.15+6.33), -cos(t*2.94+2.92), cos(t*2.94+2.92), cos(t*2.58+2.36) );\n\tmat2 dm = mat2( cos(t*1.42+4.89), -cos(t*2.73+6.34), cos(t*2.73+6.34), cos(t*1.21+3.84) );\n\tvec2 at = vec2( cos(t*2.13+0.94), cos(t*1.19+0.29) )*0.8;\n\tvec2 bt = vec2( cos(t*1.09+5.25), cos(t*1.27+1.77) )*0.8;\n\tvec2 ct = vec2( cos(t*2.76+4.39), cos(t*2.35+2.04) )*0.8;\n\tvec2 dt = vec2( cos(t*1.42+4.71), cos(t*2.81+3.51) )*0.8;\n#endif\n\t\n    \/\/ make sure all trasnforms are contracting, ie, |fi(x)| < 1 )\n    am \/= mix( 1.0, determinant(am), clamp(determinant(am)*3.0-2.0,0.0,1.0) );\n    bm \/= mix( 1.0, determinant(bm), clamp(determinant(bm)*3.0-2.0,0.0,1.0) );\n    cm \/= mix( 1.0, determinant(cm), clamp(determinant(cm)*3.0-2.0,0.0,1.0) );\n    dm \/= mix( 1.0, determinant(dm), clamp(determinant(dm)*3.0-2.0,0.0,1.0) );\n\t\n\tvec3  cola = vec3(0.0);\n\tvec3  colb = vec3(0.0);\n\t\n\tfloat cad = 0.0;\n\n\tfloat p = texture2D( iChannel0, (iGlobalTime+fragCoord.xy+0.5)\/256.0, -100.0 ).x;\n\n    vec2 z = vec2( 0.0 );\n\t\n\tfor( int i=0; i<256; i++ ) \n    {\n\t\tp = fract( p*8.1 );\n\n        cad *= 0.25;\n             if( p < 0.25 ) { z = am*z + at; cad += 0.00; }\n        else if( p < 0.50 ) { z = bm*z + bt; cad += 0.25; }\n        else if( p < 0.75 ) { z = cm*z + ct; cad += 0.50; }\n        else                { z = dm*z + dt; cad += 0.75; }\n\n        \/\/ non linear transform\n\t    float zr = length(z);\n\t\tfloat ar = atan( z.y, z.x ) + zr*0.5;\n\t\tz = 2.0*vec2( cos(ar), sin(ar) )\/zr;\n\n        if( i>10 )\n\t\t{\n        vec3  coh = 0.5 + 0.5*sin(2.*cad + vec3(0.0,1.2,2.0));\n        float cok = dot(uv-z,uv-z);\n        cola = mix( cola, coh, exp( -512.0*cok ) );\n        colb = mix( colb, coh, exp(  -48.0*cok ) );\n\t\t}\n\t}\n\t\n    vec3 col = cola + 0.5*colb;\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}