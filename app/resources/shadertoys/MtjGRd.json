{"Shader":{"ver":"0.1","info":{"id":"MtjGRd","date":"1431576207","viewed":1142,"name":"Palette Dithering Test","username":"Flyguy","description":" Testing palette dithering using the bayer matrix texture and colors from the Commodore 64's color palette.","likes":25,"published":3,"flags":0,"tags":["raymarching","dither","c64","palette"],"hasliked":0},"renderpass":[{"inputs":[{"id":28,"src":"\/presets\/tex15.png","ctype":"texture","channel":0,"sampler":{"filter":"nearest","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define DITHER\n#define AUTO_MODE\n#define DOWN_SCALE 2.0\n\n#define MAX_STEPS 196\n#define MIN_DIST 0.002\n#define NORMAL_SMOOTHNESS 0.1\n#define PI 3.14159265359\n\n#define PALETTE_SIZE 16\n#define SUB_PALETTE_SIZE 8\n\n#define RGB(r,g,b) (vec3(r,g,b) \/ 255.0);\n\nvec3 palette[PALETTE_SIZE];\nvec3 subPalette[SUB_PALETTE_SIZE];\n\n\/\/Initalizes the color palette.\nvoid InitPalette()\n{\n    \/\/16-Color C64 color palette.\n\tpalette[ 0] = RGB(  0,  0,  0);\n\tpalette[ 1] = RGB(255,255,255);\n\tpalette[ 2] = RGB(152, 75, 67);\n\tpalette[ 3] = RGB(121,193,200);\n\t\n\tpalette[ 4] = RGB(155, 81,165);\n\tpalette[ 5] = RGB(104,174, 92);\n\tpalette[ 6] = RGB( 62, 49,162);\n\tpalette[ 7] = RGB(201,214,132);\n\t\n\tpalette[ 8] = RGB(155,103, 57);\n\tpalette[ 9] = RGB(106, 84,  0);\n\tpalette[10] = RGB(195,123,117);\n\tpalette[11] = RGB( 85, 85, 85);\n\t\n\tpalette[12] = RGB(138,138,138);\n\tpalette[13] = RGB(163,229,153);\n\tpalette[14] = RGB(138,123,206);\n\tpalette[15] = RGB(173,173,173);\n    \n    \/\/8-Color metalic-like sub palette.\n\tsubPalette[0] = palette[6];\n\tsubPalette[1] = palette[11];\n\tsubPalette[2] = palette[4];\n\tsubPalette[3] = palette[14];\t\n\tsubPalette[4] = palette[5];\n\tsubPalette[5] = palette[3];\n\tsubPalette[6] = palette[13];\n\tsubPalette[7] = palette[1];\n\t\n}\n\n\/\/Blends the nearest two palette colors with dithering.\nvec3 GetDitheredPalette(float x,vec2 pixel)\n{\n\tfloat idx = clamp(x,0.0,1.0)*float(SUB_PALETTE_SIZE-1);\n\t\n\tvec3 c1 = vec3(0);\n\tvec3 c2 = vec3(0);\n\t\n    \/\/Loop to workaround constant array indexes.\n\tfor(int i = 0;i < SUB_PALETTE_SIZE;i++)\n\t{\n\t\tif(float(i) == floor(idx))\n\t\t{\n\t\t\tc1 = subPalette[i];\n\t\t\tc2 = subPalette[i + 1];\n\t\t\tbreak;\n\t\t}\t\n\t}\n    \n    #ifdef DITHER\n    \tfloat dith = texture2D(iChannel0, pixel \/ iChannelResolution[0].xy).r;\n    \tfloat mixAmt = float(fract(idx) > dith);\n    #else\n    \tfloat mixAmt = fract(idx);\n    #endif\n    \n\treturn mix(c1,c2,mixAmt);\n}\n\n\/\/Returns a 2D rotation matrix for the given angle.\nmat2 Rotate(float angle)\n{\n\treturn mat2(cos(angle), sin(angle), -sin(angle), cos(angle));   \n}\n\n\/\/Distance field functions & operations by iq. (http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm)\nfloat opU( float d1, float d2 )\n{\n    return min(d1,d2);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nfloat opI( float d1, float d2 )\n{\n    return max(d1,d2);\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    vec3 q = mod(p,c)-0.5*c;\n    return q;\n}\n\nfloat sdSphere( vec3 p, float s )\n{\n  return length(p)-s;\n}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat sdCylinder( vec3 p, vec3 c )\n{\n  return length(p.xz-c.xy)-c.z;\n}\n\n\/\/Scene definition\/distance function.\nfloat Scene(vec3 pos)\n{\n    float map = -sdSphere(pos, 24.0);\n    \n    vec3 rep = opRep(pos - 2.0, vec3(4.0));\n    \n    map = opU(map, opI(sdBox(pos, vec3(5.5)), sdSphere(rep, 1.0)));\n    \n    vec3 gSize = vec3(0, 0, 0.25);\n    \n    float grid = opU(opU(sdCylinder(rep.xyz, gSize), sdCylinder(rep.xzy, gSize)), sdCylinder(rep.zxy, gSize));\n     \n    grid = opI(sdBox(pos,vec3(4.5)),grid);\n    \n    map = opU(map, grid);\n    \n    return map;\n}\n\n\/\/Returns the normal of the surface at the given position.\nvec3 Normal(vec3 pos)\n{\n\tvec3 offset = vec3(NORMAL_SMOOTHNESS, 0, 0);\n    \n    vec3 normal = vec3\n    (\n        Scene(pos - offset.xyz) - Scene(pos + offset.xyz),\n        Scene(pos - offset.zxy) - Scene(pos + offset.zxy),\n        Scene(pos - offset.yzx) - Scene(pos + offset.yzx)\n    );\n    \n    return normalize(normal);\n}\n\n\/\/Marches a ray defined by the origin and direction and returns the hit position.\nvec3 RayMarch(vec3 origin,vec3 direction)\n{\n    float hitDist = 0.0;\n    \n    for(int i = 0;i < MAX_STEPS;i++)\n    {\n        float sceneDist = Scene(origin + direction * hitDist);\n        \n        hitDist += sceneDist;\n        \n        if(sceneDist < MIN_DIST)\n        {\n            break;\n        }\n    }\n    \n    return origin + direction * hitDist;\n}\n\n\/\/Scene shading.\nvec3 Shade(vec3 position, vec3 normal, vec3 rayOrigin,vec3 rayDirection,vec2 pixel)\n{\n    vec3 color = vec3(0);\n    \n    float ang = iGlobalTime * 2.0;\n    \n    vec3 lightPos = vec3(cos(ang), cos(ang*2.0), sin(ang)) * 2.0;  \n    \n    \/\/Normal shading\n\tfloat shade = 0.4 * max(0.0, dot(normal, normalize(-lightPos)));\n    \n    \/\/Specular highlight\n    shade += 0.6 * max(0.0, dot(-reflect(normalize(position - lightPos), normal), rayDirection));\n    \n    \/\/Linear falloff\n    shade *= (16.0-distance(position, lightPos))\/16.0,\n    \n    \/\/Apply palette\n    color = GetDitheredPalette(shade, pixel);\n\n    \/\/color = mix(color, vec3(0.1), step(22.0, length(position)));\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    InitPalette();\n    \n    vec2 aspect = iResolution.xy \/ iResolution.y;\n    \n    fragCoord = floor(fragCoord \/ DOWN_SCALE) * DOWN_SCALE;\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    vec2 mouse = iMouse.xy \/ iResolution.xy - 0.5;\n    \n    vec2 camAngle = vec2(0);\n    \n    #ifdef AUTO_MODE\n\t\tcamAngle.x = PI * (-1.0 \/ 8.0) * sin(iGlobalTime * 0.5);\n    \tcamAngle.y = -iGlobalTime;\n    #else\n        camAngle.x = PI * mouse.y + PI \/ 2.0;\n        camAngle.x += PI \/ 3.0;\n\n        camAngle.y = 2.0 * PI * -mouse.x;\n        camAngle.y += PI;\n    #endif\n    \n    vec3 rayOrigin = vec3(0 , 0, -16.0);\n    vec3 rayDirection = normalize(vec3(uv - aspect \/ 2.0, 1.0));\n    \n    mat2 rotateX = Rotate(camAngle.x);\n    mat2 rotateY = Rotate(camAngle.y);\n    \n    \/\/Transform ray origin and direction\n    rayOrigin.yz *= rotateX;\n    rayOrigin.xz *= rotateY;\n    rayDirection.yz *= rotateX;\n    rayDirection.xz *= rotateY;\n    \n    vec3 scenePosition = RayMarch(rayOrigin, rayDirection);\n    \n    vec3 outColor = Shade(scenePosition,Normal(scenePosition), rayOrigin, rayDirection, fragCoord \/ DOWN_SCALE);\n    \n    \/\/Palette preview\n    if(uv.x < 0.05) \n    {\n        outColor = GetDitheredPalette(uv.y, fragCoord \/ DOWN_SCALE);\n    }\n    \n\tfragColor = vec4(outColor, 1.0);\n}","name":"","description":"","type":"image"}]}}