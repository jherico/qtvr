{"Shader":{"ver":"0.1","info":{"id":"4ss3W7","date":"1372192433","viewed":1396,"name":"Procedural Normal Map","username":"4rknova","description":"Procedural generation of normal maps from diffuse maps.<br\/>Use the mouse to move the light position on the xy plane.","likes":26,"published":3,"flags":0,"tags":["normal","mapping"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2013\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ENABLE_LIGHTING\n#define ENABLE_SPECULAR\n\n#define OFFSET_X 1\n#define OFFSET_Y 1\n#define DEPTH\t 7.5\n\nvec3 sample(const int x, const int y, in vec2 fragCoord)\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy * iChannelResolution[0].xy;\n\tuv = (uv + vec2(x, y)) \/ iChannelResolution[0].xy;\n\treturn texture2D(iChannel0, uv).xyz;\n}\n\nfloat luminance(vec3 c)\n{\n\treturn dot(c, vec3(.2126, .7152, .0722));\n}\n\nvec3 normal(in vec2 fragCoord)\n{\n\tfloat R = abs(luminance(sample( OFFSET_X,0, fragCoord)));\n\tfloat L = abs(luminance(sample(-OFFSET_X,0, fragCoord)));\n\tfloat D = abs(luminance(sample(0, OFFSET_Y, fragCoord)));\n\tfloat U = abs(luminance(sample(0,-OFFSET_Y, fragCoord)));\n\t\t\t\t \n\tfloat X = (L-R) * .5;\n\tfloat Y = (U-D) * .5;\n\n\treturn normalize(vec3(X, Y, 1. \/ DEPTH));\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec3 n = normal(fragCoord);\n\n#ifdef ENABLE_LIGHTING\n\tvec3 lp = vec3(iMouse.xy \/ iResolution.xy * iChannelResolution[0].xy, 200.);\n\tvec3 sp = vec3(fragCoord.xy \/ iResolution.xy * iChannelResolution[0].xy, 0.);\n\t\n\tvec3 c = sample(0, 0, fragCoord) * dot(n, normalize(lp - sp));\n\n#ifdef ENABLE_SPECULAR\n    float e = 64.;\n    vec3 ep = vec3(iChannelResolution[0].x * .5, (iChannelResolution[0].y) * .5, 500.);\n\tc += pow(clamp(dot(normalize(reflect(lp - sp, n)), \n\t\t\t\t\t   normalize(sp - ep)), 0., 1.), e);\n#endif \/* ENABLE_SPECULAR *\/\n\t\n#else\n\tvec3 c = n;\n\t\n#endif \/* ENABLE_LIGHTING *\/\n\t\n\tfragColor = vec4(c, 1);\n}","name":"","description":"","type":"image"}]}}