{"Shader":{"ver":"0.1","info":{"id":"MtjSRw","date":"1442552709","viewed":647,"name":"controllable Julia on Mandelbrot","username":"roombarampage","description":"inspired by ichko's Mandelbrot Set & Julia... https:\/\/www.shadertoy.com\/view\/4tjSRw<br\/><br\/>instructions: click and move the mouse around the screen to display the julia set for that location.<br\/><br\/>background video: https:\/\/www.youtube.com\/watch?v=oCkQ7WK7vuY","likes":2,"published":3,"flags":0,"tags":["julia","mandelbrot","controllable","whoa","mousefractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n  programmer: jonathan potter\n  github: https:\/\/github.com\/jonathan-potter\n  repo: https:\/\/github.com\/jonathan-potter\/shadertoy-fractal\n*\/\n\nconst int MAX_ITERATIONS = 256;\n\nstruct complex { \n  float real;\n  float imaginary;\n};\n\nint fractal(complex c, complex z) {\n  for (int iteration = 0; iteration < MAX_ITERATIONS; iteration++) {\n\n    \/\/ z <- z^2 + c\n    float real = z.real * z.real - z.imaginary * z.imaginary + c.real;\n    float imaginary = 2.0 * z.real * z.imaginary + c.imaginary;\n\n    z.real = real;\n    z.imaginary = imaginary;\n\n    if (z.real * z.real + z.imaginary * z.imaginary > 4.0) {\n      return iteration;\n    }\n  }\n\n  return 0;\n}\n\nint mandelbrot(vec2 coordinate) {\n  complex c = complex(coordinate.x, coordinate.y);\n  complex z = complex(0.0, 0.0);\n\n  return fractal(c, z);\n}\n\nint julia(vec2 coordinate, vec2 offset) {\n  complex c = complex(offset.x, offset.y);\n  complex z = complex(coordinate.x, coordinate.y);\n\n  return fractal(c, z);\n}\n\nvec2 fragCoordToXY(vec2 fragCoord) {\n  vec2 relativePosition = fragCoord.xy \/ iResolution.xy;\n  float aspectRatio = iResolution.x \/ iResolution.y;\n\n  vec2 cartesianPosition = (relativePosition - 0.5) * 4.0;\n  cartesianPosition.x *= aspectRatio;\n\n  return cartesianPosition;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n  vec2 coordinate    = fragCoordToXY(fragCoord);\n  vec2 clickPosition = fragCoordToXY(vec2(iMouse.x, iMouse.y));\n\n  int juliaValue = julia(coordinate, clickPosition);\n  int mandelbrotValue = mandelbrot(coordinate);\n    \n  float clickPoint;  \n  if(length(clickPosition - coordinate) < 0.05){\n    clickPoint = 1.0;\n  } else {\n    clickPoint = 0.0;\n  }\n    \n  float juliaColor      = 5.0 * float(juliaValue) \/ float(MAX_ITERATIONS);\n  float mandelbrotColor = 5.0 * float(mandelbrotValue) \/ float(MAX_ITERATIONS);\n\n  float color = mandelbrotColor + juliaColor;\n  fragColor = vec4(color, color, color + clickPoint, 1.0);\n}\n","name":"","description":"","type":"image"}]}}