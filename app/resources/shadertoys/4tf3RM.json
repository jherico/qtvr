{"Shader":{"ver":"0.1","info":{"id":"4tf3RM","date":"1419618612","viewed":703,"name":"Sun & Cloud dome","username":"Dave_Hoskins","description":"Renders half a sphere map for procedural sky rendering. it uses the FLATTEN define to stop the mapping looking pixelated at the top. Use IntoCartesian when rendering the texture with pixel rays.<br\/>Of course, use a square texture when trying this at home!","likes":18,"published":3,"flags":0,"tags":["3d","cloud","spheremapping","mapping","dome"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Cloud dome. By David Hoskins,2014.\n\/\/ https:\/\/www.shadertoy.com\/view\/4tf3RM#\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ It ray-traces to the bottom layer then steps through to the top layer.\n\/\/ It uses the same number of steps for all positions.\n\n\/\/ \\\/\\\/ - set to .08 for useful flatten value for a dome texture, or .5 to see the clouds here nicely (not useful)\n#define FLATTEN .2\n#define NUM_STEPS 70\n\nvec3 sunLight  = normalize( vec3(  0.35, 0.22,  0.3 ) );\nvec3 sunColour = vec3(1.0, .86, .7);\n\n#define cloudLower 2400.0\n#define cloudUpper 3800.0\n\n\n\/\/#define TEXTURE_NOISE\n\n\nfloat gTime;\nfloat cloudy;\nvec2 add = vec2(1.0, 0.0);\n#define MOD3 vec3(3.07965, 7.1235, 4.998784)\n\n\n\/\/--------------------------------------------------------------------------\n\/\/ A new Hash from https:\/\/www.shadertoy.com\/view\/XlfGWN\nfloat Hash(vec3 p)\n{\n\tp  = fract(p \/  MOD3);\n    p += dot(p.xyz, p.yzx + 19.19);\n    return fract(p.x * p.y * p.z);\n}\n\n\n\/\/--------------------------------------------------------------------------\n#ifdef TEXTURE_NOISE\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn mix( rg.x, rg.y, f.z );\n}\n#else\n\/\/--------------------------------------------------------------------------\nfloat Noise(in vec3 p)\n{\n    vec3 i = floor(p);\n\tvec3 f = fract(p); \n\tf *= f * (3.0-2.0*f);\n\n    return mix(\n\t\tmix(mix(Hash(i  \t\t\t), \tHash(i + add.xyy),f.x),\n\t\t\tmix(Hash(i + add.yxy),\t\tHash(i + add.xxy),f.x),\n\t\t\tf.y),\n\t\tmix(mix(Hash(i + add.yyx),    \tHash(i + add.xyx),f.x),\n\t\t\tmix(Hash(i + add.yxx), \t\tHash(i + add.xxx),f.x),\n\t\t\tf.y),\n\t\tf.z);\n}\n#endif\n\n\/\/--------------------------------------------------------------------------\nfloat FBM( vec3 p )\n{\n\tp *= .5;\n    float f;\n    f  = 0.5000   * Noise(p); p =  p * 3.02;\n    f += 0.2500   * Noise(p); p =  p * 3.03;\n    f += 0.1250   * Noise(p); p =  p * 3.01;\n    f += 0.0625   * Noise(p); p =  p * 3.03;\n\tf += 0.03125  * Noise(p); p =  p * 3.02;\n\tf += 0.015625 * Noise(p);\n    return f;\n}\n\n\n\/\/--------------------------------------------------------------------------\nfloat Map(vec3 p)\n{\n\tfloat h = FBM(p);\n\treturn h-cloudy-.42;\n}\n\n\/\/--------------------------------------------------------------------------\n\/\/ Grab all sky information for a given ray from camera\nvec3 GetSky(in vec3 pos,in vec3 rd)\n{\n\tfloat sunAmount = max( dot( rd, sunLight), 0.0 );\n\t\/\/ Do the blue and sun...\t\n\tvec3  sky = mix(vec3(.1, .1, .4), vec3(.1, .45, .7), 1.0-pow(abs(rd.y), .5));\n\tsky = sky + sunColour * min(pow(sunAmount, 1500.0) * 2.0, 1.0);\n\tsky = sky + sunColour * min(pow(sunAmount, 10.0) * .75, 1.0);\n\t\n\t\/\/ Find the start and end of the cloud layer...\n\tfloat beg = ((cloudLower-pos.y)\/rd.y);\n\tfloat end = ((cloudUpper-pos.y)\/rd.y);\n\t\/\/ Start position...\n\tvec3 p = vec3(pos.x + rd.x * beg, cloudLower, pos.z + rd.z * beg);\n\n\t\/\/ Trace clouds through that layer...\n\tfloat d = 0.0;\n\tfloat add = (end-beg) \/ float(NUM_STEPS);\n\tvec4 sum = vec4(0.1, .1, .1, 0.0);\n\t\/\/ Horizon fog is just thicker clouds...\n\tvec4 col = vec4(0.0, 0.0, 0.0, pow(1.0-rd.y,30.) * .2);\n\tfor (int i = 0; i < NUM_STEPS; i++)\n\t{\n\t\tif (sum.a >= 1.0) continue;\n\t\tvec3 pos = p + rd * d;\n\t\tfloat h = Map(pos * .001);\n\t\tcol.a += max(-h, 0.0) * .10; \n\t\tcol.rgb = mix(vec3((pos.y-cloudLower)\/((cloudUpper-cloudLower))) * col.a, sunColour, max(.3-col.a, 0.0) * .04);\n\t\tsum = sum + col*(1.0 - sum.a);\n\t\td += add;\n\t}\n\tsum.xyz += min((1.-sum.a) * pow(sunAmount, 3.0), 1.0);\n\tsky = mix(sky, sum.xyz, sum.a);\n\n\treturn clamp(sky, 0.0, 1.0);\n}\n\n\/\/--------------------------------------------------------------------------\nvec3 CameraPath( float t )\n{\n    return vec3(4000.0 * sin(.16*t), 0.0, 4000.0 * cos(.155*t) );\n} \n\n\n\/\/--------------------------------------------------------------------------\nvec3 IntoSphere(vec2 uv)\n{\n\tvec3 dir;\n\tuv = (-1.0 + 2.0 * uv);\n\tdir.x = uv.x;\n\tdir.z = uv.y;\n\tdir.y = sqrt(1.0-dir.x * dir.x  - dir.z*dir.z) * FLATTEN;\n\tif (length(dir) >= 1.0) return vec3(0.0, .001, .999);\n\tdir = normalize(dir);\n\t\n\treturn dir;\n}\n\n\/\/--------------------------------------------------------------------------\nvec2 IntoCartesian(vec3 dir)\n{\n\tvec2 uv;\n\tdir.y \/= FLATTEN;\n\tdir = normalize(dir);\n\tuv.x = dir.x;\n\tuv.y = dir.z;\n\tuv = .5 + (.5 * uv);\n\treturn uv;\n}\n\n\/\/--------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\n\tfloat m = (iMouse.x\/iResolution.x)*30.0;\n\tgTime = iGlobalTime*.5 + m - 0.8;\n\tcloudy = cos(gTime * .27+.4) * .3;\n\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\tvec3 dir = IntoSphere(uv);\n\n\t\/\/uv  = IntoCartesian(dir); \/\/ ...Test conversion!\n\t\/\/dir = IntoSphere(uv);\n\t\n\tvec3 col = GetSky(CameraPath(gTime), dir);\n\n\t\/\/ Don't gamma too much to keep the moody look...\n\tcol = pow(col, vec3(.6));\n\tfragColor=vec4(col, 1.0);\n}\n\n\/\/--------------------------------------------------------------------------\n","name":"","description":"","type":"image"}]}}