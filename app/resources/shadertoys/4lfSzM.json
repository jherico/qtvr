{"Shader":{"ver":"0.1","info":{"id":"4lfSzM","date":"1435099597","viewed":726,"name":"Skyline Sunrise","username":"gsingh93","description":"Based off of https:\/\/www.shadertoy.com\/view\/4tXSRM (which contains a detailed explanation) and inspired by https:\/\/www.shadertoy.com\/view\/MlX3DM.","likes":2,"published":3,"flags":0,"tags":["sunrise","skyline"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Based off of https:\/\/www.shadertoy.com\/view\/4tXSRM, which also contains an explanation\n\n#define MAX_DEPTH 20\n\nfloat noise(vec2 p) {\n\treturn fract(sin(dot(p.xy ,vec2(12.9898,78.233))) * 456367.5453);\n}\n\nvec3 background_col(vec2 p, float sun_y) {\n    float b = mix(0.5, 0.6, p.x);\n    float g = mix(0.6, 0.7, p.x);\n    \/\/ Mix black with the normal background color depending on the height of the sun.\n    \/\/ We have to clamp the sun height because it goes above the screen\n   \treturn mix(vec3(0), vec3(1., g, b), clamp(0., 1., sun_y)); \n}\n\n\/\/ The position of the sun varies between .15 and 1.15 (it's offscreen above 1).\nfloat sun_pos(float time) {\n    \/\/ 0.2 controls the speed of the sun. Dividing by 2 shortens the length of the day.\n\treturn (sin(time * 0.2) + 1.3) \/ 2.;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n\tvec2 p = fragCoord.xy \/ iResolution.xy;\n    \n    float col = 0.;\n    float alpha = 0.;\n    \n    \/\/ Note that we create buildings from back to front\n\tfor (int i = 1; i < MAX_DEPTH; i++) {\n\t\tfloat depth = float(i);\n\t\tfloat step = 200. * p.x \/ depth + 50. * depth + iGlobalTime;\n        \n\t\tif (p.y < noise(vec2(floor(step))) - depth * .04) {\n            \/\/ Alpha blend each building\n            float dx = 2. * 200. \/ iResolution.x \/ depth;\n            float loc_alpha = smoothstep(0., dx, fract(step)) * smoothstep(0., dx, 1. - fract(step));\n\t\t\tcol = depth \/ 20. * loc_alpha + (1. - loc_alpha) * col;\n            alpha = loc_alpha + (1. - loc_alpha) * alpha;\n\t\t}\n\t}\n\n    float sun_y = sun_pos(iGlobalTime);\n    vec3 background_color = background_col(p, sun_y);\n    \n    \/\/ This mixing tints the building color based on the time of day\n    fragColor.rgb = mix(background_color * alpha, vec3(col), .7);\n    fragColor.a = alpha;\n\n    \/\/ We only want to show sunrise, so if the sun is coming down, don't show it\n    float gradient = sun_pos(iGlobalTime + 1.) - sun_y;\n    \n    vec2 center = vec2(1.5, sun_y);\n    float radius = 0.1;\n\n    \/\/ Correct the aspect ratio when drawing the sun\n    vec2 uv = p;\n    uv.x = uv.x * iResolution.x \/ iResolution.y;\n\n    \/\/ Add in the sun or the background\n    if (gradient >= 0. && length(uv - center) < radius) {\n        fragColor += (1. - fragColor.a) * vec4(1, .9, .5, 1.);\n    } else {\n        fragColor += (1. - fragColor.a) * vec4(background_color, 1.);\n    }\n}","name":"","description":"","type":"image"}]}}