{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4tXGDn",
				"date": "1420903561",
				"viewed": 98,
				"name": "Pink Morphing",
				"username": "LeWiZ",
				"description": "Morphing sequence with multiple primitives.",
				"likes": 6,
				"published": 3,
				"tags": 
				[
					"3d",
					"raymarching",
					"primitives",
					"pink",
					"morphing"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 6,
							"src": "\/presets\/tex05.jpg",
							"ctype": "texture",
							"channel": 1
						},

						{
							"id": 10,
							"src": "\/presets\/tex09.jpg",
							"ctype": "texture",
							"channel": 0
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						},

						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "#define _SPEED_ 2.0\n#define _NPRIM_ 10.0\n\nfloat sphere(vec3 pos)\n{\n  return length(pos)-1.0;   \n}\n\nfloat box(vec3 pos)\n{\n    vec3 d = abs(pos) - 1.0;\n    return min(max(d.x,max(d.y,d.z)),0.0) + length(max(d,0.0));\n}\n\nfloat torus(vec3 pos)\n{\n  vec2 q = vec2(length(pos.xz)-1.0,pos.y);\n    return length(q)-0.2;   \n}\n\nfloat rbox(vec3 pos)\n{\n  return length(max(abs(pos)-0.7,0.0))-0.3;   \n}\n\nfloat cone(vec3 pos)\n{\n    pos -= vec3(0.0,0.5,0.0);\n    float q = length(pos.xz);\n    vec2 c = vec2(0.8,0.6);\n    return max(box(pos),dot(c,vec2(q,pos.y)));\n}\n\nfloat capsule(vec3 pos)\n{\n    const vec3 a = vec3(0.0,-0.8,0.0);\n    const vec3 b = vec3(0.0,0.8,0.0);\n  vec3 pa = pos - a, ba = b - a;\n    float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n    return length( pa - ba*h ) - 0.6;   \n}\n\nfloat blob(vec3 pos)\n{\n    const float k = 2.0;\n  float s1 = sphere(pos-vec3(0.0,0.0,1.3));\n    float s2 = sphere(pos+vec3(0.0,0.0,1.3));\n    return -log(exp(-k*s1)+exp(-k*s2))/k;\n}\n\nfloat menger(vec3 pos)\n{\n  float d = box(pos);\n\n    float s = 1.0;\n  for( int m=0; m<3; m++ )\n  {\n    vec3 a = mod( pos*s, 2.0 )-1.0;\n    s *= 3.0;\n    vec3 r = abs(1.0 - 3.0*abs(a));\n\n    float da = max(r.x,r.y);\n    float db = max(r.y,r.z);\n    float dc = max(r.z,r.x);\n    float c = (min(da,min(db,dc))-1.0)/s;\n\n    d = max(d,c);\n  }\n\n  return d;   \n}\n\nfloat julia(vec3 pos)\n{\n  vec4 c = vec4(-0.1,0.5,0.5,-0.3);\n    vec4 z = vec4( pos, 0.0 );\n  vec4 nz;\n    \n  float md2 = 1.0;\n  float mz2 = dot(z,z);\n\n  for(int i=0;i<7;i++)\n  {\n    md2*=4.0*mz2;\n      nz.x=z.x*z.x-dot(z.yzw,z.yzw);\n    nz.yzw=2.0*z.x*z.yzw;\n    z=nz+c;\n\n    mz2 = dot(z,z);\n    if(mz2>4.0)\n        {\n      break;\n        }\n  }\n\n  return 0.25*sqrt(mz2/md2)*log(mz2);\n}\n\nfloat scene(vec3 pos)\n{\n    float time = iGlobalTime;\n    const float n = _NPRIM_;\n    const float speed = _SPEED_;\n    const float pi = 3.14159265358979;\n    float phi = 2.0 * pi / n;\n    float t1 = phi / 4.0;\n    float t2 = 3.0 * t1;\n    \n    float tok = smoothstep(cos(t2),cos(t1),cos(time*speed));\n    float bxk = smoothstep(cos(t2),cos(t1),cos(time*speed-phi));\n    float mrk = smoothstep(cos(t2),cos(t1),cos(time*speed-2.0*phi));\n    float dik = smoothstep(cos(t2),cos(t1),cos(time*speed-3.0*phi));\n    float rxk = smoothstep(cos(t2),cos(t1),cos(time*speed-4.0*phi));\n    float juk = smoothstep(cos(t2),cos(t1),cos(time*speed-5.0*phi));\n    float cpk = smoothstep(cos(t2),cos(t1),cos(time*speed-6.0*phi));\n    float cnk = smoothstep(cos(t2),cos(t1),cos(time*speed-7.0*phi));\n    float spk = smoothstep(cos(t2),cos(t1),cos(time*speed-8.0*phi));\n    float blk = smoothstep(cos(t2),cos(t1),cos(time*speed-9.0*phi));\n    \n    float to = torus(pos);\n    float bx = box(pos);\n    \n    float mr = 0.0;\n    if (mrk > 0.0) mr = menger(pos);\n    \n    float di = max(box(pos),-sphere(0.8*pos)/0.8);\n    float rx = rbox(pos);\n    \n    float ju = 0.0;\n    if (juk > 0.0) ju = julia(pos);\n    \n    float cp = capsule(pos);\n    float cn = cone(pos*0.6)/0.6;\n    float sp = sphere(pos);\n    float bl = blob(pos);\n    \n\n    \n    return (to*tok + rx*rxk + cp*cpk + di*dik + sp*spk + cn*cnk + bx*bxk + bl*blk + mr*mrk + ju*juk)\n        / (tok+rxk+cpk+dik+spk+cnk+bxk+blk+mrk+juk);\n}\n\nfloat raymarcher( in vec3 ro, in vec3 rd )\n{\n  const float maxd = 15.0;\n  const float precis = 0.001;\n    float h = precis*2.0;\n    float t = 0.0;\n  float res = -1.0;\n    for( int i=0; i<40; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n      h = scene( ro+rd*t );\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 normal( in vec3 pos )\n{\n    const float eps = 0.002;\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1*scene( pos + v1*eps ) + \n            v2*scene( pos + v2*eps ) + \n            v3*scene( pos + v3*eps ) + \n            v4*scene( pos + v4*eps ) );\n}\n\nvec4 texture3d (sampler2D t, vec3 p, vec3 n, float scale)\n{\n    return texture2D(t, p.yz * scale) * abs (n.x) + texture2D(t, p.zx * scale) * abs (n.y) + texture2D(t, p.xy * scale) * abs (n.z);\n}\n\nvec3 light( in vec3 lightdir, in vec3 lightcol, in vec3 tex, in vec3 norm, in vec3 camdir )\n{    \n    float cosa = pow(0.5 + 0.5*dot(norm, -lightdir),2.0);\n    float cosr = max(dot(-camdir, reflect(lightdir, norm)), -0.0);\n    \n    vec3 diffuse = vec3(0.6 * cosa);\n    vec3 phong = vec3(0.4 * pow(cosr, 64.0));\n    \n    return lightcol * (tex * diffuse + phong);\n}\n\nvec3 material( in vec3 pos , in vec3 camdir )\n{\n    float t = iGlobalTime;\n    \n    const float n = _NPRIM_;\n    const float speed = _SPEED_;\n    const float pi = 3.14159265358979;\n    float phi = 2.0 * pi / n;\n    float t1 = phi / 4.0;\n    float t2 = 3.0 * t1;\n    float k = smoothstep(cos(5.0*t2),cos(5.0*t1),cos(t*speed*n));\n    \n  vec3 norm = normal(pos);\n    \n    vec3 tex1 = vec3(1.0,0.1,0.6);\n    vec3 tex2 = texture3d(iChannel1, pos, norm, 0.5).rgb;\n    vec3 tex = mix(tex1,tex2,k);\n    \n    vec3 d1 = -normalize(vec3(5.0,10.0,-20.0));\n    vec3 d2 = -normalize(vec3(-5,10.0,20.0));\n    vec3 d3 = -normalize(vec3(20,5.0,-5.0));\n    vec3 d4 = -normalize(vec3(-20.0,5.0,5.0));\n  vec3 l1 = light(d1, vec3(1.0,0.9,0.8), tex, norm, camdir);\n    vec3 l2 = light(d2, vec3(0.8,0.7,0.6), tex, norm, camdir);\n    vec3 l3 = light(d3, vec3(0.4,0.5,0.6), tex, norm, camdir);\n    vec3 l4 = light(d4, vec3(0.2,0.2,0.2), tex, norm, camdir);\n    \n    vec3 amb = vec3(0.02);\n    \n    return amb+l1+l2+l3+l4;\n}\n\nvec3 background( in vec3 rd )\n{\n  return vec3(0.2+0.2*texture3d(iChannel0, rd, rd, 1.0).r);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\n#pragma vr\n\nvoid main(void)\n{\n    vec2 xy = (gl_FragCoord.xy - iResolution.xy/2.0) / max(iResolution.xy.x, iResolution.xy.y);\n    \n    const float n = _NPRIM_;\n    const float speed = _SPEED_;\n    const float pi = 3.14159265358979;\n    float phi = 2.0 * pi / n;\n    float t = iGlobalTime + 0.9 * cos(iGlobalTime*n*speed+0.5*pi) / (speed*n);\n    float d = 6.0+2.0*cos(iGlobalTime*n*speed+pi)/(speed*n);\n    vec3 campos = vec3(3.5, 0.25, 0) + iPos.zyx * 10.0; //vec3(d*sin(t*0.7),3.0+1.5*sin(t*0.3),-d*cos(t*0.7));\n    vec3 camtar = vec3(0.0,0.0,0.0);\n    \n    mat3 camMat = calcLookAtMatrix( campos, camtar, 0.0 );\n    vec3 camdir = normalize(iDir.zyx); // normalize( camMat * vec3(xy,0.9) );\n    \n    vec3 col = vec3(0.0,0.0,0.0);\n    \n    float dist = raymarcher(campos, camdir);\n    \n    if (dist==-1.0) col = background(camdir);\n    else\n    {\n      vec3 inters = campos + dist * camdir;\n      col = material(inters, camdir);\n    }\n    \n    col = pow(col, vec3(0.6));\n    \n  gl_FragColor = vec4(col,1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}