{"Shader":{"ver":"0.1","info":{"id":"Mdl3z2","date":"1374954559","viewed":955,"name":"planet ocean","username":"FabriceNeyret2","description":"noise(pseudoAdvectedNoise(pos)) on a shape + cubemap + fog.<br\/>mouse rotate camera<br\/>#define MODE = 0,1,2  0 is cheaper than the default 2 :-)","likes":3,"published":3,"flags":0,"tags":["displacementperlin"],"hasliked":0},"renderpass":[{"inputs":[{"id":3,"src":"\/presets\/tex02.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ --- planet ocean ---------------------------\n\/\/ Fabrice NEYRET 27\/07\/2013\n\n#define MODE 2 \/\/ 0,1,2. wave kind. 2 is the most costly.\n\n#define ANIM true\n#define PI 3.1415927\n\nfloat time = iGlobalTime;\n\n\/\/ --- noise functions from https:\/\/www.shadertoy.com\/view\/XslGRr\n\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nmat3 m = mat3( 0.00,  0.80,  0.60,\n              -0.80,  0.36, -0.48,\n              -0.60, -0.48,  0.64 );\n\nfloat hash( float n )\n{\n    return fract(sin(n)*43758.5453);\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*57.0 + 113.0*p.z;\n\n    float res = mix(mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n                        mix( hash(n+ 57.0), hash(n+ 58.0),f.x),f.y),\n                    mix(mix( hash(n+113.0), hash(n+114.0),f.x),\n                        mix( hash(n+170.0), hash(n+171.0),f.x),f.y),f.z);\n    return res;\n}\n\nfloat fbm( vec3 p )\n{\n    float f;\n    f  = 0.5000*noise( p ); p = m*p*2.02;\n    f += 0.2500*noise( p ); p = m*p*2.03;\n    f += 0.1250*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p ); p = m*p*2.01;\n    f += 0.0625*noise( p );\n    return f;\n}\n\/\/ --- End of Created by inigo quilez\n\n\n\/\/ 2 noise channels from 2D position\nvec2 noise2_2( vec2 p )     \n{\n\tvec3 pos = vec3(p,.5);\n\tif (ANIM) pos.z += time;\n\tpos *= m;\n    float fx = noise(pos);\n    float fy = noise(pos+vec3(1345.67,0,45.67));\n    return vec2(fx,fy);\n}\n\n#define snoise(p)  (2.*noise(p)-1.)\n#define snoise2_2(p)  (2.*noise2_2(p)-1.)\n#define fbm2(p)  ((noise(p)+.5*noise(m*(p)))\/1.5)\n\n\/\/ pseudo-advection noise\nvec2 advfbm( vec2 p, float s )\n{\t\n    float l=1.;\n\tvec2 dp;\t\n    dp  =   snoise2_2(p+s*dp); l*=.5;\n    dp += l*snoise2_2(p+s*dp); l*=.5;\n    dp += l*snoise2_2(p+s*dp); l*=.5;\n    \/\/dp += l*snoise2_2(p+s*dp); l*=.5;\n    \/\/dp += l*snoise2_2(p+s*dp); \n\n    return s*dp;\n}\n\n \/\/ ----------- the scene ------------------------------\nfloat _h; \/\/ height(p). \nfloat scene(vec3 p) \n{\n\t\/\/ main shape\n\tconst float scale = 3.;\n\tvec2 disp = advfbm(scale*p.xz,.5)\/scale;\n\n#if MODE==0\n\tfloat h = length(disp);\n#elif MODE==1\n\tvec3 pp = p+vec3(disp,0.)+time*vec3(1.,0.,0.);\n\tfloat h = texture2D(iChannel0,.05*pp.xy).x;\n#else\n\tvec3 pp = p+vec3(disp,0.)+time*vec3(1.,0.,0.);\n\tfloat h = fbm(pp);\n#endif\n\t\n\t\/\/ planet shape.\n\th -= .05*dot(p.xz,p.xz);\n\t_h = h; \n\t\n\t\/\/ distance estimate from ray pos to surface\n\treturn  .2*(p.y-h);\n}\n\nvec3 Nscene(vec3 hit) \/\/ normal at hit point.\n{\n\tconst float E = .05;\n\tvec2 h = vec2(E,0.); \n\tfloat h0 = _h;\n\tscene(hit+h.xyy); float hx=_h-h0;\n\tscene(hit+h.yyx); float hz=_h-h0;\n\treturn normalize(vec3(-hx, E, -hz));\n}\n\nvec2 rotate(vec2 k,float t)\n{   return vec2(cos(t)*k.x-sin(t)*k.y,sin(t)*k.x+cos(t)*k.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tfloat speed = 0.;\n\tvec2 pos=(fragCoord.xy\/iResolution.y-vec2(.8,.5))*2.;\n\tvec2 mouse = vec2(0.,.16);\n\tif (iMouse.x > 0.) mouse = (iMouse.xy\/iResolution.xy-.5)*2.;\n    vec3 col;\n\tvec3 sky = vec3(.6,.8,1.);\n\tvec3 light = vec3(.2,.8,-.2);\n\n\t\/\/ camera & ray-marching inspired by rez\n\t\/\/ https:\/\/www.shadertoy.com\/view\/MsXGR2\n\t\n\tfloat fov = .5;\n\tvec3 dir=normalize(vec3(fov*pos,1.0));\t\/\/ ray dir\n\tdir.yz=rotate(dir.yz, PI*mouse.y);\t\t\/\/ rotation up\/down\n\tdir.zx=rotate(dir.zx,-PI*mouse.x);\t\t\/\/ rotation left\/right\n\t\/\/dir.xy=rotate(dir.xy,0.);\t       \t\t\/\/ twist\n\tvec3 ray=vec3(0.,2.+3.*sin(time),-4.);  \/\/ pos along ray\n\t\n\tfloat l=0.,dl;\n#define eps 1.e-3\n\tconst int ray_n=3*64;\n\tfor(int i=0; i<ray_n; i++) \/\/ march the ray up to the surface\n\t{\n\t\tl += dl = scene(ray+dir*l);\n\t\tif (dl<=eps) break;\n\t}\n\tif (dl<=10.*eps) \n\t{\n\t\tvec3 hit = ray+dir*l;\n\t\tfloat H=_h;\n\t\t\n\t\t\/\/ shading \n\t\tvec3 N = Nscene(hit);\n    \tfloat c;\n\t\tc = textureCube(iChannel1,N.xzy).x;\n\t\t\/\/c += .1*clamp(1.*dot(N,light),0.,1.);\n\t\t\n\t\t\/\/ fog\n\t\tfloat a = 1.-exp(-.07*l); \/\/ optical thickness\n\n\t\t\/\/ shading\n\t\tcol = 1.*c*vec3(0.,.5,.8); \n\t\t\/\/col +=  H*vec3(2.);\n\t\tcol = a*sky + (1.-a)*col;\n\t}\n\telse\n\t\tcol = sky;\n\t\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}