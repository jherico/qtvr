{"Shader":{"ver":"0.1","info":{"id":"Mtl3R2","date":"1423513705","viewed":859,"name":"kalizulmodul","username":"bergi","description":"mod of https:\/\/www.shadertoy.com\/view\/MtlGR2<br\/>called \"less techdemo\"","likes":9,"published":3,"flags":0,"tags":["3d","raymarching","fractal","kaliset"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\n\/\/ More Kali-de explorations +1\n\/\/ orgiginally https:\/\/www.shadertoy.com\/view\/MtlGR2\n\/\/ License aGPL v3\n\/\/ 2015, stefan berke \n\/\/ credits to eiffie and kali\n\n\n\/\/ http:\/\/www.musicdsp.org\/showone.php?id=238\nfloat Tanh(in float x) { return clamp(x * ( 27. + x * x ) \/ ( 27. + 9. * x * x ), -1., 1.); }\n\n\/\/ two different traps and colorings\n#define mph (.5 + .5 * Tanh(sin(iGlobalTime\/17.123+1.2)*4.))\n\n\nvec3 kali_sky(in vec3 pos, in vec3 dir)\n{\n    float time = iGlobalTime;\n    \n\tvec4 col = vec4(0,0,0,1);\n\t\n\tfloat t = 0., pln;\n    for (int k=0; k<50; ++k)\n\t{\n\t\tvec4 p = vec4(pos + t * dir, 1.);\n\n\t\tvec3 param = mix(\n            vec3(1.2+.4*sin(time\/6.13-.4)*min(1.,(time-70.)\/10.), .5, 0.09+0.08*sin(time\/4.)),\n\t\t\tvec3(.51, .5, 1.+0.5*sin(iGlobalTime\/40.)), mph);\n\n        \/\/ \"kali-set\" by Kali\n\t\tfloat d = 10.; pln=16.;\n        vec3 av = vec3(0.);\n\t\tfor (int i=0; i<11; ++i)\n\t\t{\n            p = abs(p) \/ dot(p.xyz, p.xyz);\n            \/\/ distance to prism\/cylinder\n            d = min(d, mix(p.x+p.y+p.z, length(p.xy), mph) \/ p.w);\n            \/\/ disc\n            if (i == 1)\tpln = min(pln, dot(p.xyz, vec3(0,0,1)) \/ p.w);\n\t\t\tav += p.xyz\/(4.+p.w);\n            p.xyz -= param - 100.*col.x*mph*(1.-mph);\n\t\t}\n        \/\/ blend the gems a bit \n\t\td += .03*(1.-mph)*smoothstep(0.1,0., t);\n\t\tif (d <= 0.0) break;\n        \/\/ something like a light trap\n\t\tcol.w = min(col.w, d);\n        \n#if 1\n        \/\/ a few more steps for texture\n        for (int i=0; i<5; ++i)\n        {\n            p = abs(p) \/ dot(p.xyz, p.xyz);\n            av += p.xyz\/(4.+p.w);\n            p.xyz -= vec3(.83)-0.1*p.xyz;\n        }\n#endif        \n\t\tcol.xyz += max(av \/ 9000., p.xyz \/ 8200.);\n\t\t\n\t\tt += min(0.1, mix(d*d, d, mph));\n\t}\n\t\n\treturn mix(col.xyz\/col.w*(2.1-2.*mph)\/(1.+.2*t), \n               mph-0.0003*length(pos)\/col.www - (1.-mph*0.4)*vec3(0.6,0.4,0.1)\/(1.+pln), \n               mph);\n}\n\n\nvec2 rotate(in vec2 v, float r) { float s = sin(r), c = cos(r);\treturn vec2(v.x * c - v.y * s, v.x * s + v.y * c); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = (fragCoord.xy - iResolution.xy*.5) \/ iResolution.y * 2.;\n    \n    vec3 dir = normalize(vec3(uv, (.9+.2*mph) - 0.4*length(uv)));\n    \n    float t = iGlobalTime\/2.;\n\tvec3 pos = vec3((1.-mph*.5)*sin(t\/2.), (.3-.2*mph)*cos(t\/2.), (.3+2.*mph)*(-1.5+sin(t\/4.13)));\n    pos.xy \/= 1.001 - mph + 0.2 * -pos.z;\n    dir.yz = rotate(dir.yz, -1.4+mph+(1.-.6*mph)*(-.5+0.5*sin(t\/4.13+2.+1.*sin(t\/1.75))));\n    dir.xy = rotate(dir.xy, sin(t\/2.)+0.2*sin(t+sin(t\/3.)));\n    \n\tfragColor = vec4(kali_sky(pos, dir), 1.);\n}\n","name":"","description":"","type":"image"}]}}