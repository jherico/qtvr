{"Shader":{"ver":"0.1","info":{"id":"4st3Rj","date":"1450880278","viewed":191,"name":"Procedural noise generator","username":"BiiG","description":"A fast way to generate a screen space procedural noise","likes":3,"published":3,"flags":0,"tags":["noiserandomprocedural"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/\n\/\/ Example implementation of a fast procedural noise\n\/\/ https:\/\/oneoverzerosite.wordpress.com\/2015\/12\/23\/procedural-noise-generation-in-a-pixel-shader\/\n\/\/\n\/\/ Created by Guillaume Carrez\n\/\/\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float cZoomFactor = 1.0;\n    \n    fragCoord.xy = floor(fragCoord.xy\/cZoomFactor)*cZoomFactor;\n    \/\/ Seed will be based on pixel coord, works pretty well for 1080p\n\tfloat seed = (fragCoord.x+0.5) * (fragCoord.y+1.0);\n\n    \n    \/\/ Compute 2 frequency perturbations\n    float noise = seed * (1.0-(1.0\/127.0));\t\t\t\/\/ 1st octave\n\tnoise *= fract ( noise * (1.0\/127.0) );\t\t\t\/\/ 2nd\n\tnoise = fract ( noise );\n\n    \/\/ Add some time update\n\tnoise = fract(noise+iGlobalTime*7.0);\n\n    \/\/ Output result as a grey scale value\n\tfragColor = vec4(noise,noise,noise,1.0);\n}","name":"","description":"","type":"image"}]}}