{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "XsjXR1",
				"date": "1409134954",
				"viewed": 2382,
				"name": "Worms",
				"username": "iq",
				"description": "Pretty much inspired by nimitz's spiral shader (https:\/\/www.shadertoy.com\/view\/4sfXDs)",
				"likes": 28,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						
					],

					"outputs": 
					[
						
					],

					"code": "// Created by inigo quilez - iq/2014\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n#pragma vr\n\nfloat hash(vec2 p) {\n  return fract(sin(1.0 + dot(p, vec2(127.1, 311.7))) * 43758.545);\n}\nvec2 sincos(float x) {\n  return vec2(sin(x), cos(x));\n}\nvec3 opU(vec3 d1, vec3 d2) {\n  return (d1.x < d2.x) ? d1 : d2;\n}\n\nvec2 sdSegment( in vec3 p, in vec3 a, in vec3 b )\n{\n  vec3 pa = p - a, ba = b - a;\n  float h = clamp( dot(pa,ba)/dot(ba,ba), 0.0, 1.0 );\n  return vec2( length( pa - ba*h ), h );\n}\n\nvec3 map(vec3 p) {\n  vec2 id = floor((p.xz + 1.0) / 2.0);\n  float ph = hash(id + 113.1);\n  float ve = hash(id);\n\n  p.xz = mod(p.xz + 1.0, 2.0) - 1.0;\n  p.xz += 0.5\n      * cos(\n          2.0 * ve * iGlobalTime + (p.y + ph) * vec2(0.53, 0.32) - vec2(1.57, 0.0));\n\n  vec3 p1 = p;\n  p1.xz += 0.15 * sincos(p.y - ve * iGlobalTime * ve + 0.0);\n  vec3 p2 = p;\n  p2.xz += 0.15 * sincos(p.y - ve * iGlobalTime * ve + 2.0);\n  vec3 p3 = p;\n  p3.xz += 0.15 * sincos(p.y - ve * iGlobalTime * ve + 4.0);\n\n  vec2 h1 = sdSegment(p1, vec3(0.0, -50.0, 0.0), vec3(0.0, 50.0, 0.0));\n  vec2 h2 = sdSegment(p2, vec3(0.0, -50.0, 0.0), vec3(0.0, 50.0, 0.0));\n  vec2 h3 = sdSegment(p3, vec3(0.0, -50.0, 0.0), vec3(0.0, 50.0, 0.0));\n\n  return opU(\n      opU(vec3(h1.x - 0.15 * (0.8 + 0.2 * sin(200.0 * h1.y)), ve + 0.000, h1.y),\n          vec3(h2.x - 0.15 * (0.8 + 0.2 * sin(200.0 * h2.y)), ve + 0.015, h2.y)),\n      vec3(h3.x - 0.15 * (0.8 + 0.2 * sin(200.0 * h3.y)), ve + 0.030, h3.y));\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd, in float px, const float maxdist )\n{\n  vec3 res = vec3(-1.0);\n  float t = 0.0;\n  for( int i=0; i<256; i++ )\n  {\n    vec3 h = map(ro + t*rd);\n    res = vec3( t, h.yz );\n    if( h.x<(px*t) || t>maxdist ) break;\n    t += min( h.x, 0.5 )*0.7;\n  }\n  return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n  const vec2 e = vec2(1.0,-1.0)*0.003;\n  return normalize( e.xyy*map( pos + e.xyy ).x +\n      e.yyx*map( pos + e.yyx ).x +\n      e.yxy*map( pos + e.yxy ).x +\n      e.xxx*map( pos + e.xxx ).x );\n}\n\nfloat calcOcc( in vec3 pos, in vec3 nor )\n{\n  const float h = 0.1;\n  float ao = 0.0;\n  for( int i=0; i<8; i++ )\n  {\n    vec3 dir = sin( float(i)*vec3(1.0,7.13,13.71)+vec3(0.0,2.0,4.0) );\n    dir = dir + 2.0*nor*max(0.0,-dot(nor,dir));\n    float d = map( pos + h*dir ).x;\n    ao += h-d;\n  }\n  return clamp( 1.0 - 0.7*ao, 0.0, 1.0 );\n}\n\nvoid main(void) {\n  vec2 p = (-iResolution.xy + 2.0 * gl_FragCoord.xy) / iResolution.y;\n  vec2 q = gl_FragCoord.xy / iResolution.xy;\n\n  vec3 ro = vec3(0.6, 2.4, 1.2);\n  vec3 ta = vec3(0.0, 0.0, 0.0);\n  float fl = 3.0;\n  vec3 ww = normalize(ta - ro);\n  vec3 uu = normalize(cross(vec3(0.0, 1.0, 0.0), ww));\n  vec3 vv = normalize(cross(ww, uu));\n  vec3 rd = normalize(iDir);\n\n  vec3 col = vec3(0.0);\n\n  const float maxdist = 32.0;\n  vec3 res = intersect(ro, rd, 1.0 / (iResolution.y * fl), maxdist);\n  if (res.x < maxdist) {\n    vec3 pos = ro + res.x * rd;\n    vec3 nor = calcNormal(pos);\n    float occ = calcOcc(pos, nor);\n\n    col = 0.5 + 0.5 * cos(res.y * 30.0 + vec3(0.0, 4.4, 4.0));\n    col *= 0.5 + 1.5 * nor.y;\n    col += clamp(1.0 + dot(rd, nor), 0.0, 1.0);\n    float u = 800.0 * res.z - sin(res.y) * iGlobalTime;\n    col *= 0.95\n        + 0.05\n            * cos(\n                u + 3.1416 * cos(1.5 * u + 3.1416 * cos(3.0 * u))\n                    + vec3(0.0, 1.0, 2.0));\n    col *= vec3(1.5, 1.0, 0.7);\n    col *= occ;\n\n    float fl = mod((0.5 + cos(2.0 + res.y * 47.0)) * iGlobalTime + res.y * 7.0, 4.0)\n        / 4.0;\n    col *= 2.5 - 1.5 * smoothstep(0.02, 0.04, abs(res.z - fl));\n\n    col *= exp(-0.1 * res.x);\n    col *= 1.0 - smoothstep(20.0, 30.0, res.x);\n  }\n\n  col = pow(col, vec3(0.5, 1.0, 1.0));\n\n  col *= pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.1);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}