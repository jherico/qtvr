{"Shader":{"ver":"0.1","info":{"id":"4ljXWK","date":"1446597454","viewed":411,"name":"2015\/11\/03","username":"hughsk","description":"SDFs","likes":7,"published":3,"flags":0,"tags":["geometry"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\nvec2 doModel(vec3 p, vec2 beats);\n\nvec2 calcRayIntersection_2_0(vec3 rayOrigin, vec3 rayDir, float maxd, float precis, vec2 beats) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 50; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist, beats);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_2_0(vec3 rayOrigin, vec3 rayDir, vec2 beats) {\n  return calcRayIntersection_2_0(rayOrigin, rayDir, 20.0, 0.001, beats);\n}\n\nvec3 calcNormal_3_1(vec3 pos, float eps, vec2 beats) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps, beats ).x +\n                    v2 * doModel( pos + v2*eps, beats ).x +\n                    v3 * doModel( pos + v3*eps, beats ).x +\n                    v4 * doModel( pos + v4*eps, beats ).x );\n}\n\nvec3 calcNormal_3_1(vec3 pos, vec2 beats) {\n  return calcNormal_3_1(pos, 0.002, beats);\n}\n\n\n\nfloat ao_1_2( in vec3 pos, in vec3 nor, vec2 beats )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12 * float( i ) \/ 4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = doModel( aopos, beats ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\nfloat orenNayarDiffuse_4_3(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float roughness,\n  float albedo) {\n  \n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo \/ (sigma2 + 0.13) + 0.5 \/ (sigma2 + 0.33));\n  float B = 0.45 * sigma2 \/ (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s \/ t) \/ 3.14159265;\n}\n\nvec2 squareFrame_9_4(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy \/ screenSize.xy) - 1.0;\n  position.x *= screenSize.x \/ screenSize.y;\n  return position;\n}\n\n\n\nmat3 calcLookAtMatrix_11_5(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\n\n\n\nvec3 getRay_10_6(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay_10_6(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix_11_5(origin, target, 0.0);\n  return getRay_10_6(camMat, screenPos, lensLength);\n}\n\n\n\n\nvoid orbitCamera_5_7(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection,\n  in vec2 fragCoord\n) {\n  vec2 screenPos = squareFrame_9_4(screenResolution, fragCoord);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay_10_6(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\n\n\nfloat gaussianSpecular_6_8(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta \/ shininess;\n  return exp(-w*w);\n}\n\n\n\/\/ Originally sourced from:\n\/\/ http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\nfloat sdBox_7_9(vec3 position, vec3 dimensions) {\n  vec3 d = abs(position) - dimensions;\n\n  return min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d, 0.0));\n}\n\n\n\nfloat fogFactorExp2_8_10(\n  const float dist,\n  const float density\n) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\n\n\n  \n#define rs(a) (a * 0.5 + 0.5)\n\nmat4 rotationMatrix(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n              oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n              oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n              0.0,                                0.0,                                0.0,                                1.0);\n}\n  \nfloat boxTiles(vec3 p, float r) {\n  float l = 0.3;\n  mat4 rot = rotationMatrix(normalize(vec3(1, 0, 1)), sin(iGlobalTime * 0.15) * 5.);\n  p = (rot * vec4(p, 1)).xyz;\n  p = mod(p + l, l * 2.) - l;\n  \n  return sdBox_7_9(p, vec3(r));\n}\n  \nvec2 doModel(vec3 p, vec2 beats) {\n  float d  = mix(length(p) - 2.0, sdBox_7_9(p, vec3(1.)), 0.5 + sin(iGlobalTime * 0.215) * 0.35);\n  float id = 0.0;\n  \n  d = max(d, -boxTiles(p, 0.15 + 0.125 * rs(sin(iGlobalTime))));\n  d = max(d, 1.35 - length(p));\n\n  return vec2(d, id);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 color = vec3(0.0);\n  vec3 ro, rd;\n\n  float rotation = sin(iGlobalTime * 0.25) * 0.5 + 1.5 + iMouse.x \/ iResolution.x * 6.;\n  float height   = 2.0 - (iMouse.y \/ iResolution.y - 0.25) * 10.;\n  float dist     = 4.0;\n  orbitCamera_5_7(rotation, height, dist, iResolution.xy, ro, rd, fragCoord);\n    \n  vec2 beats = vec2(0);\n  \n  color = mix(clamp(abs(rd * 2.), 0., 1.), vec3(1.0), 0.75);\n\n  vec2 t = calcRayIntersection_2_0(ro, rd, 10., 0.0001, beats);\n  if (t.x > -0.5) {\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal_3_1(pos, beats);\n    vec3 mat = nor * 0.5 + 0.5;\n    vec3 dir = normalize(vec3(-0.5, 1, -0.15));\n    vec3 lcl = vec3(1.9, 1.75, 1.7);\n    vec3 col;\n    \n    float spec = gaussianSpecular_6_8(dir, -rd, nor, 0.3) * 0.33;\n    float diff = orenNayarDiffuse_4_3(dir, -rd, nor, 1.5, 1.1);\n    \n    col = mix(mat, lcl * (spec + diff * mat), 0.55);\n    col *= mix(0.75, 1.0, ao_1_2(pos, nor, beats));\n    \n    color = mix(col, color, fogFactorExp2_8_10(t.x, 0.15));\n  }\n  \n  color = pow(color, vec3(0.6545));\n\n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}","name":"","description":"","type":"image"}]}}