{"Shader":{"ver":"0.1","info":{"id":"MtSXzc","date":"1445383876","viewed":607,"name":"Subluminic 2","username":"aiekick","description":"Subluminic 2","likes":12,"published":3,"flags":0,"tags":["subluminic2"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\/\/ Tuned via XShade (http:\/\/www.funparadigm.com\/xshade\/)\n\n\/* \n\tthe cloudy famous tech come from the shader of duke : https:\/\/www.shadertoy.com\/view\/MljXDw\n        Himself a Port of a demo by Las => http:\/\/www.pouet.net\/topic.php?which=7920&page=29&x=14&y=9\n*\/\n\nfloat t;\n#define Tunnel(p,pos,c,s) p.xy-pos-vec2(cosPath(p, c),sinPath(p, s))\n\n#define uTex2D iChannel0\nfloat pn( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D(uTex2D, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn -1.0+2.4*mix( rg.x, rg.y, f.z );\n}\n\nvec2 df(vec3 p)\n{\n\tfloat pnNoise = pn(p*.26)*1.98 + pn(p*.26)*.62 + pn(p*1.17)*.39;\n\t\n\tvec3 q0 = p;\n\tq0.x += cos(q0.z + t)*5.;\n\tq0.y += sin(q0.z + t)*5.;\n\tfloat k = length(q0.xy) + cos(q0.z + t + pnNoise*5.) + cos((q0.y+t+pnNoise)*2.) + pnNoise - 2.;\n\tvec2 res = vec2(k, 1.);\n\t\n\tvec3 q1 = p;\n\tq1.x -= cos(q1.z + t)*5.;\n\tq1.y -= sin(q1.z + t)*5.;\n\tk = length(q1.xy) + cos(q1.z + t + pnNoise*5.) + cos((q1.y+t+pnNoise)*2.) + pnNoise - 2.;\n\tif (k <res.x)\n\t\tres = vec2(k, 2.);\n\t\n\treturn res;\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 cv, float fov)\n{\n\tvec3 rov = normalize(cv-ro);\n    vec3 u = normalize(cross(cu, rov));\n    vec3 v = normalize(cross(rov, u));\n    vec3 rd = normalize(rov + fov*u*uv.x + fov*v*uv.y);\n    return rd;\n}\n\nvec3 march(vec3 f, vec3 ro, vec3 rd, float st)\n{\n\tvec3 s = vec3(1), h = vec3(.16,.008,.032), w = vec3(0);\n\tvec2 k;\n\tvec3 c1,c2;\n\tfloat d=1.,dl=0., td=0.;\n\tvec3 p = ro;\n\tfor(float i=0.;i<100.;i++)\n\t{      \n\t\tif(s.x<0.01||d>40.||td>.95) break;\n\t\tk = df(p);\n\t\t\n\t\tif (k.y == 1.)\n\t\t{\n\t\t\tc1 = vec3(107,160,72);\n\t\t\tc2 = vec3(61,27,54);\n\t\t\th = vec3(.16,.008,.032);\n\t\t}\n\t\tif (k.y == 2.)\n\t\t{\n\t\t\tc1 = vec3(214,320,144);\n\t\t\tc2 = vec3(96,1.6,85);\n\t\t\th = vec3(0.12,0.016,0.03);\n\t\t}\n\t\t\n\t\ts = k.x * .1 * i\/c1;\n\t\tw = (1.-td) * (h-s) * i\/c2 * step(s,h);\n\t\t\n\t\tf += w;\n\t\ttd += w.x + .01;\n\t\tdl += 1. - exp(-0.001 * log(d));;\t\n\t\ts = max(s, st);\n\t\td +=s.x; \n\t\tp =  ro+rd*d;\t\n   \t}\n\tdl += 2.52;\n\tf \/= dl\/7.04;\n\tf = mix( f.rgb, vec3(0), 1. - exp( -.0017*d*d) ); \/\/ fog\n\treturn f;\n}\n\n#define uTime iGlobalTime\n#define uScreenSize iResolution.xy\nvoid mainImage( out vec4 f, in vec2 g )\n{\n\tt = uTime*1.5;\n\tf = vec4(0,0.15,0.32,1);\n    vec2 q = g\/uScreenSize;\n    vec3 ro = vec3(0.);ro.z = t;\n\tvec2 uv = (2.*g-uScreenSize)\/uScreenSize.y;\n\tvec3 rd = cam(uv, ro, vec3(0,1,0), ro + vec3(0,0,1), 7.);\n\tf.rgb = march(f.rgb, ro, rd, 0.38016);\n\tuv*= uScreenSize;\n\tfloat k = fract( cos(uv.y * 0.0001 + uv.x) * 500000.);\n\tf.rgb = mix(f.rgb, vec3(1), pow(k, 50.));\n    f.rgb *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 ); \/\/ vignette\n}\n","name":"","description":"","type":"image"}]}}