{"Shader":{"ver":"0.1","info":{"id":"4tfXRl","date":"1438773564","viewed":796,"name":"Contour","username":"antonOTI","description":"my implementation of contour, I intend to use it for a small game of my own","likes":3,"published":3,"flags":0,"tags":["2d","noob","edge"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec4 FakeStencil(vec2 pos)\n{\n    float shape = 1. - smoothstep(.13,.16,distance(pos,vec2(0.5)));\n    float t = iGlobalTime;\n   \tshape = max(shape,1. - smoothstep(.05,.09,distance(pos,vec2(cos(t)*1.1,sin(t)*.8) * .15 + vec2(.5))));\n   \tshape = max(shape, 1. - smoothstep(.025,.04,distance(pos,iMouse.xy\/iResolution.xy * vec2(1.,.5) + vec2(0.,.25))));\n\treturn vec4(1.) * shape;\n}\n\n#define P .001\nvec4 outlineColor = vec4(.9,.15,0.04,1.);\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv.y = (uv.y - 0.5) * iResolution.y \/ iResolution.x + 0.5;\n    \n    float stencil = FakeStencil(uv + vec2(-1.,0.) * P).x;\n    stencil += FakeStencil(uv + vec2(1.,0.) * P).x;\n    stencil += FakeStencil(uv + vec2(0.,-1.) * P).x;\n    stencil += FakeStencil(uv + vec2(0.,1.) * P).x;\n    \n    stencil += FakeStencil(uv + vec2(-.7,-.7) * P).x;\n    stencil += FakeStencil(uv + vec2(.7,.7) * P).x;\n    stencil += FakeStencil(uv + vec2(.7,-.7) * P).x;\n    stencil += FakeStencil(uv + vec2(-.7,.7) * P).x;\n    \n    \/\/ Contour\n    float a = smoothstep(3.5,4.5,stencil)*(1. - smoothstep(7.9,8.,stencil));\n    \n    \/\/ Stripes\n    a += step(8.,stencil) * .2 * step(.7,sin((uv.x * 240. + uv.y *60.)+ iGlobalTime * 7.)*.4+.6);\n    \n    vec4 col = outlineColor * a;\n    \n\tfragColor = col;\n}","name":"","description":"","type":"image"}]}}