{"Shader":{"ver":"0.1","info":{"id":"ltlXzS","date":"1437677520","viewed":882,"name":"states of matter","username":"miloszmaki","description":"Shader presenting different states of matter (solid, liquid, gas \/ plasma). Made for competition on warsztat.gd","likes":1,"published":3,"flags":0,"tags":["3d","physics","warsztat"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float MELTING = 5.0;\nconst float EVAPORATING = 5.0;\nconst float DURATION = MELTING + EVAPORATING;\nconst float RADIUS = 1.0;\nconst int ITERATIONS = 100;\nconst vec3 UPDIR = vec3(0, 1, -0.3);\nconst vec3 EYE = vec3(0, 0, -4);\nconst float VISIBILITY = 10.0;\n\nfloat sphere(vec3 p, vec3 pos, float rad)\n{\n    return length(p - pos) - rad;\n}\n\nfloat plane(vec3 p, vec3 n, float d)\n{\n    return dot(p, normalize(n)) - d;\n}\n\nfloat circle(vec3 p, vec3 pos, vec3 n, float d, float rad)\n{\n    return max(sphere(p, pos, rad), plane(p, n, d));\n}\n\nfloat scene(vec3 p, float t)\n{\n    if (t > MELTING + 0.5*EVAPORATING) t = 0.0;\n    t = clamp(t \/ MELTING, 0.0, 1.0);\n    vec3 spos = t * -normalize(UPDIR) * 2.0*RADIUS;\n    float d = sphere(p, spos, RADIUS);\n    d = min(d, plane(p, UPDIR, -RADIUS));\n    d = min(d, circle(p, vec3(0), UPDIR, -RADIUS*0.8, sqrt(t)*RADIUS*3.0));\n    return d;\n}\n\nvec3 shade(vec3 pos)\n{\n    float d = 1.0 - length(pos) \/ VISIBILITY;\n    float a = clamp(plane(pos, UPDIR, -RADIUS), 0.0, 1000.0);\n    return d * mix(vec3(0.6),vec3(0,0.8,1.0),a*1.5);\n}\n\nfloat plasma(vec2 pos, float rep, float w1, float w2, float w3)\n{\n    float t = iGlobalTime;\n    return sin(rep * (sin(w1*pos.x + t) + sin(w2*pos.y + 5.8*t) + sin(w3*(pos.x - pos.y) + 1.2 * t)));\n}\n\nvec3 render(vec3 dir, float t)\n{\n    vec3 st = dir * (VISIBILITY \/ float(ITERATIONS));\n    vec3 pos = EYE + dir * VISIBILITY;\n    vec3 color = vec3(0.0);\n    for (int i=0; i<ITERATIONS; i++)\n    {\n        float d = scene(pos, t);\n        if (d <= 0.0) color = shade(pos);\n        pos -= st;\n    }\n    \n    float ft = clamp((t - MELTING) \/ EVAPORATING, 0.0, 1.0);\n    float dens = mix(15.0, 5.0, ft*ft);\n    float fog = plasma(dens*dir.xy, 5.0, 45.0, -52.0, 35.0);\n    ft = clamp(-4.5*ft*(ft-1.0), 0.0, 1.0);\n    color = mix(color, vec3(0.4,0.8,1.0)*fog, ft);\n    \n    return color;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = uv * 2.0 - 1.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 dir = normalize(vec3(uv, 2.0));\n    \n    float time = mod(iGlobalTime, DURATION);\n\t\n    vec3 color = render(dir, time);\n    \n    \/\/color = mix(color, vec3(1), 0.2 * mod(iGlobalTime, 1.0));\n    \n    fragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}