{"Shader":{"ver":"0.1","info":{"id":"ldBGWW","date":"1387898382","viewed":4028,"name":"Eye of Sauron","username":"Dave_Hoskins","description":"The Eye of Sauron from the Lord of the Rings film. Was that really more than 12 years ago? <br\/><br\/>","likes":53,"published":3,"flags":64,"tags":["3d","raytracing","fractal","eyeofsauron","soundcloud"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":162,"src":"https:\/\/soundcloud.com\/togashi_joe\/the-lord-of-the-rings-the-evil-of-the-ring-sauron-mordor-theme","ctype":"musicstream","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Eye of Sauron.\tBy Dave Hoskins. Dec. 2013\n\/\/ Video: http:\/\/youtu.be\/DCQrDLbhiuQ\n\n#define TAU 6.28318530718\n#define MOD2 vec2(.16632,.17369)\n#define MOD3 vec3(.16532,.17369,.15787)\nfloat gTime = iGlobalTime + 44.29;\nfloat flareUp = max(sin(gTime*.75+3.5), 0.0);\n\n\/\/=================================================================================================\nvec2 Rotate2axis(vec2 p, float a)\n{\n\tfloat si = sin(a);\n\tfloat co = cos(a);\n\treturn mat2(si, co, -co, si) * p;\n}\n\n\/\/=================================================================================================\n\/\/ Linear step, faster than smoothstep...\nfloat LinearStep(float a, float b, float x)\n{\n\treturn clamp((x-a)\/(b-a), 0.0, 1.0);\n}\n\n\/\/=================================================================================================\n\nfloat Hash(float p)\n{\n\tvec2 p2 = fract(vec2(p) * MOD2);\n    p2 += dot(p2.yx, p2.xy+19.19);\n\treturn fract(p2.x * p2.y);\n}\n \n\/\/=================================================================================================\nfloat EyeNoise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n\tf = clamp(pow(f, 7.0), 0.0,1.0);\n\t\/\/f = f*f*(3.0-2.0*f);\n    return mix(Hash(p), Hash(p+1.0), f);\n}\n\n\/\/=================================================================================================\nfloat Bump( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\t\/\/f = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5) \/ 256.0, -100.0).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n\/\/=================================================================================================\nfloat Noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5) \/ 256.0, -100.0).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n\/\/=================================================================================================\nfloat Pupil(vec3 p, float r)\n{\n\t\/\/ It's just a stretched sphere but the mirrored\n\t\/\/ halves are push together to make a sharper top and bottom.\n\tp.xz = abs(p.xz)+.25;\n\treturn length(p) - r;\n}\n\n\/\/=================================================================================================\nfloat DE_Fire(vec3 p)\n{\n\tp *= vec3(1.0, 1.0, 1.5);\n\tfloat len = length(p);\n\tfloat ax = atan(p.y, p.x)*10.0;\n\tfloat ay = atan(p.y, p.z)*10.0;\n\tvec3 shape = vec3(len*.5-gTime*1.2, ax, ay) * 2.0;\n\t\n\tshape += 2.5 * (Noise(p * .25) -\n\t\t\t\t \tNoise(p * 0.5) * .5 +\n\t\t\t\t\tNoise(p * 2.0) * .25);\n\tfloat f = Noise(shape)*6.0;\n\tf += (LinearStep(7.30, 8.3+flareUp, len)*LinearStep(12.0+flareUp*2.0, 8.0, len)) * 3.0;\n\tp *= vec3(.75, 1.2, 1.0);\n\tlen = length(p);\n\tf = mix(f, 0.0, LinearStep(12.5+flareUp, 16.5+flareUp, len));\n\treturn f;\n}\n\n\/\/=================================================================================================\nfloat Sphere(vec3 p, float r)\n{\n\treturn length(p) - r;\n}\n\n\/\/=================================================================================================\nfloat DE_Pillars(vec3 p)\n{\n\t\/\/ It's just two spheres with added bumpy noise.\n\t\/\/ Simple, but it'll do fine. :)\t\n\tfloat d = Sphere((p+vec3(0.0, 1.0, 0.0))*vec3(1.0, 1.0, 18.0), 20.0);\n\td = max(-Sphere((p + vec3(0.0, -3.0, 38.0))* vec3(1.5, 1.1, .95), 44.0), d);\n\td += Noise(p*2.0)*.15 + Noise(p*8.0)*.04;\n\treturn d;\n}\n\n\/\/=================================================================================================\nfloat DE_Pupil(vec3 p)\n{\n\tfloat time = gTime * .5+sin(gTime*.3)*.5;\n\tfloat t = EyeNoise(time) * .125 +.125;\n\tp.yz = Rotate2axis(p.yz, t * TAU);\n\tp *= vec3(1.2-EyeNoise(time+32.5)*.5, .155, 1.0);\n\tt = EyeNoise(time-31.0) * .125 +.1875;\n\tp.xz = Rotate2axis(p.xz, t*TAU);\n\tp += vec3(.0, 0.0, 4.);\n\t\n\tfloat  d = Pupil(p, .78);\n\treturn d * max(1.0, abs(p.y*2.5));\n}\n\n\/\/=================================================================================================\nvec3 Normal( in vec3 pos )\n{\n\tvec2 eps = vec2( 0.1, 0.0);\n\tvec3 nor = vec3(\n\t    DE_Pillars(pos+eps.xyy) - DE_Pillars(pos-eps.xyy),\n\t    DE_Pillars(pos+eps.yxy) - DE_Pillars(pos-eps.yxy),\n\t    DE_Pillars(pos+eps.yyx) - DE_Pillars(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n\/\/=================================================================================================\nvec4 Raymarch( in vec3 ro, in vec3 rd, in vec2 fragCoord, inout bool hit, out float pupil)\n{\n\tfloat sum = 0.0;\n\t\/\/ Starting point plus dither to prevent edge banding...\n\tfloat t = 14.0 + .1 * texture2D(iChannel0, fragCoord.xy \/ iChannelResolution[0].xy).y;\n\tvec3 pos = vec3(0.0, 0.0, 0.0);\n\tfloat d = 100.0;\n\tpupil = 0.0;\n\tfor(int i=0; i < 197; i++)\n\t{\n\t\tif (hit || pos.z > 11.0)\n\t\t{\n\t\t\t\/\/ Skip the loop code quickly...\n\t\t\tcontinue;\n\t\t}\n\t\tpos = ro + t*rd;\n\t\tvec3 shape = pos * vec3(1.5, .4, 1.5);\n\t\n\t\t\/\/ Accumulate pixel denisity depending on the distance to the pupil\n\t\td = DE_Pupil(pos);\n\t\tif (d < .3)\n\t\t\tpupil += LinearStep(0.02 +Noise(pos*4.0+gTime)*.3, 0.0, d) * .17;\n\n\t\t\/\/ Add fire around pupil...\n\t\tsum += LinearStep(1.3, 0.0, d) * .014;\n\t\t\n\t\t\/\/ Search for pillars...\n\t\td = DE_Pillars(pos);\n\t\tif (d < 0.0)\n\t\t{\n\t\t\tpos = ro + (t + d) * rd;\n\t\t\thit = true;\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\tsum += max(DE_Fire(pos), 0.0) * .00162;\n    \tt += max(.1, t*.0057);\n\n\t}\n\t\n\treturn vec4(pos, clamp(sum*sum*sum, 0.0, 1.0 ));\n}\n\n\/\/=================================================================================================\nvec3 FlameColour(float f)\n{\n\tf = f*f*(3.0-2.0*f);\n\treturn  min(vec3(f+.8, f*f*1.4+.05, f*f*f*.6) * f, 1.0);\n}\n\n\/\/=================================================================================================\nfloat Sky(vec2 p)\n{\n\tfloat z = gTime*.5 + 47.5;\n\tp *= .0025;\n\tfloat dist = length(p) * .7;\n\n\tfloat f = 0.0;\n\tfloat w = .27;\n\tfor (int i=0; i < 7; i++)\n\t{\n\t\tf += Noise(vec3(p, z)) * w;\n\t\tw *= .55;\n\t\tp *= 2.7;\n\t}\n\n\tf = smoothstep(.17, 1.0, f)*.55;\n\tf = f \/ dist; \n\treturn f;\n}\n\n\/\/=================================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tvec2 p = -1.0 + 2.0 * uv;\n\tp.x *= iResolution.x\/iResolution.y;\n\n\tvec3 origin = vec3(sin(gTime*.34)*5.0, -10.0 - sin(gTime*.415) * 6.0, -20.0+sin(gTime*.15) * 2.0);\n\tvec3 target = vec3( 0.0, 0.0, 0.0 );\n\t\n\t\/\/ Make camera ray using origin and target positions...\n\tvec3 cw = normalize( target-origin);\n\tvec3 cp = vec3(0.0, 1.0, 0.0);\n\tvec3 cu = normalize( cross(cw, cp) );\n\tvec3 cv = ( cross(cu,cw) );\n\tvec3 ray = normalize(p.x*cu + p.y*cv + 1.5 * cw );\n\t\n\tbool hit = false;\n\tfloat pupil = 0.0;\n\tvec4 ret = Raymarch(origin, ray, fragCoord, hit, pupil);\n\tvec3 col = vec3(0.0);\n\n\tvec3 light = vec3(0.0, 4.0, -4.0);\n\t\/\/ Do the lightning flash effect...\n\tfloat t = mod(gTime+3.0, 13.0);\n\tfloat flash = smoothstep(0.4, .0, t);\n\tflash += smoothstep(0.2, .0, abs(t-.6)) * 1.5;\n\tflash += smoothstep(0.7, .8, t) * smoothstep(1.3, .8, t);\n\tflash *= 2.2;\n\n\tif (hit)\n\t{\n\t\t\/\/ Pillars...\n\t\tvec3 nor  = Normal(ret.xyz);\n\t\tvec3 ldir = normalize(light - ret.xyz);\n\t\tvec3 ref  = reflect(ray, nor);\n\t\tfloat bri = max(dot(ldir, nor), 0.0) * (1.0+flareUp*2.0) + flash * max(nor.y * 2.0 - nor.z*.5, 0.0);\n\t\tfloat spe = max(dot(ldir, ref), 0.0);\n\t\tspe = pow(abs(spe), 40.0) * .15;\n\t\tvec3 mat = vec3(.6, .4, .35) * .15;\n\t\tcol = mat * bri + spe * vec3(.4, .2, .0);\n\t}else\n\t{\n\t\t\/\/ Background...\n\t\tif (ray.y > 0.0)\n\t\t{\n\t\t\tfloat d = (250.0 - origin.y) \/ ray.y;\n\t\t\tvec2 cloud = vec2((ray * d).xz);\n\t\t\tfloat k = Sky(cloud);\n\t\t\tcol = vec3(.7, .7, 1.0) * k;\n\t\t\tcol += (smoothstep(0.045, 0.19, k)) * flash * vec3(.58, .53, .6);\n\t\t}\n\t}\n\t\n\tcol += FlameColour(ret.w);\n\tcol = mix (col, vec3(0.0), min(pupil, 1.0));\n\t\n\t\/\/ Contrasts...\n\tcol = sqrt(col);\n\tcol = min(mix(vec3(length(col)),col, 1.22), 1.0);\n\tcol += col * .3;\n\t\n\tfragColor = vec4(min(col, 1.0),1.0);\t\n}","name":"","description":"","type":"image"}]}}