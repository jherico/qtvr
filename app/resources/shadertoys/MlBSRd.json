{"Shader":{"ver":"0.1","info":{"id":"MlBSRd","date":"1445824834","viewed":434,"name":"dotted grid sphere","username":"Macint","description":"tron-like grid on a sphere","likes":2,"published":3,"flags":0,"tags":["3d"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define PI 3.14159265359\n#define ZMAX 12.0\n#define GRIDINTERVAL 40.0\/(2.0*PI)\n#define DASHINTERVAL 200.0\/(2.0*PI)\n\nstruct Intersection\n{\n\tvec3 p;\n    bool vis;\n\tfloat dist;\n};\n\nIntersection sphereintersect(vec3 raydir, vec3 origin) {\n    \/\/origin.z + raydir.z*t = plane.\n    vec3 sphereorigin = origin + vec3(0,19.5,0);\n    float sphereradius = 20.0;\n    \n    float A = dot(raydir,raydir);\n    float B = 2.0*dot(raydir,origin-sphereorigin);\n    float C = dot(origin-sphereorigin,origin-sphereorigin) - sphereradius*sphereradius;\n    \n    Intersection i;\n    i.vis = false;\n    \n    if ( (B*B - 4.*A*C) < 0. ) {\n        \/\/imaginary!\n    } else {\n        float tmp_sqr = sqrt(B*B-4.*A*C);\n        float t1 = (-B + tmp_sqr)\/(2.*A);\n        float t2 = (-B - tmp_sqr)\/(2.*A);\n\n        if (t1 < 0. && t2 < 0.) {\n\n        } else {\n            \/\/find the smallest non zero t\n            float t;\n            if ( (t1 > 0. && t1 < t2) || (t2 < 0. && t1 > 0.) ) {\n                t = t1;\n            } else if (t2 > 0. && t2 < t1) {\n                t = t2;\n            }\n            \n            i.p = origin + raydir*t;\n            i.vis = true;\n\t        i.dist = t;\n        }\n\n    }\n\treturn i;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = -1.0 + 2.0 * ( fragCoord.xy \/ iResolution.xy );\n\tvec2 posAR;\n\tposAR.x = pos.x * (iResolution.x\/iResolution.y);\n\tposAR.y = pos.y;\n    \n    vec3 origin = vec3(0,0,iDate.w-10.0);\n    vec3 raydir = vec3(posAR.x,posAR.y,1) - vec3(0,0,0);\n    Intersection i = sphereintersect(raydir,origin);\n    \n    if (i.vis) {\n        float d = 0.0;\n        bool draw = (\n            (\n                sin(i.p.x*GRIDINTERVAL) < (-0.999) &&\n            \tsin(i.p.z*DASHINTERVAL) > 0.95\n            ) \n            ||\n            (\n                sin(i.p.z*GRIDINTERVAL) < -0.999 &&\n                sin(i.p.x*DASHINTERVAL) > 0.95\n            )\n        );\n        d = (draw ? 1.0 : 0.0);\n        fragColor = vec4(0,d,0,1);\n        fragColor *= ((i.dist < ZMAX) ? 1. - i.dist\/ZMAX : 0.);\n    }\n    else {\n    \tfragColor = vec4(0,0,0,0);\n    }\n}","name":"","description":"","type":"image"}]}}