{"Shader":{"ver":"0.1","info":{"id":"MdsGzr","date":"1362142644","viewed":1449,"name":"Mostly Harmless","username":"P_Malin","description":"More 8bit era fun. A Cobra Mk III from Elite with chunky rasterization.<br\/>(used with permission by Frontier Developments)<br\/>Click in window to override rotation.<br\/>","likes":25,"published":3,"flags":8,"tags":["3d","rasterizer","retro","wireframe","line"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Settings\n\n#define EMULATE_8BIT\n\n#ifdef EMULATE_8BIT\n\t#define LIMIT_FRAMERATE\n\t#define SCANLINE_EFFECT\n\t#define NON_AA_LINES\n\t#define LOW_RESOLUTION\n\t#define XOR_PIXELS\n#endif\n\n#ifndef NON_AA_LINES\n#ifdef XOR_PIXELS\n#undef XOR_PIXELS\n#endif\n#endif\n\nfloat kFramesPerSecond = 7.5;\n\n#ifdef LOW_RESOLUTION\nvec2 kWindowResolution = vec2(256.0, 192.0);\n#else\nvec2 kWindowResolution = iResolution.xy;\n#endif\n\nfloat kAALineWidth = 1.0;\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Time\n\nfloat GetSceneTime()\n{\n\t#ifdef LIMIT_FRAMERATE\n\t\treturn (floor(iGlobalTime * kFramesPerSecond) \/ kFramesPerSecond);\n\t#else\n\t\treturn iGlobalTime;\n\t#endif\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Line Rasterization\n\n#ifdef NON_AA_LINES\nfloat RasterizeLine(const in vec2 vPixel, const in vec2 vA, const in vec2 vB)\n{\n\t\/\/ vPixel is the centre of the pixel to be rasterized\n\t\n\tvec2 vAB = vB - vA;\t\n\tvec2 vAbsAB = abs(vAB);\n\tfloat fGradientSelect = step(vAbsAB.y, vAbsAB.x);\n\n\tvec2 vAP = vPixel - vA;\n\n\tfloat fAB = mix(vAB.y, vAB.x, fGradientSelect);\n\tfloat fAP = mix(vAP.y, vAP.x, fGradientSelect);\n\t\n\t\/\/ figure out the co-ordinates we intersect the vPixelCentre x or y axis\n\tfloat t = fAP \/ fAB;\t\n\tvec2 vIntersection = vA + (vB - vA) * t;\n\tvec2 vIntersectionDist = abs(vIntersection - vPixel);\n\t\n\tvec2 vResult = step(vIntersectionDist, vec2(0.5));\n\n\t\/\/ mask out parts of the line beyond the beginning or end\n\tfloat fClipSpan = step(t, 1.0) * step(0.0, t);\t\n\t\n\t\/\/ select the x or y axis result based on the gradient of the line\n\treturn mix(vResult.x, vResult.y, fGradientSelect) * fClipSpan;\n}\n#else\nfloat RasterizeLine(const in vec2 vPixel, const in vec2 vA, const in vec2 vB)\n{\n\t\/\/ AA version based on distance to line\n\t\n\t\/\/ vPixel is the co-ordinate within the pixel to be rasterized\n\t\n\tvec2 vAB = vB - vA;\t\n\tvec2 vAP = vPixel - vA;\n\t\n\tvec2 vDir = normalize(vAB);\n\tfloat fLength = length(vAB);\n\t\n\tfloat t = clamp(dot(vDir, vAP), 0.0, fLength);\n\tvec2 vClosest = vA + t * vDir;\n\t\n\tfloat fDistToClosest = 1.0 - (length(vClosest - vPixel) \/ kAALineWidth);\n\n\tfloat i =  clamp(fDistToClosest, 0.0, 1.0);\n\t\n\treturn sqrt(i);\n}\n#endif\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Matrix Fun\n\nmat4 SetRotTrans( vec3 r, vec3 t )\n{\n    float a = sin(r.x); float b = cos(r.x); \n    float c = sin(r.y); float d = cos(r.y); \n    float e = sin(r.z); float f = cos(r.z); \n\n    float ac = a*c;\n    float bc = b*c;\n\n    return mat4( d*f,      d*e,       -c, 0.0,\n                 ac*f-b*e, ac*e+b*f, a*d, 0.0,\n                 bc*f+a*e, bc*e-a*f, b*d, 0.0,\n                 t.x,      t.y,      t.z, 1.0 );\n}\n\nmat4 SetProjection( float d )\n{\n    return mat4( 1.0, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, 1.0, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, d,\n\t\t\t\t 0.0, 0.0, 0.0, 0.0 );\n}\n\nmat4 SetWindow( vec2 s, vec2 t )\n{\n    return mat4( s.x, 0.0, 0.0, 0.0,\n\t\t\t\t 0.0, s.y, 0.0, 0.0,\n\t\t\t\t 0.0, 0.0, 1.0, 0.0,\n\t\t\t\t t.x, t.y, 0.0, 1.0 );\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ Window Border Setup\n\nvec2 kWindowMin = vec2(0.1, 0.1);\nvec2 kWindowMax = vec2(0.9, 0.9);\nvec2 kWindowRange = kWindowMax - kWindowMin;\n\nvec2 ScreenUvToWindowPixel(vec2 vUv)\n{\n\t#ifdef LOW_RESOLUTION\n\t\tvUv = ((vUv - kWindowMin) \/ kWindowRange);\n\t#endif\n\treturn vUv * kWindowResolution;\n}\n\nfloat IsPixelInWindow(vec2 vPixel)\n{\n\tvec2 vResult = step(vPixel, kWindowResolution)\n\t\t\t\t* step(vec2(0.0), vPixel);\n\treturn min(vResult.x, vResult.y);\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\nconst int kVertexCount = 30;\nvec3 kVertices[kVertexCount];\n\nvoid SetupVertices()\n{\n\tkVertices[0] = vec3(40, 0.0, 95);\n    kVertices[1] = vec3(-40, 0.0, 95);\n    kVertices[2] = vec3(00, 32.5, 30);\n    kVertices[3] = vec3(-150,-3.8,-10);\n    kVertices[4] = vec3(150,-3.8,-10);\n    kVertices[5] = vec3(-110, 20,-50);\n    kVertices[6] = vec3(110, 20,-50);\n    kVertices[7] = vec3(160,-10,-50);\n    kVertices[8] = vec3(-160,-10,-50);\n    kVertices[9] = vec3(0, 32.5,-50);\n    kVertices[10] = vec3(-40,-30,-50);\n    kVertices[11] = vec3(40,-30,-50);\n    kVertices[12] = vec3(-45, 10,-50);\n    kVertices[13] = vec3(-10, 15,-50);\n    kVertices[14] = vec3( 10, 15,-50);\n    kVertices[15] = vec3(45, 10,-50);      \n    kVertices[16] = vec3(45,-15,-50);\n    kVertices[17] = vec3(10,-20,-50);\n    kVertices[18] = vec3(-10,-20,-50);\n    kVertices[19] = vec3(-45,-15,-50);\n    kVertices[20] = vec3(-2,-2, 95);\n    kVertices[21] = vec3(-2,-2, 112.5);\n    kVertices[22] = vec3(-100,-7.5,-50);\n    kVertices[23] = vec3(-100, 7.5,-50);\n    kVertices[24] = vec3(-110, 0,-50);\n    kVertices[25] = vec3( 100, 7.5,-50);\n    kVertices[26] = vec3( 110, 0,-50);\n    kVertices[27] = vec3( 100,-7.5,-50);\n    kVertices[28] = vec3(  0,0, 95);\n    kVertices[29] = vec3(  0,0, 112.5);    \n}\n\nfloat BackfaceCull(vec2 A, vec2 B, vec2 C)\n{\n\tvec2 AB = B - A;\n\tvec2 AC = C - A;\n\tfloat c = AB.x * AC.y - AB.y * AC.x;\n\treturn step(c, 0.0);\n}\n\nfloat Accumulate( const float x, const float y )\n{\n#ifdef XOR_PIXELS\n\treturn x + y;\n#else\n\treturn max(x, y);\n#endif\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\t\/\/ get window pixel co-ordinates for centre of current pixel\n\tvec2 vWindowPixelCords = ScreenUvToWindowPixel(uv);\n\tvec2 vPixel = floor(vWindowPixelCords) + 0.5;\n\t\n\t\/\/ Setup Transform\n\tmat4 mTransform;\n\n\t{\n\t\tvec3 vRot = vec3(0.1, 0.2, 0.3) * GetSceneTime();\n\t\t\n\t\tif(iMouse.z > 0.0)\n\t\t{\n\t\t\tvec2 vUnitMouse = iMouse.xy \/ iResolution.xy;\n\t\t\tvRot= vec3(vUnitMouse.yx * vec2(1.0, 1.0) + vec2(1.5, 0.5), 0.0) * 3.14159 * 2.0;\n\t\t}\n\t\t\n\t\tvec3 vTrans = vec3(0.0, 0.0, 350.0);\n\t\tmat4 mRotTrans = SetRotTrans( vRot, vTrans );\n\t\tmat4 mProjection = SetProjection( 1.0 );\n\t\tmat4 mWindow = SetWindow( vec2(1.0, iResolution.x\/iResolution.y) * kWindowResolution, vec2(0.5) * kWindowResolution );\n\t\n\t\tmTransform = mWindow * mProjection * mRotTrans;\n\t}\n\n\t\/\/ Transform Vertices to Window Pixel Co-ordinates\n\tSetupVertices();\n\t\n\tvec2 vScrVtx[kVertexCount];\n\tfor(int i=0; i<kVertexCount; i++)\n\t{\n\t\tvec4 vhPos = mTransform * vec4(kVertices[i], 1.0);\n\t\tvScrVtx[i] = vhPos.xy \/ vhPos.w;\n\t}\n\n\t\/\/ Cull Faces\n\tconst int kFaceCount = 14;\n\tfloat fFaceVisible[kFaceCount];\n\t\n\t\/\/ hull \n\tfFaceVisible[0] = BackfaceCull( vScrVtx[2], vScrVtx[1], vScrVtx[0] );\n\tfFaceVisible[1] = BackfaceCull( vScrVtx[0], vScrVtx[1], vScrVtx[10] );\n\tfFaceVisible[2] = BackfaceCull( vScrVtx[6], vScrVtx[2], vScrVtx[0] );\n\tfFaceVisible[3] = BackfaceCull( vScrVtx[0], vScrVtx[4], vScrVtx[6] );\n\tfFaceVisible[4] = BackfaceCull( vScrVtx[0], vScrVtx[11], vScrVtx[7] );\n\tfFaceVisible[5] = BackfaceCull( vScrVtx[1], vScrVtx[2], vScrVtx[5] );\n\n\tfFaceVisible[6] = BackfaceCull( vScrVtx[5], vScrVtx[3], vScrVtx[1] );\n\tfFaceVisible[7] = BackfaceCull( vScrVtx[1], vScrVtx[3], vScrVtx[8] );\n\tfFaceVisible[8] = BackfaceCull( vScrVtx[5], vScrVtx[2], vScrVtx[9] );\n\tfFaceVisible[9] = BackfaceCull( vScrVtx[2], vScrVtx[6], vScrVtx[9] );\n\tfFaceVisible[10] = BackfaceCull( vScrVtx[5], vScrVtx[8], vScrVtx[3] );\n\tfFaceVisible[11] = BackfaceCull( vScrVtx[7], vScrVtx[6], vScrVtx[4] );\n\tfFaceVisible[12] = BackfaceCull( vScrVtx[9], vScrVtx[6], vScrVtx[7] );\n\t\n\t\/\/ engines - all culled together\n\tfFaceVisible[13] = BackfaceCull( vScrVtx[14], vScrVtx[15], vScrVtx[16] );\n\n\t\/\/ Draw Lines\n\t\n\tfloat fResult = 0.0;\n\t\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[0], vScrVtx[2]) * max(fFaceVisible[0], fFaceVisible[2]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[0], vScrVtx[4]) * max(fFaceVisible[3], fFaceVisible[4]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[0], vScrVtx[6]) * max(fFaceVisible[2], fFaceVisible[3]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[1], vScrVtx[0]) * max(fFaceVisible[0], fFaceVisible[1]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[1], vScrVtx[10]) * max(fFaceVisible[1], fFaceVisible[7]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[2], vScrVtx[1]) * max(fFaceVisible[0], fFaceVisible[5]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[2], vScrVtx[5]) * max(fFaceVisible[5], fFaceVisible[8]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[2], vScrVtx[9]) * max(fFaceVisible[8], fFaceVisible[9]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[3], vScrVtx[1]) * max(fFaceVisible[6], fFaceVisible[7]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[3], vScrVtx[8]) * max(fFaceVisible[7], fFaceVisible[10]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[4], vScrVtx[6]) * max(fFaceVisible[3], fFaceVisible[11]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[5], vScrVtx[1]) * max(fFaceVisible[5], fFaceVisible[6]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[5], vScrVtx[3]) * max(fFaceVisible[6], fFaceVisible[10]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[5], vScrVtx[8]) * max(fFaceVisible[10], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[6], vScrVtx[2]) * max(fFaceVisible[2], fFaceVisible[9]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[6], vScrVtx[9]) * max(fFaceVisible[9], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[7], vScrVtx[4]) * max(fFaceVisible[4], fFaceVisible[11]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[7], vScrVtx[6]) * max(fFaceVisible[11], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[8], vScrVtx[10]) * max(fFaceVisible[7], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[9], vScrVtx[5]) * max(fFaceVisible[8], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[10], vScrVtx[11]) * max(fFaceVisible[1], fFaceVisible[12]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[11], vScrVtx[0]) * max(fFaceVisible[1], fFaceVisible[4]));\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[11], vScrVtx[7]) * max(fFaceVisible[4], fFaceVisible[12]));\n\n\tif(fFaceVisible[13] > 0.0)\t\n\t{\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[12], vScrVtx[13] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[13], vScrVtx[18] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[14], vScrVtx[15] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[15], vScrVtx[16] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[16], vScrVtx[17] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[17], vScrVtx[14] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[18], vScrVtx[19] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[19], vScrVtx[12] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[25], vScrVtx[26] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[26], vScrVtx[27] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[27], vScrVtx[25] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[22], vScrVtx[23] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[23], vScrVtx[24] ));\n\t\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[24], vScrVtx[22] ));\n\t}\n\t\n\t\/\/ gun\n\tfResult = Accumulate(fResult, RasterizeLine( vPixel, vScrVtx[28], vScrVtx[29]));\n\n\t#ifdef XOR_PIXELS\t\n\tfResult = mod(fResult, 2.0);\n\t#endif\n\t\n\t\/\/ Clip pixel to window border\n\tfResult *= IsPixelInWindow(vPixel);\n\t\n\t\/\/ Scanline Effect\n\t#ifdef SCANLINE_EFFECT\t\n\t\tfloat fScanlineEffect = cos((vWindowPixelCords.y + 0.5) * 3.1415 * 2.0) * 0.5 + 0.5;\n\t\tfResult = (fResult * 0.9 + 0.1) * (fScanlineEffect * 0.2 + 0.8);\n\t#endif\n\t\t\n\tfragColor = vec4(vec3(fResult),1.0);\n}\n","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define N(T,N) t+=float(T); if(x>t) r=vec2(N,t);\n#define L(T,N,X) t+=float(T); if((x>t) && (x<(t+float(X)))) r=vec2(N,t);\n\nvec2 GetTrack0ANote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(288,62) N(96,66) N(96,69) N(96,50) N(96,62) N(96,62) N(96,50) N(96,66) N(96,62) N(96,50) N(96,62)\n    N(96,54) N(96,50) N(96,62) N(96,66) N(96,52) N(96,61) N(96,67) N(96,52) N(96,61) N(96,61) N(96,52)\n    N(96,61) N(96,57) N(96,52) N(96,61) N(96,61) N(96,45) N(96,61) N(96,67) N(96,45) N(96,61) N(96,61)\n    N(96,45) N(96,61) N(96,55) N(96,45) N(96,61) N(96,61) N(96,50) N(96,66) N(96,66) N(96,50) N(96,66)\n    N(96,66) N(96,50) N(96,62) N(96,57) N(96,50) N(96,62) N(96,66) N(96,54) N(96,66) N(96,66) N(96,54)\n    N(96,66) N(96,66) N(96,42) N(96,50) N(96,50) N(96,42) N(96,45) N(96,45) N(96,43) N(96,50) N(96,52)\n    N(96,43) N(96,47) N(96,52) N(96,52) N(192,52) N(96,52) N(96,55) N(96,59) N(96,52) N(96,61) N(96,67)\n    N(96,45) N(96,61) N(96,61) N(96,50) N(96,66) N(96,66) N(96,54) N(96,66) N(96,66) N(96,52) N(192,76)\n    N(96,55) N(192,81) N(96,54) N(144,66) N(48,66) N(96,54) N(96,78) N(96,85) N(96,52) N(96,56) N(96,56)\n    N(96,52) N(96,56) N(96,61) N(96,52) N(96,56) N(96,56) N(96,52) N(96,56) N(96,56) N(91,52) N(101,61)\n    N(96,61) N(93,54) N(99,61) N(96,61) N(91,55) N(101,57) N(96,61) N(93,54) N(99,64) N(96,61) L(89,52,7)\n    N(103,56) N(96,56) N(96,52) N(96,56) N(96,61) N(96,52) N(96,56) N(96,62) N(96,52) N(96,59) N(96,62)\n    N(96,61) N(192,57) N(96,54) N(144,78) N(48,74) N(48,71) N(48,52) N(48,78) N(48,56) N(96,52) N(96,57)\n    N(281,81)\n    return r;\n}\n\nvec2 GetTrack0BNote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(576,69) N(96,66) N(96,66) N(96,81) N(96,62) N(96,66) N(96,78) N(96,54) N(96,57) N(96,62) N(96,57)\n    N(96,62) N(96,67) N(96,67) N(96,61) N(96,81) N(96,67) N(96,67) N(96,79) N(96,57) N(96,55) N(96,61)\n    N(96,57) N(96,57) N(96,71) N(96,67) N(96,61) N(96,79) N(96,67) N(96,67) N(96,73) N(96,57) N(96,57)\n    N(96,61) N(96,57) N(96,57) N(96,71) N(96,62) N(96,57) N(96,78) N(96,62) N(96,57) N(96,78) N(96,57)\n    N(96,54) N(96,62) N(96,57) N(96,62) N(96,74) N(96,62) N(96,62) N(96,86) N(96,62) N(96,62) N(96,81)\n    N(96,45) N(96,45) N(96,62) N(96,54) N(96,54) N(96,74) N(96,52) N(96,47) N(96,86) N(96,50) N(96,50)\n    N(96,50) N(192,64) N(96,64) N(96,67) N(96,71) N(96,71) N(96,67) N(96,61) N(192,67) N(96,67) N(96,78)\n    N(96,57) N(96,62) N(192,57) N(96,62) N(96,47) N(288,45) N(288,50) N(144,69) N(48,69) N(96,50) N(96,86)\n    N(192,85) N(96,62) N(96,62) N(192,62) N(96,64) N(96,82) N(96,62) N(96,62) N(192,62) N(96,62) N(96,45)\n    N(96,57) N(96,64) N(96,45) N(96,57) N(96,57) N(96,45) N(96,61) N(96,64) N(96,45) N(96,57) N(96,64)\n    N(96,52) N(96,62) N(96,64) N(192,62) N(96,64) N(96,76) N(96,64) N(96,56) N(192,64) N(96,59) N(96,54)\n    N(192,81) N(96,59) N(288,40) N(48,71) N(48,44) N(96,40) N(96,45) N(288,67)\n    return r;\n}\n\nvec2 GetTrack0CNote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(672,57) N(96,57) N(96,78) N(96,57) N(96,57) N(96,74) N(96,57) N(96,62) N(192,66) N(96,57) N(96,69)\n    N(96,57) N(96,57) N(96,79) N(96,57) N(96,79) N(96,73) N(96,55) N(96,61) N(192,55) N(96,55) N(288,57)\n    N(96,83) N(192,57) N(96,79) N(96,55) N(96,61) N(192,55) N(96,55) N(192,57) N(96,62) N(96,74) N(96,57)\n    N(96,62) N(96,74) N(96,54) N(96,62) N(192,66) N(96,57) N(192,57) N(96,57) N(96,81) N(96,57) N(96,57)\n    N(96,78) N(96,54) N(96,54) N(192,50) N(96,50) N(192,47) N(96,50) N(96,83) N(96,52) N(96,47) N(96,47)\n    N(192,76) N(96,76) N(96,79) N(96,83) N(96,83) N(96,57) N(96,57) N(192,57) N(96,57) N(96,90) N(96,62)\n    N(96,57) N(192,62) N(96,57) N(96,50) N(288,52) N(288,74) N(144,74) N(48,74) N(96,66) N(288,76) N(96,64)\n    N(96,64) N(192,64) N(96,55) N(96,73) N(96,64) N(96,64) N(192,64) N(96,64) N(96,78) N(96,64) N(96,57)\n    N(192,64) N(96,64) N(96,83) N(96,64) N(96,57) N(192,61) N(96,57) N(96,85) N(96,64) N(96,62) N(192,64)\n    N(96,55) N(96,85) N(96,62) N(96,64) N(192,62) N(96,83) N(96,59) N(288,50) N(288,78) N(48,74) N(48,78)\n    N(96,76) N(96,69) N(288,64)\n    return r;\n}\n\nvec2 GetTrack0DNote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(768,81) N(288,78) N(576,69) N(288,79) N(288,73) N(480,64) N(96,71) N(288,79) N(288,73) N(480,64)\n    N(96,71) N(288,83) N(96,83) N(192,78) N(576,69) N(288,86) N(288,78) N(288,62) N(192,66) N(96,69) N(288,83)\n    N(288,83) N(96,43) N(960,68) N(96,69) N(480,74) N(96,78) N(96,43) N(288,73) N(576,69) N(384,83) N(96,83)\n    N(192,83) N(96,82) N(192,83) N(96,83) N(192,76) N(96,76) N(288,76) N(192,76) N(96,76) N(96,71) N(192,81)\n    N(192,78) N(96,85) N(96,76) N(96,83) N(96,83) N(192,83) N(96,82) N(96,88) N(96,86) N(96,86) N(192,80)\n    N(192,83) N(288,80) N(288,71) N(48,68) N(48,74) N(96,74) N(96,61)\n    return r;\n}\n\nvec2 GetTrack0ENote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(768,78) N(288,74) N(864,81) N(1152,83) N(288,79) N(864,78) N(288,74) N(864,81) N(288,81) N(864,86)\n    N(288,76) N(96,83) N(960,80) N(96,81) N(480,86) N(192,71) N(288,83) N(576,74) N(384,74) N(96,74) N(192,74)\n    N(96,73) N(192,74) N(96,74) N(1152,69) N(192,86) N(96,76) N(192,74) N(96,74) N(192,74) N(96,85) N(192,83)\n    N(96,83) N(384,71) N(288,68) N(288,74) N(96,71) N(96,71) N(96,64)\n    return r;\n}\n\nvec2 GetTrack0FNote(float x)\n{\n    vec2 r = vec2(-1.0);\n    float t = 0.0;\n    N(4224,74) N(2688,76) N(1728,78) N(4128,74) N(96,74) N(960,68) N(96,68) N(96,68)\n    return r;\n}\n\n\/\/ ------------------- 8< ------------------- 8< ------------------- 8< -------------------\n\nfloat NoteToHz(float n)\n{  \t\n\treturn 440.0*pow( 2.0, (n-69.0)\/12.0 );\n}\n\nfloat Sin(float x)\n{\n    return sin(x * 3.1415 * 2.0);\n}\n\n#if 1\n\nfloat Instrument( const in vec2 vFreqTime )\n{\n    float f = vFreqTime.x;\n    float t = vFreqTime.y;\n    \n    if( t < 0.0 )\n        return 0.0;\n    float x = 0.0;\n    float a = 1.0;\n    float h = 1.0;\n    for(int i=0; i<8; i++)\n    {\n        x += Sin( f * t * h ) * exp2( t * -a );\n        x += Sin( f * (t+0.005) * h * 0.5 ) * exp2( t * -a * 2.0 ) ;\n        h = h + 1.01;\n        a = a * 2.0;\n    }\n    \n    return x;\n}\n\n#else\n\nfloat Function(float t, float f)\n{\n    float t2 = t * f * radians(180.0);\n    float y = 0.0;\n    \n    float h = 1.0;\n    float a = 1.0;\n    for( int i=0; i<8; i++)\n    {\n        float inharmonicity = 0.001;\n        float f2 = h * sqrt( 1.0 + h * h *  inharmonicity);\n        float r = sin( t2 * f2 );\n\n        \/\/r = r * a;\n        r = r * exp2(t * -2.0 \/ a);\n        \n        y += r;\n\n        h = h + 1.0;\n        a = a * 0.6;\n    }\n    \n    \/\/y *= exp2(t * -4.0);\n    return y;\n}\n\nfloat Main( float t, float f )\n{\n    return Function(t, f) + Function(t + 0.01, f * 0.51);\n}\n\nfloat Instrument( const in vec2 vFreqTime )\n{\n    return Main(vFreqTime.y, vFreqTime.x);\n}\n#endif\n\nconst float kMidiTimebase = 240.0;\nconst float kInvMidiTimebase = 1.0 \/ kMidiTimebase;\nconst float kTranspose = 12.0 * 0.0;\n\nvec2 GetNoteData( const in vec2 vMidiResult, const in float fMidiTime )\n{\n    return vec2( NoteToHz(vMidiResult.x + kTranspose), abs(fMidiTime - vMidiResult.y) * kInvMidiTimebase );\n}\n\nfloat PlayMidi( const in float time )\n{\n    if(time < 0.0)\n\t\treturn 0.0;\n    \n    float fMidiTime = time * kMidiTimebase;\n    \n    float fResult = 0.0;\n    \n    fResult += Instrument( GetNoteData( GetTrack0ANote(fMidiTime), fMidiTime ) );\n    fResult += Instrument( GetNoteData( GetTrack0BNote(fMidiTime), fMidiTime ) );\n    fResult += Instrument( GetNoteData( GetTrack0CNote(fMidiTime), fMidiTime ) );\n    fResult += Instrument( GetNoteData( GetTrack0DNote(fMidiTime), fMidiTime ) );\n    fResult += Instrument( GetNoteData( GetTrack0ENote(fMidiTime), fMidiTime ) );\n    fResult += Instrument( GetNoteData( GetTrack0FNote(fMidiTime), fMidiTime ) );\n    \n    fResult = clamp(fResult * 0.05, -1.0, 1.0);\n    \n    float fFadeEnd = 60.0;\n    float fFadeTime = 5.0;\n    float fFade = (time - (fFadeEnd - fFadeTime)) \/ fFadeTime;    \n    fResult *= clamp(1.0 - fFade, 0.0, 1.0);\n    \n    return fResult;\n}\n\nvec2 mainSound(float time)\n{\n    return vec2( PlayMidi(time) );\n}\n\n\/\/#define IMAGE_SHADER\n\n#ifdef IMAGE_SHADER\n\nfloat Function( float x )\n{\n\treturn mainSound( iGlobalTime + x \/ (44100.0 \/ 60.0) ).x * 0.5 + 0.5;\n}\n\nfloat Plot( vec2 uv )\n{\n\tfloat y = Function(uv.x);\n\t\n\treturn abs(y - uv.y) * iResolution.y;\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\tvec3 vResult = vec3(0.0);\n\t\n\tvResult += Plot(uv);\n\t\n\tfragColor = vec4((vResult),1.0);\n}\n#endif\n","name":"","description":"","type":"sound"}]}}