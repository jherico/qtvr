{"Shader":{"ver":"0.1","info":{"id":"llXSW2","date":"1439770041","viewed":1075,"name":"OMGclouds","username":"OMGparticles","description":"My first contribution to ShaderToy after following the tutorial at SIGGRAPH 2015. Most of this shader code is taken directly from iq's \"Clouds\" (shadertoy.com\/view\/XslGRr). I just added some turbulence\/movement in the clouds, and a day\/night cycle.","likes":16,"published":3,"flags":1,"tags":["procedural","3d","raymarching","volumetric","iq","lod","iteration","vr"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ Turbulence and Day\/Night cycle added by Michael Olson - OMGparticles\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Volumetric clouds. It performs level of detail (LOD) for faster rendering and antialiasing\n\nfloat fTurbulence = 0.35;\n\nfloat fSunSpeed = 0.35 * iGlobalTime;\n\nvec3 vNightColor   = vec3(.15, 0.3, 0.6);\nvec3 vHorizonColor = vec3(0.6, 0.3, 0.4);\nvec3 vDayColor     = vec3(0.7,0.8,1);\n\nvec3 vSunColor     = vec3(1.0,0.8,0.6);\nvec3 vSunRimColor  = vec3(1.0,0.66,0.33);\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec4 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 );\n\treturn (-1.0+2.0*mix( rg.g, rg.r, f.z ));\n}\n\nfloat map5( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02 + iGlobalTime * fTurbulence * 1.0;\n    f += 0.25000*noise( q ); q = q*2.03 + iGlobalTime * fTurbulence * 2.0;\n    f += 0.12500*noise( q ); q = q*2.01 + iGlobalTime * fTurbulence * 4.0;\n    f += 0.06250*noise( q ); q = q*2.02 + iGlobalTime * fTurbulence * 8.0;\n    f += 0.03125*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\n\nfloat map4( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02 + iGlobalTime * fTurbulence * 1.0;\n    f += 0.25000*noise( q ); q = q*2.03 + iGlobalTime * fTurbulence * 2.0;\n    f += 0.12500*noise( q ); q = q*2.01 + iGlobalTime * fTurbulence * 4.0;\n    f += 0.06250*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\nfloat map3( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02 + iGlobalTime * fTurbulence * 1.0;\n    f += 0.25000*noise( q ); q = q*2.03 + iGlobalTime * fTurbulence * 2.0;\n    f += 0.12500*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\nfloat map2( in vec3 p )\n{\n\tvec3 q = p - vec3(0.0,0.1,1.0)*iGlobalTime;\n\tfloat f;\n    f  = 0.50000*noise( q ); q = q*2.02 + iGlobalTime * fTurbulence * 1.0;\n    f += 0.25000*noise( q );\n\treturn clamp( 1.5 - p.y - 2.0 + 1.75*f, 0.0, 1.0 );\n}\n\nvec3 sundir = normalize( vec3(cos(fSunSpeed),sin(fSunSpeed),0.0) );\n\nvec4 integrate( in vec4 sum, in float dif, in float den, in vec3 bgcol, in float t )\n{\n    \/\/ lighting\n    vec3 lin = vec3(0.9,0.95,1.0) + 0.5*vec3(0.7, 0.5, 0.3)*dif * smoothstep(-0.3, 0.3, sundir.y);\n    vec4 col = vec4( mix( 1.15*vec3(1.0,0.95,0.8), vec3(0.65), den ), den );\n    col.xyz *= lin;\n    \/\/col.xyz = mix( col.xyz, bgcol, 1.0-exp(-0.003*t*t) );\n    \/\/ front to back blending    \n    col.a *= 0.4;\n    col.rgb *= col.a;\n    return sum + col*(1.0-sum.a);\n}\n\n#define MARCH(STEPS,MAPLOD) for(int i=0; i<STEPS; i++) { vec3  pos = ro + t*rd; if( pos.y<-3.0 || pos.y>2.0 || sum.a > 0.99 ) break; float den = MAPLOD( pos ); if( den>0.01 ) { float dif =  clamp((den - MAPLOD(pos+0.3*sundir))\/0.6, 0.0, 1.0 ); sum = integrate( sum, dif, den, bgcol, t ); } t += max(0.01*float(i),0.02*t); }\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in vec3 bgcol )\n{\n\tvec4 sum = vec4(0.0);\n\n\tfloat t = 0.0;\n\n    MARCH(20,map5);\n    MARCH(30,map4);\n    MARCH(40,map3);\n    MARCH(50,map2);\n\n    return clamp( sum, 0.0, 1.0 );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvec4 render( in vec3 ro, in vec3 rd )\n{\n\tfloat sun = clamp( dot(sundir,rd), 0.0, 1.0 );\n    \n    float fSunHeight = sundir.y;\n    \n    \/\/ below this height will be full night color\n    float fNightHeight = -0.8;\n    \/\/ above this height will be full day color\n    float fDayHeight   = 0.3;\n    \n    float fHorizonLength = fDayHeight - fNightHeight;\n    float fInverseHL = 1.0 \/ fHorizonLength;\n    float fHalfHorizonLength = fHorizonLength \/ 2.0;\n    float fInverseHHL = 1.0 \/ fHalfHorizonLength;\n    float fMidPoint = fNightHeight + fHalfHorizonLength;\n    \n    float fNightContrib = clamp((fSunHeight - fMidPoint) * (-fInverseHHL), 0.0, 1.0);\n    float fHorizonContrib = -clamp(abs((fSunHeight - fMidPoint) * (-fInverseHHL)), 0.0, 1.0) + 1.0;\n    float fDayContrib = clamp((fSunHeight - fMidPoint) * ( fInverseHHL), 0.0, 1.0);\n    \n    \/\/ sky color\n    vec3 vSkyColor = vec3(0.0);\n    vSkyColor += mix(vec3(0.0),   vNightColor, fNightContrib);   \/\/ Night\n    vSkyColor += mix(vec3(0.0), vHorizonColor, fHorizonContrib); \/\/ Horizon\n    vSkyColor += mix(vec3(0.0),     vDayColor, fDayContrib);     \/\/ Day\n    \n\tvec3 col = vSkyColor;\n    \n    \/\/ atmosphere brighter near horizon\n    col -= clamp(rd.y, 0.0, 0.5);\n    \n    \/\/ draw sun\n\tcol += 0.4 * vSunRimColor * pow( sun,    4.0 );\n\tcol += 1.0 * vSunColor    * pow( sun, 2000.0 );\n    \n    \/\/ stars\n    float fStarSpeed = -fSunSpeed * 0.5;\n    \n    float fStarContrib = clamp((fSunHeight - fDayHeight) * (-fInverseHL), 0.0, 1.0);\n    \n    vec3 vStarDir = rd * mat3( vec3(cos(fStarSpeed), -sin(fStarSpeed), 0.0),\n                               vec3(sin(fStarSpeed),  cos(fStarSpeed), 0.0),\n                               vec3(0.0,             0.0,            1.0));\n                              \n    col += pow((texture2D(iChannel0, vStarDir.xy).r + texture2D(iChannel0, vStarDir.zy).r) * 0.5, 42.0) * fStarContrib * 40.0;\n\n    \/\/ raymarch clouds\n    vec4 res = raymarch( ro, rd, col );\n    \n    \/\/ partially tint clouds to match sky color\n    res *= vec4(pow(vSkyColor, vec3(0.25)), 1.0);\n        \n    col = col*(1.0-res.w) + res.xyz;\n\n    return vec4( col, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/ iResolution.y;\n\n    vec2 m = iMouse.xy\/iResolution.xy;\n    \n    \/\/ camera\n    vec3 ro = 4.0*normalize(vec3(sin(6.28*m.x + 1.5), 0.4 * m.y, cos(6.28*m.x + 1.5)));\n\tvec3 ta = vec3(0.0, -1.0, 0.0);\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \/\/ ray\n    vec3 rd = ca * normalize( vec3(p.xy,1.5));\n    \n    fragColor = render( ro, rd );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragColor = render( fragRayOri, fragRayDir );\n}","name":"","description":"","type":"image"}]}}