{"Shader":{"ver":"0.1","info":{"id":"4tXGDH","date":"1421342911","viewed":361,"name":"Atlantis","username":"dr2","description":"Follow the fish and see where it goes.","likes":8,"published":3,"flags":0,"tags":["raymarching","underwater"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Atlantis\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 6; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (length (p.xy) - rc, p.z);\n  return length (q) - ri;\n}\n\nint idObj;\nmat3 fishMat, swmMat;\nvec3 qHit, sunDir, fishPos, swmPos;\nfloat tCur, teRingO, teRingI, swmVel, fishLen, angTail, angFin, posMth;\nconst float dstFar = 100.;\nconst int idBase = 1, idPlat = 2, isShel = 3, idFrm = 4, idDway = 5,\n  idTwr = 6, idBrg = 7, idBrCab = 8, idRdw = 9, idGem = 10, idFBdy = 21,\n  idTail = 22, idFin = 23, idEye = 24;\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat AngQnt (float a, float s1, float s2, float nr)\n{\n  return (s1 + floor (s2 + a * (nr \/ (2. * pi)))) * (2. * pi \/ nr);\n}\n\nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float a, d, r, tO, tI, tR, rGap;\n  bool rotStep;\n  tO = 0.5 * pi * teRingO \/ swmVel;\n  tI = 0.5 * pi * teRingI \/ swmVel;\n  rGap = teRingO - teRingI;\n  tR = rGap \/ swmVel;\n  rotStep = false;\n  p.y = 3.;\n  float ti[9];\n  ti[0] = 0.;  ti[1] = ti[0] + tO;  ti[2] = ti[1] + tR;  ti[3] = ti[2] + tI;\n  ti[4] = ti[3] + tR;  ti[5] = ti[4] + tO;  ti[6] = ti[5] + tR;\n  ti[7] = ti[6] + tI;  ti[8] = ti[7] + tR;\n  float tCyc = ti[8];\n  float aDir = 2. * mod (floor (t \/ tCyc), 2.) - 1.;\n  t = mod (t, tCyc);\n  r = teRingO;\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    rotStep = true;\n    a = (t - ti[0]) \/ (ti[1] - ti[0]);\n  } else if (t < ti[2]) {\n    tr.y = teRingO - rGap * (t - ti[1]) \/ (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    rotStep = true;\n    a = 1. + (t - ti[2]) \/ (ti[3] - ti[2]);\n    r = teRingI;\n  } else if (t < ti[4]) {\n    tr.x = - (teRingI + rGap * (t - ti[3]) \/ (ti[4] - ti[3]));\n  } else if (t < ti[5]) {\n    rotStep = true;\n    a = 2. + (t - ti[4]) \/ (ti[5] - ti[4]);\n  } else if (t < ti[6]) {\n    tr.y = - teRingO + rGap * (t - ti[5]) \/ (ti[6] - ti[5]);\n  } else if (t < ti[7]) {\n    rotStep = true;\n    a = 3. + (t - ti[6]) \/ (ti[7] - ti[6]);\n    r = teRingI;\n  } else if (t < ti[8]) {\n    tr.x = teRingI + rGap * (t - ti[7]) \/ (ti[8] - ti[7]);\n  }\n  if (rotStep) {\n    a *= 0.5 * pi * aDir;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    if (aDir < 0.) tr.y *= -1.;\n    p.xz = tr;\n  }\n  return p;\n}\n\nvoid FishPM (float t)\n{\n  vec3 fpF, fpB, vel;\n  float a, ca, sa, dt;\n  dt = 0.4;\n  fpF = TrackPath (t + dt);\n  fpB = TrackPath (t - dt);\n  fishPos = 0.5 * (fpF + fpB);\n  vel = (fpF - fpB) \/ (2. * dt);\n  a = atan (vel.z, vel.x) - 0.5 * pi;\n  ca = cos (a);  sa = sin (a);\n  fishMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nfloat Terrain (vec2 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec2 q, t, ta, v;\n  float wAmp, pRough, ht;\n  wAmp = 4.;  pRough = 5.;\n  q = p * 0.05;\n  ht = 0.;\n  for (int j = 0; j < 5; j ++) {\n    t = q + 2. * Noisefv2 (q) - 1.;\n    ta = abs (sin (t));\n    v = (1. - ta) * (ta + abs (cos (t)));\n    v = pow (1. - v, vec2 (pRough));\n    ht += (v.x + v.y) * wAmp;\n    q *= 2. * qRot;  wAmp *= 0.2;  pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat GrndHt (vec2 p)\n{\n  float hb = 0.;\n  float hf = 1.;\n  float su = length (p) \/ 50.;\n  if (su < 1.) {\n    su *= su;\n    hf = 0.3 + 0.7 * su;\n    hb = -11. * (1. - su * su * su * su);\n  }\n  su = abs (max ((SmoothMin (abs (p.x), abs (p.y), 0.5) - 2.) \/ 6., 0.));\n  su = SmoothMin (su, abs (length (p) - teRingO) \/ 6., 1.);\n  if (su < 1.2) {\n    su *= su;\n    hf = SmoothMin (hf, 0.3 + 0.7 * su, 0.2);\n    hb = SmoothMin (hb, - 11. * (1. - su) +\n       0.5 * Noisefv2 (0.8 * p) + 2. * Fbm2 (0.2 * p), 0.5);\n  }\n  return hf * Terrain (p) + hb + 5.;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.05, 0.5 * h);\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy), e.x,\n     ht - GrndHt (p.xz + e.yx)));\n}\n\nfloat FishDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, wr, tr, u;\n  dHit \/= 0.75;\n  q = p;  q.x = abs (q.x);  q -= fishLen * vec3 (0.12, 0.1, 0.9);\n  d = PrSphDf (q, 0.05 * fishLen);\n  if (d < dHit) { dHit = d;  idObj = idEye;  qHit = q; }\n  q = p;\n  wr = q.z \/ fishLen;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * (0.33 - 0.13 * u); \n  }\n  q.y *= 0.5;\n  d = PrCapsDf (q, 1.1 * tr * fishLen, fishLen);\n  q.y *= 2.;  q.z -= posMth * fishLen;\n  d = max (d, - PrCylDf (q.yzx, 0.03 * fishLen, 0.1 * fishLen));\n  if (d < dHit + 0.01 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.01 * fishLen);  idObj = idFBdy;  qHit = q;\n  }\n  q = p;  q.z -= -0.9 * fishLen;  q.y *= 0.1;\n  wr = q.z \/ (0.4 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.05 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  float dTail = PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen);\n  d = max (dTail, 0.15 * fishLen - q.z);\n  if (d < dHit + 0.01 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.01 * fishLen);  idObj = idTail;  qHit = q;\n  }\n  q.z -= 0.15 * fishLen;\n  q.xz = Rot2D (q.xz, angTail);\n  d = max (PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen), q.z);\n  if (d < dHit) { dHit = d;  idObj = idTail;  qHit = q; }\n  q = p;  q.y *= 0.5;  q.z -= -0.75 * fishLen;\n  q = q.xzy;\n  d = max (PrCylDf (q, 0.022 * fishLen, 0.11 * fishLen), dTail);\n  if (d < dHit) { dHit = d;  idObj = idTail;  qHit = 0.2 * q.xzy; }\n  q = p;  q.x = abs (q.x) - 0.18 * fishLen;  q.y *= 0.1;  q.z -= 0.4 * fishLen;\n  q.xz = Rot2D (q.xz, angFin);\n  wr = q.z \/ (0.2 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.01 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  q.z -= 0.3 * fishLen;\n  d = PrCylDf (q, 0.12 * tr * fishLen, 0.5 * fishLen);\n  if (d < dHit + 0.005 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.005 * fishLen);  idObj = idFin;  qHit = q;\n  }\n  return 0.75 * dHit;\n}\n\nfloat BridgeDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  float wRd = 1.;\n  q = p;  q.y -= -1.;\n  d = PrBoxDf (q, vec3 (wRd, 0.1, 21.));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRdw; }\n  q = p;  q.x = abs (q.x);  q.xy -= vec2 (wRd - 0.1, 2.);\n  q.z = mod (q.z + 0.75, 1.5) - 0.75;\n  d = PrCylDf (q.xzy, 0.07, 3.);\n  q = p;  q.y -= 2.;\n  d = max (d, PrBoxDf (q, vec3 (wRd, 3., 9.8)));\n  q = p;  q.y -= 13.;\n  d = max (d, - PrCylDf (q.yzx, 13., 1.01));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.x = abs (q.x);  q.xy -= vec2 (wRd - 0.1, 13.);\n  d = max (PrTorusDf (q.yzx, 0.1, 13.), q.y + 8.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (wRd - 0.1, 1.5, 13.5);\n  q.yz = Rot2D (q.yz, -0.25 * pi);\n  d = PrCylDf (q, 0.1, 4.5);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrCab; }\n  q = p;  q.z = abs (q.z);  q.yz -= vec2 (0., 10.2);\n  d = PrBoxDf (q, vec3 (wRd + 0.2, 5., 0.2));\n  q.y -= -0.3;\n  d = max (d, - PrBoxDf (q, vec3 (wRd - 0.1, 4.8, 0.21)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrg; }\n  return dHit;\n}\n\nfloat DwayDf (vec3 p, float h1, float h2, float h3)\n{\n  return max (length (p.yz -\n     vec2 (h1 * clamp (p.y \/ h1, -1., 1.), 0.)) - h2, abs (p.x) - h3);\n}\n\nfloat CageDf (vec3 p, float dHit)\n{\n  const float rad = 6., hLen = 8., wg = 0.5, ww = 0.03, wThk = 0.05,\n     doorHt = 2., doorWd = 1.5;\n  vec3 q, c1, c2;\n  vec2 qo;\n  float d, ds, dd, a;\n  q = p;\n  q.y -= hLen;\n  c1 = vec3 (0., hLen * clamp (q.y \/ hLen, -1., 1.), 0.);\n  c2 = vec3 (0., (hLen - wThk) * clamp (q.y \/ (hLen + wThk), -1., 1.), 0.);\n  d = max (max (length (q - c1) - rad,\n     - (length (q - c2) - (rad - wg))), - q.y);\n  a = atan (q.z, - q.x);\n  q = p;  q.y -= hLen + 0.5 * rad;\n  q.xz = Rot2D (q.xz, AngQnt (a, 0.5, 0., 8.));\n  q.x += 0.5 * rad;\n  ds = PrBoxDf (q, vec3 (0.5 * rad, hLen + 0.5 * rad, 2. * ww));\n  q = p;  q.y = mod (q.y - 1.5, 3.) - 1.5;\n  d = max (d, min (ds, PrBoxDf (q, vec3 (rad, 2. * ww, rad))));\n  q = p;\n  qo = Rot2D (q.xz, AngQnt (a, 0.5, 0., 4.));\n  q.xz = qo;  q.xy -= vec2 (- rad, hLen + 1.2 * doorHt);\n  dd = DwayDf (q, doorHt, doorWd, 0.2 * rad);\n  d = max (d, - dd);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idFrm; }\n  q = p;  q.y -= hLen;\n  d = max (max (max (max (length (q - c1) - (rad - 0.4 * wg),\n     - (length (q - c2) - (rad - 0.6 * wg))), - q.y), - ds), - dd);\n  q = p;  q.y -= 2. * hLen + rad;\n  d = max (d, - PrCylDf (q.xzy, 0.5 * rad, 0.2 * rad));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = isShel; }\n  q = p;  q.xz = qo;  q.xy -= vec2 (-0.98 * rad, hLen + 1.2 * doorHt);\n  d = max (max (max (DwayDf (q, doorHt, doorWd, 0.1 * rad),\n     - DwayDf (q, doorHt - ww, doorWd - ww, 0.1 * rad + wThk)),\n     - (q.y + 2. * doorHt - ww - wThk)), - (q.y + 1.2 * doorHt));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idDway; }\n  return dHit;\n}\n\nfloat CentStrucDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.xz = abs (q.xz) - vec2 (4.);  q.y -= -5.;\n  d = max (max (PrSphDf (q, 5.), - PrSphDf (q, 4.7)), - min (4. - q.y, q.y));\n  q.y -= 2.3;\n  d = max (d, - min (PrCylDf (q.yzx, 1., 6.), PrCylDf (q, 1., 6.)));\n  q.y += 0.5;\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBase; }\n  q = p;  q.y -= -1.;\n  d = PrTorusDf (q.xzy, 0.4, 8.5);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idPlat; }\n  d = PrCylDf (q.xzy, 8.5, 0.1);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idPlat; }\n  q = p;  q.y -= -9.;\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  dHit = CageDf (q, dHit);\n  return dHit;\n}\n\nfloat CornStrucDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, a;\n  q = p;  q.y -= -5.;\n  d = max (max (PrSphDf (q, 5.), - PrSphDf (q, 4.7)), - min (3.9 - q.y, q.y));\n  q.y -= 2.3;\n  d = max (d, - min (PrCylDf (q.yzx, 1., 6.), PrCylDf (q, 1., 6.)));\n  q.y -= 1.5;\n  d = min (d, PrCylDf (q.xzy, 3., 0.1));\n  q.y += 2.;\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBase; }\n  q = p;  q.y -= 1.;\n  d = max (max (PrCapsDf (q.xzy, 2.5, 3.), - PrCapsDf (q.xzy, 2.3, 3.)), -2.2 - q.y);\n  q = p;  q.y -= 7.;\n  d = min (d, max (PrCapsDf (q.xzy, 0.7, 2.), -1. - q.y));\n  q = p;  q.y -= 0.;\n  q.xz = Rot2D (q.xz, AngQnt (0.5 + atan (q.z, - q.x), 0., 0., 4.));\n  q.x += 2.;\n  d = max (d, - DwayDf (q, 2., 1., 2.4));\n  q = p;  q.y -= 4.;\n  q.xz = Rot2D (q.xz, 0.25 * pi);\n  d = max (d, - min (PrCylDf (q.yzx, 1., 3.), PrCylDf (q, 1., 3.)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idTwr; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d;\n  float dHit = dstFar;\n  q = p;\n  q.xz = Rot2D (q.xz, AngQnt (atan (q.z, - q.x), 0., 0.5, 4.));\n  q.x += 20.;\n  dHit = BridgeDf (q, dHit);\n  q = p;  q.xz = abs (q.xz) - vec2 (10.);  q.y -= -1.;\n  d = max (max (PrCylDf (q.xzy, 10.9, 0.1), - PrCylDf (q.xzy, 9.1, 0.5)),\n     max (- q.x, - q.z));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRdw; }\n  q = p;\n  dHit = CentStrucDf (q, dHit);\n  q.y -= 0.1; \n  d = PrSphDf (q, 1.);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idGem; }\n  q = p;  q.xz = abs (q.xz) - vec2 (20.);\n  dHit = CornStrucDf (q, dHit);\n  q.y -= -0.1; \n  d = PrSphDf (q, 0.7);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idGem; }\n  dHit = FishDf (fishMat * (p - fishPos), dHit);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec3 col;\n  float spec;\n  spec = 1.;\n  if (idObj == idBase) {\n    if (qHit.y < -1.) col = vec3 (0.2, 0.3, 0.2);\n    else if (qHit.y > -0.6 || n.y < 0.) col = vec3 (0.1, 0.5, 0.1);\n    else col = mix (vec3 (0.5, 0.5, 0.), vec3 (0., 0.5, 0.5),\n       floor (mod (32. * atan (qHit.z, - qHit.x) \/ (2. * pi), 2.)));\n  } else if (idObj == idPlat) col = vec3 (0.9, 0.9, 0.1);\n  else if (idObj == isShel) col = vec3 (1., 1., 1.);\n  else if (idObj == idFrm) col = vec3 (0.8, 0.8, 0.);\n  else if (idObj == idDway) col = vec3 (0.8, 0.3, 0.);\n  else if (idObj == idTwr) col = vec3 (0.9, 0.7, 0.6);\n  else if (idObj == idBrg) col = vec3 (1., 1., 0.2);\n  else if (idObj == idBrCab) col = vec3 (1., 0.7, 0.);\n  else if (idObj == idRdw) col = vec3 (0.2, 0.15, 0.15);\n  else if (idObj == idGem) {\n    col = vec3 (1., 0.1, 0.1) * (0.6 + 0.4 * cos (5. * tCur));\n    spec = 5.;\n  }\n  return vec4 (col, spec);\n}\n\nvec4 FishCol (vec3 n)\n{\n  vec3 col;\n  const vec3 col1 = vec3 (1., 0.2, 0.1), col2 = vec3 (0.1, 1., 0.2);\n  qHit *= 20. \/ fishLen;\n  if (idObj == idEye) {\n    col = vec3 (0., 0.6, 1.);\n    if (qHit.z > 0.5) col = vec3 (0., 0., 0.1);\n  } else if (idObj == idFBdy) {\n    col = mix (col2, col1, 0.5 * (1. + sin (2. * qHit.y)));\n    vec3 nn = fishMat * n;\n    col = mix (col1,  mix (col, col2, smoothstep (0.7, 1., nn.y)),\n       smoothstep (-1., -0.7, nn.y)) *\n       (1. - 0.2 * SmoothBump (-0.2, 0.2, 0.1, qHit.x));\n  } else if (idObj == idTail) {\n    col = mix (col2, col1, 0.5 * (1. + sin (20. * qHit.y)));\n  } else if (idObj == idFin) {\n    col = mix (col2, col1, 0.5 * (1. + sin (20. * qHit.y)));\n  }\n  return vec4 (col, 1.);\n}\n\nfloat TurbLt (vec3 p, vec3 n, float t)\n{\n  vec2 q = vec2 (dot (p.yzx, n), dot (p.zxy, n));\n  q = 2. * pi * mod (q, 1.) - 256.;\n  t += 11.;\n  float c = 0.;\n  vec2 qq = q;\n  for (int k = 1; k <= 7; k ++) {\n    float tt = t * (1. + 1. \/ float (k));\n    vec2 a1 = tt - qq;\n    vec2 a2 = tt + qq;\n    qq = q + tt + vec2 (cos (a1.x) + sin (a2.y), sin (a1.y) + cos (a2.x));\n    c += 1. \/ length (q \/ vec2 (sin (qq.x), cos (qq.y)));\n  }\n  return clamp (pow (abs (1.25 - abs ((1.\/6.) + 40. * c)), 8.), 0., 1.);\n}\n\nvec3 GrndCol (vec3 p, vec3 n)\n{\n  const vec3 gCol1 = vec3 (0.3, 0.25, 0.25), gCol2 = vec3 (0.1, 0.1, 0.1),\n     gCol3 = vec3 (0.3, 0.3, 0.1), gCol4 = vec3 (0., 0.5, 0.);\n  vec3 col, wCol, bCol;\n  float a = 1. + atan (p.x, p.z) \/ pi;\n  vec2 s = sin (0.35 * p.xz);\n  float f = Noisefv2 (vec2 (12. * a, 7. * (p.y + 2.3 * sin (14. * a)))) +\n     Noisefv2 (p.zy * vec2 (1., 4.3 + 1.4 * s.y)) +\n     Noisefv2 (p.xy * vec2 (1.7, 4.4 + 1.7 * s.x));\n  wCol = mix (gCol1, gCol2, clamp (0.3 * f, 0., 1.));\n  bCol = mix (gCol3, gCol4, clamp (0.7 * Noisefv2 (p.xz) - 0.3, 0., 1.));\n  col = mix (wCol, bCol, smoothstep (0.4, 0.7, n.y));\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 col, colg, vn;\n  float dstHit, dstGrnd, bBri, da;\n  int idObjT;\n  vec3 uwatCol = vec3 (0., 0.09, 0.06);\n  bool hitGrnd;\n  dstGrnd = GrndRay (ro, rd);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstGrnd) {\n    hitGrnd = false;\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj < idGem) vn = VaryNf (3. * ro , vn, 5.);\n    objCol = (idObj >= idFBdy) ? FishCol (vn) : ObjCol (vn);\n    bBri = 0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       0.5 * max (0., max (dot (vn, sunDir), 0.));\n    col = objCol.rgb * (bBri + 0.2 * objCol.a *\n       pow (max (0., dot (sunDir, reflect (rd, vn))), 32.));\n  } else {\n    hitGrnd = true;\n    dstHit = dstGrnd;\n    if (dstGrnd < dstFar) {\n      ro += dstGrnd * rd;\n      vn = VaryNf (1.2 * ro, GrndNf (ro, dstGrnd), 2.);\n      col = GrndCol (ro, vn) * (0.5 + 0.5 * max (0., max (dot (vn, sunDir), 0.)));\n    } else col = uwatCol;\n  }\n  da = min (dstHit, dstFar) \/ dstFar;\n  da =  exp (- 7. * da * da);\n  colg = col;\n  colg.g += 0.5 * max (colg.r, colg.b);\n  colg.rgb *= vec3 (0.2, 0.5, 0.2);\n  if (hitGrnd || idObj != idGem && idObj != idEye) col = colg;\n  else if (idObj == idGem) col = mix (colg, col, da);\n  col *= 1. + 2. * TurbLt (0.01 * ro, normalize (smoothstep (0.1, 0.9, abs (vn))),\n     0.2 * tCur);\n  return sqrt (clamp (mix (uwatCol, col, da), 0., 1.));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 ro, rd, vd;\n  float az, el, dist, zmFac;\n  sunDir = normalize (vec3 (cos (0.1 * tCur), 1.2, sin (0.1 * tCur)));\n  teRingO = 80.;\n  teRingI = 27.;\n  swmVel = 5.;\n  fishLen = 1.;\n  angTail = 0.15 * pi * sin (6. * tCur);\n  angFin = pi * (0.8 + 0.1 * sin (3. * tCur));\n  posMth = 1.04 + 0.01 * sin (5. * tCur);\n  FishPM (tCur);\n  swmPos = fishPos;\n  swmMat = fishMat;\n  FishPM (tCur + 1.2);\n  fishPos.y -= 2.;\n  ro = swmPos;\n  ro.y -= 1.;\n  zmFac = 1.5;\n  rd = normalize (vec3 (uv, zmFac)) * swmMat;\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}