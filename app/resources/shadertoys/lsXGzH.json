{"Shader":{"ver":"0.1","info":{"id":"lsXGzH","date":"1362694021","viewed":9835,"name":"Spout","username":"P_Malin","description":"An experiment with raymarching and refraction.<br\/>Click window and move mouse to rotate. ","likes":104,"published":3,"flags":0,"tags":["3d","raymarching","transparency","refraction","water"],"hasliked":0},"renderpass":[{"inputs":[{"id":1,"src":"\/presets\/tex00.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Spout - @P_Malin\r\n\r\n\/\/#define LOW_QUALITY\r\n\r\n#ifdef LOW_QUALITY\r\n    #define kRaymarchMaxIter 16\r\n#else\r\n    #define kRaymarchMaxIter 32\r\n    \r\n    #define ENABLE_AMBIENT_OCCLUSION\r\n    #define DOUBLE_SIDED_TRANSPARENCY\r\n#endif\r\n\r\n#define ENABLE_SPECULAR\r\n#define ENABLE_REFLECTIONS\r\n#define ENABLE_TRANSPARENCY\r\n#define ENABLE_SHADOWS\r\n#define ENABLE_FOG\r\n\r\n#define ENABLE_DIRECTIONAL_LIGHT\r\n#define ENABLE_DIRECTIONAL_LIGHT_FLARE\r\n\r\n\/\/#define ENABLE_POINT_LIGHT\r\n\/\/#define ENABLE_POINT_LIGHT_FLARE\r\n\r\nconst float kPipeRadius = 0.4;\r\nconst float kPipeThickness = 0.15;\r\nconst float kPipeHeight = 2.0;\r\n\/\/float kPipeHeight = 2.0 + sin(iGlobalTime);\r\n\r\nconst float kWaterNoiseScale = 0.025;\r\n\r\nconst float kWaterVelocity = 1.0;\r\n\r\nconst float kWaterAccel = -1.0;\r\n\r\nconst float kWaterAnimSpeed = 80.0;\r\nconst float kTrenchWaterAnimSpeed = 20.0;\r\n\r\n\r\n\r\nfloat kRipplePos = sqrt(abs(2.0 * kPipeHeight \/ kWaterAccel)) * kWaterVelocity;\r\n\r\nconst float kPI = 3.141592654;\r\nconst float kTwoPI = kPI * 2.0;\r\n\r\nconst float kNoTransparency = -1.0;\r\nconst float kTransparency = 1.0;\r\nconst float kInverseTransparency = 0.0;\r\n\r\nstruct C_Ray\r\n{\r\n    vec3 vOrigin;\r\n    vec3 vDir;\r\n    float fStartDistance;\r\n    float fLength;\r\n};\r\n\r\nstruct C_HitInfo\r\n{\r\n    vec3 vPos;\r\n    float fDistance;\r\n    vec3 vObjectId;\r\n};\r\n    \r\nstruct C_Surface\r\n{\r\n    vec3 vNormal;\r\n    vec3 cReflection;\r\n    vec3 cTransmission;    \r\n};\r\n\r\nstruct C_Material\r\n{\r\n    vec3 cAlbedo;\r\n    float fR0;\r\n    float fSmoothness;\r\n    vec2 vParam;\r\n\r\n    float fTransparency;\r\n    float fRefractiveIndex;\r\n};\r\n\r\nstruct C_Shading\r\n{\r\n    vec3 cDiffuse;\r\n    vec3 cSpecular;\r\n};\r\n\r\nstruct C_PointLight\r\n{\r\n    vec3 vPos;\r\n    vec3 cColour;\r\n};\r\n\r\nstruct C_DirectionalLight\r\n{\r\n    vec3 vDir;\r\n    vec3 cColour;\r\n};\r\n\r\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n    \r\n    vec3 vResult = vec3( vPos.x, c * vPos.y + s * vPos.z, -s * vPos.y + c * vPos.z);\r\n    \r\n    return vResult;\r\n}\r\n\r\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n    \r\n    vec3 vResult = vec3( c * vPos.x + s * vPos.z, vPos.y, -s * vPos.x + c * vPos.z);\r\n    \r\n    return vResult;\r\n}\r\n\r\nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\r\n{\r\n    float s = sin(fAngle);\r\n    float c = cos(fAngle);\r\n    \r\n    vec3 vResult = vec3( c * vPos.x + s * vPos.y, -s * vPos.x + c * vPos.y, vPos.z);\r\n    \r\n    return vResult;\r\n}\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Distance Field CSG\r\n\/\/ These carry with them the material parameters in yzw\r\n\r\nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    \/\/if(v1.x < v2.x) return v1; else return v2;\r\n    return mix(v1, v2, step(v2.x, v1.x));\r\n}\r\n\r\nvec4 DistCombineUnionTransparent( const in vec4 v1, const in vec4 v2, const in float fTransparentScale )\r\n{    \r\n\t\/\/if( fCondition < 0.0 )\r\n\t\/\/            return v1;\r\n\t\r\n\t\/\/ Negate the distance to the transparency object if transparent scale is 0.0     \r\n\t\/\/ This allows us to ratrace \"out\" of transparency\r\n\t\r\n\tvec4 vScaled = vec4(v2.x * (fTransparentScale * 2.0 - 1.0), v2.yzw);\r\n                \r\n\t\/\/ The condition allows us to ignore transparency for secondary rays\r\n    return mix(v1, vScaled, step(vScaled.x, v1.x) * step(0.0, fTransparentScale));\r\n}\r\n\r\nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    return mix(v2, v1, step(v2.x,v1.x));\r\n}\r\n\r\nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\r\n{\r\n    return DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\r\n}\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Scene Description \r\n\r\nconst float kMaterialIdWall = 1.0;\r\nconst float kMaterialIdPipe = 2.0;\r\nconst float kMaterialIdWater = 3.0;\r\n\r\nfloat Noise(vec2 p)\r\n{\r\n    vec2 s = sin(p * 0.6345) + sin(p * 1.62423);\r\n    return dot(s, vec2(0.125)) + 0.5;\r\n}\r\n\r\n\/\/ result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\r\nvec4 GetDistanceScene( const in vec3 vPos, const in float fTransparentScale )\r\n{          \r\n    vec4 vResult = vec4(10000.0, -1.0, 0.0, 0.0);\r\n            \r\n\tfloat fDistFloor = vPos.y;\r\n\tfloat fDistBrick = fDistFloor;\r\n\t\r\n\tfloat fDistTrench = length(vPos.yz + vec2(-0.4, 0.0)) - 1.0;\r\n\tfDistBrick = max(fDistBrick, -(fDistTrench));\r\n\t\r\n\tfloat fDistWall = vPos.x + 1.0;\r\n\tfDistBrick = min(fDistBrick, fDistWall);\r\n\t\r\n    vec4 vDistFloor = vec4(fDistBrick, kMaterialIdWall, vPos.xz + vec2(vPos.y, 0.0));\r\n    vResult = DistCombineUnion(vResult, vDistFloor);    \r\n\r\n    vec3 vWaterDomain = vPos - vec3(0.0, kPipeHeight, 0.0);\r\n\r\n    float t= max(vWaterDomain.x \/ kWaterVelocity, 0.0);\r\n\t\r\n\t\/\/ Equations of motion\r\n\tfloat s = 0.5 * kWaterAccel * t * t;\r\n\tfloat v = -kWaterAccel * t;\r\n\t\r\n\tvWaterDomain.y -= s;    \r\n                \r\n    float fDistWater = (length(vWaterDomain.yz) - kPipeRadius);\r\n                \r\n    float fDistPipe = max(fDistWater - kPipeThickness, vWaterDomain.x);\r\n    fDistPipe = max(fDistPipe, -fDistWater); \/\/ subtract the water from the pipe to make the hole\r\n    vec4 vDistPipe = vec4(fDistPipe, kMaterialIdPipe, vPos.xy);        \r\n        \r\n    vResult = DistCombineUnion(vResult, vDistPipe);    \r\n\t\r\n\t\/\/ compensate for domain distortion of water, otherwise ray sometimes misses\r\n\tfDistWater \/= (1.0 + v * 0.5);\r\n\t\r\n    vec2 vNoiseDomain = vPos.xz;\r\n                \r\n\t\/\/ modify noise for water in trench\r\n\tfloat fInTrench = step(vPos.y, (-0.1 + 0.05));        \r\n\tvec2 vRippleCentre1 = vPos.xz - vec2(kRipplePos, 0.0);\r\n\tvNoiseDomain.x = mix(vNoiseDomain.x, length(vRippleCentre1), fInTrench);\r\n\tfloat fNoiseScale = mix(t * t, 1.0 \/ (1.0 + vNoiseDomain.x), fInTrench) * kWaterNoiseScale;\r\n\tfloat fWaterSpeed = mix(kWaterAnimSpeed * kWaterVelocity, kTrenchWaterAnimSpeed, fInTrench);\r\n\t\r\n\tvNoiseDomain *= 30.0; \r\n\tvNoiseDomain.x += -iGlobalTime * fWaterSpeed;\r\n\t\r\n\tfloat fTrenchWaterDist = vPos.y + 0.1;\r\n\tfDistWater = min(fDistWater, fTrenchWaterDist);\r\n\t\r\n\tfDistWater += Noise(vNoiseDomain) * fNoiseScale;\r\n\t\r\n\tvec4 vDistWater = vec4(fDistWater, kMaterialIdWater, vPos.xy);        \r\n\tvResult = DistCombineUnionTransparent(vResult, vDistWater, fTransparentScale);\r\n              \r\n    return vResult;\r\n}\r\n\r\nfloat GetRayFirstStep( const in C_Ray ray )\r\n{\r\n    return ray.fStartDistance;  \r\n}\r\n\r\nC_Material GetObjectMaterial( const in C_HitInfo hitInfo )\r\n{\r\n    C_Material mat;\r\n              \r\n    if(hitInfo.vObjectId.x == kMaterialIdWall)\r\n    {\r\n        \/\/ floor\r\n        mat.fR0 = 0.02;\r\n                                \r\n\t\t\/\/ Textureless version\r\n\t\t\/\/vec2 vTile = step(vec2(0.15), fract(hitInfo.vObjectId.yz));\r\n\t\t\/\/float fTile = vTile.x * vTile.y;\r\n        \/\/mat.cAlbedo = vec3(1.0) * (fTile * 0.8 + 0.2);\r\n        \/\/mat.fSmoothness = 1.0;\r\n        \r\n        vec3 cTexture = texture2D(iChannel0, hitInfo.vObjectId.yz * 0.25).rgb;\r\n        mat.cAlbedo = cTexture * cTexture;\r\n        mat.fSmoothness = mat.cAlbedo.r;\r\n        mat.fTransparency = 0.0;\r\n    }\r\n    else\r\n    if(hitInfo.vObjectId.x == kMaterialIdPipe)\r\n    {\r\n        \/\/ pipe\r\n        mat.fR0 = 0.8;\r\n        mat.fSmoothness = 1.0;\r\n        mat.cAlbedo = vec3(0.5);\r\n        mat.fTransparency = 0.0;\r\n    }\r\n    else\r\n    {\r\n        \/\/ water\r\n        mat.fR0 = 0.01;\r\n        mat.fSmoothness = 1.0;\r\n        mat.fTransparency = 1.0;\r\n        mat.fRefractiveIndex = 1.0 \/ 1.3330;\r\n        const float fExtinctionScale = 2.0;\r\n\t\tconst vec3 vExtinction = vec3(0.3, 0.7, 0.9);\r\n        mat.cAlbedo = (vec3(1.0) - vExtinction) * fExtinctionScale; \/\/ becomes extinction for transparency\r\n    }\r\n    \r\n    return mat;\r\n}\r\n\r\nvec3 GetSkyGradient( const in vec3 vDir )\r\n{\r\n    const vec3 cColourTop = vec3(0.7, 0.8, 1.0);\r\n    const vec3 cColourHorizon = cColourTop * 0.5;\r\n\r\n    float fBlend = clamp(vDir.y, 0.0, 1.0);\r\n    return mix(cColourHorizon, cColourTop, fBlend);\r\n}\r\n\r\nC_PointLight GetPointLight()\r\n{\r\n    C_PointLight result;\r\n\r\n    result.vPos = vec3(0.5, 1.0, -2.0);\r\n    result.cColour = vec3(32.0, 6.0, 1.0) * 10.0;\r\n\r\n    return result;\r\n}\r\n\r\nC_DirectionalLight GetDirectionalLight()\r\n{\r\n    C_DirectionalLight result;\r\n\r\n    result.vDir = normalize(vec3(-0.2, -0.3, 0.5));\r\n    result.cColour = vec3(8.0, 7.5, 7.0);\r\n\r\n    return result;\r\n}\r\n\r\nvec3 GetAmbientLight(const in vec3 vNormal)\r\n{\r\n    return GetSkyGradient(vNormal);\r\n}\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Raymarching \r\n\r\nvec3 GetSceneNormal( const in vec3 vPos, const in float fTransparentScale )\r\n{\r\n    \/\/ tetrahedron normal\r\n    const float fDelta = 0.025;\r\n\r\n    vec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\r\n    vec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\r\n    vec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\r\n    vec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\r\n\r\n    float f1 = GetDistanceScene( vPos + vOffset1, fTransparentScale ).x;\r\n    float f2 = GetDistanceScene( vPos + vOffset2, fTransparentScale ).x;\r\n    float f3 = GetDistanceScene( vPos + vOffset3, fTransparentScale ).x;\r\n    float f4 = GetDistanceScene( vPos + vOffset4, fTransparentScale ).x;\r\n\r\n    vec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\r\n\r\n    return normalize( vNormal );\r\n}\r\n\r\n#define kRaymarchEpsilon 0.01\r\n\/\/ This is an excellent resource on ray marching -> http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\r\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const int maxIter, const float fTransparentScale )\r\n{        \r\n    result.fDistance = GetRayFirstStep( ray );\r\n    result.vObjectId.x = 0.0;\r\n        \r\n    for(int i=0;i<=kRaymarchMaxIter;i++)              \r\n    {\r\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\r\n        vec4 vSceneDist = GetDistanceScene( result.vPos, fTransparentScale );\r\n        result.vObjectId = vSceneDist.yzw;\r\n        \r\n        \/\/ abs allows backward stepping - should only be necessary for non uniform distance functions\r\n        if((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= ray.fLength) || (i > maxIter))\r\n        {\r\n            break;\r\n        }                        \r\n\r\n        result.fDistance = result.fDistance + vSceneDist.x; \r\n    }\r\n\r\n\r\n    if(result.fDistance >= ray.fLength)\r\n    {\r\n        result.fDistance = 1000.0;\r\n        result.vPos = ray.vOrigin + ray.vDir * result.fDistance;\r\n        result.vObjectId.x = 0.0;\r\n    }\r\n}\r\n\r\nfloat GetShadow( const in vec3 vPos, const in vec3 vNormal, const in vec3 vLightDir, const in float fLightDistance )\r\n{\r\n    #ifdef ENABLE_SHADOWS\r\n\t\tC_Ray shadowRay;\r\n\t\tshadowRay.vDir = vLightDir;\r\n\t\tshadowRay.vOrigin = vPos;\r\n\t\tconst float fShadowBias = 0.05;\r\n\t\tshadowRay.fStartDistance = fShadowBias \/ abs(dot(vLightDir, vNormal));\r\n\t\tshadowRay.fLength = fLightDistance - shadowRay.fStartDistance;\r\n\t\r\n\t\tC_HitInfo shadowIntersect;\r\n\t\tRaymarch(shadowRay, shadowIntersect, 32, kNoTransparency);\r\n\t\t\r\n\t\tfloat fShadow = step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );\r\n\t\t\r\n\t\treturn fShadow;          \r\n    #else\r\n    \treturn 1.0;\r\n    #endif\r\n}\r\n\r\n\/\/ use distance field to evaluate ambient occlusion\r\nfloat GetAmbientOcclusion(const in C_HitInfo intersection, const in C_Surface surface)\r\n{\r\n    #ifdef ENABLE_AMBIENT_OCCLUSION    \r\n\t\tvec3 vPos = intersection.vPos;\r\n\t\tvec3 vNormal = surface.vNormal;\r\n\t\r\n\t\tfloat fAmbientOcclusion = 1.0;\r\n\t\r\n\t\tfloat fDist = 0.0;\r\n\t\tfor(int i=0; i<=5; i++)\r\n\t\t{\r\n\t\t\tfDist += 0.1;\r\n\t\r\n\t\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist, kNoTransparency);\r\n\t\r\n\t\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 \/ fDist );                                  \r\n\t\t}\r\n\t\r\n\t\treturn fAmbientOcclusion;\r\n    #else\r\n\t    return 1.0;\r\n    #endif    \r\n}\r\n\r\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\r\n\/\/ Lighting and Shading\r\n\r\n#define kFogDensity 0.05\r\n\r\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo hitInfo)\r\n{\r\n    #ifdef ENABLE_FOG\r\n    \/\/ fog\r\n    float fFogAmount = exp(hitInfo.fDistance * -kFogDensity);\r\n    vec3 cFog = GetSkyGradient(ray.vDir);\r\n\r\n    #ifdef ENABLE_DIRECTIONAL_LIGHT_FLARE\r\n    C_DirectionalLight directionalLight = GetDirectionalLight();\r\n    float fDirDot = clamp(dot(-directionalLight.vDir, ray.vDir), 0.0, 1.0);\r\n    cFog += directionalLight.cColour * pow(fDirDot, 10.0);\r\n    #endif \r\n\r\n    col = mix(cFog, col, fFogAmount);\r\n    #endif\r\n\r\n    \/\/ glare from light (a bit hacky - use length of closest approach from ray to light)\r\n    #ifdef ENABLE_POINT_LIGHT_FLARE\r\n    C_PointLight pointLight = GetPointLight();\r\n\r\n    vec3 vToLight = pointLight.vPos - ray.vOrigin;\r\n    float fPointDot = dot(vToLight, ray.vDir);\r\n    fPointDot = clamp(fPointDot, 0.0, hitInfo.fDistance);\r\n\r\n    vec3 vClosestPoint = ray.vOrigin + ray.vDir * fPointDot;\r\n    float fDist = length(vClosestPoint - pointLight.vPos);\r\n    col += pointLight.cColour * 0.01\/ (fDist * fDist);\r\n    #endif    \r\n}\r\n\r\n\/\/ http:\/\/en.wikipedia.org\/wiki\/Schlick's_approximation\r\nfloat Schlick( const in vec3 vHalf, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\r\n{\r\n    float fDot = dot(vHalf, -vView);\r\n    fDot = clamp((1.0 - fDot), 0.0, 1.0);\r\n    float fDotPow = pow(fDot, 5.0);\r\n    return fR0 + (1.0 - fR0) * fDotPow * fSmoothFactor;\r\n}\r\n\r\nvec3 ApplyFresnel(const in vec3 vDiffuse, const in vec3 vSpecular, const in vec3 vNormal, const in vec3 vView, const in C_Material material)\r\n{\r\n\tvec3 vReflect = reflect(vView, vNormal);\r\n\tvec3 vHalf = normalize(vReflect + -vView);\r\n    float fFresnel = Schlick(vHalf, vView, material.fR0, material.fSmoothness * 0.9 + 0.1);\r\n    return mix(vDiffuse, vSpecular, fFresnel);    \r\n}\r\n\r\nfloat GetBlinnPhongIntensity(const in vec3 vIncidentDir, const in vec3 vLightDir, const in vec3 vNormal, const in float fSmoothness)\r\n{          \r\n    vec3 vHalf = normalize(vLightDir - vIncidentDir);\r\n    float fNdotH = max(0.0, dot(vHalf, vNormal));\r\n\r\n    float fSpecPower = exp2(4.0 + 6.0 * fSmoothness);\r\n    float fSpecIntensity = (fSpecPower + 2.0) * 0.125;\r\n\r\n    return pow(fNdotH, fSpecPower) * fSpecIntensity;\r\n}\r\n\r\nC_Shading ApplyPointLight( const in C_PointLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material )\r\n{\r\n    C_Shading shading;\r\n    \r\n    vec3 vToLight = light.vPos - vSurfacePos;\r\n    vec3 vLightDir = normalize(vToLight);\r\n    float fLightDistance = length(vToLight);\r\n    \r\n    float fAttenuation = 1.0 \/ (fLightDistance * fLightDistance);\r\n    \r\n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, fLightDistance );\r\n    vec3 vIncidentLight = light.cColour * fShadowFactor * fAttenuation * max(0.0, dot(vLightDir, vNormal));\r\n    \r\n    shading.cDiffuse = vIncidentLight;                                  \r\n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\r\n    \r\n    return shading;\r\n}  \r\n\r\nC_Shading ApplyDirectionalLight( const in C_DirectionalLight light, const in vec3 vSurfacePos, const in vec3 vIncidentDir, const in vec3 vNormal, const in C_Material material )\r\n{\r\n    C_Shading shading;\r\n\r\n    const float kShadowRayLength = 10.0;      \r\n    vec3 vLightDir = -light.vDir;\r\n    float fShadowFactor = GetShadow( vSurfacePos, vNormal, vLightDir, kShadowRayLength );\r\n    vec3 vIncidentLight = light.cColour * fShadowFactor * max(0.0, dot(vLightDir, vNormal));\r\n    \r\n    shading.cDiffuse = vIncidentLight;                                  \r\n    shading.cSpecular = GetBlinnPhongIntensity( vIncidentDir, vLightDir, vNormal, material.fSmoothness ) * vIncidentLight;\r\n    \r\n    return shading;\r\n}  \r\n\r\n\r\nvec3 ShadeSurface(const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface, const in C_Material material)\r\n{\r\n    vec3 cScene;\r\n    \r\n    C_Shading shading;\r\n\r\n    shading.cDiffuse = vec3(0.0);\r\n    shading.cSpecular = vec3(0.0);\r\n    \r\n    float fAmbientOcclusion = GetAmbientOcclusion(hitInfo, surface);\r\n    vec3 vAmbientLight = GetAmbientLight(surface.vNormal) * fAmbientOcclusion;\r\n    \r\n    shading.cDiffuse += vAmbientLight;\r\n    shading.cSpecular += surface.cReflection;\r\n              \r\n    #ifdef ENABLE_POINT_LIGHT\r\n    C_PointLight pointLight = GetPointLight(); \r\n    C_Shading pointLighting = ApplyPointLight(pointLight, hitInfo.vPos,ray.vDir, surface.vNormal, material);\r\n    shading.cDiffuse += pointLighting.cDiffuse;\r\n    shading.cSpecular += pointLighting.cSpecular;\r\n    #endif\r\n\r\n    #ifdef ENABLE_DIRECTIONAL_LIGHT\r\n\tC_DirectionalLight directionalLight = GetDirectionalLight();\r\n    C_Shading directionLighting = ApplyDirectionalLight(directionalLight, hitInfo.vPos, ray.vDir, surface.vNormal, material);\r\n    shading.cDiffuse += directionLighting.cDiffuse;\r\n    shading.cSpecular += directionLighting.cSpecular;\r\n    #endif\r\n\r\n    vec3 vDiffuseReflection = shading.cDiffuse * material.cAlbedo;              \r\n\r\n    \/\/ swap diffuse for transmission\r\n    vDiffuseReflection = mix(vDiffuseReflection, surface.cTransmission, material.fTransparency);    \r\n\r\n    #ifdef ENABLE_SPECULAR\r\n    cScene = ApplyFresnel(vDiffuseReflection , shading.cSpecular, surface.vNormal, ray.vDir, material);\r\n    #else\r\n    cScene = vDiffuseReflection;\r\n    #endif\r\n    \r\n    return cScene;\r\n}\r\n\r\nvec3 GetSceneColourSecondary( const in C_Ray ray );\r\n\r\nvec3 GetReflection( const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface )\r\n{\r\n    #ifdef ENABLE_REFLECTIONS    \r\n    {\r\n        \/\/ get colour from reflected ray\r\n        const float fSeparation    = 0.1;\r\n\r\n        C_Ray reflectRay;\r\n        reflectRay.vDir = reflect(ray.vDir, surface.vNormal);\r\n        reflectRay.vOrigin = hitInfo.vPos;\r\n        reflectRay.fLength = 16.0;\r\n        reflectRay.fStartDistance = fSeparation \/ abs(dot(reflectRay.vDir, surface.vNormal));\r\n        \r\n        return GetSceneColourSecondary(reflectRay);      \r\n    }\r\n    #else\r\n        return GetSkyGradient(reflect(ray.vDir, surface.vNormal));                              \r\n    #endif\r\n}\r\n\r\nvec3 GetTransmission( const in C_Ray ray, const in C_HitInfo hitInfo, const in C_Surface surface, const in C_Material material )\r\n{\r\n    #ifdef ENABLE_TRANSPARENCY  \r\n    {\r\n        const float fSeparation = 0.05;\r\n\r\n        \/\/ Trace until outside transparent object\r\n        C_Ray refractRay;\r\n        \/\/ we dont handle total internal reflection (in that case refract returns a zero length vector)\r\n        refractRay.vDir = refract(ray.vDir, surface.vNormal, material.fRefractiveIndex);\r\n        refractRay.vOrigin = hitInfo.vPos;\r\n        refractRay.fLength = 16.0;\r\n        refractRay.fStartDistance = fSeparation \/ abs(dot(refractRay.vDir, surface.vNormal));\r\n\r\n\t\t#ifdef DOUBLE_SIDED_TRANSPARENCY\r\n\t\t\r\n\t\t\tC_HitInfo hitInfo2;\r\n\t\t\tRaymarch(refractRay, hitInfo2, 32, kInverseTransparency);\r\n\t\t\tvec3 vNormal = GetSceneNormal(hitInfo2.vPos, kInverseTransparency);\r\n\t\t\t\r\n\t\t\t\/\/ get colour from rest of scene\r\n\t\t\tC_Ray refractRay2;\r\n\t\t\trefractRay2.vDir = refract(refractRay.vDir, vNormal, 1.0 \/ material.fRefractiveIndex);\r\n\t\t\trefractRay2.vOrigin = hitInfo2.vPos;\r\n\t\t\trefractRay2.fLength = 16.0;\r\n\t\t\trefractRay2.fStartDistance = 0.0;\/\/fSeparation \/ abs(dot(refractRay2.vDir, vNormal));\r\n\t\t\t\r\n\t\t\tfloat fExtinctionDist = hitInfo2.fDistance;\r\n\t\t\tvec3 vSceneColour = GetSceneColourSecondary(refractRay2);\r\n\t\t\r\n\t\t#else\r\n\t\t\r\n\t\t\tvec3 vSceneColour = GetSceneColourSecondary(refractRay);                                                                        \r\n\t\t\tfloat fExtinctionDist = 0.5;\r\n\t\t\r\n\t\t#endif\r\n                                \r\n        vec3 cMaterialExtinction = material.cAlbedo;\r\n        \/\/ extinction should really be exp(-) but this is a nice hack to get RGB\r\n        vec3 cExtinction = (1.0 \/ (1.0 + (cMaterialExtinction * fExtinctionDist)));\t\t\r\n\t\t\r\n\t\t\/\/vec3 cExtinction = exp2(-cMaterialExtinction * fExtinctionDist);\r\n                                \r\n        return vSceneColour * cExtinction;\r\n    }\r\n    #else\r\n        return GetSkyGradient(reflect(ray.vDir, surface.vNormal));                              \r\n    #endif\r\n}\r\n\r\n\/\/ no reflections, no transparency, used for secondary rays\r\nvec3 GetSceneColourSecondary( const in C_Ray ray )\r\n{\r\n    C_HitInfo hitInfo;\r\n    Raymarch(ray, hitInfo, 32, kNoTransparency);\r\n                        \r\n    vec3 cScene;\r\n\r\n    if(hitInfo.vObjectId.x < 0.5)\r\n    {\r\n        cScene = GetSkyGradient(ray.vDir);\r\n    }\r\n    else\r\n    {\r\n        C_Surface surface;        \r\n        surface.vNormal = GetSceneNormal(hitInfo.vPos, kNoTransparency);\r\n\r\n        C_Material material = GetObjectMaterial(hitInfo);\r\n\r\n        \/\/ use sky gradient instead of reflection\r\n        surface.cReflection = GetSkyGradient(reflect(ray.vDir, surface.vNormal));\r\n        \r\n        material.fTransparency = 0.0;\r\n\r\n        \/\/ apply lighting\r\n        cScene = ShadeSurface(ray, hitInfo, surface, material);\r\n    }\r\n\r\n    ApplyAtmosphere(cScene, ray, hitInfo);\r\n\r\n    return cScene;\r\n}\r\n\r\nvec3 GetSceneColourPrimary( const in C_Ray ray )\r\n{                                                          \r\n    C_HitInfo intersection;\r\n    Raymarch(ray, intersection, 256, kTransparency);\r\n                \r\n    vec3 cScene;\r\n\r\n    if(intersection.vObjectId.x < 0.5)\r\n    {\r\n        cScene = GetSkyGradient(ray.vDir);\r\n    }\r\n    else\r\n    {\r\n        C_Surface surface;\r\n        \r\n        surface.vNormal = GetSceneNormal(intersection.vPos, kTransparency);\r\n\r\n        C_Material material = GetObjectMaterial(intersection);\r\n\r\n        surface.cReflection = GetReflection(ray, intersection, surface);\r\n\r\n        if(material.fTransparency > 0.0)\r\n        {    \r\n            surface.cTransmission = GetTransmission(ray, intersection, surface, material);\r\n        }\r\n\r\n        \/\/ apply lighting\r\n        cScene = ShadeSurface(ray, intersection, surface, material);\r\n    }\r\n\r\n    ApplyAtmosphere(cScene, ray, intersection);\r\n\r\n    return cScene;\r\n}\r\n\r\nfloat kFarClip = 30.0;\r\n\r\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\r\n{\r\n    vec2 vUV = ( fragCoord.xy \/ iResolution.xy );\r\n    vec2 vViewCoord = vUV * 2.0 - 1.0;\r\n\r\n    float fRatio = iResolution.x \/ iResolution.y;\r\n    vViewCoord.y \/= fRatio;                          \r\n\r\n    ray.vOrigin = vPos;\r\n\r\n    vec3 vRight = normalize(cross(vForwards, vWorldUp));\r\n    vec3 vUp = cross(vRight, vForwards);\r\n        \r\n    ray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards); \r\n    ray.fStartDistance = 0.0;\r\n    ray.fLength = kFarClip;      \r\n}\r\n\r\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\r\n{\r\n    vec3 vForwards = normalize(vInterest - vPos);\r\n    vec3 vUp = vec3(0.0, 1.0, 0.0);\r\n\r\n    GetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\r\n}\r\n\r\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\r\n{\r\n    return vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\r\n}\r\n\r\nvec3 Tonemap( const in vec3 cCol )\r\n{ \r\n    vec3 vResult = 1.0 -exp2(-cCol);\r\n\r\n    return vResult;\r\n}\r\n\r\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\r\n{\r\n    C_Ray ray;\r\n\r\n    vec2 vMouseUV = iMouse.xy \/ iResolution.xy;    \r\n    \r\n    if(iMouse.z < 0.5)\r\n    {\r\n        vMouseUV = vec2(0.2, 0.8);\r\n    }\r\n\r\n    float fHeading = mix(-0.5, kPI + 0.5, vMouseUV.x);\r\n    float fElevation = mix(1.5, -0.25, vMouseUV.y);\r\n    float fCameraDist = mix(4.0, 2.5, vMouseUV.y);\r\n    \r\n    vec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCameraDist;\r\n    vec3 vCameraIntrest = vec3(1.0, 0.9, 0.0);\r\n\r\n    GetCameraRayLookat( vCameraIntrest + vCameraPos, vCameraIntrest, fragCoord, ray);\r\n\r\n    vec3 cScene = GetSceneColourPrimary( ray );  \r\n\r\n    const float fExposure = 1.5;    \r\n    fragColor = vec4( Tonemap(cScene * fExposure), 1.0 );\r\n}\r\n","name":"","description":"","type":"image"}]}}