{"Shader":{"ver":"0.1","info":{"id":"MlB3R3","date":"1430854582","viewed":787,"name":"Marble Effect","username":"jonobr1","description":"A shader to create an animated marble effect.","likes":5,"published":3,"flags":0,"tags":["2d","noise","bw","marble","white","black"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float PI = 3.14;\nconst int resolution = 16;\nvec2 period = vec2( 5.0, 10.0 );\nfloat power = 8.0;\nfloat size = 64.0;\n\n\/\/\n\/\/ Description : Array and textureless GLSL 2D simplex noise function.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/ \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  \/\/ (3.0-sqrt(3.0))\/6.0\n                      0.366025403784439,  \/\/ 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  \/\/ -1.0 + 2.0 * C.x\n                      0.024390243902439); \/\/ 1.0 \/ 41.0\n\/\/ First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\/\/ Other corners\n  vec2 i1;\n  \/\/i1.x = step( x0.y, x0.x ); \/\/ x0.x > x0.y ? 1.0 : 0.0\n  \/\/i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  \/\/ x0 = x0 - 0.0 + 0.0 * C.xx ;\n  \/\/ x1 = x0 - i1 + 1.0 * C.xx ;\n  \/\/ x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n\/\/ Permutations\n  i = mod289(i); \/\/ Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\/\/ Gradients: 41 points uniformly over a line, mapped onto a diamond.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n\/\/ Normalise gradients implicitly by scaling m\n\/\/ Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n\/\/ Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nfloat smoothNoise(float x, float y) {\n\n   \/\/get fractional part of x and y\n   float fractX = x - floor(x);\n   float fractY = y - floor(y);\n   \n   \/\/wrap around\n   float x1 = mod((floor(x) + iResolution.x), iResolution.x);\n   float y1 = mod((floor(y) + iResolution.y), iResolution.y);\n   \n   \/\/neighbor values\n   float x2 = mod((x1 + iResolution.x - 1.0), iResolution.x);\n   float y2 = mod((y1 + iResolution.y - 1.0), iResolution.y);\n\n   \/\/smooth the noise with bilinear interpolation\n   float value = 0.0;\n   value += fractX       * fractY       * snoise(vec2(x1, y1));\n   value += fractX       * (1.0 - fractY) * snoise(vec2(x1, y2));\n   value += (1.0 - fractX) * fractY       * snoise(vec2(x2, y1));\n   value += (1.0 - fractX) * (1.0 - fractY) * snoise(vec2(x2, y2));\n\n   return value;\n}\n\nfloat turbulence( vec2 pos, in float size ) {\n\n    float value = 0.0, initialSize = size;\n    float x = pos.x;\n    float y = pos.y;\n    \n    for ( int i = 0; i < resolution; i++ ) {\n    \tvalue += smoothNoise( x \/ size, y \/ size ) * size;\n        size \/= 2.0;\n    }\n    \n    return( 128.0 * value \/ initialSize );\n}\n\nfloat marble( in vec2 p ) {\n\n  \tfloat x = p.x;\n    float y = p.y;\n\n    float xy = x \/ iResolution.y * period.x;\n    xy += y * period.y \/ iResolution.x;\n    xy += power * turbulence( p, size ) \/ 256.0;\n\n    return sin( 256.0 * xy * PI );\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 pos = uv.xy;\n\n    period.x += 10.0 * cos( iGlobalTime );\n    period.y += 10.0 * sin( iGlobalTime );\n    \n\tfloat n = marble( pos );\n    \n\tfragColor = vec4(vec3(1.0 - n), 1.0);\n\n}","name":"","description":"","type":"image"}]}}