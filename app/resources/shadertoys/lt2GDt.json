{"Shader":{"ver":"0.1","info":{"id":"lt2GDt","date":"1433769827","viewed":760,"name":"iq-bad Voronoi distance ","username":"FabriceNeyret2","description":"dmin2-dmin1=0 gives Voronoi diagram, but  dmin2-dmin1 is not what you think.<br\/>SPACE: iq-good dist .  R: round dist.  C: col vs isovals.  T: stop time.<br\/>(still, for natural textures you might prefer Worley noise and its deformed distances).","likes":7,"published":3,"flags":16,"tags":["voronoi","worley","distance"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"float scale = 5.;\nfloat time = iGlobalTime;\n\n#define PI 3.14159\n\nbool keyToggle(int ascii)  {\n\treturn (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.);\n}\n\n\/\/ --- noise functions from https:\/\/www.shadertoy.com\/view\/XslGRr\n\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash( float n ) {\n    return fract(sin(n)*43758.5453);\n}\n\n\/\/ --- End of: Created by inigo quilez --------------------\n\n\/\/ more 2D noise\nvec2 hash12( float n ) {\n    return fract(sin(n+vec2(1.,12.345))*43758.5453);\n}\nfloat hash21( vec2 n ) {\n    return hash(n.x+10.*n.y);\n}\nvec2 hash22( vec2 n ) {\n    return hash12(n.x+10.*n.y);\n}\n\nfloat cell;   \/\/ id of closest cell\nvec2  center; \/\/ center of closest cell\n\nvec3 worley( vec2 p ) {\n    vec3 d = vec3(1e15);\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n                vec2 p0 = ip+vec2(i,j);\n            \tfloat a0 = hash21(p0), a=5.*a0*time+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n                vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n                float d0 = dot(c,c);\n                if      (d0<d.x) { d.yz=d.xy; d.x=d0; cell=hash21(p0); center=c;}\n                else if (d0<d.y) { d.z =d.y ; d.y=d0; }\n                else if (d0<d.z) {            d.z=d0; }  \n            }\n    return sqrt(d);\n}\n\n\/\/ distance to Voronoi borders, as explained in https:\/\/www.shadertoy.com\/view\/ldl3W8 \nfloat worleyD( vec2 p) {\n    float d = 1e15;\n    vec2 ip = floor(p);\n    for (float i=-2.; i<3.; i++)\n   \t \tfor (float j=-2.; j<3.; j++) {\n            vec2 p0 = ip+vec2(i,j);\n            float a0 = hash21(p0), a=5.*a0*time+2.*PI*a0; vec2 dp=vec2(cos(a),sin(a)); \n            vec2  c = hash22(p0)*.5+.5*dp+p0-p;\n            float d0 = dot(c,c);\n \t    \tfloat c0 = dot(center+c,normalize(c-center));\n        \td=min(d, c0);\n    \t}\n\n    return .5*d;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if (keyToggle(64+20)) time=0.;\n    vec2 p = 2.*(fragCoord.xy \/ iResolution.y -vec2(.9,.5));\n  \n\tvec3 w = scale*worley(scale*p); \n    float dist=w.x, c0,c;\n    if (keyToggle(32)) \n        c0 =  2.*scale*worleyD(scale*p);\n    else if (!keyToggle(64+18))\n \t    c0= w.y-w.x;\t\/\/ c0 = 1.-1.\/(w.y-w.x);\n    else {\n        \/\/ c0 = length(vec2(w.y-w.x,w.z-w.x));\n        \/\/ c0 = .5*(w.z+w.y)-w.x;\n        c0 = 2.\/(1.\/(w.y-w.x)+1.\/(w.z-w.x));   \/\/ formula (c) Fabrice NEYRET - BSD3:mention author.\n    }\n    \n    if (!keyToggle(64+3))\n      c=sin(c0*5.);\n    else\n      c=.5*c0; \/\/ c=1.-.5*c0;\n    \n    vec3 col0= .5+.5*sin(6.28*cell+vec3(0.,2.*PI\/3.,-2.*PI\/3.));\n    vec3 col = c*col0; \n    float seed = smoothstep(0.3,.0, dist); col = seed+(1.-seed)*col;\n    if ((!keyToggle(64+3))&&(mod(100.*cell,2.)>1.)) col=1.-col;\n\n    \/\/vec3 col = vec3(c);\n\n   fragColor = vec4(col,1.);\n}","name":"","description":"","type":"image"}]}}