{"Shader":{"ver":"0.1","info":{"id":"ldf3DN","date":"1370423769","viewed":8906,"name":"Mandelbrot - orbit traps","username":"iq","description":"Some orbit trap coloring in the Maldebrot set. There are two traps. First one (col1, in blue) is \"average trap distance to line\". The second one (col2, in yellow) is \"minimum distance to point\". The distance to the set (c1, in black) is then multiplied.","likes":40,"published":3,"flags":0,"tags":["2d","fractal","orbittrap","orbit"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ antialiasing (squared)\n\n#define AA 2\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec3 col = vec3(0.0);\n    \n    for( int m=0; m<AA; m++ )\n    for( int n=0; n<AA; n++ )\n    {\n    vec2 p = -1.0 + 2.0 * (fragCoord.xy+vec2(float(m),float(n))\/float(AA)) \/ iResolution.xy;\n    p.x *= iResolution.x\/iResolution.y;\n\n    \/\/float zoo = 1.0\/250.0;\n\t\n\tfloat zoo = 1.0\/250.0;\n\t\n\tzoo = 1.0\/(400.0 - 150.0*sin(0.15*iGlobalTime-0.3));\n\t\n\tvec2 cc = vec2(-0.533516,0.526141) + p*zoo;\n\n\tvec2 t2c = vec2(-0.5,2.0);\n\tt2c += 0.5*vec2( cos(0.13*(iGlobalTime-10.0)), sin(0.13*(iGlobalTime-10.0)) );\n\t\t\n    \/\/ iterate\n    vec2 z  = vec2(0.0);\n    vec2 dz = vec2(0.0);\n\tfloat trap1 = 0.0;\n\tfloat trap2 = 1e20;\n\tfloat co2 = 0.0;\n    for( int i=0; i<150; i++ )\n    {\n        if( dot(z,z)>1024.0 ) break;\n\n\t\t\/\/ Z' -> 2\u00b7Z\u00b7Z' + 1\n        dz = 2.0*vec2(z.x*dz.x-z.y*dz.y, z.x*dz.y + z.y*dz.x ) + vec2(1.0,0.0);\n\t\t\t\n        \/\/ Z -> Z\u00b2 + c\t\t\t\n        z = cc + vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y );\n\t\t\t\n        \/\/ trap 1\n\t\tfloat d1 = abs(dot(z-vec2(0.0,1.0),vec2(0.707)));\n\t\tfloat ff = step( d1, 1.0 );\n\t\tco2 += ff;\n\t\ttrap1 += ff*d1;\n\n\t\t\/\/trap2\n\t\ttrap2 = min( trap2, dot(z-t2c,z-t2c) );\n    }\n\n    \/\/ distance, d(c) = |Z|\u00b7log|Z|\/|Z'|\n\tfloat d = sqrt( dot(z,z)\/dot(dz,dz) )*log(dot(z,z));\n\t\n\tfloat c1 = pow( clamp( 2.00*d\/zoo,    0.0, 1.0 ), 0.5 );\n\tfloat c2 = pow( clamp( 1.5*trap1\/co2, 0.0, 1.0 ), 2.0 );\n\tfloat c3 = pow( clamp( 0.4*trap2, 0.0, 1.0 ), 0.25 );\n\n\tvec3 col1 = 0.5 + 0.5*sin( 3.0 + 4.0*c2 + vec3(0.0,0.5,1.0) );\n\tvec3 col2 = 0.5 + 0.5*sin( 4.1 + 2.0*c3 + vec3(1.0,0.5,0.0) );\n\tcol += 2.0*sqrt(c1*col1*col2);\n    }\n\tcol \/= float(AA*AA);\n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}