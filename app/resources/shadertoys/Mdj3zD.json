{"Shader":{"ver":"0.1","info":{"id":"Mdj3zD","date":"1384808128","viewed":2375,"name":"Campfire","username":"Dave_Hoskins","description":"Campfire. Stare into the everlasting fire... but watch out for the wolf! (29:00)   : )<br\/>Drag mouse to spin and zoom.<br\/>","likes":47,"published":3,"flags":0,"tags":["3d","raymarching","noise","fire","campfire"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":165,"src":"https:\/\/soundcloud.com\/maxjoylife\/fire","ctype":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":233,"src":"https:\/\/soundcloud.com\/woodcraft-productions\/ambient-forest-sounds-at-night","ctype":"musicstream","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Campfire.\tBy Dave Hoskins. Nov. 2013\n\n\/\/ Video:-  http:\/\/youtu.be\/VBkYDxfO-7Y\n\n\/\/ Using ray-marching to step through the volume around the fire,\n\/\/ colliding with logs, rocks, and also adding flames as it goes\n\/\/ with a 3D noise algorithm.\n\n#define TAU 6.28318530718\n\n\/\/=================================================================================================\nfloat Hash( float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n\n\/\/=================================================================================================\nfloat Noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    return mix(Hash(p), Hash(p+1.0), f);\n}\n\n\/\/=================================================================================================\nfloat Bump( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5) \/ 256.0, -100.0).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n\/\/=================================================================================================\nfloat Noise( in vec3 x )\n{\n\tx.y -= iGlobalTime *4.0;\t\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\t\n\tvec2 uv = (p.xy + vec2(37.0, 17.0) * p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5) \/ 256.0, -100.0).yx;\n\treturn mix(rg.x, rg.y, f.z);\n}\n\n\/\/=================================================================================================\nfloat FireLog(vec3 p, vec3 a, vec3 b, float r)\n{\n\tvec3 pa = p - a;\n\tvec3 ba = b - a;\n\tp = abs(p);\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h ) - r- Bump(p*6.4)*.03 - Bump(p*2.4)*.3;\n}\n\n\/\/=================================================================================================\nfloat RoundBox( vec3 p, vec3 add)\n{\n\treturn length(max(abs(p+add)-1.1,0.0)) - Bump(p*vec3(1.3, .1, 1.3))*.5;\n}\n\n\/\/=================================================================================================\nfloat DE_Fire(vec3 p)\n{\n\tp.xz += (Noise(p * .8))* p.y * .3;\n\tvec3 shape = p * vec3(1.5, .35, 1.5);\n\tif (dot(shape, shape) > 70.0) return 1.0;\n\t\n\tp += 2.5 * (Noise( shape * 1.5) -\n\t\t\t\tNoise(-shape * 0.945) *.5 +\n\t\t\t\tNoise( shape * 9.6)*.3);\n\tfloat f = (length( shape) - (1.+Noise(p)*10.0));\n\n\tf -= max(3.4-p.y, 0.0)*3.0;\n\tf -= pow(abs(Noise(shape*3.9)), 45.0) * 300.0 * pow(abs(Noise(shape*1.1)), 5.0);\n\treturn f;\n}\n\n\/\/=================================================================================================\nfloat DE_Stones(vec3 p)\n{\n\tp.xz = abs(p.xz);\n\n\tfloat d =  RoundBox(p, vec3(-7.0, 0.9, 0.0));\n\td = min(d, RoundBox(p, vec3(0.0, 0.85, -7.0)));\n\td = min(d, RoundBox(p, vec3(-5.5, 0.9, -3.)));\n\td = min(d, RoundBox(p, vec3(-3.0, 0.95, -5.5)));\n\tp.y -= 4.0;\n\treturn max(-(length(p)-7.0 - Bump(p)*.3), d);\n}\n\n\/\/=================================================================================================\nfloat DE_Logs(vec3 p)\n{\n\tfloat  d = FireLog(p, vec3(2.0, 0.3, -4.0),  vec3(-3.0, 0.65, 4.0), .5);\n\td = min(d, FireLog(p, vec3(3.0, 0.1, 4.0),  vec3(-4.0, 2.4, 0.5), .5));\n\td = min(d, FireLog(p, vec3(-2.2, 0.65, -4.5),  vec3(2.0, 1.5, 3.0), .3));\n\td = min(d, FireLog(p, vec3(-2.5, 0.0, -2.0),  vec3(3., 0.0, 1.5), .65));\n\td = min(d, FireLog(p, vec3(4.5, 0.0, -0.9),  vec3(-4.0, 3.5, 0.9), .1));\n\treturn d;\n}\n\n\/\/=================================================================================================\nfloat MapAll(vec3 p)\n{\n\tfloat d = DE_Logs(p);\n\tif (d > .05)\n\t\td = min(d, DE_Stones(p));\n\treturn d;\n}\n\/\/=================================================================================================\nvec3 Normal( in vec3 pos )\n{\n\tvec2 eps = vec2( 0.05, 0.0);\n\tvec3 nor = vec3(\n\t    MapAll(pos+eps.xyy) - MapAll(pos-eps.xyy),\n\t    MapAll(pos+eps.yxy) - MapAll(pos-eps.yxy),\n\t    MapAll(pos+eps.yyx) - MapAll(pos-eps.yyx) );\n\treturn normalize(nor);\n}\n\n\/\/=================================================================================================\nvec4 Raymarch( in vec3 ro, in vec3 rd, inout int hit, in vec2 fragCoord)\n{\n\tfloat sum = 0.0;\n\t\/\/ Starting point plus dither to prevent banding...\n\tfloat t = 4.2 + .1 * texture2D(iChannel0, fragCoord.xy \/ iChannelResolution[0].xy).y;\n\tvec3 pos = vec3(0.0, 0.0, 0.0);\n\tfloat d = 100.0;\n\tfor(int i=0; i < 200; i++)\n\t{\n\t\tif (hit > 0 || pos.y < 0.0)\n\t\t{\n\t\t\t\/\/ Skip the loop code quickly...\n\t\t\tbreak;\n\t\t}\n\t\tpos = ro + t*rd;\n\t\t\n\t\tvec3 shape = pos * vec3(1.5, .4, 1.5);\n\t\tif (dot(shape, shape) < 77.0)\n\t\t{\n\t\t\td = DE_Logs(pos);\n\t\t\tif (d < 0.05)\n\t\t\t{\n\t\t\t\tpos = ro + (t + d) * rd;\n\t\t\t\thit = 1;\n\t\t\t}\n\t\t\telse if (d < 0.45)\n\t\t\t{\n\t\t\t\t\/\/ Glow effect around log...\n\t\t\t\tsum += (.45-d) * .06;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\td = DE_Stones(pos);\n\t\t\tif (d < 0.05)\n\t\t\t{\n\t\t\t\tpos = ro + (t + d) * rd;\n\t\t\t\thit = 2;\n\t\t\t}\n\t\t}\n\t\t\n\t\tfloat v = 1.0-DE_Fire( pos );\n\t\tv = max(v, 0.0) * .00187;\n\t\tsum += v;\n\t\t\n    \tt += max(.075, t*.005);\n\t}\n\t\n\treturn vec4(pos, clamp(sum*sum*sum, 0.0, 1.0 ));\n}\n\n\/\/=================================================================================================\nvec2 RotateCamera(vec2 p, float a)\n{\n\tfloat si = sin(a);\n\tfloat co = cos(a);\n\treturn mat2(si, co, -co, si) * p;\n}\n\n\/\/=================================================================================================\nvec3 FlameColour(float f)\n{\n\tf = f*f*(3.0-2.0*f);\n\treturn  min(vec3(f+.8, f*f*1.4+.1, f*f*f*.7) * f, 1.0);\n}\n\n\/\/=================================================================================================\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tvec2 p = -1.0 + 2.0 * uv;\n\tp.x *= iResolution.x\/iResolution.y;\n\n\t\/\/ Camera...\n\tvec2 mouse;\n\tif (iMouse.z <= 0.5)\n\t{\n\t\tfloat time = iGlobalTime+39.5;\n\t\tmouse.x = time * 0.025;\n\t\tmouse.y = sin(time*.3)*.5 + .5;\n\t}\n\telse\n\t{\n\t\tmouse = iMouse.xy \/ iResolution.xy;\n\t}\n\n\tvec3 origin = vec3(0., 5.3, -13.0+mouse.y *5.0 );\n\tvec3 target = vec3( 0.0, 4.3-mouse.y*3.0, 0.0 );\n\t\/\/ Spin it with the mouse X...\n\torigin.xz = RotateCamera(origin.xz, .4 + (mouse.x * TAU));\n\t\n\t\/\/ Make camera ray using origin and target positions...\n\tvec3 cw = normalize( target-origin);\n\tvec3 cp = vec3(0.0, 1.0, 0.0);\n\tvec3 cu = normalize( cross(cw, cp) );\n\tvec3 cv = ( cross(cu,cw) );\n\tvec3 ray = normalize(p.x*cu + p.y*cv + (1.5+(Noise(iGlobalTime*.5))*.1) * cw );\n\t\n\tint hit = 0;\n\tvec4 ret = Raymarch(origin, ray, hit, fragCoord);\n\tvec3 col = vec3(0.3);\n\tfloat flicker = Noise(iGlobalTime*8.0);\n\tvec3 light = vec3(0.0, 3.25 + flicker, 0.0);\n\tvec3 nor, ldir;\n\tif (hit > 0 && hit < 3)\n\t{\n\t\tnor  = Normal(ret.xyz);\n\t\tldir = normalize(light - ret.xyz);\n\t}\n\n\tif (hit == 1)\n\t{\n\t\t\/\/ Logs...\n\t\tfloat bri = max(dot(ldir, nor), .4);\n\t\tbri = bri*bri * 7.0;\n\t\tfloat f = Bump(ret.xyz*4.53 - vec3 (0.0, iGlobalTime*.37, 0.0))*.8 + Bump(ret.xyz*17.3)*.4;\n\t\tf += Bump(ret.xyz * 1.0);\n\t\tf = pow(abs(f), 13.0) * .01  + max(.7-dot(ret.xyz, ret.xyz)*.03, 0.0);\n\t\tvec3 mat = f * vec3(.8, .4, 0.);\n\t\tcol = mat * vec3(.1, .04, 0.0) * bri;\n\t\tcol *= clamp(1.0-length(ret.xz)*.04, 0.0, 1.0);\n\t}\n\telse if (hit == 2)\n\t{\n\/\/\t\t\/\/ Stones...\n\t\tvec3 ref  = reflect(ray, nor);\n\t\tfloat bri = max(dot(ldir, nor), 0.05);\n\t\tfloat spe = max(dot(ldir, ref), 0.0);\n\t\tspe = pow(abs(spe), 10.0);\n\t\tvec3 mat = vec3(Bump(ret.xyz * 12.3)*.5+.5) * vec3(1.0, .2+texture2D(iChannel0, ret.xz*.002).x*.5, .12);\n\t\tcol = mat * bri + vec3(.9, .6, .3) * spe;\n\t}else\n\t{\n\t\t\/\/ Grab the forest texture...\n\t\tvec3 frst = textureCube(iChannel1, ray-vec3(0.0, .08, 0.0), -100.0).xyz;\n\t\tfrst = frst*frst;\n\t\tcol = frst * vec3(.13, .13, .13);\n\/\/\t\t\/\/ Is ray looking at ground area?...\n\t\tif (ray.y < 0.0)\n\t\t{\n\/\/\t\t\t\/\/ Dodgy re-projection onto floor...\n\t\t\tvec3 pos = origin+vec3(0.0, -7.0, 0.0) + ray * (-origin.y \/ ray.y);\n\t\t\tvec3 mat = textureCube(iChannel1, pos, -100.0).xyz;\n\t\t\t\/\/ Rudimentary bump map...\n\t\t\tvec2 bmp = texture2D(iChannel0, pos.xz*.02, -100.0).xy;\n\t\t\t\n\t\t\tnor = normalize(vec3(bmp.x-.5, 1.0, bmp.y-.5));\n\t\t\tldir = normalize(light - pos);\n\t\t\tfloat bri = max(dot(ldir, nor), 0.0);\n\t\t\tmat = mat * mat * vec3(.25, .55, .47) * bri;\n\n\t\t\t\/\/ Do ground FX with pos location...\n\t\t\tfloat d = dot(pos, pos);\n\t\t\tbri = max(3.0 - (sqrt(d * .005+flicker)), .01);\n\t\t\t\n\t\t\tvec3 hearth = vec3(0.005, 0.0, 0.0);\n\t\t\tfloat f = Bump(vec3(pos.x, iGlobalTime*.024, pos.z) * 21.0);\n\t\t\tf += Bump(vec3(pos.x, iGlobalTime*.001, pos.z) * 5.3);\n\t\t\tf = pow(abs(f), 15.0) * .0001;\n\t\t\t\n\t\t\thearth += f * vec3(.7, .15, 0.) * max(85.-d, 0.0);\n\t\t\tmat = mix(hearth, mat, smoothstep(80.0, 180.0, d));\n\t\t\t\n\t\t\tmat *= vec3(1.0, .3, 0.1) * bri;\n\t\t\tcol = mix(col, mat, min((ray.y*ray.y) * 146.0, 1.0));\n\t\t}\n\t\telse\n\t\t{\n\/\/\t\t\t\/\/ Wolf eyes...\n\t\t\tfloat lum  = max(sin(iGlobalTime*.5 - 1.2), 0.0);\n\t\t\tfloat eye1 = max( dot(normalize(vec3(-.04,  .05, -1.0)), normalize(ray* vec3(1.0, 3.0, 1.0)))-.99994, 0.0);\n\t\t\tfloat eye2 = max( dot(normalize(vec3(-.085, .05, -1.0)), normalize(ray* vec3(1.0, 3.0, 1.0)))-.99994, 0.0);\n\t\t\tfloat f = sin(iGlobalTime*.33-1.0);\n\t\t\teye2 *= smoothstep(0.1, .0, f) + smoothstep(0.1, .2, f);\n\t\t\tcol.x = clamp(col.x + (eye1+eye2)*5000.0 * lum, .0, 1.0);\n\t\t}\n\t}\n\t\n\tcol += FlameColour(ret.w);\n\t\n\t\/\/ Contrasts...\n\tcol = (1.0-exp(-col*2.0))*1.15;\n\tcol = sqrt(col);\t\n\t\n\t\/\/col = min(mix(vec3(length(col)),col, 1.1), 1.0);\n\t\/\/ Vignette...\n\tcol *= 0.5 + 0.5 * pow(150.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), .5 );\t\n\t\n\tfragColor = vec4(col,1.0);\t\n}","name":"","description":"","type":"image"}]}}