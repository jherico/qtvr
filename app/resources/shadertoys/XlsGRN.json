{"Shader":{"ver":"0.1","info":{"id":"XlsGRN","date":"1419286198","viewed":397,"name":"Fractal Bridge","username":"dr2","description":"A bridge appears in a tranquil valley; follow the bird as it flies through it.","likes":10,"published":3,"flags":0,"tags":["raymarching","flight","bridge"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Fractal Bridge\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  p *= 4.;\n  float f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return 0.5 * mix (vec3 (0.8, 0.4, 0.2), vec3 (0.45, 0.25, 0.1), f);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  float s = length (max (d, 0.));\n  d = min (d, 0.);\n  return max (d.x, max (d.y, d.z)) + s;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrArchDf (vec3 p, float ht, float wd)\n{\n  return max (length (p.yx - vec2 (ht * clamp (p.y \/ ht, -1., 1.), 0.)) - wd, - p.y);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nstruct RBridge {\n  float bLen, bHt, lvHt, aWd, aHt, aTk, aRp, rFac;\n};\nRBridge rb;\n\nint idObj;\nmat3 bdMat, birdMat;\nvec3 bdPos, birdPos, fltBox, qHit, ltDir;\nfloat tCur, tBldCyc, tBldSeq, birdLen, birdVel, scnRad, scnLen;\nbool isShad, brBuild, brShow;\nconst float dstFar = 50.;\nconst int idBrg1 = 1, idBrg2 = 2, idSlope = 3, idRocks = 4, idCase = 5,\n   idWat = 6, idWing = 11, idBdy = 12, idEye = 13, idBk = 14;\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.2, 0.3, 0.55);\n  return sbCol + 0.2 * pow (1. - max (rd.y, 0.), 5.);\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const float skyHt = 150.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 10. * tCur;\n    vec2 p = 0.02 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.8;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (5. * f * rd.y - 1., 0., 1.);\n  } else cloudFac = 0.;\n  float s = max (dot (rd, ltDir), 0.);\n  col = SkyBg (rd) + (0.35 * pow (s, 6.) +\n     0.65 * min (pow (s, 256.), 0.3));\n  col = mix (col, vec3 (0.85), cloudFac);\n  return col;\n}\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.05;\n  p += 0.005 * tCur * vec3 (0., 0., 1.);\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x) +\n       0.003 * tCur * vec3 (0., 0., 1.);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.12 * ht;\n}\n\nvec3 WaterNf (vec3 p)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nfloat BdWingDf (vec3 p, float dHit)\n{\n  vec3 q, qh;\n  float d, dd, a, wr;\n  float wngFreq = 6.;\n  float wSegLen = 0.15 * birdLen;\n  float wChord = 0.3 * birdLen;\n  float wSpar = 0.02 * birdLen;\n  float fTap = 8.;\n  float tFac = (1. - 1. \/ fTap);\n  q = p - vec3 (0., 0., 0.3 * birdLen);\n  q.x = abs (q.x) - 0.1 * birdLen;\n  float wf = 1.;\n  a = -0.1 + 0.2 * sin (wngFreq * tCur);\n  d = dHit;\n  qh = q;\n  for (int k = 0; k < 5; k ++) {\n    q.xy = Rot2D (q.xy, a);\n    q.x -= wSegLen;\n    wr = wf * (1. - 0.5 * q.x \/ (fTap * wSegLen));\n    dd = PrFlatCylDf (q.zyx, wr * wChord, wr * wSpar, wSegLen);\n    if (k < 4) {\n      q.x -= wSegLen;\n      dd = min (dd, PrCapsDf (q, wr * wSpar, wr * wChord));\n    } else {\n      q.x += wSegLen;\n      dd = max (dd, PrCylDf (q.xzy, wr * wChord, wSpar));\n      dd = min (dd, max (PrTorusDf (q.xzy, 0.98 * wr * wSpar, wr * wChord), - q.x));\n    }\n    if (dd < d) {\n      d = dd;  qh = q;\n    }\n    a *= 1.03;\n    wf *= tFac;\n  }\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idWing;  qHit = qh; }\n  return dHit;\n}\n\nfloat BdBodyDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, a, wr;\n  float bkLen = 0.15 * birdLen;\n  q = p;\n  wr = q.z \/ birdLen;\n  float tr, u;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;\n    tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);\n    u *= u;\n    tr = 0.17 - u * (0.34 - 0.18 * u); \n  }\n  d = PrCapsDf (q, tr * birdLen, birdLen);\n  if (d < dHit) { dHit = d;  idObj = idBdy;  qHit = q; }\n  q = p;\n  q.x = abs (q.x);\n  wr = (wr + 1.) * (wr + 1.);\n  q -= birdLen * vec3 (0.3 * wr, 0.1 * wr, -1.2);\n  d = PrCylDf (q, 0.009 * birdLen, 0.2 * birdLen);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idBdy;  qHit = q; }\n  q = p;\n  q.x = abs (q.x);\n  q -= birdLen * vec3 (0.08, 0.05, 0.9);\n  d = PrSphDf (q, 0.04 * birdLen);\n  if (d < dHit) { dHit = d;  idObj = idEye;  qHit = q; }\n  q = p;  q -= birdLen * vec3 (0., -0.015, 1.15);\n  wr = clamp (0.5 - 0.3 * q.z \/ bkLen, 0., 1.);\n  d = PrFlatCylDf (q, 0.25 * wr * bkLen, 0.25 * wr * bkLen, bkLen);\n  if (d < dHit) { dHit = d;  idObj = idBk;  qHit = q; }\n  return dHit;\n}\n\nfloat BirdDf (vec3 p, float dHit)\n{\n  dHit = BdWingDf (p, dHit);\n  dHit = BdBodyDf (p, dHit);\n  return 0.9 * dHit;\n}\n\nvec4 BirdCol (vec3 n)\n{\n  vec3 col;\n  float spec = 1.;\n  if (idObj == idWing) {\n    float gw = 0.15 * birdLen;\n    float w = mod (qHit.x, gw);\n    w = SmoothBump (0.15 * gw, 0.65 * gw, 0.1 * gw, w);\n    col = mix (vec3 (0., 0., 1.), vec3 (1., 0., 0.), w);\n  } else if (idObj == idEye) {\n    col = vec3 (0., 0.6, 0.);\n    spec = 5.;\n  } else if (idObj == idBdy) {\n    vec3 nn = birdMat * n;\n    col = mix (mix (vec3 (1., 0., 0.), vec3 (0., 0., 1.),\n       smoothstep (0.5, 1., nn.y)), vec3 (1.),\n       1. - smoothstep (-1., -0.7, nn.y));\n  } else if (idObj == idBk) {\n    col = vec3 (1., 1., 0.);\n  }\n  return vec4 (col, spec);\n}\n\nvec3 BirdTrack (float t)\n{\n  vec3 bp;\n  float rdTurn = 0.3 * min (fltBox.x, fltBox.z);\n  float tC = 0.5 * pi * rdTurn \/ birdVel;\n  vec3 tt = vec3 (fltBox.x - rdTurn, length (fltBox.xy), fltBox.z - rdTurn) *\n     2. \/ birdVel;\n  float tFlyCyc = 2. * (2. * tt.z + tt.x  + 4. * tC + tt.y);\n  float tFlySeq = mod (t + 0.2 * tt.z, tFlyCyc);\n  float ti[9];  ti[0] = 0.;  ti[1] = ti[0] + tt.z;  ti[2] = ti[1] + tC;\n  ti[3] = ti[2] + tt.x;  ti[4] = ti[3] + tC;  ti[5] = ti[4] + tt.z;\n  ti[6] = ti[5] + tC;  ti[7] = ti[6] + tt.y;  ti[8] = ti[7] + tC;\n  float a, h, hd, tf;\n  h = - fltBox.y;\n  hd = 1.;\n  if (tFlySeq > 0.5 * tFlyCyc) {\n    tFlySeq -= 0.5 * tFlyCyc;\n    h = - h;  hd = - hd;\n  }\n  float rSeg = -1.;\n  vec3 fbR = vec3 (1.);\n  fbR.xz -= vec2 (rdTurn) \/ fltBox.xz;\n  bp.xz = fltBox.xz;\n  bp.y = h;\n  if (tFlySeq < ti[4]) {\n    if (tFlySeq < ti[1]) {\n      tf = (tFlySeq - ti[0]) \/ (ti[1] - ti[0]);\n      bp.xz *= vec2 (1., fbR.z * (2. * tf - 1.));\n    } else if (tFlySeq < ti[2]) {\n      tf = (tFlySeq - ti[1]) \/ (ti[2] - ti[1]);  rSeg = 0.;\n      bp.xz *= fbR.xz;\n    } else if (tFlySeq < ti[3]) {\n      tf = (tFlySeq - ti[2]) \/ (ti[3] - ti[2]);\n      bp.xz *= vec2 (fbR.x * (1. - 2. * tf), 1.);\n    } else {\n      tf = (tFlySeq - ti[3]) \/ (ti[4] - ti[3]);  rSeg = 1.;\n      bp.xz *= fbR.xz * vec2 (-1., 1.);\n    }\n  } else {\n    if (tFlySeq < ti[5]) {\n      tf = (tFlySeq - ti[4]) \/ (ti[5] - ti[4]);\n      bp.xz *= vec2 (- 1., fbR.z * (1. - 2. * tf));\n    } else if (tFlySeq < ti[6]) {\n      tf = (tFlySeq - ti[5]) \/ (ti[6] - ti[5]);  rSeg = 2.;\n      bp.xz *= - fbR.xz;\n    } else if (tFlySeq < ti[7]) {\n      tf = (tFlySeq - ti[6]) \/ (ti[7] - ti[6]);\n      bp.xz *= vec2 (fbR.x * (2. * tf - 1.), - 1.);\n      bp.y = h + 2. * fltBox.y * hd * tf;\n    } else {\n      tf = (tFlySeq - ti[7]) \/ (ti[8] - ti[7]);  rSeg = 3.;\n      bp.xz *= fbR.xz * vec2 (1., -1.);\n      bp.y = - h;\n    }\n  }\n  if (rSeg >= 0.) {\n    a = 0.5 * pi * (rSeg + tf);\n    bp += rdTurn * vec3 (cos (a), 0., sin (a));\n  }\n  bp.y -= 0.85 * rb.bHt - fltBox.y;\n  return bp;\n}\n\nfloat BridgeDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, ds, yb, yh, sRed, aw, ah;\n  float zCut = 0.3 * rb.bHt;\n  q = p;\n  yh = 0.02 * q.z;\n  q = p;  q.y -= 0.01 * rb.bHt;\n  d = PrBoxDf (q, vec3 (rb.bLen, rb.bHt, 0.0875 * rb.bHt * (1. - 0.444 * q.y \/ rb.bHt)));\n  sRed = 1.;\n  yb = - rb.bHt;\n  for (int k = 0; k < 4; k ++) {\n    float kf = float (k);\n    aw = rb.aWd * sRed;\n    ah = rb.aHt * sRed;\n    q = p;\n    q.x = mod (q.x + kf * rb.aRp * aw, 2. * rb.aRp * aw) - rb.aRp * aw;\n    q.y -= yb;\n    d = max (max (d, - PrArchDf (q, ah, aw)), - PrArchDf (q.zyx, 0.6 * ah, 0.3 * aw));\n    yb += rb.lvHt * sRed;\n    sRed *= rb.rFac;\n  }\n  q = p;  q.y -= rb.bHt;  q.y -= yh;\n  float dc = PrCylDf (q, scnRad, zCut);\n  d = max (d, dc);\n  float varHt, varHtP, varLen;\n  if (brBuild) {\n    varHt = 0.;\n    varLen = rb.bLen * min (mod (5. * tBldSeq \/ tBldCyc, 1.) + 0.01, 1.);\n    int iq = int (floor (5. * tBldSeq \/ tBldCyc));\n    sRed = 1.;\n    for (int k = 0; k <= 4; k ++) {\n      varHtP = varHt;\n      varHt += rb.lvHt * sRed;\n      sRed *= rb.rFac;\n      if (k == iq) break;\n    }\n    q = p;  q.y -= - rb.bHt;\n    ds = min (PrBoxDf (q, vec3 (varLen, varHt, zCut)),\n       PrBoxDf (q, vec3 (rb.bLen, varHtP, zCut)));\n    d = max (d, ds);\n  }\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrg1; }\n  yb = - rb.bHt;\n  q = p;  q.y -= yb;\n  d = min (d, PrBoxDf (q, vec3 (rb.bLen, rb.aTk, 10. * rb.aTk)));\n  q.x = mod (q.x, 2. * rb.aRp * rb.aWd) - rb.aRp * rb.aWd;\n  d = max (d, - PrBoxDf (q, vec3 (5.5 * rb.aTk, 2. * rb.aTk, zCut)));\n  sRed = 1.;\n  for (int k = 0; k <= 3; k ++) {\n    yb += rb.lvHt * sRed;\n    sRed *= rb.rFac;\n    q = p;  q.y -= yb;\n    d = min (d, PrBoxDf (q, vec3 (rb.bLen, rb.aTk * sRed, 10. * rb.aTk * sRed)));\n  }\n  d = max (d, dc);\n  if (brBuild) {\n    q = p;  q.y -= - rb.bHt + 0.125 * rb.lvHt - 3. * rb.aTk;\n    d = max (d, ds);\n  }\n  d = max (d, dc);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrg2; }\n  return dHit;\n}\n\nfloat GroundDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, db, dc, yh, dw, a, g;\n  q = p;  q.y -= rb.bHt;\n  yh = 0.02 * q.z;\n  dc = PrCylDf (q, scnRad, 1.2 * scnLen);\n  db = max (max (PrCylDf (q, 1.01 * scnRad, scnLen), q.y + 0.015 * rb.bHt),\n     - q.y - 2.11 * rb.bHt + yh);\n  d = max (db, - dc);\n  q = p;  q.y -= - 1.05 * rb.bHt + yh;\n  dw = PrBoxDf (q, vec3 (0.7 * scnRad, 0.025 * scnRad, 1.005 * scnLen));\n  q.y -= 0.025 * scnRad;\n  dw = max (dw, - PrBoxDf (q, vec3 (0.6 * scnRad, 0.025 * scnRad, scnLen)));\n  d = min (d, max (dw, dc));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idCase; }\n  q = p;  q.y -= rb.bHt + yh;\n  a = atan (q.x, - q.y) \/ pi;\n  g = Fbm2 (2. * vec2 ((abs (a) < 0.8) ? 12. * a : q.x, q.z));\n  d = max (db, - PrCylDf (q, scnRad  * (0.995 - 0.07 * (1. - abs (a)) * g),\n     1.2 * scnLen));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idSlope; }\n  d = max (db, q.y + 2.12 * rb.bHt * (1. - 0.05 * g));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idRocks; }\n  d = max (db, q.y + 2. * rb.bHt);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idWat; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit = dstFar;\n  if (brShow) dHit = BridgeDf (p, dHit);\n  if (! isShad) dHit = GroundDf (p, dHit);\n  if (! brBuild) {\n    q = p;  q -= birdPos;\n    if (PrSphDf (q, 0.2) < dHit) dHit = BirdDf (birdMat * q, dHit);\n  }\n  return 0.9 * dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.03;\n  for (int i = 0; i < 50; i++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.03;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao = 0.;\n  for (int i = 0; i < 8; i ++) {\n    float d = 0.01 + float (i) \/ 8.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return clamp (1. - 0.1 * ao, 0., 1.);\n}\n\nvec4 SceneCol (vec3 n)\n{\n  vec3 col;\n  float spec = 1.;\n  if (idObj == idBrg1) col = vec3 (0.55, 0.35, 0.15);\n  else if (idObj == idBrg2) col = 0.9 * vec3 (0.55, 0.35, 0.15);\n  else if (idObj == idSlope) {\n    col = mix (vec3 (0.3, 0.2, 0.1), vec3 (0.2, 0.7, 0.2),\n       clamp (qHit.y + 3.5, 0., 1.));\n    if (abs (n.z) < 0.99 && n.y < 0.5) col = mix (vec3 (0.25, 0.25, 0.2), col, \n       smoothstep (0.2, 0.5, n.y));\n    spec = 0.2;\n  } else if (idObj == idRocks) {\n    col = mix (vec3 (0.2, 0.4, 0.1), vec3 (0.3, 0.25, 0.1),\n       clamp (10. * (qHit.y + 3.5), 0., 1.));\n    spec = 0.5;\n  } else if (idObj == idCase) col = WoodCol (3. * qHit.zyx, n);\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 vn, col;\n  float reflFac;\n  int idObjT;\n  float dstHit, ao, sh;\n  isShad = false;\n  reflFac = 1.;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar && idObj == idWat) {\n    ro += rd * dstHit;\n    rd = reflect (rd, WaterNf (qHit));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    reflFac *= 0.8;\n  }\n  if (idObj < 0) dstHit = dstFar;\n  idObjT = idObj;\n  if (dstHit >= dstFar) col = SkyCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idBrg1 || idObj == idBrg2) vn = VaryNf (50. * qHit, vn, 0.5);\n    else if (idObj == idCase) vn = VaryNf (qHit * vec3 (10., 10., 0.5), vn, 1.);\n    if (idObj >= idWing) objCol = BirdCol (vn);\n    else objCol = SceneCol (vn);\n    float dif = max (dot (vn, ltDir), 0.);\n    ao = ObjAO (ro, vn);\n    isShad = true;\n    sh = ObjSShadow (ro, ltDir);\n    col = reflFac * objCol.xyz * (0.2 * ao * (1. +\n       max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.)) + \n       max (0., dif) * sh *\n       (dif + ao * objCol.w * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.)));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return col;\n}\n\nvoid BirdPM (float t, int id)\n{\n  float dt = 1.;\n  bdPos = BirdTrack (t);\n  vec3 bpF = BirdTrack (t + dt);\n  vec3 bpB = BirdTrack (t - dt);\n  vec3 vel = (bpF - bpB) \/ (2. * dt);\n  float vy = vel.y;  vel.y = 0.;\n  vec3 acc = (bpF - 2. * bdPos + bpB) \/ (dt * dt);  acc.y = 0.;\n  vec3 va = cross (acc, vel) \/ length (vel);\n  vel.y = vy;\n  float el = - 0.75 * asin (vel.y \/ length (vel));\n  float rl = 1.5 * length (va) * sign (va.y);\n  if (id > 0) {\n    el += 0.05 * pi;  rl = 0.5 * rl;\n  }\n  vec3 ort = vec3 (el, atan (vel.z, vel.x) - 0.5 * pi, rl);\n  vec3 cr = cos (ort);\n  vec3 sr = sin (ort);\n  bdMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid SetConf ()\n{\n  rb.bLen = 5.;\n  rb.bHt = 0.343 * rb.bLen;  rb.lvHt = rb.bHt * 0.7314;\n  rb.aHt = 0.6 * rb.lvHt;  rb.aWd = 0.0526 * rb.bLen;  rb.aTk = 0.0243 * rb.bHt;\n  rb.aRp = 1.2;  rb.rFac = 0.75;\n  scnRad = 0.867 * rb.bLen;  scnLen = 1.3 * rb.bLen;\n  fltBox = vec3 (3. * rb.aRp * rb.aWd, 0.25 * (1. + rb.rFac) * rb.lvHt, 0.7 * scnLen);\n  birdVel = 0.5;\n  BirdPM (tCur, 0);\n  birdPos = bdPos;  birdMat = bdMat;\n  birdLen = 0.08;\n}\n\n\/\/#define TRACK_MODE\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  int vuMode;\n  mat3 vuMat;\n  vec3 ro, rd, vd;\n  float tDel, zmFac;\n  SetConf ();\n  tBldCyc = 10.;\n  tBldSeq = mod (tCur, tBldCyc);\n  brShow = true;  brBuild = false;\n  ltDir = normalize (vec3 (-0.4, 0.2, -0.3));\n  if (tCur < tBldCyc) {\n    vuMode = 1;  brShow = false;\n  } else if (tCur < 2. * tBldCyc) {\n    vuMode = 1;  brBuild = true;\n#ifdef TRACK_MODE\n  } else if (tCur < 10. * tBldCyc) {\n    vuMode = 2;\n#endif\n  } else vuMode = 3;\n  if (vuMode == 1) {\n    zmFac = 3.6;\n    float az = 0.05 * 2. * pi * tCur;\n    float el = 0.6 - 0.5 * cos (2. * az);\n    float cEl = cos (el), sEl = sin (el);\n    float cAz = cos (az), sAz = sin (az);\n\n    vuMat = mat3 (cAz, 0., - sAz, 0., 1., 0., sAz, 0., cAz) *\n       mat3 (1., 0., 0., 0., cEl, sEl, 0., - sEl, cEl);\n    float dist = max (25. - 10. * tCur \/ tBldCyc, 15.);\n    ro = dist * vuMat * vec3 (0., 0., -1.);\n    ltDir = ltDir * vuMat;\n    rd = vuMat * normalize (vec3 (uv, zmFac));\n  } else if (vuMode == 2) {\n    ro = vec3 (-0.45 * fltBox.x, 2. * fltBox.y, - 4. * fltBox.z);\n    vd = normalize (birdPos - ro);\n    vec3 u = - vd.y * vd;\n    float f = 1. \/ sqrt (1. - vd.y * vd.y);\n    vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n    zmFac = 30. * (birdPos.z - ro.z) \/ (scnLen - ro.z);\n    rd = vuMat * normalize (vec3 (uv, zmFac));\n  } else if (vuMode == 3) {\n    tDel = 1.2;\n    BirdPM (tCur - tDel, 1);\n    ro = bdPos;  ro.y += 2.5 * birdLen;\n    vuMat = bdMat;\n    zmFac = 1.3;\n    rd = normalize (vec3 (uv, zmFac)) * vuMat;\n  }\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}