{"Shader":{"ver":"0.1","info":{"id":"MlSGWD","date":"1429109446","viewed":778,"name":"Fur Experiment 3","username":"aiekick","description":"Mouse y => rotate near x axis<br\/>Mouse.x => separator move . (left: a bigger pattern and right a smaller pattern )<br\/>The texture move, and the pattern is not well applied on fur, but work in progress ^^","likes":1,"published":3,"flags":0,"tags":["experiment","fur","3"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvec2 s,g,m;\nconst int REFLEXIONS_STEP = 1;\nconst vec2 RMPrec = vec2(0.1, 0.03); \/\/ ray marching tolerance precision \/\/ vec2(low, high)\nconst vec2 DPrec = vec2(0.1, 0.001); \/\/ ray marching distance precision\nconst float texZoom = 0.5;\n\nvec3 fur(vec2 uv, float d) \n{\n    float t = -sin(iGlobalTime*1.);\n    \n    float z = 0.85;\n    \n    vec2 bricks;\n    \n    float pas,r, coef;\n    \n    if (g.x<m.x ) \/\/ left\n    {\n    \tcoef=10.;\n        bricks = vec2(50.);\n    \tpas = 0.01;\n        r = .01;\n    }\n    else \/\/ right\n    {\n        coef=100.;\n        bricks = vec2(200.);\n    \tpas = 0.05;\n        r = .005;\n    }\n    \n    uv*=coef;\n    \n    uv.x+=pas*t*d;\n    \n    vec2 uvTex = uv\/coef\/texZoom;\n\n    vec2 mp = vec2(z);\n    \n    vec2 wx = mod(uv, mp) -mp\/2.;\n    \n    vec2 tt = (floor(uv\/mp)+mp)*2.;\n    \n    if (abs(tt.x) < bricks.x ) uv.x = wx.x;\n    if (abs(tt.y) < bricks.y ) uv.y = wx.y;\n    \n    float dist = r\/dot(uv,uv);\n    \n    \n\treturn vec3(dist, uvTex);\n}\n\n\/\/ tex2d to sphere 3d\nvec2 uvMap(vec3 p)\n{\n    p = normalize(p);\n    vec2 tex2DToSphere3D;\n    tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ (2.*3.14159);\n    tex2DToSphere3D.y = 0.5 - asin(p.y) \/ 3.14159;\n    return tex2DToSphere3D;\n}\n\nvec3 map(vec3 p, float d)\n{\n    vec3 disp = fur(uvMap(p), d);\n    \n    float dist = length(p) - 3.5 - clamp(0., 1., disp.x);\n    \n    return vec3(dist, disp.yz);\n}\n\nvec3 nor( in vec3 p, float prec , float d)\n{\n    vec2 e = vec2( prec, 0. );\n    vec3 n = vec3(\n\t    map(p+e.xyy,d).x - map(p-e.xyy,d).x,\n\t    map(p+e.yxy,d).x - map(p-e.yxy,d).x,\n\t    map(p+e.yyx,d).x - map(p-e.yyx,d).x );\n\treturn normalize(n);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor , float d)\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aop =  nor * hr + pos;\n        float dd = map( aop ,d).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    s = iResolution.xy;\n    g = fragCoord.xy;\n    m = iMouse.x==0.?m = vec2(s.x\/2., s.y):iMouse.xy;\n    \n    float time = iGlobalTime*0.5;\n    float cam_xz = -1.;\/\/ angle horizontal\n    float cam_xy = 1.5;\/\/ angle vertical\n    float cam_e = 0.2; \/\/ elevation\n    float cam_d = 4.8; \/\/ distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 0.2; \/\/ refraction angle\n    float refr_i = .4; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    float mr = m.y\/iResolution.y; \/\/ mouse x axis\n    cam_xy = mr * 1.5; \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n    vec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_xz), sin(cam_xy), cos(cam_xz))*cam_d;\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float ss = DPrec.x;\n    \n    float yOffset = length(p);\n    \n    vec3 ray, cubeRay;\n    \n    const int RM_STEP = 500;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<RM_STEP;i++)\n        {      \n            if(ss<DPrec.y||ss>maxd) break;\n            ss = map(p, yOffset).x*(ss>DPrec.x?RMPrec.x:RMPrec.y);\n            d+=ss;\n            yOffset = length(p)*float(RM_STEP-i)*0.1;\n            p=ro+rd*d;\n        }\n\n        if (d<maxd)\n        {\n            vec3 n = nor(p, 0.01, yOffset);\n\n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n            ray = refract(ray, n, refr_a);\n            cubeRay += textureCube(iChannel0, ray).rgb * refr_i;\n\n            float ratio = float(k)\/float(REFLEXIONS_STEP);\n            \n            if ( k == 0 ) \n                col = cubeRay+pow(b,15.); \n            else \n                col = mix(col, cubeRay+pow(b,25.\/ratio), ratio*0.8);  \n            \n            \/\/ lighting        \n            float occ = calcAO( p, n , yOffset);\n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n            brdf += 0.02;\n            col = col*brdf;\n\n            col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n            vec2 uvTex = map(p,yOffset).yz;\n            \n            col = mix(col, texture2D(iChannel1, uvTex).rgb, 0.5);\n            \n            ro = p;\n            rd = ray;\n            ss = DPrec.x;\n        }\n        else if (k == 0)\n        {\n            col = textureCube(iChannel0, rd).rgb;\n        }\n    }\n    \n    col = mix( col, vec3(0.), 1.-smoothstep( 1., 2., abs(m.x-g.x) ) );    \/\/ vertical line\n\n    fragColor = vec4(col,1.);\n}","name":"","description":"","type":"image"}]}}