{"Shader":{"ver":"0.1","info":{"id":"4dlXWM","date":"1402249635","viewed":1046,"name":"Mandelbrot Glow Grow","username":"TekF","description":"More mandelbrot animations...<br\/>Best viewed full screen.","likes":9,"published":3,"flags":0,"tags":["fractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ this looks prettier, but makes it less obvious that it's the same warp each time.\n#define LERP_AFTER\n\n\/\/#define ZOOM\n\nvec3 Sample( vec2 p )\n{\n\/\/\treturn vec3(pow(fract(5.0\/(1.0+dot(p,p))),.1));\n\tfloat a = fract(4.0\/(4.0+dot(p,p)));\n\/\/\treturn pow(a,.1)*((sin(vec3(1)*a*6.28+vec3(1,2,3)*.6)*.5+.5)*.5+.5);\n\treturn vec3(1.2,.8,.7)*pow(vec3(a),vec3(10,1,.1));\n\t\/\/return step(vec3(.1,.01,.001),vec3(a)); unknown error?!\n}\n\nvec3 fractal( vec2 pos )\n{\n\tfloat F = fract(.02*iGlobalTime);\n\t\n\tvec2 C = (2.0*pos.xy-iResolution.xy) \/ iResolution.x;\n\t\/\/ position better to see the fractal\n#ifdef ZOOM\n\tC = mix( C*8.0+vec2(-4,0), C*.001+vec2(-1,-.3), pow(F,.2) );\n#else\n\tC = mix( C*8.0+vec2(-4,0), C*2.0+vec2(-1,0), pow(F,.5) );\n#endif\n\t\n\tvec2 Z = vec2(0);\n\t\n\t#define MAX 25\n\tfloat m = float(MAX);\n\tfloat n = exp2(F*log2(m))-1.0;\/\/fract(.3*iGlobalTime\/m)*m;\n\t\n#ifndef LERP_AFTER\n\t\/\/ blend towards the next one\n\tZ = C*fract(n);\n#endif\n\t\n\tfor ( int i=0; i < MAX; i++ )\n\t{\n\t\tif ( float(i) > n || dot(Z,Z) > exp2(120.0) ) \/\/ trap really big vals to prevent NaNs\n\t\t\tcontinue;\n\t\tZ = vec2( Z.x*Z.x-Z.y*Z.y, 2.0*Z.x*Z.y ) + C;\n\t}\n\n#ifdef LERP_AFTER\n\t\/\/ blend from the last one\n\tZ = mix( Z, vec2( Z.x*Z.x-Z.y*Z.y, 2.0*Z.x*Z.y ) + C, pow(smoothstep(0.0,1.0,fract(n)),4.0) );\n#endif\n\n\t\/\/ image map\n\tvec3 col = Sample(Z);\n\t\n\treturn col;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\/\/ anti-aliasing\n\tfragColor.rgb  = fractal( fragCoord.xy + vec2(5,1)\/8.0 );\n\tfragColor.rgb += fractal( fragCoord.xy + vec2(1,3)\/8.0 );\n\tfragColor.rgb += fractal( fragCoord.xy + vec2(7,5)\/8.0 );\n\tfragColor.rgb += fractal( fragCoord.xy + vec2(3,7)\/8.0 );\n\tfragColor.rgb \/= 4.0;\n\n\tfragColor.rgb = pow(fragColor.rgb,vec3(1.0\/2.2));\n\tfragColor.a = 1.0;\n}","name":"","description":"","type":"image"}]}}