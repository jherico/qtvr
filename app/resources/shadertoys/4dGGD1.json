{"Shader":{"ver":"0.1","info":{"id":"4dGGD1","date":"1454173265","viewed":41,"name":"SDF raytracing specular stuff","username":"CaptCM74","description":"Why does it looks like a bear BTW First raytracing or raymarching stuff!<br\/><br\/>All(most) every code by cabbibo, Thanks!<br\/>https:\/\/www.shadertoy.com\/view\/Xl2XWt","likes":1,"published":3,"flags":0,"tags":["3d","fake","toonshading","why","whyitdoeslookslikebear","celshade"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define softness 5.0\n\/*\n  \nWAIT!, This amazing raytracing code was written by cabbibo!\nCheck his tut!\nhttps:\/\/www.shadertoy.com\/view\/Xl2XWt\n    \n    *\/\nmat3 EYE( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvec2 Ball(vec3 raypos)\n{\n    \n    vec3 pos = vec3(0.,0.,0.);\n    \n    float size = 1.;\n        \n        float dist = length(raypos - pos);\n        \n        float surfacedist = dist - size;\n        \n        float id = 1.0;\n        \n        vec2 ball = vec2( surfacedist , id );\n        \n        return ball;\n    \n}\n\nvec2 nearestmdl(vec2 mdl1 , vec2 mdl2)\n{\n    \n \n    vec2 nearest;\n        \n    if (mdl1.x <= mdl2.x) \/\/ BALL vec2(x is dis , y is id)\n    {\n        nearest = mdl1;\n    }\n    else if (mdl1.x > mdl2.x) \n    {\n        nearest = mdl2;\n    }\n    \n    return nearest;\n    \n}\n\nvec2 MapWorld(vec3 raypos)\n{\n    \n    \n    vec2 ret;\n    \n    vec2 ball = Ball(raypos);\n        \n     return ball;\n    \n    \n    \n}\n\nconst float threshold = 0.001;\n    const float maxdist = 10.;\nconst int maxsteps = 100;\n\nvec2 checkcollision(in vec3 campos ,in vec3 raydir)\n{\n    \n    float dsurface = threshold * 2.0;\n    \n    float totaldist = 0.;\n    \n    float finaldisttravel = -1.;\n    \n    float hitid = -1.;\n    \n    for (int i = 0; i < maxsteps ; i++)\n    {\n     \n        if (dsurface < threshold) break;\n        \n        if (totaldist > maxdist) break;\n        \n        vec3 raypos = campos + raydir * totaldist;\n            \n            vec2 mdl = MapWorld(raypos);\n            \n            float dist_mdl = mdl.x;\n            float id_mdl = mdl.y;\n            \n            dsurface = dist_mdl;\n            \n            hitid = id_mdl;\n        \n        totaldist += dist_mdl;\n        \n        \n    } \n    \n    if (totaldist < maxdist) {\n        finaldisttravel = totaldist;\n    }\n    \n     if (totaldist >= maxdist) {\n        finaldisttravel = maxdist;\n         hitid = -1.;\n    }\n    \n    return vec2(finaldisttravel,hitid);\n    \n}\n\nvec3 getnormal(in vec3 hitpos)\n{\n    \n    vec3 xTiny = vec3(0.001, 0. , 0.);\n     vec3 yTiny = vec3(0., 0.001 , 0.);\n    vec3 zTiny = vec3(0., 0. , 0.001);\n        \n        float upTinyX = MapWorld(hitpos + xTiny).x;\n    float downTinyX = MapWorld(hitpos - xTiny).x;\n    \n    float changeX = upTinyX - downTinyX;\n    \n    float upTinyY = MapWorld(hitpos + yTiny).x;\n    float downTinyY = MapWorld(hitpos - yTiny).x;\n    \n    float changeY = upTinyY - downTinyY;\n    \n    float upTinyZ = MapWorld(hitpos + zTiny).x;\n    float downTinyZ = MapWorld(hitpos - zTiny).x;\n    \n    float changeZ = upTinyZ - downTinyZ;\n    \n    vec3 normal = vec3(\n                     changeX,\n                     changeY,\n                     changeZ\n                       );\n    \n        return normalize(normal);\n}\n\nvec3 BGcol(){\n    vec3 up = vec3(0.1,0.05,0.3);\n        vec3 down = vec3(1.);\n return mix(up,down,max(sin(iGlobalTime),0.05));   \n}\n\nvec3 BallColor(vec3 hitpos , vec3 norm, vec3 campos)\n{\n    \n    vec3 lightPos = vec3 (sin(iGlobalTime*3.)*10.,10.,cos(iGlobalTime*3.)*10.);\n   \n        \n        vec3 lightdir = lightPos - hitpos;\n    vec3 view = campos - hitpos;\n       \/\/R = 2*(V dot N)*N - V\n    \n    \n        lightdir = normalize(lightdir);\n    \n    vec3 camdir = campos - hitpos;\n    \n    camdir = normalize(camdir);\n    \n    float faceval = dot(lightdir , norm);\n    \n    vec3 refdir = 2. * faceval * norm - lightdir;\n    \n    \n        \n    \n    float spec = faceval*pow(dot(view , refdir),0.8);\n    \n    if (spec < 2.4)\n    {\n     spec = 0.   ;\n    }\n    else if (spec < 2.6)\n    {\n     spec = 0.5   ;\n    }\n   \n    \n    spec = max(spec,0.);\n    \n    float hlval = dot(camdir,norm);\n    \n        hlval = max(0.0,hlval);\n    \n    float sval = faceval;\n        faceval = max(0.0,faceval);\n    \n    \n    \n    if (hlval > 0.98 && faceval > 0.5)\n    {\n     hlval = 10.;   \n    }\n    else\n    {\n     hlval = 0.;    \n    }\n    \n    if (faceval > 0.4)\n   {\n   faceval = 0.8;    \n   }\n   else if (faceval > 0.1)\n   {\n   faceval = 0.5;    \n   }\n   else\n   {\n     faceval = 0.3;    \n   }\n    \n    \n   \n    \n    vec3 ballcol = vec3(0.8,0.5,0.3);\n    \n    vec3 col = ballcol * faceval;\n    \n    col += spec;\n    \n   \/\/ col += hlval;\n    \n    \n   if (sval < -0.6)\n    {\n    col -= vec3( .1 , .03, .2);\n   }\n    \n    return col;\n}\n\nvec3 ColorWorld(vec2 hitinfo, vec3 campos, vec3 raydir){\n    \/\/Col(x Red,y Grn,z Blu)\n    vec3 color;\n    \n    if (hitinfo.y < 0.0)\n    {\n     color = BGcol();   \n    }\n    else\n    {\n        vec3 hitpos = campos + hitinfo.x * raydir;\n            \n            vec3 normal = getnormal(hitpos);\n        \n        \n        if (hitinfo.y == 1.0)\n        {\n         color = BallColor(hitpos,normal,campos);   \n            \n            \n        }\n        \n        \n        \n    }\n    \n    return color;\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n    vec2 p = ( -iResolution.xy + 2.0 * fragCoord.xy ) \/ iResolution.y;\n\tvec2 uv = p;\n    \n    vec3 campos = vec3( 0., 0., 5.);\n    \n    vec3 camlookat = vec3(0.0,0.0,0.0);\n        \n        mat3 camrot = EYE(campos,camlookat,sin(iGlobalTime));\n        \n        vec3 raydir = normalize(camrot * vec3(p.xy , 2.));\n    \n    vec2 hitinfo = checkcollision(campos,raydir);\n    \n    vec3 col = ColorWorld(hitinfo,campos,raydir);\n    \n\tfragColor = vec4(col,1.0);\n}\n","name":"","description":"","type":"image"}]}}