{"Shader":{"ver":"0.1","info":{"id":"XtBSWy","date":"1446087659","viewed":504,"name":"cellular daydream","username":"gtoledo3","description":"Combining cellular noise with various uv warp effects, zoom\/density levels, and color mapping, for creative effect.","likes":1,"published":3,"flags":0,"tags":["noise","worley","psychedelic","cellular","uvwarp"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/\"Cellular Daydream\", George Toledo. 2015. \n\nfloat time=iGlobalTime*.1;\nvec2 offset=vec2(.5);\n\nvec3 hsv(const in float h, const in float s, const in float v) {\n\treturn mix(vec3(1.0),clamp((abs(fract(h+vec3(3.,2.,1.)\/3.0)*6.-3.)-1.),0.,1.0),s)*v;\n}\n\/\/ Cellular noise (\"Worley noise\") in 2D in GLSL.\n\/\/ Copyright (c) Stefan Gustavson 2011-04-19. All rights reserved.\n\/\/ This code is released under the conditions of the MIT license.\n\/\/ See LICENSE file for details, located in ZIP file here:\n\/\/ http:\/\/webstaff.itn.liu.se\/~stegu\/GLSL-cellular\/\n\n\/\/ Permutation polynomial: (34x^2 + x) mod 289\nvec3 permute(vec3 x) {\n  return mod((34.0 * x + 1.0) * x, 289.0);\n}\n\n\/\/ Cellular noise, returning F1 and F2 in a vec2.\n\/\/ Standard 3x3 search window for good F1 and F2 values\nvec2 cellular(vec2 P) {\n#define K 0.142857142857 \/\/ 1\/7\n#define Ko 0.428571428571 \/\/ 3\/7\n#define jitter 1.0 \/\/ Less gives more regular pattern\n\tvec2 Pi = mod(floor(P), 289.0);\n \tvec2 Pf = fract(P);\n\tvec3 oi = vec3(-1.0, 0.0, 1.0);\n\tvec3 of = vec3(-0.5, 0.5, 1.5);\n\tvec3 px = permute(Pi.x + oi);\n\tvec3 p = permute(px.x + Pi.y + oi); \/\/ p11, p12, p13\n\tvec3 ox = fract(p*K) - Ko;\n\tvec3 oy = mod(floor(p*K),7.0)*K - Ko;\n\tvec3 dx = Pf.x + 0.5 + jitter*ox;\n\tvec3 dy = Pf.y - of + jitter*oy;\n\tvec3 d1 = dx * dx + dy * dy; \/\/ d11, d12 and d13, squared\n\tp = permute(px.y + Pi.y + oi); \/\/ p21, p22, p23\n\tox = fract(p*K) - Ko;\n\toy = mod(floor(p*K),7.0)*K - Ko;\n\tdx = Pf.x - 0.5 + jitter*ox;\n\tdy = Pf.y - of + jitter*oy;\n\tvec3 d2 = dx * dx + dy * dy; \/\/ d21, d22 and d23, squared\n\tp = permute(px.z + Pi.y + oi); \/\/ p31, p32, p33\n\tox = fract(p*K) - Ko;\n\toy = mod(floor(p*K),7.0)*K - Ko;\n\tdx = Pf.x - 1.5 + jitter*ox;\n\tdy = Pf.y - of + jitter*oy;\n\tvec3 d3 = dx * dx + dy * dy; \/\/ d31, d32 and d33, squared\n\t\/\/ Sort out the two smallest distances (F1, F2)\n\tvec3 d1a = min(d1, d2);\n\td2 = max(d1, d2); \/\/ Swap to keep candidates for F2\n\td2 = min(d2, d3); \/\/ neither F1 nor F2 are now in d3\n\td1 = min(d1a, d2); \/\/ F1 is now in d1\n\td2 = max(d1a, d2); \/\/ Swap to keep candidates for F2\n\td1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; \/\/ Swap if smaller\n\td1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; \/\/ F1 is in d1.x\n\td1.yz = min(d1.yz, d2.yz); \/\/ F2 is now not in d2.yz\n\td1.y = min(d1.y, d1.z); \/\/ nor in  d1.z\n\td1.y = min(d1.y, d2.x); \/\/ F2 is in d1.y, we're done.\n\treturn sqrt(d1.xy);\n}\n\/\/end worley\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t\n\tvec2 position = fragCoord.xy \/ iResolution.x - offset;\n\n\tposition = position * (.1+.5*(sin(time*.01)*2.2));\/\/position and zoom offset fx\n\n\t\/\/various uv distortion, zoom levels, offsets, cellular FX->pattern\n\tvec2 cec  =cellular(.35+vec2(0.,time*.2)+position*(9.+sin(time*.01)))+sin(time+position.x*3.)*.3;\n\tvec2 cec2 =cellular(2.+position*4.)+cos(position.y*12.)*.3;\n\tvec2 cec3 =cellular(7.+vec2(0.,time*.4)+sin(position*14.))*.5;\n\tvec2 cec4 =cellular(9.+position*12.+cos(position.x*4.)*.5);\n\tvec2 cec5 =cellular(12.+position*28.);\n\tvec2 cec6 =cellular(3.+vec2(0.,time*.4)+position*34.)+(cos(3.5+position.x*32.)*.3)+(cos(5.*time+position.y*9.)*.1);\n\tvec2 cec7 =cellular(vec2(time*2.4,0.)+(position+(cos(position.x*3.)*.1))*96.+cos(position.x*3.)*14.)+cos(time+position.x*12.)*.3;\n\n\t\/\/min between different patterns\n    cec=min(cec,cec2);\n\tcec=min(cec,cec3);\n\tcec=min(cec,cec4);\n\tcec=min(cec,cec5);\n\tcec=min(cec,cec6);\n\tcec=min(cec,cec7);\n\t\/\/rand idea I found at heroku one time, probably changed some\n\tfloat rand = mod(fract(sin(dot(fragCoord.xy \/ iResolution.xy, vec2(12.9898,1980.223+time))) * 43758.5453), .05);\n\t\/\/combining x and y lanes with a slip timing and different instensities, to create a variety of formations\n\tfloat l=pow(1.-sin(cec.y),.5+(sin(time*.0011)*.3));\n\tfloat l2=pow(1.-sin(cec.x),1.5+(sin(time*.001)*.3));\n\tl=min(l,l2);\n    \/\/vignette\n\tfloat v=length(fragCoord.xy \/ iResolution.xy-.5);\n    v=smoothstep(v,.8,.7);\n\tfragColor=vec4(hsv((time*.01)+.6-sin(l*1.8)*2.9,l*.65,l-.2),1.);\n\tfragColor.rgb +=vec3(rand);\n    fragColor.rgb -=vec3(1.-v);\n}\n\n","name":"","description":"","type":"image"}]}}