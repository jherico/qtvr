{"Shader":{"ver":"0.1","info":{"id":"4djGRh","date":"1383581374","viewed":932,"name":"Tileable Cells","username":"Dave_Hoskins","description":"A tileable cell texture creator for games, or anything else that needs tiling.<br\/>Snazzy water caustic animations left out for clarity! ;)<br\/>","likes":14,"published":3,"flags":0,"tags":["voronoi","worley","tiling","cell","tileablecells"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Tileable Cells. By David Hoskins. 2013.\n\n#define NUM_CELLS\t16.0\t\/\/ Needs to be a multiple of TILES!\n#define TILES \t\t2.0\t\t\/\/ Normally set to 1.0 for a creating a tileable texture.\n\n#define SHOW_TILING\t\t\t\/\/ Display yellow lines at tiling locations.\n#define ANIMATE\t\t\t\/\/ Basic movement using texture values.\n\n\/\/------------------------------------------------------------------------\nvec2 Hash2(vec2 p)\n{\n\t#ifdef ANIMATE\n\t\n\tfloat t = fract(iGlobalTime*.0003);\n\treturn texture2D(iChannel0, p*vec2(.135+t, .2325-t), -100.0).xy;\n\t\n\t#else\n\t\n\tfloat r = 523.0*sin(dot(p, vec2(53.3158, 43.6143)));\n\treturn vec2(fract(15.32354 * r), fract(17.25865 * r));\n\t\n\t#endif\n}\n\n\/\/------------------------------------------------------------------------\nfloat Cells(in vec2 p, in float numCells)\n{\n\tp *= numCells;\n\tfloat d = 1.0e10;\n\tfor (int xo = -1; xo <= 1; xo++)\n\t{\n\t\tfor (int yo = -1; yo <= 1; yo++)\n\t\t{\n\t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n\t\t\ttp = p - tp - Hash2(mod(tp, numCells \/ TILES));\n\t\t\td = min(d, dot(tp, tp));\n\t\t}\n\t}\n\treturn sqrt(d);\n\t\/\/return 1.0 - d;\/\/ ...Bubbles.\n}\n\n\/\/------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\t#ifdef ANIMATE\n\tfloat c = Cells(uv+iGlobalTime*.025, NUM_CELLS);\n\t#else\n\tfloat c = Cells(uv, NUM_CELLS);\n\t#endif\n\n\tvec3 col = vec3(c*.83, c, min(c*1.3, 1.0));\n\t\n\t#ifdef SHOW_TILING\n\t\/\/ Flash tile borders...\n\tvec2 pixel = TILES \/ iResolution.xy;\n\tuv *= TILES;\n\n\tfloat f = floor(mod(iGlobalTime*.5, 2.0)); \t\/\/ Flash value.\n\tvec2 first = step(pixel, uv) * f;\t\t   \t\/\/ Rule out first screen pixels and flash.\n\tuv  = step(fract(uv), pixel);\t\t\t\t\/\/ Add one line of pixels per tile.\n\tcol = mix(col, vec3(1.0, 1.0, 0.0), (uv.x + uv.y) * first.x * first.y); \/\/ Yellow line\n\t\n\t#endif\n\n\tfragColor = vec4(col, 1.0);\n}\n","name":"","description":"","type":"image"}]}}