{"Shader":{"ver":"0.1","info":{"id":"4dl3Wl","date":"1382770837","viewed":2783,"name":"Sierpinski - 3D","username":"iq","description":"Sierpinski fractal","likes":24,"published":3,"flags":1,"tags":["3d","raymarching","fractal","distancefield","distance","sierpinski","gtc2015"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst vec3 va = vec3(  0.0,  0.57735,  0.0 );\nconst vec3 vb = vec3(  0.0, -1.0,  1.15470 );\nconst vec3 vc = vec3(  1.0, -1.0, -0.57735 );\nconst vec3 vd = vec3( -1.0, -1.0, -0.57735 );\n\n\/\/ return distance and address\nvec2 map( vec3 p )\n{\n\tfloat a = 0.0;\n    float s = 1.0;\n    float r = 1.0;\n    float dm;\n    vec3 v;\n    for( int i=0; i<8; i++ )\n\t{\n\t    float d, t;\n\t\td = dot(p-va,p-va);              v=va; dm=d; t=0.0;\n        d = dot(p-vb,p-vb); if( d<dm ) { v=vb; dm=d; t=1.0; }\n        d = dot(p-vc,p-vc); if( d<dm ) { v=vc; dm=d; t=2.0; }\n        d = dot(p-vd,p-vd); if( d<dm ) { v=vd; dm=d; t=3.0; }\n\t\tp = v + 2.0*(p - v); r*= 2.0;\n\t\ta = t + 4.0*a; s*= 4.0;\n\t}\n\t\n\treturn vec2( (sqrt(dm)-1.0)\/r, a\/s );\n}\n\nconst float precis = 0.0002;\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n\tvec3 res = vec3( 1e20, 0.0, 0.0 );\n\t\n\tfloat maxd = 5.0;\n\n\t\/\/ sierpinski\n    float h = 1.0;\n    float t = 0.5;\n\tfloat m = 0.0;\n    vec2 r;\n\tfor( int i=0; i<100; i++ )\n    {\n\t    r = map( ro+rd*t );\n        if( r.x<precis || t>maxd ) break;\n\t\tm = r.y;\n        t += r.x;\n    }\n\n    if( t<maxd && r.x<precis )\n\t\tres = vec3( t, 2.0, m );\n\n\treturn res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(precis,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat calcOcclusion( in vec3 pos, in vec3 nor )\n{\n\tfloat ao = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<8; i++ )\n    {\n        float h = 0.001 + 0.5*pow(float(i)\/7.0,1.5);\n        float d = map( pos + h*nor ).x;\n        ao += -(d-h)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 0.8*ao, 0.0, 1.0 );\n}\n\nvec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 col = vec3(0.0);\n\n\t\/\/ raymarch\n    vec3 tm = intersect(ro,rd);\n    if( tm.y>0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tm.x*rd;\n\t\tvec3 nor = calcNormal( pos );\n\t\tvec3 maa = vec3( 0.0 );\n\t\t\n        maa = 0.5 + 0.5*cos( 6.2831*tm.z + vec3(0.0,1.0,2.0) );\n\n\t\tfloat occ = calcOcclusion( pos, nor );\n\n\t\t\/\/ lighting\n\t\tfloat amb = (0.5 + 0.5*nor.y);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n\n        \/\/ lights\n\t\tvec3 lin = 1.5*amb*vec3(1.0) * occ;\n\n\t\t\/\/ surface-light interacion\n\t\tcol = maa * lin;\n        \n\t}\n\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n    return col;\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\t\n\tfloat an = 3.2 + 0.5*iGlobalTime - 6.2831*(m.x-0.5);\n\n\tvec3 ro = vec3(2.5*sin(an),0.0,2.5*cos(an));\n    vec3 ta = vec3(0.0,-0.5,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 5.0*ww*m.y );\n\n    vec3 col = render( ro, rd );\n    \n    fragColor = vec4( col, 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    vec3 col = render( fragRayOri + vec3(0.0,-0.1,2.0), fragRayDir );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}