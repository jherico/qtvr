{"Shader":{"ver":"0.1","info":{"id":"ldy3zm","date":"1453722092","viewed":190,"name":"Pseudo Billiards 2","username":"dr2","description":"Colliding elastic balls with rotation and friction; if a ball falls into a hole it is gone.","likes":11,"published":3,"flags":32,"tags":["dynamics","collisions","billiards"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Pseudo Billiards 2\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/*\nColliding elastic balls with rotation and friction; if a ball falls into a hole\nit is gone. Based on \"Pseudo Billiards\".\n\nThe game restarts automatically, or with a mouse click.\n*\/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\n\nvec4 qtBall[nMol];\nvec2 pBall[nMol];\nvec3 ltDir;\nfloat dstFar, hbLen;\nint idObj;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d;\n  dMin = dstFar;\n  for (int n = 0; n < nMol; n ++) {\n    q = p;\n    q.xz -= pBall[n];\n    d = PrSphDf (q, 0.46);\n    if (d < dMin) { dMin = d;  idObj = 10 + n; }\n  }\n  q = p;\n  d = PrBoxDf (q, vec3 (hbLen, 0.4, 1.5 * hbLen));\n  q.y -= -0.6;\n  d = max (PrRoundBoxDf (q, vec3 (hbLen + 0.5, 0.5, 1.5 * hbLen + 0.5), 0.2), - d);\n  q = p;\n  q.xz = abs (abs (q.xz) - hbLen * vec2 (1., 1.5) + 0.7);\n  d = max (d, - PrCylDf (q.xzy, 0.55, 1.2));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat BallChqr (vec3 rHit, vec4 qtHit)\n{\n  vec3 r;\n  r = QToRMat (qtHit) * rHit;\n  return (r.z * (mod (pi + atan (r.x, r.y), 2. * pi) - pi) < 0.) ? 0.4 : 1.;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 qtHit;\n  vec3 objCol, col, vn, rHit;\n  float dstHit, spec, c;\n  int idObjT;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      if (abs (ro.x) < hbLen + 0.25 && abs (ro.z) < 1.5 * hbLen + 0.25) {\n        objCol = vec3 (0.1, 0.3, 0.);\n        if (vn.y > 0.99) objCol *= 1. - 0.3 * Noisefv2 (100. * ro.xz);\n        for (int n = 0; n < nMol; n ++) {\n          c = length (ro.xz - pBall[n]);\n          if (c < 0.5) {\n            objCol *= 0.6 + 0.4 * smoothstep (0.2, 0.5, c);\n            break;\n          }\n        }\n        if (ro.y < -0.6) objCol *= 0.3;\n        else if (ro.y > 0.) objCol *= 1.1;\n        spec = 0.1;\n      } else {\n        objCol = vec3 (0.3, 0.1, 0.);\n        spec = 0.4;\n      }\n    } else {\n      if (idObj == 10 + nMolEdge \/ 2) objCol = vec3 (1.);\n      else {\n        c = float (idObj - 11);\n        objCol = HsvToRgb (vec3 (mod (c \/ float (nMol), 1.),\n           1. - 0.3 * mod (c, 3.), 1. - 0.3 * mod (c, 2.)));\n      }\n      rHit.y = ro.y;\n      for (int n = 0; n < nMol; n ++) {\n        if (n == idObj - 10) {\n          rHit.xz = ro.xz - pBall[n];\n          qtHit = qtBall[n];\n          break;\n        }\n      }\n      objCol *= BallChqr (rHit, qtHit);\n      spec = 0.5;\n    }\n    col = objCol * (0.2 + 0.8 * max (dot (vn, ltDir), 0.) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 32.));\n  } else col = vec3 (0.05, 0.05, 0.3) * clamp (2.7 + 3. * rd.y, 0., 1.);\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid GetMols ()\n{\n  for (int n = 0; n < nMol; n ++) {\n    pBall[n] = Loadv4 (2 * n).xy;\n    qtBall[n] = Loadv4 (2 * n + 1);\n  }\n  hbLen = Loadv4 (2 * nMol).y - 0.4;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 rd, ro;\n  vec2 ori, ca, sa;\n  float tCur, az, el, zmFac;\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  dstFar = 100.;\n  ltDir = normalize (vec3 (1., 3., 1.));\n  az = mod (-0.1 * tCur, 2. * pi);\n  el = 0.8 + 0.3 * sin (2. * pi * 0.07 * tCur);\n  ori = vec2 (el, az);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  zmFac = 7. - 2. * abs (cos (az));\n  rd = normalize (vec3 (uv, zmFac)) * vuMat;\n  ro = vec3 (0., 0., -50.) * vuMat;\n  GetMols ();\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Pseudo Billiards 2\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nconst float pi = 3.14159;\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 32.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nmat3 VToRMat (vec3 v, float a)\n{\n  mat3 m;\n  float c, s, a1, a2;\n  c = cos (a);  s = sin (a);\n  m[0][0] = (1. - c) * v.x * v.x + c;\n  m[1][1] = (1. - c) * v.y * v.y + c;\n  m[2][2] = (1. - c) * v.z * v.z + c;\n  a1 = (1. - c) * v.x * v.y;  a2 = - s * v.z;\n  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = (1. - c) * v.z * v.x;  a2 = - s * v.y;\n  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = (1. - c) * v.y * v.z;  a2 = - s * v.x;\n  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return m;\n}\n\nmat3 QToRMat (vec4 q) \n{\n  mat3 m;\n  float a1, a2, s;\n  s = q.w * q.w - 0.5;\n  m[0][0] = q.x * q.x + s;  m[1][1] = q.y * q.y + s;  m[2][2] = q.z * q.z + s;\n  a1 = q.x * q.y;  a2 = q.z * q.w;  m[0][1] = a1 + a2;  m[1][0] = a1 - a2;\n  a1 = q.x * q.z;  a2 = q.y * q.w;  m[2][0] = a1 + a2;  m[0][2] = a1 - a2;\n  a1 = q.y * q.z;  a2 = q.x * q.w;  m[1][2] = a1 + a2;  m[2][1] = a1 - a2;\n  return 2. * m;\n}\n\nvec4 RMatToQ (mat3 m)\n{\n  vec4 q;\n  const float tol = 1e-6;\n  q.w = 0.5 * sqrt (max (1. + m[0][0] + m[1][1] + m[2][2], 0.));\n  if (abs (q.w) > tol) q.xyz =\n     vec3 (m[1][2] - m[2][1], m[2][0] - m[0][2], m[0][1] - m[1][0]) \/ (4. * q.w);\n  else {\n    q.x = sqrt (max (0.5 * (1. + m[0][0]), 0.));\n    if (abs (q.x) > tol) q.yz = vec2 (m[0][1], m[0][2]) \/ q.x;\n    else {\n      q.y = sqrt (max (0.5 * (1. + m[1][1]), 0.));\n      if (abs (q.y) > tol) q.z = m[1][2] \/ q.y;\n      else q.z = 1.;\n    }\n  }\n  return normalize (q);\n}\n\nvec4 EulToQ (vec3 e)\n{\n  float a1, a2, a3, c1, s1;\n  a1 = 0.5 * e.y;  a2 = 0.5 * (e.x - e.z);  a3 = 0.5 * (e.x + e.z);\n  s1 = sin (a1);  c1 = cos (a1);\n  return normalize (vec4 (s1 * cos (a2), s1 * sin (a2), c1 * sin (a3),\n     c1 * cos (a3)));\n}\n\nconst int nMolEdge = 5;\nconst int nMol = nMolEdge * nMolEdge;\nfloat hbLen, dt, tCur;\nbool running;\n\nvoid Step (int mId, out vec4 p, out vec4 qt)\n{\n  vec2 r, rn, dr, f, v;\n  float fOvlap, fric, rSep, vm;\n  fOvlap = 1000.;\n  fric = 0.03;\n  p = Loadv4 (2 * mId);\n  r = p.xy;\n  v = p.zw;\n  qt = Loadv4 (2 * mId + 1);\n  if (r.x < 2. * hbLen) {\n    f = vec2 (0.);\n    for (int n = 0; n < nMol; n ++) {\n      rn = Loadv4 (2 * n).xy;\n      if (rn.x < 2. * hbLen) {\n        dr = r - rn;\n        rSep = length (dr);\n        if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n      }\n    }\n    dr = hbLen * vec2 (1., 1.5) - abs (r);\n    f -= step (dr, vec2 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr;\n    f -= fric * v;\n    if (running) {\n      v += dt * f;\n      r += dt * v;\n    }\n    if (length (abs (r) - hbLen * vec2 (1., 1.5) + 0.7) < 0.8) r.x = 100. * hbLen;\n    if (running) {\n      vm = length (v);\n      if (vm > 1e-6) qt = RMatToQ (QToRMat (qt) *\n         VToRMat (normalize (vec3 (v.y, 0., - v.x)), vm * dt \/ 0.5));\n    }\n  }\n  p = vec4 (r, v);\n}\n\nvoid Init (int mId, out vec4 p, out vec4 qt)\n{\n  vec3 e;\n  vec2 r, v;\n  float a;\n  r.y = float (mId \/ nMolEdge);\n  r.x = float (mId) - float (nMolEdge) * r.y;\n  r = 1.2 * (r - 0.5 * float (nMolEdge - 1));\n  if (mId == nMolEdge \/ 2) r.y -= 2.5;\n  a = 77. * mod (tCur, 1.);\n  v = normalize (vec2 (Hashff (mod (a + 0.1, 1.)) - 0.5,\n     Hashff (2. * mod (a + 0.3, 1.)) + 0.05));\n  v = (mId == nMolEdge \/ 2) ? 10. * v : vec2 (0.);\n  p = vec4 (r, v);\n  a = mod (tCur, 1.) + float (mId) \/ float (nMol);\n  e = normalize (vec3 (Hashff (mod (a, 1.)),\n     Hashff (mod (a + 0.2, 1.)), Hashff (mod (a + 0.4, 1.))));\n  qt = EulToQ (vec3 (atan (e.x, e.y), acos (e.z),\n     2. * pi * Hashff (mod (a + 0.6, 1.))));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat, p, qt;\n  int mId, pxId;\n  tCur = iGlobalTime;\n  vec2 kv = floor (fragCoord);\n  bool doInit;\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol) discard;\n  mId = pxId \/ 2;\n  doInit = false;\n  dt = 0.03;\n  if (iFrame == 0) {\n    hbLen = 1.1 * float (nMolEdge) + 0.6;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    running = (stDat.x > 30.);\n    if (mId < nMol) {\n      Step (mId, p, qt);\n      if (pxId != 2 * mId) p = qt;\n    }\n    if (mPtr.z > 0. && stDat.x > 50. || stDat.x > 1500.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) {\n    Init (mId, p, qt);\n    if (pxId != 2 * mId) p = qt;\n  }\n  Savev4 (pxId, ((pxId < 2 * nMol) ? p : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"}]}}