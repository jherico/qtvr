{"Shader":{"ver":"0.1","info":{"id":"llBSDz","date":"1442846386","viewed":391,"name":"Bobsled","username":"dr2","description":"Downhill fast...","likes":12,"published":3,"flags":0,"tags":["raymarching","snow","sledding"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Bobsled\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\nint idObj;\nmat3 oMat, objMat[2];\nvec3 oPos, objPos[2], qHit, sunDir;\nfloat tCur;\nconst float dstFar = 200.;\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float cloudFac, w, f, s;\n  if (rd.y > 0.) {\n    ro.x += 2. * tCur;\n    p = 0.02 * (rd.xz * (100. - ro.y) \/ rd.y + ro.xz);\n    w = 0.8;\n    f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  s = max (dot (rd, sunDir), 0.);\n  col = vec3 (0.1, 0.2, 0.5) + 0.25 * pow (1. - max (rd.y, 0.), 8.) +\n     (0.35 * pow (s, 6.) + 0.65 * min (pow (s, 256.), 0.3));\n  return mix (col, vec3 (1.), cloudFac);\n}\n\nvec3 TrackPath (float z)\n{\n  return vec3 (11. * cos (0.045 * z) * cos (0.032 * z) * cos (0.015 * z),\n     0.5 * cos (0.017 * z) * cos (0.03 * z), z);\n}\n\nfloat GrndDf (vec3 p)\n{\n  vec2 q;\n  float h, a, w;\n  q = 0.05 * p.xz;\n  a = 2.;\n  h = 0.;\n  for (int j = 0; j < 3; j ++) {\n    h += a * Noisefv2 (q);\n    a *= 1.2;\n    q *= 2.;\n  }\n  w = p.x - TrackPath (p.z).x;\n  h = SmoothMin (h, 0.1 * w * w - 0.5, 0.5);\n  q = 0.1 * p.xz;\n  a = 1.;\n  for (int j = 0; j < 5; j ++) {\n    h += a * Noisefv2 (q);\n    a *= 0.5;\n    q *= 2.;\n  }\n  return p.y - h;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + s * rd;\n    h = GrndDf (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += 0.2 * h + 0.007 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., GrndDf (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  vec2 e;\n  float h;\n  h = GrndDf (p);\n  e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (GrndDf (p + e.xyy) - h, GrndDf (p + e.yxy) - h,\n     GrndDf (p + e.yyx) - h));\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, dMin;\n  dMin = dstFar;\n  for (int j = 0; j < 2; j ++) {\n    q = objMat[j] * (p - objPos[j]);\n    d = max (PrCapsDf (q, 1.1, 2.),\n       - PrCapsDf (q + vec3 (0., -0.2, 0.), 1., 1.9));\n    if (d < dMin) { dMin = d;  idObj = j + 1;  qHit = p; }\n  }\n  q = p;\n  q.x -= TrackPath (p.z).x;\n  q.y -= 2.;\n  q.z = mod (q.z + 20., 40.) - 20.;\n  d = PrTorusDf (q, 0.4, 7.);\n  if (d < dMin) { dMin = d;  idObj = 3;  qHit = p; }\n  return 0.7 * dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.4;\n  for (int j = 0; j < 20; j ++) {\n    h = GrndDf (ro + rd * d);\n    sh = min (sh, 30. * h \/ d);\n    d += 0.4;\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 80; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 30. * h \/ d);\n    d += 0.01 + 0.07 * d;\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.);\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col4;\n  if (idObj == 1) col4 = vec4 (1., 0.3, 0., 0.5);\n  else if (idObj == 2) col4 = vec4 (0.3, 0.3, 1., 0.5);\n  else if (idObj == 3) col4 = vec4 (0.3, 0.7, 0.4, 0.3);\n  return col4;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, vn, vns;\n  float dstGrnd, dstObj, gg, dx, dk, bk, dif, sh, spec;\n  int idObjT;\n  dstGrnd = GrndRay (ro, rd);\n  idObj = -1;\n  dstObj = ObjRay (ro, rd);\n  if (idObj < 0) dstObj = dstFar;\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col4 = ObjCol (vn);\n    sh = ObjSShadow (ro, sunDir);\n    bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n    col = col4.rgb * (0.2 + 0.1 * bk  + sh * max (dot (vn, sunDir), 0.)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n  } else if (dstGrnd < dstFar) {\n    ro += dstGrnd * rd;\n    vn = GrndNf (ro, dstGrnd);\n    gg = smoothstep (0.5, 0.9, vn.y);\n    vn = VaryNf (5. * ro, vn, 0.5);\n    vns = normalize (Noisev3v2 (50. * ro.xz) - 0.5);\n    vns.y = abs (vns.y);\n    spec = 0.8 * gg * pow (max (dot (sunDir, reflect (rd, vns)), 0.), 8.);\n    col = vec3 (1.) * mix (1.2, 1., gg);\n    dx = abs (ro.x - TrackPath (ro.z).x);\n    dk = smoothstep (0., 3., dx);\n    col *= 0.7 + 0.3 * (dk + (1. - dk) * Noisefv2 (vec2 (20. * dx, 0.5 * ro.z)));\n    dif = max (dot (vn, sunDir), 0.);\n    bk = max (0.3 + 0.7 * dot (vn, normalize (vec3 (- sunDir.x, 0.,\n       - sunDir.z))), 0.);\n    sh = min (GrndSShadow (ro, sunDir), ObjSShadow (ro, sunDir));\n    col = col * (0.5 * bk + (0.3 + 0.7 * sh) * dif) + sh * spec * dif;\n  } else col = SkyCol (ro, rd);\n  return pow (clamp (col, 0., 1.), vec3 (0.7));\n}\n\nvoid ObjPM (float t)\n{\n  vec3 vuF, vuB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 1.;\n  oPos = TrackPath (t);\n  vuF = TrackPath (t + dt);\n  vuB = TrackPath (t - dt);\n  vel = (vuF - vuB) \/ (2. * dt);\n  vel.y = 0.;\n  acc = (vuF - 2. * oPos + vuB) \/ (dt * dt);\n  acc.y = 0.;\n  oPos.x -= 50. * acc.x;\n  va = cross (acc, vel) \/ length (vel);\n  ort = vec3 (0., atan (vel.z, vel.x) - 0.5 * pi,\n     10. * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  oMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvec3 GlareCol (vec3 rd, vec3 sd, vec2 uv)\n{\n  vec3 col;\n  if (sd.z > 0.) {\n    vec3 e = vec3 (1., 0., 0.);\n    col = 0.2 * pow (sd.z, 8.) *\n       (1.5 * e.xyy * max (dot (normalize (rd + vec3 (0., 0.3, 0.)), sunDir), 0.) +\n        e.xxy * SmoothBump (0.04, 0.07, 0.07, length (uv - sd.xy)) +\n        e.xyx * SmoothBump (0.15, 0.2, 0.07, length (uv - 0.5 * sd.xy)) +\n        e.yxx * SmoothBump (1., 1.2, 0.07, length (uv + sd.xy)));\n  } else col = vec3 (0.);\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  vec3 rd, ro, col;\n  float objSpd, a;\n  a = pi * (0.5 + 0.3 * sin (0.1 * tCur));\n  sunDir = normalize (vec3 (cos (a), 0.5, sin (a)));\n  objSpd = 20.;\n  ObjPM (objSpd * tCur);\n  vuMat = oMat;\n  rd = normalize (vec3 (uv, 2.6)) * vuMat;\n  ro = oPos;\n  ro.y += 4.;\n  ObjPM (objSpd * (tCur + 1.));\n  oPos.y -= GrndDf (oPos) - 1.;\n  objPos[0] = oPos;  objMat[0] = oMat;\n  ObjPM (objSpd * (tCur + 2.));\n  oPos.y -= GrndDf (oPos) - 1.;\n  objPos[1] = oPos;  objMat[1] = oMat;\n  col = ShowScene (ro, rd) + GlareCol (rd, vuMat * sunDir, 0.5 * uv);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}