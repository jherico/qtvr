{"Shader":{"ver":"0.1","info":{"id":"MtBGWh","date":"1428702702","viewed":739,"name":"Flake Sea","username":"aiekick","description":"Flake Sea","likes":8,"published":3,"flags":0,"tags":["sea","flake"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n    \n#define displaceOffset 0.085\n\nconst int REFLEXIONS_STEP = 2;\n\n#define m2pi 6.2831\nvec3 effect(vec2 uv) \n{\n    vec2 v = uv;\n    \n   \tvec2 c0 = vec2(30.,20.);\n    vec2 c1 = vec2(10.,40.);\n    \n    vec2 n=floor(v);\n    vec2 f=fract(v);\n    \n    vec3 col;col.x=10.;\n    \n    for( float j=-1.; j<=1.; j+=1. )\n    {\n        for( float i=-1.; i<=1.; i+=1. )\n        {\n            vec2 g = vec2( i, j);\n            \n            vec2 ng = n+g;\n            float ng0 = dot(ng,c0);\n            float ng1 = dot(ng,c1);\n            vec2 ng01 = vec2(ng0,ng1);\n            vec2 hash = fract(cos(ng01)*iGlobalTime*0.2);\n            \n            vec2 o=sin(m2pi*hash)*.5+.5;\n            \n            vec2 r=g+o-f;\n            \n            float d=dot(r,r);\n            \n            if( d < col.x ) \n                col = vec3(d,r);\n        }\n    }\n     \n    return col.xzz;\n}\n\nvec4 displacement(vec3 p)\n{\n    vec2 uv = vec2(atan(p.x,p.z),acos(p.y));\n    \n    vec3 col = effect(p.xz); \/\/ p.xz\n    \n    float dist = dot(col, vec3(displaceOffset));\n    \n    dist = clamp(dist, 0., 1.);\n    \n    return vec4(dist,col*1.5);\n}\n\nvec4 map(vec3 p)\n{\n   \tfloat scale = 3.;\n    float dist = 0.;\n    \n    float x = 10.;\n    float z = 10.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n    return vec4(p.y+y, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 p )\n{\n\tvec2 e = vec2( 0.02,0.);\n\tvec3 nor = vec3(\n\t    map(p+e.xyy).x - map(p-e.xyy).x,\n\t    map(p+e.yxy).x - map(p-e.yxy).x,\n\t    map(p+e.yyx).x - map(p-e.yyx).x );\n\treturn normalize(nor);\n}\n\nvec3 envMap(vec3 ray)\n{\n    vec2 uv = ray.xz*100.\/ray.y;\n    float t = iGlobalTime;\n    float c0 = texture2D( iChannel0, 0.00015*uv +0.1+ 0.0043*t ).x;\n    float c1 = 0.35*texture2D( iChannel0, 0.00015*2.0*uv + 0.0043*.5*t ).x;\n    return vec3(c0,c1,0.);\n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.3;\n    float cam_a = 0.; \/\/ angle z\n    \n    float cam_e = 0.; \/\/ elevation\n    float cam_d = 8.; \/\/ distance to origin axis\n        \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 40.; \/\/ ray marching distance max\n    float refl_i = 0.6; \/\/ reflexion intensity\n    float refr_a = 0.5; \/\/ refraction angle\n    float refr_i = 0.8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n     \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \/\/if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    \/\/if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n    vec2 res = iResolution.xy;\n\tvec2 uv = (2.*fragCoord.xy -res)\/res.y;\n        \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    vec3 ray, cubeRay;\n    \n    for(int k=0;k<REFLEXIONS_STEP;k++)\n    {\n        for(int i=0;i<20;i++)\n        {      \n            if (s<prec||s>maxd) break;\n            s = map(p).x;\n            d += s;\n            p = ro+rd*d;   \n        }\n\n        if (d<maxd)\n        {\n            vec3 n = calcNormal(p);\n\n            float ratio = float(k)\/float(REFLEXIONS_STEP);\n            \n            b=li;\n\n            ray = reflect(rd, n);\n            cubeRay = envMap(ray) * refl_i;\n\n            ray = refract(rd, n, refr_a);\n            cubeRay += envMap(ray) * refr_i;\n\n            \/\/ lighting        \n            vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n            float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n            float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n            float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n            float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n            float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n            float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n            vec3 brdf = vec3(0.0);\n            brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n            brdf += 1.20*spe*vec3(1.00,0.90,0.60);\n            brdf += 0.30*amb*vec3(0.50,0.70,1.00);\n            brdf += 0.40*dom*vec3(0.50,0.70,1.00);\n            brdf += 0.30*bac*vec3(0.25,0.25,0.25);\n            brdf += 0.40*fre*vec3(1.00,1.00,1.00);\n            \n            k==0?col=map(p).yzw:col=mix(col,cubeRay+pow(b,25.),0.8*ratio);  \n\n            col *= brdf;\n            \n            ro = p;\n            rd = ray;\n            s = prec;\n        }\n        else if (k == 0)\n        {\n            col = envMap(rd);\n        }\n    }\n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}