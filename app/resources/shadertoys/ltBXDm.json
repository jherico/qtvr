{"Shader":{"ver":"0.1","info":{"id":"ltBXDm","date":"1444149367","viewed":763,"name":"Emission clouds","username":"Duke","description":"Just experimenting with noises and other cool stuff on this site <img src=\"\/img\/emoticonHappy.png\"\/>","likes":15,"published":3,"flags":0,"tags":["cloud","nebula","emission","ionized"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ based on https:\/\/www.shadertoy.com\/view\/ls2SDd\n\/\/ noise from https:\/\/www.shadertoy.com\/view\/XslGRr\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\nconst int MAX_RAY_STEPS = 64;\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n\treturn -1.0+2.0*mix( rg.x, rg.y, f.z );\n}\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 screenPos = (fragCoord.xy \/ iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 1.4);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y \/ iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 rayPos = vec3(80.0, 12.0 * sin(iGlobalTime \/ 4.7), 0.0);\n\t\t\n    \n    rayDir.y -= .2 * sin(iGlobalTime \/ 4.7);\n    rayDir = normalize(rayDir);\n    \n\trayPos.xz = rotate2d(rayPos.xz, iGlobalTime \/ 2.0);\n\trayDir.xz = rotate2d(rayDir.xz, iGlobalTime \/ 2.0 + 3.14 \/ 2.0);\n    \n    \n    float dis = 0.0;\n    float t1 = 2.0;\n    vec3 dir = vec3(0.,1.,0.);\n    float val;\n    \n    vec3 col = vec3(0);\n    for(int i=0;i<MAX_RAY_STEPS;i++){\n\t    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \t\/\/ participating media    \n    \tvec3 q = rayPos - dir* t1; val  = 0.50000*noise( q * .05 );\n\t\tq = q*2.0 - dir* t1; val += 0.25000*noise( q * .05  );\n\t\tq = q*2.0 - dir* t1; val += 0.12500*noise( q * .05  );\n\t\tq = q*2.0 - dir* t1; val += 0.06250*noise( q * .05  );\n        q = q*2.5 - dir* t1; val += 0.03125*noise( q * .8  );\n        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n        \n        float t = max(5.0 * val - .9, 0.0);\n        \n        col += sqrt(dis) * .1 * vec3(0.5 * t * t * t, .6 * t * t, .7 * t);\n        \n        dis += 1.0 \/ float(MAX_RAY_STEPS);\n        \n        rayPos += rayDir * 1.0\/ (.4);\n    }\n    \n    col = min(col, 1.0) - .34 * (log(col + 1.0));\n    \n    fragColor = vec4(sqrt(col.rgb), 1.0);\n}","name":"","description":"","type":"image"}]}}