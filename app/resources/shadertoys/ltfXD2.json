{"Shader":{"ver":"0.1","info":{"id":"ltfXD2","date":"1441421167","viewed":1064,"name":"16 Segment Display","username":"Flyguy","description":"A 16 segment display with binary-packed characters. <br\/>The segment layout was made in Blender and converted into glsl code using Processing.","likes":7,"published":3,"flags":0,"tags":["text","font","display","segment","16segment"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n16 segment display\n\nSegment bit positions:\n\n  __2__ __1__\n |\\    |    \/|\n | \\   |   \/ |\n 3  11 10 9  0\n |   \\ | \/   |\n |    \\|\/    |\n  _12__ __8__\n |           |\n |    \/|\\    |\n 4   \/ | \\   7\n | 13 14  15 |\n | \/   |   \\ |\n  __5__|__6__\n\n15                 0\n |                 |\n 0000 0000 0000 0000\n\nexample: letter A\n\n   12    8 7  4 3210\n    |    | |  | ||||\n 0001 0001 1001 1111\n\n binary to hex -> 0x119F\n \n float c_a = float(0x119F)\n*\/\n\nfloat c_a = float(0x119F);\nfloat c_b = float(0x927E);\nfloat c_c = float(0x007E);\nfloat c_d = float(0x44E7);\nfloat c_e = float(0x107E);\nfloat c_f = float(0x101E);\nfloat c_g = float(0x807E);\nfloat c_h = float(0x1199);\nfloat c_i = float(0x4466);\nfloat c_j = float(0x4436);\nfloat c_k = float(0x9218);\nfloat c_l = float(0x0078);\nfloat c_m = float(0x0A99);\nfloat c_n = float(0x8899);\nfloat c_o = float(0x00FF);\nfloat c_p = float(0x111F);\nfloat c_q = float(0x80FF);\nfloat c_r = float(0x911F);\nfloat c_s = float(0x8866);\nfloat c_t = float(0x4406);\nfloat c_u = float(0x00F9);\nfloat c_v = float(0x2218);\nfloat c_w = float(0xA099);\nfloat c_x = float(0xAA00);\nfloat c_y = float(0x4A00);\nfloat c_z = float(0x2266);\n\nfloat c_com = float(0x2000);\nfloat c_spc = 0.0;\n\nfloat c_nl = -1.0;\n\n\/\/Distance to line p0,p1 at uv\nfloat dseg(vec2 p0,vec2 p1,vec2 uv)\n{\n\tvec2 dir = normalize(p1 - p0);\n\tuv = (uv - p0) * mat2(dir.x, dir.y,-dir.y, dir.x);\n\treturn distance(uv, clamp(uv, vec2(0), vec2(distance(p0, p1), 0)));   \n}\n\n\/\/Checks if bit 'b' is set in number 'n'\nbool bit(float n, float b)\n{\n\treturn mod(floor(n \/ exp2(floor(b))), 2.0) != 0.0;\n}\n\n\/\/Distance to the character defined in 'bits'\nfloat dchar(float bits, vec2 uv)\n{\n\tfloat d = 1e6;\t\n\n\tfloat n = floor(bits);\n\t\n\tif(bits != 0.0)\n\t{\n        \/\/Segment layout and checking.\n\t\td = bit(n,  0.0) ? min(d, dseg(vec2( 0.500,  0.063), vec2( 0.500,  0.937), uv)) : d;\n\t\td = bit(n,  1.0) ? min(d, dseg(vec2( 0.438,  1.000), vec2( 0.063,  1.000), uv)) : d;\n\t\td = bit(n,  2.0) ? min(d, dseg(vec2(-0.063,  1.000), vec2(-0.438,  1.000), uv)) : d;\n\t\td = bit(n,  3.0) ? min(d, dseg(vec2(-0.500,  0.937), vec2(-0.500,  0.062), uv)) : d;\n\t\td = bit(n,  4.0) ? min(d, dseg(vec2(-0.500, -0.063), vec2(-0.500, -0.938), uv)) : d;\n\t\td = bit(n,  5.0) ? min(d, dseg(vec2(-0.438, -1.000), vec2(-0.063, -1.000), uv)) : d;\n\t\td = bit(n,  6.0) ? min(d, dseg(vec2( 0.063, -1.000), vec2( 0.438, -1.000), uv)) : d;\n\t\td = bit(n,  7.0) ? min(d, dseg(vec2( 0.500, -0.938), vec2( 0.500, -0.063), uv)) : d;\n\t\td = bit(n,  8.0) ? min(d, dseg(vec2( 0.063,  0.000), vec2( 0.438, -0.000), uv)) : d;\n\t\td = bit(n,  9.0) ? min(d, dseg(vec2( 0.063,  0.063), vec2( 0.438,  0.938), uv)) : d;\n\t\td = bit(n, 10.0) ? min(d, dseg(vec2( 0.000,  0.063), vec2( 0.000,  0.937), uv)) : d;\n\t\td = bit(n, 11.0) ? min(d, dseg(vec2(-0.063,  0.063), vec2(-0.438,  0.938), uv)) : d;\n\t\td = bit(n, 12.0) ? min(d, dseg(vec2(-0.438,  0.000), vec2(-0.063, -0.000), uv)) : d;\n\t\td = bit(n, 13.0) ? min(d, dseg(vec2(-0.063, -0.063), vec2(-0.438, -0.938), uv)) : d;\n\t\td = bit(n, 14.0) ? min(d, dseg(vec2( 0.000, -0.938), vec2( 0.000, -0.063), uv)) : d;\n\t\td = bit(n, 15.0) ? min(d, dseg(vec2( 0.063, -0.063), vec2( 0.438, -0.938), uv)) : d;\n\t}\n\t\n\treturn d;\n}\n\nconst int NUM_CHARS = 16;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = ( fragCoord \/ iResolution.y ) * 8.0;\n\t\n\tfloat ch[NUM_CHARS];\n\t\n\tch[ 0] = c_h;\n\tch[ 1] = c_e;\n\tch[ 2] = c_l;\n\tch[ 3] = c_l;\n\tch[ 4] = c_o;\n    ch[ 5] = c_com;\n\tch[ 6] = c_nl;\n\tch[ 7] = c_s;\n\tch[ 8] = c_h;\n\tch[ 9] = c_a;\n    ch[10] = c_d;\n    ch[11] = c_e;\n    ch[12] = c_r;\n    ch[13] = c_t;\n    ch[14] = c_o;\n    ch[15] = c_y;\n\t\n\t\/\/Printing and spacing\n\tvec2 ch_size = vec2(1.0, 2.0);\n\tvec2 ch_space = ch_size + vec2(0.25, 0.25);\n\t\n    vec2 uvc = mod(uv, ch_space) - (ch_size \/ 2.0) - 0.125; \/\/Per-character repeated uv space\n    vec2 uvt = floor(uv \/ ch_space); \/\/Character screen position\n    \n    float char = 0.0; \/\/Character to print\n    \n\tvec2 cursor = vec2(0.0,2.0); \/\/Print position cursor\n\t\n    float index = 0.0; \/\/Character index (for animation)\n    \n\tfor(int i = 0;i < NUM_CHARS;i++)\n\t{\n        if(uvt == cursor)\n        {\n            if(ch[i] >= 0.0) \/\/Don't print control characters.\n            {\n\t\t\t\tchar = ch[i];\n            }\n            break;\n        }\n        \n        if(ch[i] == c_nl) \/\/Insert a new line after c_nl\n        {\n\t\t\tcursor.y--;\n            cursor.x = 0.0;\n        }\n        else\n        {\n        \tindex++; \n            cursor.x++; \/\/Move cursor.\n        }\n\t}\n    \n    \/\/Glitch fade-in animation\n\tfloat anim_time = clamp(iGlobalTime * 0.3, 0.0, 1.0) * float(NUM_CHARS);\n    \n    char = mix(0.0, char, clamp(anim_time - index, 0.0, 1.0));\n    \n\tfloat dist = dchar(char, uvc);\n    \n\t\/\/Shading\n\tvec3 color = vec3(0.0);\n\t\n\tcolor = mix(vec3(2.0, 0.8, 0.1), vec3(0.0, 0.0, 0.0), smoothstep(0.01, 0.04, dist) - (0.0001 \/ (dist * dist)));\n\t\n\tfragColor = vec4(color, 1.0);\n\n}","name":"","description":"","type":"image"}]}}