{"Shader":{"ver":"0.1","info":{"id":"MljXWy","date":"1446302846","viewed":502,"name":"Too Much Candy!","username":"gtoledo3","description":"Happy Halloween!","likes":3,"published":3,"flags":0,"tags":["raymarch","halloween"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/\"Too Much Candy!\", George Toledo 2015. Uses pmalin's raymarching framework\nfloat time=iGlobalTime;\nvec2 mouse=iMouse.xy;\nvec2 resolution=iResolution.xy;\nvec2 surfaceSize=vec2(0.);\n\nfloat kPI = acos(0.0);\nfloat kHalfPi = asin(1.0);\nfloat kTwoPI = kPI * 2.0;\n\/\/\nconst float PI=3.14159;\n\n\n\/\/#define ENABLE_MONTE_CARLO\n\/\/#define ENABLE_REFLECTIONS\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_POINT_LIGHT\n\/\/#define ENABLE_POINT_LIGHT_FLARE\n\/\/#define ENABLE_BRIGHTLIGHT\/\/for far cam to light distances\n\/\/disabled to make speedier in some compilers and allow them to be present for reference. edit- Also, make sure to remove dead code in \"Get Scene\" or methods referencing other methods, this is way more important\n\/\/#define ENABLE_WARPS\n\/\/#define ENABLE_EXTRA_DE\n#define RADIANS 0.017453292\n\n#ifdef ENABLE_MONTE_CARLO\nvec4 gPixelRandom;\nvec3 gRandomNormal;\n\/\/for monte carlo backbuffer randomization DOF\nvoid CalcPixelRandom(){\n\t\/\/ Nothing special here, just numbers generated by bashing keyboard\n\tvec4 s1 = sin(time * 3.3422 + gl_FragCoord.xxxx * vec4(324.324234, 563.324234, 657.324234, 764.324234)) * 543.3423;\n\tvec4 s2 = sin(time * 1.3422 + gl_FragCoord.yyyy * vec4(567.324234, 435.324234, 432.324234, 657.324234)) * 654.5423;\n\tgPixelRandom = fract(2142.4 + s1 + s2);\n\tgRandomNormal = normalize( gPixelRandom.xyz - 0.5);\n}\n#endif\n\nstruct C_Ray{\n\tvec3 vOrigin;\n\tvec3 vDir;\n};\n \nstruct C_HitInfo{\n\tvec3 vPos;\n\tfloat fDistance;\n\tvec3 vObjectId;\n};\n \nstruct C_Material{\n\tvec3 cAlbedo;\n\tfloat fR0;\n\tfloat fSmoothness;\n\tvec2 vParam;\n};\n\/\/<--Color&Material_Funcs------------------------------------------------------------>\n\nvec3 hsv(const in float h, const in float s, const in float v) {\n\treturn mix(vec3(1.),clamp((abs(fract(h+vec3(3.,2.,1.)\/3.)*6.-3.)-1.),0.,1.),s)*v;\n}\n\n#ifdef ENABLE_WARPS\n\n\/\/<--Warps and Noise------------------------------------------------------------>\n\/\/******** Ashima Noise3D Start https:\/\/github.com\/ashima\/webgl-noise\/blob\/master\/src\/noise3D.glsl\n\nvec3 mod289(const in vec3 p){\n  return p - floor(p * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 mod289(const in vec4 p){\n  return p - floor(p * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 permute(const in vec4 p){\n     return mod289(((p*34.0)+1.0)*p);\n}\n\nvec4 taylorInvSqrt(const in vec4 p){\n  return 1.79284291400159 - 0.85373472095314 * p;\n}\n\nfloat snoise(const in vec3 p){ \n  const vec2  C = vec2(1.0\/6.0, 1.0\/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\/\/ First corner\n  vec3 i  = floor(p + dot(p, C.yyy) );\n  vec3 x0 =   p - i + dot(i, C.xxx) ;\n\n\/\/ Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  \/\/   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  \/\/   x1 = x0 - i1  + 1.0 * C.xxx;\n  \/\/   x2 = x0 - i2  + 2.0 * C.xxx;\n  \/\/   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; \/\/ 2.0*C.x = 1\/3 = C.y\n  vec3 x3 = x0 - D.yyy;      \/\/ -1.0+3.0*C.x = -0.5 = -D.y\n\n\/\/ Permutations\n  i = mod289(i); \n  vec4 v = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\/\/ Gradients: 7x7 points over a square, mapped onto an octahedron.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; \/\/ 1.0\/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = v - 49.0 * floor(v * ns.z * ns.z);  \/\/  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    \/\/ mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  \/\/vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  \/\/vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n\/\/Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\/\/ Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\/\/******** Ashima Noise3D End\n\n#endif\n\/\/<--------Matrix Functions----------------------------------------------------------->\nvec3 RotateX( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( p.x, c * p.y + s * p.z, -s * p.y + c * p.z);\n}\n \nvec3 RotateY( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n     \nvec3 RotateZ( const in vec3 p, const in float angle ){\n\tfloat s = sin(angle);\n\tfloat c = cos(angle);\t\n\treturn vec3( c * p.x + s * p.y, -s * p.x + c * p.y, p.z);\n}\n\/\/<------------Object Unions------------------------------------------------------------->\nvec4 DistCombineUnion( const in vec4 p1, const in vec4 p2 ){\n\t\/\/if(p1.x < p2.x) return p1; else return p2;\n\treturn mix(p1, p2, step(p2.x, p1.x));\n}\n \nvec4 DistCombineIntersect( const in vec4 p1, const in vec4 p2 ){\n\treturn mix(p2, p1, step(p2.x,p1.x));\n}\n \nvec4 DistCombineSubtract( const in vec4 p1, const in vec4 p2 ){\n\treturn DistCombineIntersect(p1, vec4(-p2.x, p2.yzw));\n}\n \nvec3 DomainRepeatXZGetTile( const in vec3 p, const in vec2 repeat, out vec2 tile ){\n\tvec3 result = p;\n\tvec2 tilePos = (p.xz \/ repeat) + 0.5;\n\ttile = floor(tilePos + 1000.0);\n\tresult.xz = (fract(tilePos) - 0.5) * repeat;\n\treturn result;\n}\n \nvec3 DomainRepeatXZ( const in vec3 p, const in vec2 repeat ){\n\tvec3 result = p;\n\tvec2 tilePos = (p.xz \/ repeat) + 0.5;\n\tresult.xz = (fract(tilePos) - 0.5) * repeat;\n\treturn result;\n}\n \nvec3 DomainRepeatY( const in vec3 p, const in float size ){\n\tvec3 result = p;\n\tresult.y = (fract(p.y \/ size + 0.5) - 0.5) * size;\n\treturn result;\n}\n \nvec3 DomainRotateSymmetry( const in vec3 p, const in float steps ){\n\tfloat angle = atan( p.x, p.z );\n\tfloat scale = steps \/ (kTwoPI);\n\tfloat steppedAngle = (floor(angle * scale + 0.5)) \/ scale;\n\tfloat s = sin(-steppedAngle);\n\tfloat c = cos(-steppedAngle);\n\n\treturn vec3( c * p.x + s * p.z, p.y, -s * p.x + c * p.z);\n}\n\n\n\/\/<-----------------------DE'S & some associated methods-------------------------------------------------->\n\nfloat GetDistanceSphere(const in vec3 p, const in float r) {\n    return length(p) - r;\n}\n\nfloat GetDistanceXYTorus( const in vec3 p, const in float r1, const in float r2 ){\n\tvec2 q = vec2(length(p.xy)-r1,p.z);\n\treturn length(q)-r2;\n}\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 ){\n\tvec2 q = vec2(length(p.yz)-r1,p.x);\n\treturn length(q)-r2;\n}\n\nfloat GetDistanceXZTorus( const in vec3 p, const in vec2 r ){\n  \tvec2 q = vec2(length(p.xz)-r.x,p.y);\n  \treturn length(q)-r.y;\n}\n\/\/Scene Start\n\tfloat GetDistanceSDCylinder( const in vec3 p, const in vec3 c ){\n  \treturn length(p.xz-c.xy)-c.z;\n}\nfloat GetDistanceCylinderY(const in vec3 p, const in float r){\n\treturn length(p.xz) - r;\n}\n\/\/signed distance to box (iq) - glsl interpretation\nfloat GetDistanceSDBox(const in vec3 p, const in vec3 size) {\n\tvec3 d = abs(p) - size;\n\treturn min(max(d.x,max(d.y, d.z)), length(max(d, 0.0)));\n}\n\nfloat GetDistanceBox( const in vec3 p, const in vec3 size ){\n\tvec3 d = (abs(p) - size);\n\treturn max(d.x, max(d.y, d.z));\n}\n \nfloat GetDistanceRoundedBox( const in vec3 p, const in vec3 size, const in float radius ){\n\tvec3 closest = max(min(p, size), -size);\n\treturn length(closest - p) - radius;\n}\n\nfloat GetDistanceHexagon( const in vec3 p, const in vec2 h ){\n    vec3 q = abs(p);\n    return max(q.y-h.y,max(q.x+q.z*0.57735,q.z*1.1547)-h.x);\n}\n\nfloat GetDistanceTri(const in vec3 p, const in vec2 h){\n    vec3 q = abs(p);\n    return max(q.z - h.y, max(dot(vec2(q.x, p.y), vec2(0.866025, 0.5)), -p.y) - h.x*0.5);\n}\n\nfloat GetDistanceCylinder(const in vec3 p, const in float r, const in float c){\n    return max(length(p.xz)-r, abs(p.y)-c);\n}\n\n\/\/r1-lower radius, r2 upper radius, c = height\/2\nfloat GetDistanceCone(const in vec3 p, const in float r1, const in float r2, const in float c) {\n\tfloat d = length(p.xz)-mix(r1, r2, (c+p.y)\/(c+c));\n\td = max(d,-p.y-c);\n\td = max(d,p.y-c);\n\treturn d;\n}\n\nfloat DistFloor (const in vec3 p){\n\t\/\/float f1 = 10.0 * sin(p.z * 0.125) * cos(p.x * 0.125); \/\/ texture(uTex0, vPos.xz * 0.05).r; \/\/ \n\tfloat f1 = (15.0 , vec2(p.x,p.z)* 0.05).r; \/\/ \n\tif (f1<2.5) f1=8.5;\n\tfloat f2 = p.y;\n\tconst float fThickness = 13.0;\n\treturn (f2 - f1) - fThickness;\n}\n\n\n\/\/<---------------------------------SCENE_DE--------------------------------------------------------->\nvec4 GetDistanceScene(const in vec3 vPos ){          \n\tvec4 vResult =  vec4(1.0);\n\n\tvec3 vObj1Domain=vPos;\t\t\n\tvec3 vObj2Domain=vPos;\n\tvObj2Domain.y +=-1.5;\n\n\t\tvec4 vDistFloor = vec4(vPos.y+1., 1.0, vPos.xz);\n\t\tvec4 vDistObj = vec4(GetDistanceSphere(vObj2Domain+(cos((12.)*vPos.x\/vPos.z)*.02),2.5), 2.0, vPos.xz);\n\t\tvec4 vDistInner = vec4(GetDistanceSphere(vObj2Domain+(cos((12.)*vPos.x\/vPos.z)*.02),2.3), 2.0, vPos.xz);\n\n\t\tvec4 vDistEye = vec4(GetDistanceSphere(vObj2Domain+vec3(0.88,-0.9,-0.93),1.05), 3.0, vPos.xz);\n\t\tvec4 vDistEye2 = vec4(GetDistanceSphere(vObj2Domain+vec3(-0.88,-0.9,-0.93),1.05), 3.0, vPos.xz);\n\t\tvec4 vDistMouth = vec4(GetDistanceSphere(vObj2Domain+vec3(-0.,1.,-1.975)+(cos((22.)*vPos.x)*.012),1.5), 3.0, vPos.xz);\n\n\t\tvec4 vDistNose = vec4(GetDistanceTri(vObj2Domain+vec3(-0.,-1.000,-1.95)+(cos((22.)*vPos.x)*.012),vec2(.5,.5)), 3.0, vPos.xz);\n\t\t\/\/vec4 vDistVomit = vec4(GetDistanceRoundedBox(vObj2Domain+snoise(-.1*iGlobalTime+vObj2Domain)*.193+vec3(-0.1,1.4,-1.975)+(cos((2.)*vPos.y)*.1972)+((cos(22.*vPos.x)*.02)+(cos(2.)*vPos.z)*.1992),vec3(.927,.5,5.5),.1), 4.0, vPos.xz);\n\t\tvec4 vDistVomit = vec4(GetDistanceRoundedBox(vObj2Domain+vec3(-0.1,1.4,-14.3)+(cos((12.)*vPos.y)*.01972)\n               +((cos(22.*vPos.x)*.02)+(cos(4.*vPos.z-time)*.03992)+(cos(1.5*vPos.z-time*3.3)*.046992)),vec3(.927,.5,15.5),.1), 4.0, vPos.xz);\n\n\t\n    \tvec4 vDistStem = vec4(GetDistanceHexagon(vObj2Domain+vec3(-0.,-2.5,-0.)+(((22.)*vPos.x)*.012),vec2(.25,.25)), 5.0, vPos.xz);\n\n\t\tvResult =DistCombineUnion(vResult,vDistObj);\n\t\tvResult =DistCombineSubtract(vResult,vDistMouth);\n\t\tvResult =DistCombineSubtract(vResult,vDistEye);\n\t\tvResult =DistCombineSubtract(vResult,vDistEye2);\n\t\tvResult =DistCombineSubtract(vResult,vDistNose);\n\t\tvResult =DistCombineSubtract(vResult,vDistInner);\n\t\tvResult =DistCombineUnion(vResult,vDistVomit);\n\t\tvResult =DistCombineUnion(vResult,vDistStem);\n\n\t\tvResult = DistCombineUnion(vResult, vDistFloor);\n\t\t       \n\t\treturn vResult;\n}\n\/\/<---------------------------------SCENE_TEXTURE--------------------------------------------------------->\n\n\/\/COLOR AND TEXTURE\nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos ){\n\tC_Material mat;\n\t\t       \n\tif(vObjId.x < 1.5){\n\t\t\/\/ floor\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 0.01;\n\t\tmat.cAlbedo = vec3(.1,.35,.5)* hsv(.225+(vPos.x*.01),.82,1.);\n\t}\n\telse\n\tif(vObjId.x < 2.5){\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 0.069;\t\n\t\tmat.cAlbedo=vec3(1.)* hsv(.0+(vPos.z*.005), .79, 1.0);\n\t}\n\telse\n\tif(vObjId.x < 3.5){\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 0.169;\n\t\tmat.cAlbedo=vec3(1.);\n\t}\n\telse\n\tif(vObjId.x < 4.5){\n\t\tmat.fR0 = 0.021;\n\t\tmat.fSmoothness = 0.59;\n\t\tmat.cAlbedo= hsv(.01*time+.25+(vPos.x*.38), 1., .5);\t\n\t}\n\t\telse\n\tif(vObjId.x < 5.5){\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 0.0169;\n\t\tmat.cAlbedo=vec3(1.)* hsv(.4+(vPos.x*.001), .7, .25);\n\t\t\n\t}\n\t\n\treturn mat;\n}\n\nvec3 GetSkyGradient( const in vec3 vDir ){\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\n\treturn mix(vec3(0.0, 0.0, 0.0), vec3(0.95, 0.96, 0.7), fBlend);\n}\n\/\/<---------------------------------SCENE_LIGHT_POS&COL--------------------------------------------------------->\n\nvec3 GetLightPos(){\n\tvec3 vLightPos = vec3(0.0, 2.0, 1.0);\n\t#ifdef ENABLE_MONTE_CARLO        \n\tvLightPos += gRandomNormal * 0.025;\n\t#endif\n\treturn vLightPos;\n}\n\nvec3 GetLightCol(){\n\t#ifdef ENABLE_BRIGHTLIGHT\t\n\treturn vec3(32.0, 22.0, 18.0) * 180.0;\n\t#endif\n\treturn vec3(32.0, 6.0, 1.0) * 40.0;\n}\n\/\/<------------------------------------------------------------------------------------------>\n \nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n\treturn GetSkyGradient(vNormal);\n}\n\n#define kFogDensity 0.05\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n\t#ifdef ENABLE_FOG\n\t\/\/ fog\n\tfloat fFogAmount = exp(intersection.fDistance * -kFogDensity);\n\tvec3 cFog = GetSkyGradient(ray.vDir);\n\tcol = mix(cFog, col, fFogAmount);\n\t#endif\n       \n\t\/\/ glare from light (a bit hacky - use length of closest approach from ray to light)\n\t#ifdef ENABLE_POINT_LIGHT_FLARE\n\tvec3 vToLight = GetLightPos() - ray.vOrigin;\n\tfloat fDot = dot(vToLight, ray.vDir);\n\tfDot = clamp(fDot, 0.0, intersection.fDistance);\n       \n\tvec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;\n\tfloat fDist = length(vClosestPoint - GetLightPos());\n\tcol += GetLightCol() * 0.01\/ (fDist * fDist);\n\t#endif     \n}\nvec3 GetSceneNormal( const in vec3 vPos )\n{\n\t\/\/ tetrahedron normal\n\tfloat fDelta = 0.025;\n\n\tvec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n\tvec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n\tvec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n\tvec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n\tfloat f1 = GetDistanceScene( vPos + vOffset1 ).x;\n\tfloat f2 = GetDistanceScene( vPos + vOffset2 ).x;\n\tfloat f3 = GetDistanceScene( vPos + vOffset3 ).x;\n\tfloat f4 = GetDistanceScene( vPos + vOffset4 ).x;\n\n\tvec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n\treturn normalize( vNormal );\n}\n\n#define kRaymarchEpsilon 0.001\n#define kRaymarchMatIter 32\n#define kRaymarchStartDistance .1\n\/\/ This is an excellent resource on ray marching -> http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{         \n\tresult.fDistance = kRaymarchStartDistance;\n\tresult.vObjectId.x = 0.0;\n\t\t\t\t\t\t\t   \n\tfor(int i=0;i<=kRaymarchMatIter;i++)               \n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tvec4 vSceneDist = GetDistanceScene( result.vPos );\n\t\tresult.vObjectId = vSceneDist.yzw;\n\n\t\t\/\/ abs allows backward stepping - should only be necessary for non uniform distance functions\n\t\tif((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n\t\t{\n\t\t\tbreak;\n\t\t}                         \n\n\t\tresult.fDistance = result.fDistance + vSceneDist.x;     \n\t}\n       \n       \n\tif(result.fDistance >= fMaxDist)\n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tresult.vObjectId.x = 0.0;\n\t\tresult.fDistance = 1000.0;\n\t}\n}\n\nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n\tC_Ray shadowRay;\n\tshadowRay.vDir = vLightDir;\n\tshadowRay.vOrigin = vPos;\n\n\tC_HitInfo shadowIntersect;\n\tRaymarch(shadowRay, shadowIntersect, fLightDistance, 32);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \n\treturn step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );          \n}\n\n\/\/ http:\/\/en.wikipedia.org\/wiki\/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n\tfloat fDot = dot(vNormal, -vView);\n\tfDot = min(max((1.0 - fDot), 0.0), 1.0);\n\tfloat fDot2 = fDot * fDot;\n\tfloat fDot5 = fDot2 * fDot2 * fDot;\n\treturn fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n\nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n\treturn max(0.0, dot(vLightDir, vNormal));\n}\n\nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{           \n\tvec3 vHalf = normalize(vLightDir - ray.vDir);\n\tfloat fNdotH = max(0.0, dot(vHalf, vNormal));\n\n\tfloat fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n\tfloat fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n\treturn pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n\n\/\/ use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n\tvec3 vPos = intersection.vPos;\n       \n\tfloat fAmbientOcclusion = 1.0;\n       \n\tfloat fDist = 0.0;\n\tfor(int i=0; i<=5; i++)\n\t{\n\t\tfDist += 0.1;\n\n\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n\n\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 \/ fDist );                                   \n\t}\n       \n\treturn fAmbientOcclusion;\n}\n \nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n\tvec3 cScene ;\n\t\n\tvec3 vSpecularReflection = vec3(0.0);\n\tvec3 vDiffuseReflection = vec3(0.0);\n\t\n\tfloat fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\n\tvec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n\t\n\tvDiffuseReflection += vAmbientLight;\n\t\n\tvSpecularReflection += cReflection * fAmbientOcclusion;\n\t\t       \n\t#ifdef ENABLE_POINT_LIGHT\n\tvec3 vLightPos = GetLightPos();\n\tvec3 vToLight = vLightPos - intersection.vPos;\n\tvec3 vLightDir = normalize(vToLight);\n\tfloat fLightDistance = length(vToLight);\n\t\n\tfloat fAttenuation = 1.0 \/ (fLightDistance * fLightDistance);\n\t\n\tfloat fShadowBias = 0.1;             \n\tfloat fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );\n\tvec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;\n\t\n\tvDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                                 \n\tvSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n\t#endif \/\/ENABLE_POINT_LIGHT\n\t\n\tvDiffuseReflection *= material.cAlbedo;              \n\t\n\t#ifdef ENABLE_SPECULAR\n\tfloat fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n\tcScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n\t#else\n\tcScene = vDiffuseReflection;\n\t#endif\n\t\n\treturn cScene;\n}\n\nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 16.0, 32);\n\t\t\t\t\t    \n\tvec3 cScene;\n\n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\n\t\t\/\/ use sky gradient instead of reflection\n\t\tvec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n\n\t\t\/\/ apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n\n\tApplyAtmosphere(cScene, ray, intersection);\n\n\treturn cScene;\n}\n\nvec3 GetSceneColour( const in C_Ray ray )\n{                                                           \n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 60.0, 256);\n\t\t\t    \n\tvec3 cScene;\n       \n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\n\t\t#ifdef ENABLE_MONTE_CARLO\n\t\tvNormal = normalize(vNormal + gRandomNormal \/ (5.0 + material.fSmoothness * 200.0));\n\t\t#endif\n\n\t\tvec3 cReflection;\n\t\t#ifdef ENABLE_REFLECTIONS    \n\t\t{\n\t\t\t\/\/ get colour from reflected ray\n\t\t\tfloat fSepration = 0.05;\n\t\t\tC_Ray reflectRay;\n\t\t\treflectRay.vDir = reflect(ray.vDir, vNormal);\n\t\t\treflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t      \n\t\t\tcReflection = GetSceneColourSimple(reflectRay);                                                                         \n\t\t}\n\t\t#else\n\t\tcReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                               \n\t\t#endif\n\t\t\/\/ apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n       \n\tApplyAtmosphere(cScene, ray, intersection);\n  \n\treturn cScene;\/\/* hsv((cScene.r*.12)+.1, .15, 1.0); \n}\n\nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, out C_Ray ray)\n{\n\tvec2 vPixelCoord = gl_FragCoord.xy;\n\t#ifdef ENABLE_MONTE_CARLO\n\tvPixelCoord += gPixelRandom.zw;\n\t#endif\n\tvec2 vUV = ( vPixelCoord \/ resolution.xy );\n\tvec2 vViewCoord = vUV * 2.0 - 1.0;\n\n\tvViewCoord *= 0.75;\n       \n\tfloat fRatio = resolution.x \/ resolution.y;\n\n\tvViewCoord.y \/= fRatio;                           \n\n\tray.vOrigin = vPos;\n\n\tvec3 vRight = normalize(cross(vForwards, vWorldUp));\n\tvec3 vUp = cross(vRight, vForwards);\n\t    \n\tray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);        \n}\n\nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, ray);\n}\n\nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n\treturn vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n\nvec3 Gamma( const in vec3 cCol )\n{\n\treturn cCol * cCol;\n}\n\nvec3 InvGamma( const in vec3 cCol )\n{\n\treturn sqrt(cCol);\n}\n\n\nvec3 Tonemap( const in vec3 cCol )\n{\n\t\/\/ simple Reinhard tonemapping operator     \n\tvec3 vResult = cCol \/ (1.0 + cCol);\n\n\treturn Gamma(vResult);\n}\n\nvec3 InvTonemap( const in vec3 cCol )\n{\n\tvec3 vResult = cCol;\n\tvResult = clamp(vResult, 0.01, 0.99);\n\tvResult = InvGamma(vResult);\n\treturn - (vResult \/ (vResult - 1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t#ifdef ENABLE_MONTE_CARLO             \n\tCalcPixelRandom();\n\t#endif\n       \n\tC_Ray ray;\n       \n\tconst float fCamreaInitialHeading = -0.5;\n\tconst float fCamreaInitialElevation = 0.3945;\n\tconst float fCamreaInitialDist = 27.0;\n\tconst float fCameraHeight = -.41;\n\tconst float fOrbitSpeed = 1.0;\n\t\n\t\/\/ This magic stolen from other 3d pan\/zoom examples\n\tfloat fZoom = surfaceSize.y * 0.5 + 0.4;\n\t\n\t\/\/vec2 vCenterPosition = mouse+(0.5 - ( gl_FragCoord.xy \/ resolution )) * surfaceSize;\n    vec2 vCenterPosition = (0.5 - ( gl_FragCoord.xy \/ resolution )) * surfaceSize;\n\tfloat fHeading = vCenterPosition.x * fOrbitSpeed + fCamreaInitialHeading;\n\tfloat fElevation = (vCenterPosition.y * fOrbitSpeed + fCamreaInitialElevation);\n\t\n\tvec3 vCameraPos = OrbitPoint(fHeading, fElevation) * fCamreaInitialDist * fZoom;\n\t\n\tvCameraPos += vec3(0.0, -fCameraHeight, 0.0);\n\t#ifdef ENABLE_MONTE_CARLO             \n\tfloat fDepthOfField = 0.1;\n\tvCameraPos += gRandomNormal * fDepthOfField;\n\t#endif\n       \n\tGetCameraRayLookat( vCameraPos, vec3(1.974, 1.5, 0.0), ray);\n\t\/\/GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n       \n\tvec3 cScene = GetSceneColour( ray );   \n       \n\tfloat fExposure = 3.5;\n\tcScene = cScene * fExposure;\n       \n\t#ifdef ENABLE_MONTE_CARLO                              \n\tvec3 cPrev = texture2D(backbuffer, gl_FragCoord.xy \/ resolution).xyz;\n\t\/\/ add noise to pixel value (helps values converge)\n\tcPrev += (gPixelRandom.xyz - 0.5) * (1.0 \/ 255.0);\n\tcPrev = InvTonemap(cPrev);\n\t\/\/ converge sweep\n\tfloat fBlend = 0.1;\n\tvec3 cFinal = mix(cPrev, cScene, fBlend);\n\t#else\n\tvec3 cFinal = cScene;\n\t#endif\n\t\n\tcFinal = Tonemap(cFinal);\n       \t\n\tfloat fAlpha = 1.0;\n\n\tfragColor = vec4( cFinal, fAlpha );\n}\n","name":"","description":"","type":"image"}]}}