{"Shader":{"ver":"0.1","info":{"id":"XtfSRH","date":"1434302299","viewed":762,"name":"Sin without trig IV","username":"demofox","description":"This uses a 1d (explicit) rational quadratic bezier curve to calculate the first quadrant of sine, then uses the quadrant number to flip it on the x or y axis to make the other quadrants. red = sine, green = value made with curve, yellow = overlap (equal)","likes":3,"published":3,"flags":0,"tags":["2d","math","sin"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*-----------------------------------------------------------------------------\nWritten by Alan Wolfe\nhttp:\/\/blog.demofox.org\/2015\/06\/14\/a-fifth-way-to-calculate-sine-without-trig\/\n\nThis uses a 1d (explicit) rational quadratic bezier curve to calculate the first\nquadrant of sine, then uses the quadrant number to flip it on the x or y axis to\nmake the other quadrants.\n\nA rational quadratic bezier curve has the following equation:\nCurvePoint = (A*W1*(1-t)^2 + B*W2*2t(1-t) + C*W3*t^2) \/\n             (W1*(1-t)^2 + W2*2t(1-t) + W3*t^2)\n\nfor the first 90 degrees of sine, A=0, B=1, C = 1, W1 = 1, W2 = cos(arcAngle\/2), W3 = 1\n\nwe are doing a 90 degree arc angle, so W2 = 1\/sqrt(2), or W2 = 0.70710678118\n\nPlugging into those weights and using the equation as a 1d (explicit) curve gives:\n\ny = (0*1*(1-x)^2 + 1*0.70710678118*2x(1-x) + 1*1*x^2) \/\n    (1*(1-x)^2 + 0.70710678118*2x(1-x) + 1*x^2)\n\nsimplifying that gives:\n\ny = (0.70710678118*2x(1-x)+x^2) \/ ((1-x)^2+0.70710678118*2x(1-x)+x^2)\n\nand then in the interest of reducing redundant calculations\nq = 0.70710678118*2x(1-x) + x^2\nr = (1-x)^2\ny = q \/ (r+q)\n\n\nFor cosine, the W1,W2,W3 remain the same, but A = 1, B = 1, C = 0\nq = (1-x)^2 + 0.70710678118*2x(1-x)\nr = x^2\ny = q \/ (r+q)\n\n\nred = sine\ngreen = curve based sine value\nyellow = they overlap and are equal\n\n-----------------------------------------------------------------------------*\/\n\n\/\/ graph settings\n#define POINTSIZE 0.05\n#define LINEWIDTH 0.1\n#define LINEHEIGHT 0.5\n#define LINEINTERVAL (PI*0.5)\n\n\/\/ constants\n#define PI 3.14159265359\n\n\/\/-----------------------------------------------------------------------------\nfloat Sin (const in float _x)\n{\n#if 1 \/\/ change to zero to use cosine based curve\n    \n    float x = fract(_x\/ radians(360.0)) * 4.0;\n    int quadrant = int(floor(x));\n    x = fract(x);\n    \n    if (quadrant == 1 || quadrant == 3)\n        x = 1.0 - x;\n    \n\tfloat q = 0.70710678118*2.0*x*(1.0-x) + x * x;\n\tfloat r = (1.0-x) * (1.0-x);\n\tfloat y = q \/ (q+r);\n    \n    if (quadrant == 2 || quadrant == 3)\n        y *= -1.0;\n    \n    return y;\n    \n#else   \n    \n    \/\/ the below is the cosine version, but subtracting 90 degrees from _x to make it a sine wave\n    float x = fract((_x - radians(90.0))\/ radians(360.0)) * 4.0;\n    int quadrant = int(floor(x));\n    x = fract(x);\n    \n    if (quadrant == 1 || quadrant == 3)\n        x = 1.0 - x;\n    \n\tfloat q = (1.0-x)*(1.0-x) + 0.70710678118*2.0*x*(1.0-x);\n\tfloat r = x*x;\n\tfloat y = q \/ (q+r);\n    \n    if (quadrant == 1 || quadrant == 2)\n        y *= -1.0;\n    \n    return y;\n#endif\n}\n\n\/\/-----------------------------------------------------------------------------\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\t\n    \/\/ set up our coordinate system.\n    \/\/ x = 0 is the left side of the screen.\n    \/\/ y = 0 is the center of the screen\n    float aspectRatio = iResolution.x \/ iResolution.y;\n    vec2 percent = ((fragCoord.xy \/ iResolution.xy) - vec2(0.0,0.5));\n    percent *= 8.0;\n    percent.x *= aspectRatio;\n   \n    \/\/ draw the black graph markings and background\n    float bgColor = 0.3;\n    bgColor *= abs(percent.y) < LINEWIDTH ? 0.0 : 1.0;\n    if ((mod(percent.x, LINEINTERVAL) < LINEWIDTH * 0.5 || mod(percent.x, LINEINTERVAL) > (LINEINTERVAL - LINEWIDTH * 0.5))\n      &&(abs(percent.y) < LINEHEIGHT))\n        bgColor *= 0.0;\n    \n    \/\/ draw the sine values\n    vec3 color = vec3(bgColor);\n    \n    \/\/ real\n    if (abs(percent.y - sin(percent.x)) < POINTSIZE)\n        color.x = 1.0;\n    \n    \/\/ made with curve\n    if (abs(percent.y - Sin(percent.x)) < POINTSIZE)\n         color.y = 1.0;\n        \n\tfragColor = vec4(color,1.0);\n}\n","name":"","description":"","type":"image"}]}}