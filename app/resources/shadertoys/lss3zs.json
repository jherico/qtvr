{"Shader":{"ver":"0.1","info":{"id":"lss3zs","date":"1392152304","viewed":1216,"name":"IFS - brute force","username":"iq","description":"Brute force approach to computing an approximate distance field to the classic IFS fern of Barnsley. This is how you want to NOT do things for rendering IFS fractals.","likes":5,"published":3,"flags":0,"tags":["2d","fractal","ifs"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat hash( in float n ) { return fract(sin(n)*43758.5453123); }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n    uv = uv*12.0 - vec2(5.5,0.8);\n\t\t\n    vec2 z = vec2( 0.0 );\n\t\n\tfloat dodither = smoothstep( 0.0, 1.0, cos(2.0+0.25*6.2831*iGlobalTime) );\n\t\n    float p = mix( 0.5, hash( dot(fragCoord.xy,vec2(113.0,317.0))+iGlobalTime ), dodither );\n\n\tfloat d = 1000.0;\n    for( int i=0; i<160; i++ ) \n    {\n        p = fract( p\/0.123454);  \/\/ generate a random number\n\n             if( p < 0.01 ) z = vec2(  0.0, 0.16*z.y );\n\t\telse if( p < 0.84 ) z = vec2(  0.85*z.x + 0.04*z.y, -0.04*z.x + 0.85*z.y + 1.60 );\n        else if( p < 0.92 ) z = vec2(  0.20*z.x - 0.26*z.y,  0.23*z.x + 0.22*z.y + 1.60 );\n        else                z = vec2( -0.15*z.x + 0.28*z.y,  0.26*z.x + 0.24*z.y + 0.44 );\n\n\t\td = min( d, dot(uv-z,uv-z) );\n    }\n\t\n\td = sqrt(d);\n\t\n\tfloat col = mix( 1.0*pow(d,0.3), 0.7 + 0.3*smoothstep(-1.0,-0.8,sin(15.0*d) ),  smoothstep(0.0,3.0,d) );\n\n    fragColor = vec4( col, col, col, 1.0 );\n}","name":"","description":"","type":"image"}]}}