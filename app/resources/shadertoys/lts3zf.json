{"Shader":{"ver":"0.1","info":{"id":"lts3zf","date":"1424084830","viewed":291,"name":"Albert Mews","username":"dr2","description":"Travel relativistically down a narrow lane (where Albert may have<br\/>resided); mouse controls speed.<br\/>","likes":1,"published":3,"flags":0,"tags":["einstein","relativity","lorentz"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Albert Mews\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nint idObj;\nvec3 qHit, ltDir;\nfloat tCur;\nconst float dstFar = 150.;\nconst int idRoad = 11, idCol = 12, idBeam = 13, idBrg = 14, idWall = 15,\n   idGrs = 16, idLumW = 17, idLumT = 18, idLamp = 19;\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec3 p, vec2 b)\n{\n  vec2 d = abs (p.xy) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat ChqPat (vec3 p, float dHit)\n{\n  vec2 q, iq;\n  float f;\n  q = p.xz;\n  iq = floor (q);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = smoothstep (0., 0.1, abs (fract (q + 0.5) - 0.5));\n  f = dHit \/ dstFar;\n  return 1. - 0.4 * exp (-10. * f * f) * (1. - q.x * q.y);\n}\n\nvec3 ChqNorm (vec3 p, vec3 n)\n{\n  vec2 q, iq;\n  q = p.xz;\n  iq = floor (q);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = 2. * fract (q) - 1.;\n  n.xz += 0.3 * q * q * sign (q);\n  return normalize (n);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, qq;\n  float d, db, dHit, s;\n  dHit = dstFar;\n  d = dHit;\n  q = p;\n  s = sign (q.x);\n  qq = q;\n  q.x = abs (q.x) - 3.;  q.z = mod (q.z + 2., 4.) - 2.;\n  d = PrCylDf (q.xzy, 0.25, 2.);\n  q.x *= s;\n  if (d < dHit) { dHit = d;  idObj = idCol;  qHit = q; }\n  q = p;  q.y -= -2.;  q.z = mod (q.z, 4.) - 2.;\n  d = PrCylDf (q.xzy, 0.5, 0.2);\n  q.y -= 0.3;\n  d = max (d, - PrCylDf (q.xzy, 0.45, 0.3));\n  if (d < dHit) { dHit = d;  idObj = idCol;  qHit = q; }\n  q.y -= -0.3;\n  d = PrCylDf (q.xzy, 0.45, 0.1);\n  if (d < dHit) { dHit = d;  idObj = idGrs;  qHit = q; }\n  q = p;  q.x = abs (q.x) - 3.5;\n  d = PrBox2Df (q, vec2 (0.1, 2.));\n  qq = q;\n  q.y -= 0.5;  q.z = abs (mod (q.z + 2., 4.) - 2.) - 0.75;\n  d = max (d, - PrBoxDf (q, vec3 (1., 0.5, 0.4)));\n  q.y -= 0.5;\n  db = PrBoxDf (q, vec3 (0.12, 0.03, 0.4));\n  q = qq;  q.y -= -0.45;  q.z = mod (q.z, 4.) - 2.;\n  d = max (d, - PrBoxDf (q, vec3 (1., 1.45, 0.4)));\n  q.y = abs (q.y) - 1.45;\n  db = min (db, PrBoxDf (q, vec3 (0.12, 0.03, 0.4)));\n  if (d < dHit) { dHit = d;  idObj = idWall;  qHit = q; }\n  if (db < dHit) { dHit = db;  idObj = idBeam;  qHit = q; }\n  q = p;  q.xy = abs (q.xy) - vec2 (3.5, 2.1);\n  d = PrBox2Df (q, vec2 (0.8, 0.05));\n  if (d < dHit) { dHit = d;  idObj = idBeam;  qHit = q; }\n  q = p;  q.y -= 2.25;  q.z = mod (q.z + 2., 4.) - 2.;\n  d = PrBoxDf (q, vec3 (3.25, 0.2, 0.25));\n  if (d < dHit) { dHit = d;  idObj = idBrg;  qHit = q; }\n  q = p;  q.y -= -2.3;\n  d = PrBox2Df (q, vec2 (3.5, 0.1));\n  if (d < dHit) { dHit = d;  idObj = idRoad;  qHit = q; }\n  q = p;\n  q.x = abs (q.x) - 3.35;  q.y -= 1.1;  q.z = mod (q.z, 4.) - 2.;\n  d = PrCapsDf (q, 0.03, 0.2);\n  if (d < dHit) { dHit = d;  idObj = idLamp;  qHit = q; }\n  q = p;  q.x = abs (q.x) - 3.6;\n  d = PrBox2Df (q, vec2 (0.1, 2.));\n  if (d < dHit) { dHit = d;  idObj = idLumW;  qHit = q; }\n  q = p;  q.y -= 2.5;\n  d = PrBox2Df (q, vec2 (3.5, 0.1));\n  if (d < dHit) { dHit = d;  idObj = idLumT;  qHit = q; }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec3 e = 1e-5 * vec3 (1., -1., 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjCol (vec3 n, float dHit)\n{\n  vec3 col;\n  float sn = Noisefv3a (210. * qHit);\n  if (idObj == idCol) col = vec3 (0.7, 0.6, 0.5);\n  else if (idObj == idBeam) col = vec3 (0.6, 0.7, 0.5);\n  else if (idObj == idBrg) col = vec3 (0.7, 0.8, 0.6);\n  else if (idObj == idRoad)\n     col = ChqPat (qHit * vec3 (3., 1., 3.), dHit) * vec3 (0.7, 0.7, 0.5);\n  else if (idObj == idWall)\n     col = ChqPat (qHit.yxz * vec3 (8., 1., 4.), dHit) * vec3 (0.8, 0.2, 0.2);\n  else if (idObj == idGrs) col = vec3 (0.1, 0.7, 0.2);\n  col *= 0.7 + 0.3 * sn;\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, bgCol, vn;\n  float dstHit, da, a;\n  int idObjT;\n  bgCol = 0.9 * vec3 (0.5, 0.6, 0.8);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit >= dstFar) col = bgCol;\n  else if (idObj == idLumW) col = vec3 (0.7, 0.6, 0.1) *\n       (1. - 0.5 * SmoothBump (0.1, 0.13, 0.01, mod (qHit.z + 0.125, 0.25))) *\n       (1. - 0.5 * SmoothBump (0.1, 0.13, 0.01, mod (qHit.y + 0.125, 0.25)));\n  else if (idObj == idLumT) col = vec3 (0.5, 0.6, 0.8);\n  else if (idObj == idLamp) col = vec3 (0.4, 0.9, 0.4);\n  else {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idCol) {\n      a = 0.5 - mod (12. * (atan (qHit.x, qHit.z) \/ (2. * pi) + 0.5), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a));\n    } else if (idObj == idRoad) {\n      vn = ChqNorm (qHit * vec3 (3., 1., 3.), vn);\n    } else if (idObj == idWall) {\n      vn = ChqNorm (qHit.yxz * vec3 (8., 1., 4.), vn.yxz);\n    }\n    col = ObjCol (vn, dstHit);\n    col = col * (0.5 + 0.5 * max (dot (vn, ltDir), 0.)) +\n       0.2 * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n  }\n  da = min (dstHit \/ dstFar, 1.);\n  col = mix (bgCol, col, exp (- 2. * da * da));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  vec2 uvs = uv;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  float beta, cPhi, w, cLen;\n  vec3 ro, rd, col;\n  ltDir = normalize (vec3 (1., 1., -1.));\n  w = (mPtr.z > 0.) ? clamp (0.5 + mPtr.y, 0.07, 1.) : 0.8;\n  beta = clamp (pow (w, 0.25), 0.1, 0.999);\n  ro = vec3 (0.);\n  ro.z += (0.3 + 1.7 * beta) * tCur;\n  uv += 0.5 * (Noisefv2 (2000. * uv) - 0.5) \/ canvas;\n  rd = normalize (vec3 (uv, 4.));\n  cPhi = (rd.z - beta) \/ (1. - rd.z * beta);\n  rd = vec3 (0., 0., cPhi) +\n     sqrt (1. - cPhi * cPhi) * normalize (rd - vec3 (0., 0., rd.z));\n  col = ShowScene (ro, rd);\n  cLen = 0.2;\n  uvs.y = abs (uvs.y - 0.96);\n  if (uvs.y < 0.02 && abs (uvs.x) < cLen) {\n    col = 0.3 * col + 0.5;\n    uvs.x += cLen - 0.01;\n    if (uvs.y < 0.015 && uvs.x > 0. && uvs.x < (2. * cLen - 0.02) *\n       (2. * beta - 1.)) col = vec3 (1., 0.9, 0.5);\n  }\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}