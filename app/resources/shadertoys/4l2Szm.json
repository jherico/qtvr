{"Shader":{"ver":"0.1","info":{"id":"4l2Szm","date":"1442523196","viewed":272,"name":"Droplet","username":"dr2","description":"Probably liquid mercury (change viewpoint using the mouse).","likes":3,"published":3,"flags":0,"tags":["raymarching","reflection","liquid"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Droplet\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat Length4 (vec2 p)\n{\n  p *= p;\n  p *= p;\n  return pow (p.x + p.y, 1. \/ 4.);\n}\n\nfloat Length6 (vec2 p)\n{\n  p *= p * p;\n  p *= p;\n  return pow (p.x + p.y, 1. \/ 6.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorus4Df (vec3 p, float ri, float rc)\n{\n  return Length4 (vec2 (length (p.xz) - rc, p.y)) - ri;\n}\n\nvec3 sunDir;\nfloat tCur;\nint idObj;\nconst float dstFar = 100.;\nconst int idRing = 1, idWat = 2;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y > 0.) {\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.);\n    sd = max (dot (rd, sunDir), 0.);\n    ro.xz += 2. * tCur;\n    f = Fbm2 (0.1 * (rd.xz * (50. - ro.y) \/ rd.y + ro.xz));\n    col += 0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    col = mix (col, vec3 (1.), clamp (0.8 * f * rd.y + 0.1, 0., 1.));\n  } else {\n    f = Fbm2 (0.4 * (ro.xz - ro.y * rd.xz \/ rd.y));\n    col = mix ((1. + min (f, 1.)) * vec3 (0.05, 0.1, 0.05),\n       vec3 (0.1, 0.15, 0.25), pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nfloat StoneRingDf (vec3 p, float r, float w, float n)\n{\n  return Length6 (vec2 (length (p.xz) - r, p.y)) -\n     w * (0.2 * pow (abs (sin (atan (p.x, p.z) * n)), 0.25) + 0.8);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, d, db, r, s, t;\n  bool up;\n  dMin = dstFar;\n  t = mod (tCur, 10.);\n  r = abs (sin (2. * pi * 0.1 * t));\n  q = p;\n  up = (t < 5.);\n  q.y -= up ? 2.5 : 0.55;\n  d = PrTorus4Df (q, 1., r);\n  q.y -= up ? -0.5 : 0.5;\n  d = max (PrCylDf (q.xzy, r, 0.5), - d);\n  if (up) d = max (d, q.y);\n  q.y -= up ? -0.75 : 0.2;\n  s = length (q.xz);\n  q.y -= 0.02 * cos (15. * s - 7. * tCur) * clamp (1. - s \/ 2.5, 0., 1.) *\n     clamp (s, 0., 1.);\n  db = PrCylDf (q.xzy, 2.5, 0.25);\n  d = up ? min (db, d) : max (db, - d);\n  if (d < dMin) { dMin = d;  idObj = idWat; }\n  q = p;\n  s = 1. - sqrt (max (1. - r * r, 0.));\n  q.y -= 1.2 + (up ? s : - s);\n  d = PrSphDf (q, 0.3);\n  d = max (d, 1. - p.y);\n  if (d < dMin) { dMin = d;  idObj = idWat; }\n  q = p;\n  q.y -= 1.3;\n  d = StoneRingDf (q, 2.8, 0.3, 16.);\n  if (d < dMin) { dMin = d;  idObj = idRing; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, vn;\n  float dstHit, dif, bk;\n  int idObjT;\n  const int nRefl = 3;\n  for (int k = 0; k < nRefl; k ++) {\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (dstHit < dstFar && idObj == idWat) {\n      ro += rd * dstHit;\n      rd = reflect (rd, VaryNf (ro, ObjNf (ro), 0.1));\n      ro += 0.02 * rd;\n    } else break;\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idRing) {\n      objCol = vec3 (0.8, 0.6, 0.2);\n      vn = VaryNf (40. * ro, vn, 2.);\n    }\n    bk = max (dot (vn, sunDir * vec3 (-1., 1., -1.)), 0.);\n    dif = max (dot (vn, sunDir), 0.);\n    col = objCol * (0.1 + 0.1 * bk + 0.8 * dif +\n       0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n  } else col = BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  sunDir = normalize (vec3 (1., 1., 1.));\n  float el = 0.6;\n  if (mPtr.z > 0.) el = clamp (el - mPtr.y, 0.25, 0.8);\n  float cEl = cos (el);\n  float sEl = sin (el);\n  mat3 vuMat = mat3 (1., 0., 0., 0., cEl, - sEl, 0., sEl, cEl);\n  vec3 rd = normalize (vec3 (uv, 4.)) * vuMat;\n  vec3 ro = vec3 (0., 0.7, -10.) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}