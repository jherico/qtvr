{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "MdX3Rr",
				"date": "1360495251",
				"viewed": 35519,
				"name": "Elevated",
				"username": "iq",
				"description": "A raymarched version of my demo Elevated from 2009",
				"likes": 183,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching",
					"distancefield",
					"terrain"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 17,
							"src": "\/presets\/tex12.png",
							"ctype": "texture",
							"channel": 0
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "#pragma vr\n// Created by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n// value noise, and its analytical derivatives\nvec3 noised( in vec2 x )\n{\n  vec2 p = floor(x);\n  vec2 f = fract(x);\n  vec2 u = f*f*(3.0-2.0*f);\n  float a = texture2D(iChannel0,(p+vec2(0.5,0.5))/256.0,-100.0).x;\n  float b = texture2D(iChannel0,(p+vec2(1.5,0.5))/256.0,-100.0).x;\n  float c = texture2D(iChannel0,(p+vec2(0.5,1.5))/256.0,-100.0).x;\n  float d = texture2D(iChannel0,(p+vec2(1.5,1.5))/256.0,-100.0).x;\n  return vec3(a+(b-a)*u.x+(c-a)*u.y+(a-b-c+d)*u.x*u.y,\n      6.0*f*(1.0-f)*(vec2(b-a,c-a)+(a-b-c+d)*u.yx));\n}\n\nconst mat2 m2 = mat2(0.8, -0.6, 0.6, 0.8);\n\nfloat terrain( in vec2 x )\n{\n  vec2 p = x*0.003;\n  float a = 0.0;\n  float b = 1.0;\n  vec2 d = vec2(0.0);\n  for( int i=0; i<6; i++ )\n  {\n    vec3 n = noised(p);\n    d += n.yz;\n    a += b*n.x/(1.0+dot(d,d));\n    b *= 0.5;\n    p = m2*p*2.0;\n  }\n\n  return 140.0*a;\n}\n\nfloat terrain2( in vec2 x )\n{\n  vec2 p = x*0.003;\n  float a = 0.0;\n  float b = 1.0;\n  vec2 d = vec2(0.0);\n  for( int i=0; i<14; i++ )\n  {\n    vec3 n = noised(p);\n    d += n.yz;\n    a += b*n.x/(1.0+dot(d,d));\n    b *= 0.5;\n    p = m2*p*2.0;\n  }\n\n  return 140.0*a;\n}\n\nfloat terrain3( in vec2 x )\n{\n  vec2 p = x*0.003;\n  float a = 0.0;\n  float b = 1.0;\n  vec2 d = vec2(0.0);\n  for( int i=0; i<4; i++ )\n  {\n    vec3 n = noised(p);\n    d += n.yz;\n    a += b*n.x/(1.0+dot(d,d));\n    b *= 0.5;\n    p = m2*p*2.0;\n  }\n\n  return 140.0*a;\n}\n\nfloat map( in vec3 p )\n{\n  return p.y - terrain(p.xz);\n}\n\nfloat interesct( in vec3 ro, in vec3 rd, in float tmin, in float tmax )\n{\n  float t = tmin;\n  for( int i=0; i<120; i++ )\n  {\n    float h = map( ro + t*rd );\n    if( h<(0.002*t) || t>tmax ) break;\n    t += 0.5*h;\n  }\n\n  return t;\n}\n\nfloat softShadow(in vec3 ro, in vec3 rd )\n{\n  // real shadows \n  float res = 1.0;\n  float t = 0.001;\n  for( int i=0; i<48; i++ )\n  {\n    vec3 p = ro + t*rd;\n    float h = map( p );\n    res = min( res, 16.0*h/t );\n    t += h;\n    if( res<0.001 ||p.y>200.0 ) break;\n  }\n  return clamp( res, 0.0, 1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float t )\n{\n  vec2 eps = vec2( 0.002*t, 0.0 );\n  return normalize( vec3( terrain2(pos.xz-eps.xy) - terrain2(pos.xz+eps.xy),\n          2.0*eps.x,\n          terrain2(pos.xz-eps.yx) - terrain2(pos.xz+eps.yx) ) );\n}\n\nvec3 camPath(float time) {\n  return 1100.0 * vec3(cos(0.0 + 0.23 * time), 0.0, cos(1.5 + 0.21 * time));\n}\n\nfloat fbm(vec2 p) {\n  float f = 0.0;\n  f += 0.5000 * texture2D(iChannel0, p / 256.0).x;\n  p = m2 * p * 2.02;\n  f += 0.2500 * texture2D(iChannel0, p / 256.0).x;\n  p = m2 * p * 2.03;\n  f += 0.1250 * texture2D(iChannel0, p / 256.0).x;\n  p = m2 * p * 2.01;\n  f += 0.0625 * texture2D(iChannel0, p / 256.0).x;\n  return f / 0.9375;\n}\n\nvoid main(void) {\n  vec2 xy = -1.0 + 2.0 * gl_FragCoord.xy / iResolution.xy;\n  vec2 s = xy * vec2(iResolution.x / iResolution.y, 1.0);\n\n  float time = iGlobalTime * 0.15 + 0.3 + 4.0 * iMouse.x / iResolution.x;\n\n  vec3 light1 = normalize(vec3(-0.8, 0.4, -0.3));\n\n  // camera position\n  vec3 ro = camPath(time) + iPos;\n  ro.y = max(terrain3(ro.xz) + 11.0, 150.0);\n  // camera ray    \n  vec3 rd = normalize(iDir); // normalize( s.x*cu + s.y*cv + 2.0*cw );\n\n  // bounding plane\n  float tmin = 2.0;\n  float tmax = 2000.0;\n  float maxh = 210.0;\n  float tp = (maxh - ro.y) / rd.y;\n  if (tp > 0.0) {\n    if (ro.y > maxh)\n      tmin = max(tmin, tp);\n    else\n      tmax = min(tmax, tp);\n  }\n\n  float sundot = clamp(dot(rd, light1), 0.0, 1.0);\n  vec3 col;\n  float t = interesct(ro, rd, tmin, tmax);\n  if (t > tmax) {\n    // sky      \n    col = vec3(0.3, .55, 0.8) * (1.0 - 0.8 * rd.y) * 0.9;\n    // sun\n    col += 0.25 * vec3(1.0, 0.7, 0.4) * pow(sundot, 5.0);\n    col += 0.25 * vec3(1.0, 0.8, 0.6) * pow(sundot, 64.0);\n    col += 0.2 * vec3(1.0, 0.8, 0.6) * pow(sundot, 512.0);\n    // clouds\n    vec2 sc = ro.xz + rd.xz * (1000.0 - ro.y) / rd.y;\n    col = mix(col, vec3(1.0, 0.95, 1.0), 0.5 * smoothstep(0.5, 0.8, fbm(0.0005 * sc)));\n    // horizon\n    col = mix(col, vec3(0.7, 0.75, 0.8), pow(1.0 - max(rd.y, 0.0), 8.0));\n  } else {\n    // mountains        \n    vec3 pos = ro + t * rd;\n\n    vec3 nor = calcNormal(pos, t);\n\n    // rock\n    float r = texture2D(iChannel0, 7.0 * pos.xz / 256.0).x;\n    col = (r * 0.25 + 0.75) * 0.9 * mix(vec3(0.08, 0.05, 0.03), vec3(0.10, 0.09, 0.08), texture2D(iChannel0, 0.00007 * vec2(pos.x, pos.y * 48.0)).x);\n    col = mix(col, 0.20 * vec3(0.45, .30, 0.15) * (0.50 + 0.50 * r), smoothstep(0.70, 0.9, nor.y));\n    col = mix(col, 0.15 * vec3(0.30, .30, 0.10) * (0.25 + 0.75 * r), smoothstep(0.95, 1.0, nor.y));\n\n    // snow\n    float h = smoothstep(55.0, 80.0, pos.y + 25.0 * fbm(0.01 * pos.xz));\n    float e = smoothstep(1.0 - 0.5 * h, 1.0 - 0.1 * h, nor.y);\n    float o = 0.3 + 0.7 * smoothstep(0.0, 0.1, nor.x + h * h);\n    float s = h * e * o;\n    col = mix(col, 0.29 * vec3(0.62, 0.65, 0.7), smoothstep(0.1, 0.9, s));\n\n    // lighting        \n    float amb = clamp(0.5 + 0.5 * nor.y, 0.0, 1.0);\n    float dif = clamp(dot(light1, nor), 0.0, 1.0);\n    float bac = clamp(0.2 + 0.8 * dot(normalize(vec3(-light1.x, 0.0, light1.z)), nor), 0.0, 1.0);\n    float sh = 1.0;\n    if (dif >= 0.0001)\n      sh = softShadow(pos + light1 * 20.0, light1);\n\n    vec3 lin = vec3(0.0);\n    lin += dif * vec3(7.00, 5.00, 3.00) * vec3(sh, sh * sh * 0.5 + 0.5 * sh, sh * sh * 0.8 + 0.2 * sh);\n    lin += amb * vec3(0.40, 0.60, 0.80) * 1.2;\n    lin += bac * vec3(0.40, 0.50, 0.60);\n    col *= lin;\n\n    // fog\n    float fo = 1.0 - exp(-0.000001 * t * t);\n    vec3 fco = 0.7 * vec3(0.5, 0.7, 0.9) + 0.1 * vec3(1.0, 0.8, 0.5) * pow(sundot, 4.0);\n    col = mix(col, fco, fo);\n\n    // sun scatter\n    col += 0.3 * vec3(1.0, 0.8, 0.4) * pow(sundot, 8.0) * (1.0 - exp(-0.002 * t));\n  }\n\n  // gamma\n  col = pow(col, vec3(0.4545));\n\n  // vignetting   \n  col *= 0.5 + 0.5 * pow((xy.x + 1.0) * (xy.y + 1.0) * (xy.x - 1.0) * (xy.y - 1.0), 0.1);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}