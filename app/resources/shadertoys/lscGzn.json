{"Shader":{"ver":"0.1","info":{"id":"lscGzn","date":"1447658527","viewed":390,"name":"Dog","username":"445615105","description":"use Distance Field to draw a dog. thx @candycat","likes":2,"published":3,"flags":0,"tags":["distancefield"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float sdfCircle(vec2 center, float radius, vec2 coord) {\n    vec2 offset = coord - center;\n\n    return sqrt((offset.x * offset.x) + (offset.y * offset.y)) - radius;\n}\n\nfloat sdfEllipse(vec2 center, float a, float b, vec2 coord) {\n    float a2 = a * a;\n    float b2 = b * b;\n    return (b2 * (coord.x - center.x) * (coord.x - center.x) + a2 * (coord.y - center.y) * (coord.y - center.y) - a2 * b2)\/(a2 * b2);\n}\n\nfloat sdfLine(vec2 p0, vec2 p1, float width, vec2 coord) {\n    vec2 dir0 = p1 - p0;\n    vec2 dir1 = coord - p0;\n    float h = clamp(dot(dir0, dir1)\/dot(dir0, dir0), 0.0, 1.0);\n    return (length(dir1 - dir0 * h) - width * 0.5);\n}\n\nvec4 render(float d, vec3 color, float stroke) {\n    float anti = fwidth(d) * 1.0;\n    vec4 colorLayer = vec4(color, 1.0 - smoothstep(-anti, anti, d));\n    if (stroke < 0.000001) {\n        return colorLayer;\n    }\n\n    vec4 strokeLayer = vec4(vec3(0.05, 0.05, 0.05), 1.0 - smoothstep(-anti, anti, d - stroke));\n    return vec4(mix(strokeLayer.rgb, colorLayer.rgb, colorLayer.a), strokeLayer.a);\n}\n\nfloat sdfUnion( const float a, const float b ) {\n    return min(a, b);\n}\n\nfloat sdfDifference( const float a, const float b) {\n    return max(a, -b);\n}\n\nfloat sdfIntersection( const float a, const float b ) {\n    return max(a, b);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime;\n    float size = min(iResolution.x, iResolution.y);\n    float pixSize = 1.0 \/ size;\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float stroke = pixSize * 0.5;\n    vec2 center = vec2(0.5, 0.5 * iResolution.y\/iResolution.x);\n\tfloat bottom = 0.08;\n    float handleWidth = 0.02;\n    float handleRadius = 0.1;\n    float index = mod(ceil(time\/1.0),5.0);\n\tfloat d = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius, uv);\n\tif (index == 0.0)\n\t{\n        float c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = uv.y - 0.5;\n        d = sdfIntersection(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n\t\td = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d, c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.3, 0.9), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfLine(vec2(0.796, 0.5), vec2(0.796, 0.7), handleWidth, uv);\n        d = sdfUnion(d,c);\n\t}\n\telse if (index == 1.0)\n\t{\n        float c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = uv.y - 0.5;\n        d = sdfIntersection(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n\t\td = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d, c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.3, 0.9), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.85-handleRadius+0.3*handleWidth, 0.75), handleRadius\/2.2, uv);\n        d = sdfDifference(d,c);\n        c = sdfLine(vec2(0.796, 0.5), vec2(0.796, 0.7), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfLine(vec2(0.2, 0.8), vec2(0.7, 0.8), handleWidth, uv);\n        d = sdfUnion(d,c);\n\t}\n\telse if (index == 2.0)\n\t{\n        float c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = uv.y - 0.5;\n        d = sdfIntersection(d,c);\n        float e = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius, uv);\n        float f = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius-handleWidth, uv);\n        e = sdfDifference(e, f);\n        f = 0.8 - uv.y;\n        e = sdfIntersection(e,f);\n        d = sdfUnion(d,e);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n\t\td = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d, c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.3, 0.9), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.85-handleRadius+0.3*handleWidth, 0.75), handleRadius\/2.2, uv);\n        d = sdfDifference(d,c);\n        c = sdfLine(vec2(0.796, 0.5), vec2(0.796, 0.7), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.58-handleRadius+0.3*handleWidth, 0.72), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.85), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfLine(vec2(0.2, 0.8), vec2(0.7, 0.8), handleWidth, uv);\n        d = sdfUnion(d,c);\n\t}\n\telse if (index == 3.0)\n\t{\n        float c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = uv.y - 0.5;\n        d = sdfIntersection(d,c);\n        float e = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius, uv);\n        float f = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius-handleWidth, uv);\n        e = sdfDifference(e, f);\n        f = 0.8 - uv.y;\n        e = sdfIntersection(e,f);\n        d = sdfUnion(d,e);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n\t\td = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d, c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.3, 0.9), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.85-handleRadius+0.3*handleWidth, 0.75), handleRadius\/2.2, uv);\n        d = sdfDifference(d,c);\n        c = sdfLine(vec2(0.796, 0.5), vec2(0.796, 0.7), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.58-handleRadius+0.3*handleWidth, 0.72), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.85), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfLine(vec2(0.2, 0.8), vec2(0.7, 0.8), handleWidth, uv);\n        d = sdfUnion(d,c);\n        float g = sdfCircle(vec2(0.4-handleRadius+0.3*handleWidth, 0.85), handleRadius, uv);\n        float h = sdfCircle(vec2(0.4-handleRadius+0.3*handleWidth, 0.85), handleRadius-handleWidth, uv);\n        g = sdfDifference(g, h);\n        h = uv.x - 0.3;\n        g = sdfIntersection(g,h);\n        d = sdfUnion(d,g);\n        float i = sdfCircle(vec2(0.64-handleRadius+0.3*handleWidth, 0.56), handleRadius, uv);\n        float j = sdfCircle(vec2(0.64-handleRadius+0.3*handleWidth, 0.56), handleRadius-handleWidth, uv);\n        i = sdfDifference(i, j);\n        j = uv.y - 0.57;\n        i = sdfIntersection(i,j);\n        j = 0.55 - uv.x;\n        i = sdfIntersection(i,j);\n        d = sdfUnion(d,i);\n\t}\n\telse if (index == 4.0)\n\t{\n        float c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.5), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = uv.y - 0.5;\n        d = sdfIntersection(d,c);\n        float e = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius, uv);\n        float f = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.8), handleRadius-handleWidth, uv);\n        e = sdfDifference(e, f);\n        f = 0.8 - uv.y;\n        e = sdfIntersection(e,f);\n        d = sdfUnion(d,e);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n\t\td = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.3-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d, c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.3, 0.9), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.55-handleRadius+0.3*handleWidth, 0.7), handleRadius-handleWidth, uv);\n        d = sdfDifference(d,c);\n        c = sdfCircle(vec2(0.8-handleRadius+0.3*handleWidth, 0.7), handleRadius, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.85-handleRadius+0.3*handleWidth, 0.75), handleRadius\/2.2, uv);\n        d = sdfDifference(d,c);\n        c = sdfLine(vec2(0.796, 0.5), vec2(0.796, 0.7), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.58-handleRadius+0.3*handleWidth, 0.72), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfCircle(vec2(0.66-handleRadius+0.3*handleWidth, 0.85), handleRadius\/4.0, uv);\n        d = sdfUnion(d,c);\n        c = sdfLine(vec2(0.2, 0.8), vec2(0.7, 0.8), handleWidth, uv);\n        d = sdfUnion(d,c);\n        float g = sdfCircle(vec2(0.4-handleRadius+0.3*handleWidth, 0.85), handleRadius, uv);\n        float h = sdfCircle(vec2(0.4-handleRadius+0.3*handleWidth, 0.85), handleRadius-handleWidth, uv);\n        g = sdfDifference(g, h);\n        h = uv.x - 0.3;\n        g = sdfIntersection(g,h);\n        d = sdfUnion(d,g);\n        float i = sdfCircle(vec2(0.64-handleRadius+0.3*handleWidth, 0.56), handleRadius, uv);\n        float j = sdfCircle(vec2(0.64-handleRadius+0.3*handleWidth, 0.56), handleRadius-handleWidth, uv);\n        i = sdfDifference(i, j);\n        j = uv.y - 0.57;\n        i = sdfIntersection(i,j);\n        j = 0.55 - uv.x;\n        i = sdfIntersection(i,j);\n        d = sdfUnion(d,i);\n        c = sdfLine(vec2(0.7, 0.4), vec2(0.6, 0.1), handleWidth, uv);\n        d = sdfUnion(d,c);\n        c = sdfLine(vec2(0.3, 0.6), vec2(0.1, 0.1), handleWidth, uv);\n        d = sdfUnion(d,c);\n\t}   \n    vec4 layer0 = render(d, vec3(0.404, 0.298, 0.278), stroke);\n\tfragColor = layer0;\n\tfragColor.rgb = pow(fragColor.rgb, vec3(1.6));\n}","name":"","description":"","type":"image"}]}}