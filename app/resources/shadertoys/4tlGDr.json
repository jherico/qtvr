{"Shader":{"ver":"0.1","info":{"id":"4tlGDr","date":"1420997466","viewed":674,"name":"timefunc plotter","username":"wonko_rt","description":"a simple plotter for timefunctions with a grid and something like a frame","likes":0,"published":3,"flags":0,"tags":["function","plot","timefunction"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by wonko_rt\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ a simple plotter for timefunctions with a grid and something like a frame\n\/\/ maybe the maths suck, but it seems to work\n\nconst float PI2 = 1.5707963267948966192313216916398;\nconst float PI = 3.1415926535897932384626433832795;\nconst float TWOPI = 6.283185307179586476925286766559;\n\n\nfloat func(float x)\n{\n    const float t=4.;\n    float tm = abs(mod(iGlobalTime, t)-t\/2.);\n    tm *= tm;\n    return sin(x*(1.+tm));\n}\n\nfloat falloff(float d, float mx)\n{\n    return min(mx,1.\/(d*d*d*d*10000000000.+.00001));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy *2. - 1.;\n    uv*=1.06;\n    \n    vec2 uvf = uv;\n    uvf.x *= TWOPI;\n\t\n    vec3 iy = vec3(0.);\n    \n    \/\/ grid\n    const int gx=4;\n    const int gy=4;\n    vec2 vgxy = vec2(1.\/float(gx), 1.\/float(gy));\n    for (int i=-gx; i<=gx; i++)\n    \tfor (int j=-gy; j<=gy; j++)\n        {\n            vec2 iuv = vec2(i, j) * vgxy;\n\n            float auxy = uv.x*uv.x*uv.y*uv.y*100.;\n            float gi = clamp(1.-auxy, .4, .9);\n            iy = max(iy, falloff(abs(iuv.x-uv.x), gi));\n            iy = max(iy, falloff(abs(iuv.y-uv.y), gi));\n        }\n\n    \/\/ func\n    vec3 f1col = vec3(.4, .6, .8);\n    float y = func(uvf.x);\n    float d = (y - uvf.y)\/2.;\n    float f = falloff(d, 1.);\n    iy = vec3(mix(iy.x,f*f1col.x,f), mix(iy.y,f*f1col.y,f), mix(iy.z,f*f1col.z,f));\n    \n    \/\/ border\n    vec3 bcol = vec3(.2,.6,.2);\n    const float br1=.9;\n    const float bw=1.4;\n    float dd = abs(pow(log(abs(uv.x*br1))*log(abs(uv.y*br1)), .13)*1.6);\n    float b = clamp(0.,1.,bw-pow(dd,8.));\n    iy = max(iy, vec3(bcol*b));\n    \n    fragColor = vec4(vec3(iy),1.);\n}\n","name":"","description":"","type":"image"}]}}