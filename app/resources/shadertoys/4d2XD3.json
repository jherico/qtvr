{"Shader":{"ver":"0.1","info":{"id":"4d2XD3","date":"1433584725","viewed":772,"name":"My First Distance-Field Raymarch","username":"ddoodm","description":"I finished this a good while ago, and figured that I ought to make it public. Thanks for visiting!<br\/>(Just a learning experiment <img src=\"\/img\/emoticonHappy.png\"\/> )<br\/>I borrowed a good chunk of code from Joates and iq.","likes":3,"published":3,"flags":0,"tags":["raymarcherraymarcherdistancefieldfunction"],"hasliked":0},"renderpass":[{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":7,"src":"\/presets\/tex06.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ DDOODM's first raymarched distance field!\n\/\/ Derived from:\n\/\/ \"monkey saddle by joates (Nov-2014)\"\n\/\/\n\/\/ Deinyon Davies & Joates, November 2014\n\n\/\/ Thank you, IQ!\nvec3 hash3( float n ) { return fract(sin(vec3(n,n+1.0,n+2.0))*43758.5453123); }\n\n\/\/#define IS_BOXED\nconst float size = 0.45;\n\n\/\/ iq's Smooth Minimum\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )\/k;\n}\n\nfloat map( in vec3 p )\n{\n    float plane = p.y + 0.5 + 0.025*(sin(p.x*10.0+sin(p.z*14.0))+cos(p.z*10.0+sin(p.x*20.0)));\n    plane = max(plane, length(p + vec3(0.0,0.5,0.0)) - 3.0);\n    \n    float d1 = length(p) - size;\n    \n    float d2 = max(p.y + p.x\/2.0, p.y - p.x\/2.0);\n    \n    float d3 = length(p) - size * 0.85;\n    \n    float d4 = length(p - vec3(0.0, 0.25*cos(iGlobalTime)-0.25, 0.0)) - size * 0.25*cos(iGlobalTime*1.2);\n\n    float hem = max(d1,d2);\n    \n    float bow = max(hem, -d3);\n    \n    float metabowl = smin(d4, bow, 8.0);\n    \n    return min(metabowl, plane);\n}\n\nvec3 calcNormal( in vec3 p ) {\n    vec2 e = vec2( 0.01, 0.0 );\n    return normalize( vec3( map( p + e.xyy ) - map( p - e.xyy ),\n                            map( p + e.yxy ) - map( p - e.yxy ),\n                            map( p + e.yyx ) - map( p - e.yyx ) ) );\n}\n\n\/\/ Thank you, mu6k!\nfloat amb_occ(vec3 p)\n{\n\tfloat acc=0.0;\n\t#define ambocce 0.1\n\n\tacc+=map(p+vec3(-ambocce,-ambocce,-ambocce));\n\tacc+=map(p+vec3(-ambocce,-ambocce,+ambocce));\n\tacc+=map(p+vec3(-ambocce,+ambocce,-ambocce));\n\tacc+=map(p+vec3(-ambocce,+ambocce,+ambocce));\n\tacc+=map(p+vec3(+ambocce,-ambocce,-ambocce));\n\tacc+=map(p+vec3(+ambocce,-ambocce,+ambocce));\n\tacc+=map(p+vec3(+ambocce,+ambocce,-ambocce));\n\tacc+=map(p+vec3(+ambocce,+ambocce,+ambocce));\n\treturn 0.5+acc;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tvec2 uv = -1.0 + 2.0*(fragCoord.xy\/iResolution.xy);\n\tuv.x *= iResolution.x\/iResolution.y;\n\n\tfloat time = iGlobalTime*0.1;\n\n    \/\/ view origin & direction\n\tvec3 ro = vec3( size );\n\tvec3 tp = vec3( 0.0 );\n    tp.y = -0.25*size;\n\n    \/\/ camera orbit\n    float m = iMouse.x\/iResolution.x * 6.0;\n    ro.x = cos(time+m)*length(ro);\n    ro.z = sin(time+m)*length(ro);\n    ro.y = iMouse.y\/iResolution.y;\n\n    vec3 lit = vec3( 200.0, 75.0, 200.0 );\n    vec3 ldir = normalize(lit);\n    vec3 col = vec3( 0.0 );\n    \n    \/\/ camera view\n\tvec3 cw = normalize( tp-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw, cp) );\n\tvec3 cv = normalize( cross(cu, cw) );\n\tvec3 rd = normalize( uv.x*cu + uv.y*cv + 1.5*cw );\n\n    float tmax = 200.0;\n    float h = 1.0;\n    float t = 0.0;\n    float iterations = 0.0;\n    for( int i = 0; i < 100; i++ ) {\n        if( h < 0.0001 || t > tmax ) break;\n        h = map( ro + t*rd );\n        t += h;\n        iterations = float(i);\n    }\n\n    if ( t < tmax ) {\n        vec3 pos = ro + t*rd;\n       \tvec3 nor = calcNormal( pos );\n        vec3 viw = normalize(-pos);\n        \n        \/\/ Ambient\n       \tcol = vec3( 0.45, 0.23, 0.2 );\n\n        \/\/ Diffuse\n       \tcol += vec3( 1.3, 0.5, 0.2 ) * clamp( dot( nor, ldir ), 0.0, 1.0 );\n        if(pos.y > -0.4)\n        {\n        \tcol *= texture2D(iChannel0, pos.xz * 4.0).xyz;\n            \n            \/\/ Reflection\n        \t\/\/col += 0.2 * textureCube(iChannel2, -cw-viw).xyz;\n            \n        \t\/\/ Specular\n        \tcol += vec3( 0.5 ) * pow( clamp( dot( -reflect(nor, rd), ldir), 0.0, 1.0 ), 255.0);\n        }\n        else\n        {\n            col *= texture2D(iChannel1, pos.xz).xyz;\n            \n            \/\/ Fog?\n            col *= clamp(2.5 - length(pos), 0.0, 1.0);\n        }\n        \n        \/\/ Sky light\n       \tcol += vec3( 0.0, 0.1, 0.18 ) * clamp( nor.y, 0.0, 1.0 );\n        \n        \/\/ AO\n        col *= amb_occ(ro + (t-0.1)*rd);\n    }\n    else {\n        \/\/ Hit the sky\n        col = vec3( 0.30, 0.15, 0.1 ) * 0.7;\n        col += clamp(vec3( 0.9, 0.4, 0.3 ) * dot(rd, ldir), 0.0, 1.0);\n        col += clamp(vec3( 0.0, 0.1, 0.18 ) * dot(rd, -ldir), 0.0, 1.0);\n    }\n    \n    \/\/ Gamma\n    col = pow(col, vec3(0.8));\n    \n    \/\/ Contrast\n    col = smoothstep( 0.0, 1.0, col );\n    \n    \/\/ Vigneting\n    vec2 q = fragCoord.xy\/iResolution.xy;\n    col *= 0.2 + 0.8*pow(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y),0.2);\n    \n    \/\/ Dithering\n    \/\/col += (1.0\/255.0)*hash3(q.x+13.0*q.y);\n    \n    col += vec3(0.4, 0.3, 0.3) * iterations\/75.0;\n        \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}