{"Shader":{"ver":"0.1","info":{"id":"lst3zf","date":"1452116698","viewed":291,"name":"IFS Fern","username":"iq","description":"This must have been one of the first fractals I coded (copied from a magazine) in 1994. We couldn't make these in Shadertoy <a href=\"https:\/\/www.shadertoy.com\/view\/lss3zs\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/lss3zs<\/a>. We cannot make them properly yet, but it's better now.","likes":10,"published":3,"flags":32,"tags":["2d","fractal","ifs","classic"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord\/iResolution.xy;\n    \n    vec4 data = texture2D( iChannel0, p );\n    \n    float f = data.x;\n    float e = data.y \/ data.w;\n    \n    vec3 col = vec3(1.0-f) * (1.0-vec3(0.2,0.3,0.6)*e);\n    \n    col *= 0.5 + 0.5*pow( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y), 0.2 );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat hash( in float n )\n{ \n    return fract(sin(n)*987.654321); \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec4 data = texture2D( iChannel0, uv, -100.0 );\n    \n    if( iFrame==0 ) data = vec4(0.0);\n    \n    uv = uv*12.0 - vec2(5.5,0.8);\n    \n    float px = 12.0\/iResolution.x;\n    \n    vec2 z = uv;\n    \n    float p = hash(iGlobalTime + fragCoord.x*113.1 + fragCoord.y*7.3 );\n    \n    float d = data.x;\n    float e = data.y;\n    for( int i=0; i<256; i++ )\n    {\n        \/\/ generate a random number (this should be uniform, but ....)\n        p = fract( p + cos(p*6283.1) );\n            \n             if( p < 0.01 ) z = vec2(  0.0, 0.16*z.y );\n        else if( p < 0.84 ) z = vec2(  0.85*z.x + 0.04*z.y, -0.04*z.x + 0.85*z.y + 1.60 );\n        else if( p < 0.92 ) z = vec2(  0.20*z.x - 0.26*z.y,  0.23*z.x + 0.22*z.y + 1.60 );\n        else                z = vec2( -0.15*z.x + 0.28*z.y,  0.26*z.x + 0.24*z.y + 0.44 );\n            \n        if( i<32 ) continue;\n            \n        float r = length(uv-z);\n        d  = max( d, 1.0-smoothstep( 0.5*px, 1.0*px, r ) );\n        e += exp(-100.0*r*r);\n    }\n    \n    fragColor = vec4( d, e, 0.0, data.w + 1.0 );\n}","name":"","description":"","type":"buffer"}]}}