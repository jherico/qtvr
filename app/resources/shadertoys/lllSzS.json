{"Shader":{"ver":"0.1","info":{"id":"lllSzS","date":"1437677380","viewed":1036,"name":"All States of Water","username":"KK","description":"Shader made for Warsztat.GD compo.","likes":4,"published":3,"flags":0,"tags":["warsztat"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\nfloat n(vec2 pos)\n{\n    vec2 ip = floor(pos);\n    vec2 d = pos - ip;\n    \/\/ 6x5 - 15x4 + 10x3\n    d *= d*d*(10.0+d*(6.0*d-15.0));\n    pos = ip + d;\n    pos += 0.5;\n    pos \/= iChannelResolution[0].xy;\n    return texture2D(iChannel0,pos.xy).x*2.0-1.0;\n}\n\nfloat n3(vec3 pos)\n{\n    float ip = floor(pos.z);\n    float  d = pos.z - ip;\n    d *= d*d*(10.0+d*(6.0*d-15.0));\n    pos.xy += 100.0*ip;\n    return mix(n(pos.xy),n(pos.xy+100.0),d);\n}\n\nfloat nt(vec2 pos,float t)\t{ return n3(vec3(pos,t)); }\n\nvec2 cosin(float t)\n{\n    return vec2(cos(t),sin(t));\n}\n\nfloat water(vec3 pos)\n{\n    float t = iGlobalTime*2.0;\n    float d = pos.z;\n    pos.xy *= 0.8;\n    d -= n(pos.xy\/0.2 + t*4.0*vec2(-1.8,0.1))\/40.0;\n    d -= n(pos.xy\/0.7 + t*3.0*vec2(0.1,0.4) + cosin(t*1.1))\/12.0;\n    d -= n(pos.xy\/1.0 - t*2.5 + cosin(t\/4.1))\/8.0;\n    d -= n(pos.xy\/2.1 + t\/2.0 + cosin(t\/2.0))\/4.0;\n    d -= n(pos.xy\/4.0 +t*vec2(-1,0.5)\/2.0)\/2.0;\n    d -= n(pos.xy\/16.0 +t*vec2(1,-0.5)\/2.0)\/1.0;\n    return d;\n}\n\nfloat fracno(vec2 pos)\n{\n    float v = 0.0;\n    v += abs(n(pos.xy\/1.0))*1.0;\n    v += abs(n(pos.xy\/2.0))*2.0;\n    v += abs(n(pos.xy\/4.0))*4.0;\n    return v;\n}\n\nfloat ice(vec3 pos)\n{\n    vec2 pp = normalize(pos.xy);\n    float r = n(pp*4.0)*0.3 + n(pp*410.0)*0.05;\n    float d = length(pos.xy) - 10.0 - r;\n    float h = pos.z-2.5;\n    float l = length(pos.xy);\n    h += sin(iGlobalTime*2.0)*0.4;\n    h -= n(pos.xy\/0.02)\/50.0;\n    \/\/h -= n(pos.xy\/0.07)\/20.0;\n    h += fracno(pos.xy\/2.0)*l*l*0.007;\n    d = max(d,h);\n    return d;\n}\n\nvec4 Fn(vec3 pos)\n{\n    float d = water(pos);\/\/pos.z + n(pos.xy)*0.5;\n    float di = ice(pos);\n    if(di<d) return vec4(0.0,1.0,0.0,di);\n\n    return vec4(1.0,0.0,0.0,d);\n}\n\nvec3 nm(vec3 pos)\n{\n    vec3 normal;\n    vec2 e = vec2(0.05+length(pos)*0.0005,0.0);\n    normal.x = Fn(pos+e.xyy).w - Fn(pos-e.xyy).w;\n    normal.y = Fn(pos+e.yxy).w - Fn(pos-e.yxy).w;\n    normal.z = Fn(pos+e.yyx).w - Fn(pos-e.yyx).w;\n    return normalize(normal);\n}\n\nvoid trace(vec3 tpos,vec3 tdir,out vec3 _pos,out vec4 mt)\n{\n\tfloat g = 0.0;\n    mt = vec4(0,0,0,0);\n\n\tfor(int i=0;i<150;i++)\n\t{\n\t\tif(g>1000.0) break;\n\t\tmt = Fn(tpos);\n\t\tif(mt.w<0.002) break;\n\t\ttpos += mt.w*tdir;\n\t\tg += mt.w;\n\t}\n    _pos = tpos;\n}\n\nfloat cloud(vec2 p)\n{\n    p *= 1.5;\n    float t = iGlobalTime*0.3;\n    float c = 0.0;\n    c += n(p\/4.0 + t*vec2(-0.3,1))*4.0;\n    p += t*vec2(0.3,1)*4.0;\n    c += n(p\/2.0)*2.0;\n    c += n(p*1.0)\/1.0;\n    c += n(p*2.0)\/2.0;\n    c += n(p*4.0)\/4.0;\n    c += n(p*8.0)\/8.0;\n    return max(c*0.5,0.0);\n}\n\nvec3 sky(vec3 dir)\n{\n    dir = normalize(dir);\n    dir.z = abs(dir.z);\n\tvec3 c0 = mix(vec3(0.3,0.5,0.9),vec3(0.05,0.1,0.4),sqrt(dir.z*1.5));\n    \n    vec2 cpos = dir.xy\/dir.z;\n    float cl = cloud(cpos);\n    float cl1 = cloud(cpos-0.1*vec2(-1,-1));\n    cl1 = clamp(cl1,0.0,1.0);\n    float lit = 1.0 - cl1;\n    float shade = 0.5\/(0.5+cl*0.5);\n    vec3 ccol = mix(vec3(0.2,0.22,0.3)*shade,vec3(0.4,0.3,0.3),lit);\n    \n    c0 = mix(c0,ccol,clamp(cl,0.0,1.0));\n    \n    return c0;\n}\n\nvec4 getcolor(vec3 pos,vec3 dir,vec4 d)\n{\n\tif(length(pos)>900.0)\n        return vec4(sky(dir),0.0);\n\n    vec3 ld = normalize(vec3(4,-2,4));\n    vec3 normal = nm(pos);\n    vec4 c = vec4(clamp(dot(normal,ld),0.0,1.0));\n    if(d.y>0.5) return c*vec4(1.2,1.2,1.3,0.0);\n    return c*vec4(0.02,0.04,0.05,0.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 vpos = fragCoord.xy \/ iResolution.xy * 2.0 - 1.0;\n\tvpos.x *= iResolution.x\/iResolution.y;\n\tvpos *= .8;\n\t\n    \n\tvec2 mpos = iMouse.xy \/ iResolution.xy*2. - 1.;\n\tvec3 front = normalize(vec3(-1.,-mpos.x,mpos.y-.5));\n    \n    \n\t\/\/front = normalize(vec3(-1,-0.7,0));\n    front.xy = cosin(iGlobalTime*0.2);\n    front.z = -(sin(iGlobalTime*0.3)*.5+.5)*0.6;\n    front = normalize(front);\n\tvec3 up = vec3(0,0,1);\n\tvec3 right = cross(up,front);\n\t\/\/pos = vec3(1,-2,1.2)-front*4.0;\n    vec3 pos = vec3(0,0,2.2)-front*24.0;\n\n\tvec3 vdir = normalize(front + vpos.x*right + vpos.y*up);\n\tvec3 tdir = normalize(vdir);\n\tvec3 tpos = pos;\n\tvec4 c = vec4(sky(tdir)*0.3,0.0);\n\tfloat m=0.0;\n    vec4 d=vec4(0,0,0,0);\n\tvec3 lpos = vec3(10,10,0);\n\n\t\/\/fragColor = pow(c,vec4(1.0\/2.2));\n    \/\/return;\n    \n    trace(tpos,tdir,tpos,d);\n\n\tif(d.w<0.002)\n\t{\n\t\tc = getcolor(tpos,tdir,d);\n        \n        \/\/if(d.x>0.5)\n        {\n\t\t    vec3 normal = nm(tpos);\n            vec3 tpos2 = tpos + normal*0.02;\n            vec3 tdir2 = reflect(tdir,normal);\n            vec4 d2;\n            trace(tpos2,tdir2,tpos2,d2);\n            \n            float fres = pow(1.0 - clamp(dot(normal,-tdir),0.0,1.0),5.0);\n            c += getcolor(tpos2,tdir2,d2)*mix(0.04,1.0,fres);\n        }\n\t}\n    \n\tif(length(tpos)>900.0)\n\t{\n\t\tc = vec4(sky(tdir),0.0);\n\t}\n\n\t\n\tfragColor = pow(c,vec4(1.0\/2.2));\n}\n","name":"","description":"","type":"image"}]}}