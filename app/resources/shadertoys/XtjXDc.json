{"Shader":{"ver":"0.1","info":{"id":"XtjXDc","date":"1446994627","viewed":387,"name":"06","username":"yiwenl","description":"06<br\/>Diffuse \/ Specular Function from hughsk : https:\/\/www.shadertoy.com\/view\/4tjXDV","likes":2,"published":3,"flags":0,"tags":["raymarch"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float time = iGlobalTime*2.0;\n\n\/\/\tTOOLS\nvec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\n\/\/\tGEOMETRY\nfloat sphere(vec3 pos, float radius) {\treturn length(pos) - radius;\t}\nfloat displacement(vec3 p) {\treturn sin(2.0*p.x+time*.983265)*sin(2.0*p.y+time*.57834)*sin(1.0*p.z+time*0.857834) * .5 + .5;\t}\nfloat box(vec3 pos, vec3 size) {\treturn length(max(abs(pos) - size, 0.0)); }\n\nfloat substract(float d1, float d2) {\treturn max(-d1,d2);\t}\nfloat intersection(float d1, float d2) { return max(d1, d2);\t}\n\nconst float PI      = 3.141592657;\nconst float thickness = .05;\nconst float gap = .15;\nconst float numLayers = 7.0;\nconst float diff = .3;\nconst float sphereRadius = 3.0;\n\nfloat map(vec3 pos) {\n\tpos.yz = rotate(pos.yz, -PI*.15+sin(time*.5)*.05);\n\tpos.xz = rotate(pos.xz, -PI*.15+cos(time*.5)*.05);\n\tfloat d = sphere(pos, sphereRadius);\n\n\tfloat r = length(pos.xy);\n\tfloat a = atan(pos.y, pos.x);\n\tfloat dOffset = cos( (a+r*6.0)*1.0-time*.5) * .5 + .5;\n\tdOffset *= 1.0-r\/sphereRadius;\n\td += dOffset * .2;\n\t\n\treturn d;\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\n\/\/\tLIGHTING\n\nfloat gaussianSpecular(vec3 lightDirection, vec3 viewDirection, vec3 surfaceNormal, float shininess) {\n\tvec3 H = normalize(lightDirection + viewDirection);\n\tfloat theta = acos(dot(H, surfaceNormal));\n\tfloat w = theta \/ shininess;\n\treturn exp(-w*w);\n}\n\nfloat orenNayarDiffuse(vec3 lightDirection,\tvec3 viewDirection,\tvec3 surfaceNormal,\tfloat roughness, float albedo) {\n  float LdotV = dot(lightDirection, viewDirection);\n  float NdotL = dot(lightDirection, surfaceNormal);\n  float NdotV = dot(surfaceNormal, viewDirection);\n\n  float s = LdotV - NdotL * NdotV;\n  float t = mix(1.0, max(NdotL, NdotV), step(0.0, s));\n\n  float sigma2 = roughness * roughness;\n  float A = 1.0 + sigma2 * (albedo \/ (sigma2 + 0.13) + 0.5 \/ (sigma2 + 0.33));\n  float B = 0.45 * sigma2 \/ (sigma2 + 0.09);\n\n  return albedo * max(0.0, NdotL) * (A + B * s \/ t) \/ 3.14159265;\n}\n\nconst vec3 lightPos0 = vec3(1.0, 1.0, -1.0);\nconst vec3 lightColor0 = vec3(1.0, 1.0, .96);\nconst float lightWeight0 = 1.25;\n\nconst vec3 lightPos1 = vec3(-1.0, -0.75, -.6);\nconst vec3 lightColor1 = vec3(.96, .96, 1.0);\nconst float lightWeight1 = 0.5;\nconst float maxDist = 6.0;\n\n\nvec4 getColor(vec3 pos, vec3 dir, vec3 normal) {\n\tvec3 diff0 = orenNayarDiffuse(normalize(lightPos0), -dir, normal, 1.1, lightWeight0) * lightColor0;\n\tvec3 diff1 = orenNayarDiffuse(normalize(lightPos1), -dir, normal, 1.1, lightWeight1) * lightColor1;\n\tfloat spec = gaussianSpecular(normalize(lightPos0), -dir, normal, .1) * 1.0;\n\n\tvec3 color = vec3(diff0 + diff1 + spec);\n\n\treturn vec4(color, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float focus = 2.25;\n    vec3 pos   = vec3(sin(time*.1)*0.0, 0.0, -10.0);\t\t\/\/\tposition of camera\n\tvec3 dir   = normalize(vec3(uv, focus));\t\/\/\tray\n\tvec4 color = vec4(0.0);\n\tfloat bg = dot(dir, vec3(0.0, 0.0, -1.0));\n\tfloat prec = 0.0001;\n\tfloat d;\n\t\n\tfor(int i=0; i<64; i++) {\n\t\td = map(pos);\t\t\t\t\t\t\/\/\tdistance to object\n\n\t\tif(d < prec) {\t\t\t\t\t\t\/\/ \tif get's really close, set as hit the object\n\t\t\tcolor       = vec4(1.0);\n\t\t\tvec3 normal = computeNormal(pos);\n\t\t\tcolor       = getColor(pos, dir, normal);\n\t\t\tbreak;\n\t\t}\n\n\t\tpos += d * dir;\t\t\t\t\t\t\/\/\tmove forward by\n\t\tif(length(pos) > maxDist) break;\n\t}\n\t\n    fragColor = color;\n}","name":"","description":"","type":"image"}]}}