{"Shader":{"ver":"0.1","info":{"id":"Ms3GDS","date":"1452023456","viewed":172,"name":"N-Body Gravity Test","username":"Flyguy","description":" A basic gravity simulator thing using a brute-force all pairs approach to calculate the acceleration of each body.","likes":2,"published":3,"flags":32,"tags":["simulation","particles","gravity","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/#define VIEW_POSITION_BUFFER\n\n#define NUM_BODIES 256\n\n#define BODY_RADIUS 3.0\n\nvec4 getBody(int id)\n{\n    return texture2D(iChannel0, vec2(id,0.0)\/iResolution.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 res = iResolution.xy \/ iResolution.y;\n\tvec2 uv = fragCoord.xy \/ iResolution.y;\n    \n    float d = 1e6;\n    \n    for(int i = 0;i < NUM_BODIES;i++)\n    {\n        vec4 body = getBody(i);\n\t\td = min(d, distance(body.xy, uv));\n    }\n    \n    float px = 1.0\/iResolution.y;\n    \n    float c = smoothstep(BODY_RADIUS*px - px, BODY_RADIUS*px, d);\n    \n\tfragColor = vec4(vec3(c),1.0);\n    \n    #ifdef VIEW_POSITION_BUFFER\n    fragColor = texture2D(iChannel0, uv \/ res \/ vec2(2.0,16.0));\n    #endif\n}","name":"","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Calculates the acceleration of each object and integrates its position.\n\n#define CLAMP_VIEW\n\n#define NUM_BODIES 256\n\n#define BODY_MASS 0.2\n#define TIME_SCALE 0.01\n#define MAX_ACCEL 1e4\n\n\/\/Get a body from the backbuffer with its ID (xy = Current pos, zw = Last pos).\nvec4 getBody(int id)\n{\n    return texture2D(iChannel0, vec2(id,0)\/iResolution.xy);\n}\n\n\/\/Integrate the body's position.\nvec4 Integrate(vec4 body, vec2 accel, float delta)\n{\n    return vec4(2.0*body.xy - body.zw + accel * delta*delta, body.xy);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{   \n    if(fragCoord.y > 0.5 || fragCoord.x > float(NUM_BODIES))\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 res = iResolution.xy \/ iResolution.y;\n    \n    int id = int(fragCoord.x);\n    \n    vec4 body = getBody(id);\n    \n    vec2 acc = vec2(0);\n    \n    for(int i = 0;i < NUM_BODIES;i++)\n    {\n        if(i != id)\n        {\n            vec2 diff = getBody(i).xy - body.xy;\n            acc += min(MAX_ACCEL, BODY_MASS \/ dot(diff, diff)) * normalize(diff);\n        }\n    }\n    \n    body = Integrate(body, acc, iTimeDelta * TIME_SCALE);\n    \n    \/\/Initialization (iFrame == 0 doesn't seem to work when the page is initially loaded)\n    if(iFrame == 0 || iGlobalTime < 1.0)\n    {\n        vec2 rpos = vec2(float(id) * 1.85, float(id) * -0.03); \n        body = texture2D(iChannel1, rpos \/ iChannelResolution[1].xy, -99.0).xyxy * res.xyxy;\n    }\n    \n    #ifdef CLAMP_VIEW\n    \tbody = clamp(body, vec4(0), res.xyxy);\n    #endif\n    \n    fragColor = body;\n}","name":"","description":"","type":"buffer"}]}}