{"Shader":{"ver":"0.1","info":{"id":"MlSSWV","date":"1450200755","viewed":319,"name":"Lovely Stars","username":"yibojiang","description":"lovely star inspired by Little Prince","likes":16,"published":3,"flags":0,"tags":["star"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define pi 3.14159\nconst float indent = 0.06;\nfloat angular=5.;\n\nfloat hash( float n )\n{\n\treturn fract( (1.0 + cos(n)) * 415.92653);\n}\n\nfloat noise2d( in vec2 x )\n{\n    float xhash = hash( x.x * 37.0 );\n    float yhash = hash( x.y * 57.0 );\n    return fract( xhash + yhash );\n}\n\n\/\/steal from https:\/\/www.shadertoy.com\/view\/4tfGWr\nfloat drawStar(vec2 o,float size,float startAngle){\n    vec2 q=o;\n    q*=normalize(iResolution).xy;\n\/\/    float startAngle = -iGlobalTime \/ size*0.001;\n   \/\/float startAngle=size*1000.;\n   \n    mat4 RotationMatrix = mat4( cos( startAngle ), -sin( startAngle ), 0.0, 0.0,\n\t\t\t    sin( startAngle ),  cos( startAngle ), 0.0, 0.0,\n\t\t\t             0.0,           0.0, 1.0, 0.0,\n\t\t\t\t     0.0,           0.0, 0.0, 1.0 );    \n\tq = (RotationMatrix * vec4(q, 0.0, 1.0)).xy;\n    \n\tfloat angle=atan( q.y,q.x )\/(2.*pi);\n\t\n\n    float segment = angle * angular;\n    \n    \n    float segmentI = floor(segment);\n    float segmentF = fract(segment);\n        \n    angle = (segmentI + 0.5) \/ angular;\n    \n    if (segmentF > 0.5) {\n\n        angle -= indent;\n    } else\n    {\n\n        angle += indent;\n    }\n    angle *= 2.0 * pi;\n\n    vec2 outline;\n\toutline.y = sin(angle);\n    outline.x = cos(angle);\n    \n\tfloat dist = abs(dot(outline, q));\n    \n    float ss=size*(1.+0.2*sin(iGlobalTime*hash(size)*20. ) );\n    float r=angular*ss;\n\t\n    \n    \n    float star=smoothstep( r, r+0.005, dist );\n    \n    \n    return star;\n}\n\nfloat drawFlare(vec2 o,float size){\n    o*=normalize(iResolution).xy;\n    float flare=smoothstep(0.0,size,length(o) );\n    return flare;\n}\n\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n\n    vec3 color=mix(vec3(0.), vec3(0.1,0.2,0.4), uv.y );\n    float fThreshhold = 0.995;\n    float StarVal = noise2d( uv );\n    if ( StarVal >= fThreshhold )\n    {\n        StarVal = pow( (StarVal - fThreshhold)\/(1.0 - fThreshhold), 6.0 );\n\n\t\tcolor += vec3( StarVal );\n    }\n\n    for (float i=0.;i<100.;i++){\n   \n\t\tfloat t0=i*0.1;\n        \n        if (iGlobalTime>t0){\n            float t=mod(iGlobalTime-t0,5.5) ;\n\t        float size=1.+3.0*hash(i*10.);\/\/ sin(1.*t+(hash(i*10.)-0.5)*pi ) ;\n\t\t\t\/\/size=mix(4.0,0.0,t\/5.5);\n  \/\/          size=0.;\n            \n            vec2 pos=uv-vec2( 0.5+0.25*(hash(i)-0.5)*t ,\n                  \t\t0.0+(0.5 +0.5*hash(i+1.) )*t- .2*t*t ) ;\n\t\t\t\n            color+=mix(vec3(0.05,0.05,0.),vec3(.0),drawFlare(pos,0.05*size) );\n            \n    \t\tcolor=mix( vec3(0.9+hash(i),0.9,0.0),color ,\n                  drawStar(pos,0.0005*size, pi*hash(i+1.) ) );    \n            \n        }\n    }\n    \/*\n    color=mix( vec3(0.9,0.9,0.0),color ,drawStar(uv-vec2(0.2 ,0.7),0.0005 ) );\n    color=mix( vec3(0.9,0.9,0.0),color ,drawStar(uv-vec2(0.3 ,0.65),0.001 ) );    \n    color=mix( vec3(0.9,0.7,0.0),color ,drawStar(uv-vec2(0.4 ,0.75),0.0015 ) );\n    color=mix( vec3(0.9,0.7,0.0),color ,drawStar(uv-vec2(0.5 ,0.5),0.001 ) );\n    color=mix( vec3(0.9,0.8,0.0),color ,drawStar(uv-vec2(0.6 ,0.66),0.002 ) );\n    color=mix( vec3(0.9,0.9,0.0),color ,drawStar(uv-vec2(0.7 ,0.55),0.0012 ) );\n    color=mix( vec3(0.9,0.9,0.0),color ,drawStar(uv-vec2(0.8 ,0.65),0.0008 ) );\n*\/\n    fragColor = vec4( color,1.0);\n\t\/\/fragColor = vec4(uv,0.5+0.5*sin(iGlobalTime),1.0);\n}","name":"","description":"","type":"image"}]}}