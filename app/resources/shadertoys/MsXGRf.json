{"Shader":{"ver":"0.1","info":{"id":"MsXGRf","date":"1375560449","viewed":14209,"name":"Flames","username":"iq","description":"Toying with volumetric noise and inversion of space.","likes":123,"published":3,"flags":0,"tags":["procedural","3d","raymarching","volumetric"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    vec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n    vec2 rg = texture2D( iChannel0, (uv+ 0.5)\/256.0, -100.0 ).yx;\n    return mix( rg.x, rg.y, f.z );\n}\n\nvec4 map( in vec3 p )\n{\n    vec3 r = p; p.y += 0.6;\n    \/\/ invert space\n    p = -4.0*p\/dot(p,p);\n    \/\/ twist space\n    float an = -1.0*sin(0.1*iGlobalTime + length(p.xz) + p.y);\n    float co = cos(an);\n    float si = sin(an);\n    p.xz = mat2(co,-si,si,co)*p.xz;\n    \n    \/\/ distort\n    p.xz += -1.0 + 2.0*noise( p*1.1 );\n    \/\/ pattern\n    float f;\n    vec3 q = p*0.85                     - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    f  = 0.50000*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    f += 0.25000*noise( q ); q = q*2.03 - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    f += 0.12500*noise( q ); q = q*2.01 - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    f += 0.06250*noise( q ); q = q*2.02 - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    f += 0.04000*noise( q ); q = q*2.00 - vec3(0.0,1.0,0.0)*iGlobalTime*0.12;\n    float den = clamp( (-r.y-0.6 + 4.0*f)*1.2, 0.0, 1.0 );\n    vec3 col = 1.2*mix( vec3(1.0,0.8,0.6), 0.9*vec3(0.3,0.2,0.35), den ) ;\n    col += 0.05*sin(0.05*q);\n    col *= 1.0 - 0.8*smoothstep(0.6,1.0,sin(0.7*q.x)*sin(0.7*q.y)*sin(0.7*q.z))*vec3(0.6,1.0,0.8);\n    col *= 1.0 + 1.0*smoothstep(0.5,1.0,1.0-length( (fract(q.xz*0.12)-0.5)\/0.5 ))*vec3(1.0,0.9,0.8);\n    col = mix( vec3(0.8,0.32,0.2), col, clamp( (r.y+0.1)\/1.5, 0.0, 1.0 ) );\n    return vec4( col, den );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ inputs\n    vec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = (-1.0 + 2.0*q) * vec2( iResolution.x\/ iResolution.y, 1.0 );\n    vec2 mo = iMouse.xy \/ iResolution.xy;\n    if( iMouse.w<=0.00001 ) mo=vec2(0.0);\n    \n    \/\/--------------------------------------\n    \/\/ cameran    \n    \/\/--------------------------------------\n    float an = -0.07*iGlobalTime + 3.0*mo.x;\n    vec3 ro = 4.5*normalize(vec3(cos(an), 0.5, sin(an)));\n    ro.y += 1.0;\n    vec3 ta = vec3(0.0, 0.5, 0.0);\n    float cr = -0.4*cos(0.02*iGlobalTime);\n    \n    \/\/ build rayn\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross( vec3(sin(cr),cos(cr),0.0), ww ) );\n    vec3 vv = normalize( cross(ww,uu) );\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.5*ww );\n    \n    \/\/--------------------------------------\n    \/\/ raymarch\n    \/\/--------------------------------------\n    vec4 sum = vec4( 0.0 );\n    vec3 bg = vec3(0.4,0.5,0.5)*1.3;\n    \/\/ dithering\n    float t = 0.05*texture2D( iChannel0, fragCoord.xy\/iChannelResolution[0].x ).x;\n    for( int i=0; i<128; i++ )\n    {\n        if( sum.a > 0.99 ) break;\n        vec3 pos = ro + t*rd;\n        vec4 col = map( pos );\n        col.a *= 0.5;\n        col.rgb = mix( bg, col.rgb, exp(-0.002*t*t*t) ) * col.a;\n        sum = sum + col*(1.0 - sum.a);\n        t += 0.05;\n    }\n    \n    vec3 col = clamp( mix( bg, sum.xyz\/(0.001+sum.w), sum.w ), 0.0, 1.0 );\n    \n    \/\/--------------------------------------\n    \/\/ contrast + vignetting\n    \/\/--------------------------------------\n    col = col*col*(3.0-2.0*col)*1.4 - 0.4;\n    col *= 0.25 + 0.75*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}