{"Shader":{"ver":"0.1","info":{"id":"4t2SWW","date":"1443698759","viewed":964,"name":"Ray Marching Experiment n\u00b035","username":"aiekick","description":"a displace on ball on my 2D shader : <a href=\"https:\/\/www.shadertoy.com\/view\/llSSWD\"  class=\"regular\" target=\"_blank\">Texture Experiment 1<\/a>","likes":28,"published":3,"flags":0,"tags":["ray","experiment","marching","35"],"hasliked":0},"renderpass":[{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":23,"src":"\/presets\/cube01_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat dstef = 0.0;\n    \n\/\/ based on my 2d shader https:\/\/www.shadertoy.com\/view\/llSSWD\nvec3 effect(vec2 g) \n{\n    float t = iGlobalTime * 1.5;\n    g \/= 200.;\n    g.x -= t * .015;\n\tg.y += sin(g.x * 46.5 + t) * .12;\n\tvec3 c = texture2D(iChannel1, g, 4.*(sin(t)*.5+.5)).rgb;\n\tc = smoothstep(c+.5, c, vec3(.71));\n    return c;\n}\n\n\/\/\/\/\/\/\/FRAMEWORK\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n#define mPi 3.14159\n#define m2Pi 6.28318\nvec2 uvMap(vec3 p)\n{\n\tp = normalize(p);\n\tvec2 tex2DToSphere3D;\n\ttex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ m2Pi;\n\ttex2DToSphere3D.y = 0.5 - asin(p.y) \/ mPi;\n\treturn tex2DToSphere3D;\n}\n\nvec4 displacement(vec3 p)\n{\n\tvec3 col = effect(p.xz);\n    \n\tcol = clamp(col, vec3(0), vec3(1.));\n    \n\tfloat dist = dot(col,vec3(0.3)); \n    \n\treturn vec4(dist,col);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n\tfloat scale = 1.; \/\/ displace scale\n\tfloat dist = 0.;\n    \n\tfloat x = 6.;\n\tfloat z = 6.;\n    \n\tvec4 disp = displacement(p);\n        \n\tfloat y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n\tdist = osphere(p, +5.-y);\n    \n\treturn vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos, float prec )\n{\n\tvec3 eps = vec3( prec, 0., 0. );\n\tvec3 nor = vec3(\n        map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n        map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n        map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n\tfloat sca = 1.0;\n\tfor( int i=0; i<5; i++ )\n    \n\t{\n\t\tfloat hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n\treturn clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float cam_a = 3.3; \/\/ angle z\n    \n    float cam_e = 6.; \/\/ elevation\n    float cam_d = 2.; \/\/ distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 1.2; \/\/ refraction angle\n    float refr_i = .8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float marchPrecision = 0.5; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    vec3 ray, cubeRay;\n    \n    for(int i=0;i<250;i++)\n\t{      \n\t\tif (s<prec||s>maxd) break;\n\t\ts = map(p).x*marchPrecision;\n\t\td += s;\n\t\tp = ro+rd*d;\n\t}\n\n\tif (d<maxd)\n\t{\n\t\tvec2 e = vec2(-1., 1.)*0.005; \n\t\tvec3 n = calcNormal(p, 0.1);\n\n\t\tb=li;\n\n\t\tray = reflect(rd, n);\n\t\tcubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n\t\tray = refract(ray, n, refr_a);\n\t\tcubeRay += textureCube(iChannel0, ray).rgb * refr_i;\n\n\t\tcol = cubeRay+pow(b,15.); \n\n            \n            \/\/ lighting        \n\t\tfloat occ = calcAO( p, n );\n\t\tvec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\t\tfloat amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n\t\tfloat dif = clamp( dot( n, lig ), 0.0, 1.0 );\n\t\tfloat bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n\t\tfloat dom = smoothstep( -0.1, 0.1, cubeRay.y );\n\t\tfloat fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n\t\tfloat spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n\t\tvec3 brdf = vec3(0.0);\n\t\tbrdf += 1.20*dif*vec3(1.00,0.90,0.60);\n\t\tbrdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n\t\tbrdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n\t\tbrdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n\t\tbrdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n\t\tbrdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n\t\tbrdf += 0.02;\n\t\tcol = col*brdf;\n\n\t\tcol = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n\t\tcol = mix(col, map(p).yzw, 0.5);\n\n\t}\n\telse\n\t{\n\t\tcol = textureCube(iChannel0, rd).rgb;\n\t}\n\n    \/\/col *= dstef;\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}