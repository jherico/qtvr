{"Shader":{"ver":"0.1","info":{"id":"4s2Sz3","date":"1414412032","viewed":1271,"name":"Train ride","username":"dr2","description":"Take a long trip through the mountains and enjoy the view.","likes":24,"published":3,"flags":0,"tags":["raymarching","landscape","railway"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Train ride\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Borrows ideas and techniques published on Shadertoy.\n\/\/ Thanks everyone for a great learning resource!!\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashfv2 (vec2 p)\n{\n  return fract (sin (dot (p, cHashA3.xy)) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p = mix (vec4 (c.bg, vec2 (-1., 2.\/3.)), vec4 (c.gb, vec2 (0., -1.\/3.)),\n     step (c.b, c.g));\n  vec4 q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  float d = q.x - min (q.w, q.y);\n  const float e = 1.e-10;\n  return vec3 (abs (q.z + (q.w - q.y) \/ (6. * d + e)), d \/ (q.x + e), q.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nvec3 BrickSurfCol (vec2 p) {\n  vec2 q = p * (1. \/ 20.);\n  vec2 i = floor (q);\n  if (2. * floor (i.y \/ 2.) != i.y) {\n    q.x += 0.5;\n    i = floor (q);\n  }\n  q = smoothstep (0.015, 0.025, abs (fract (q + 0.5) - 0.5));\n  return (1. + Noisefv2 (10. * p)) * (0.3 + 0.7 * q.x * q.y) *\n     (0.3 + 0.2 * sin (2. * Hashfv2 (i) + vec3 (1., 1.2, 1.4)));\n}\n\nvec3 BrickCol (vec3 p, vec3 n)\n{\n  n = abs (n);\n  p *= 150.;\n  return BrickSurfCol (p.zy) * n.x + BrickSurfCol (p.xz) * n.y +\n     BrickSurfCol (p.xy) * n.z;\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrOBoxDf (vec3 p, vec3 b)\n{\n  return length (max (abs (p) - b, 0.));\n}\n\nfloat PrCylDf (vec3 p, vec2 b)\n{\n  return max (length (p.xz) - b.x, abs (p.y) - b.y);\n}\n\nmat3 trainMat[5], trMat;\nvec3 trainPos[5], trPos, qTrWin, sunDir, sunCol, moonDir, moonCol;\nvec2 trkOffset;\nfloat tCur, dirTrWin;\nint idObj;\nbool isNight;\nconst float dstFar = 250.;\n\nvec3 TrackPath (float t)\n{\n  float y = 0.01 + sin (0.021 * t) * sin (1. + 0.023 * t);\n  return vec3 (15. * sin (0.035 * t) * sin (0.012 * t) * cos (0.01 * t) +\n     11. * sin (0.0032 * t) + 100. * trkOffset.x, 2. * y * y, t);\n}\n\nfloat GrndHt (vec2 p, int hiRes)\n{\n  const vec2 vRot = vec2 (1.4624, 1.6721);\n  vec2 q = p * 0.06;\n  float w = 0.75 * Noisefv2 (0.25 * q) + 0.15;\n  w *= 36. * w;\n  vec2 vyz = vec2 (0.);\n  float ht = 0.;\n  for (int j = 0; j < 10; j ++) {\n    vec3 v = Noisev3v2 (q);\n    vyz += v.yz;\n    ht += w * v.x \/ (1. + dot (vyz, vyz));\n    if (j == 4) {\n      ht += 50. * pow (Noisefv2 (0.003 * q), 4.) - 1.;\n      if (hiRes == 0) break;\n    }\n    w *= -0.37;      \n    q *= mat2 (vRot.x, vRot.y, - vRot.y, vRot.x);\n  }\n  vec3 pt = TrackPath (p.y);\n  pt.y += 0.07 * Noisefv2 (0.0001 * p) + 0.04 * Noisefv2 (2.1 * p) +\n     0.03 * Noisefv2 (2.3 * p.yx);\n  float g = smoothstep (4., 35., abs (p.x - pt.x));\n  return SmoothMin (ht, pt.y * (1. - g) + ht * g, 0.5);\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz, 1);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy, 1), e.x,\n     ht - GrndHt (p.xz + e.yx, 1)));\n}\n\nvec4 GrndCol (vec3 p, vec3 n)\n{\n  const vec3 gCol1 = vec3 (0.6, 0.7, 0.7), gCol2 = vec3 (0.2, 0.1, 0.1),\n     gCol3 = vec3 (0.4, 0.3, 0.3), gCol4 = vec3 (0.1, 0.2, 0.1),\n     gCol5 = vec3 (0.7, 0.7, 0.8), gCol6 = vec3 (0.05, 0.3, 0.03),\n     gCol7 = vec3 (0.02, 0.1, 0.02), gCol8 = vec3 (0.1, 0.08, 0.);\n  vec2 q = p.xz;\n  float f, d;\n  float cSpec = 0.;\n  f = 0.5 * (clamp (Noisefv2 (0.1 * q), 0., 1.) +\n      0.8 * Noisefv2 (0.2 * q + 2.1 * n.xy + 2.2 * n.yz));\n  vec3 col = f * mix (f * gCol1 + gCol2, f * gCol3 + gCol4, 0.65 * f);\n  if (n.y < 0.5) {\n    f = 0.4 * (Noisefv2 (0.4 * q + vec2 (0., 0.57 * p.y)) +\n       0.5 * Noisefv2 (6. * q));\n    d = 4. * (0.5 - n.y);\n    col = mix (col, vec3 (f), clamp (d * d, 0.1, 1.));\n    cSpec += 0.1;\n  }\n  if (p.y > 22.) {\n    if (n.y > 0.25) {\n      f = clamp (0.07 * (p.y - 22. - Noisefv2 (0.2 * q) * 15.), 0., 1.);\n      col = mix (col, gCol5, f);\n      cSpec += f;\n    }\n  } else {\n    if (n.y > 0.45) {\n      vec3 c = (n.y - 0.3) * (gCol6 * vec3 (Noisefv2 (0.4 * q),\n         Noisefv2 (0.34 * q), Noisefv2 (0.38 * q)) + gCol7);\n      col = mix (col, c, smoothstep (0.45, 0.65, n.y) *\n         (1. - smoothstep (15., 22., p.y - 1.5 + 1.5 * Noisefv2 (0.2 * q))));\n    }\n    if (p.y < 0.65 && n.y > 0.4) {\n      d = n.y - 0.4;\n      col = mix (col, d * d + gCol8, 2. * clamp ((0.65 - p.y -\n         0.35 * (Noisefv2 (0.4 * q) + 0.5 * Noisefv2 (0.8 * q) +\n         0.25 * Noisefv2 (1.6 * q))), 0., 0.3));\n      cSpec += 0.1;\n    }\n  }\n  return vec4 (col, cSpec);\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz, 0);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.15, 0.4 * h) + 0.008 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz, 0));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.06;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = 0.1 * wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol1 = vec3 (0.05, 0.05, 0.15), sbCol2 = vec3 (0.2, 0.25, 0.5);\n  vec3 col;\n  if (isNight) col = 0.3 * clamp (sbCol1 - 0.12 * rd.y * rd.y, 0., 1.);\n  else col = sbCol2 + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const vec3 sCol1 = vec3 (0.06, 0.04, 0.02), sCol2 = vec3 (0.03, 0.03, 0.06),\n     mBrite = vec3 (-0.5, -0.4, 0.77);\n  const float skyHt = 150.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 0.5 * tCur;\n    vec2 p = 0.02 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.8;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.;\n    }\n    cloudFac = clamp (5. * (f - 0.4) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  if (isNight) {\n    vec3 bgCol = SkyBg (rd) + sCol1 * pow (clamp (dot (rd, moonDir), 0., 1.), 30.);\n    col = bgCol;\n    const float moonRad = 0.04;\n    vec3 vn;\n    bool mHit = false;\n    float bs = - dot (rd, moonDir);\n    float cs = dot (moonDir, moonDir) - moonRad * moonRad;\n    float ts = bs * bs - cs;\n    if (ts > 0.) {\n      ts = - bs - sqrt (ts);\n      if (ts > 0.) {\n        vn = normalize ((ts * rd - moonDir) \/ moonRad);\n        mHit = true;\n      }\n    }\n    if (mHit) {\n      col += 1.4 * moonCol * clamp (dot (mBrite, vn) *\n         (0.3 + Noisefv3 (5. * vn)), 0., 1.);\n    } else {\n      vec3 st = (rd + vec3 (1.));\n      for (int j = 0; j < 10; j ++) {\n        st = 11. * abs (st) \/ dot (st, st) - 3.;\n      }\n      col += min (1., 1.5e-6 * pow (min (16., length (st)), 4.5));\n    }\n    col = mix (col, sCol2, cloudFac) + bgCol;\n  } else {\n    float s = max (dot (rd, sunDir), 0.);\n    col = SkyBg (rd) + sunCol * (0.35 * pow (s, 6.) +\n       0.65 * min (pow (s, 256.), 0.3));\n    col = mix (col, vec3 (0.55), cloudFac);\n  }\n  return col;\n}\n\nfloat TrainDf (vec3 p, float dHit, float dir)\n{\n  const float eRad = 0.25;\n  vec3 q;\n  float d;\n  q = p;\n  if (dir == 0.) {\n    q.y -= 0.15;\n    d = length (max (abs (q) - vec3 (0.42, 0.25, 0.95), 0.)) - eRad;\n  } else {\n    q.yz += vec2 (2.6, 0.7 * dir);\n    d = length (vec4 (max (abs (q.x) - 0.45, 0.), max (2.5 - q.y, 0.),\n       max (- q.z * dir, 0.),\n       max (length (q.yz + vec2 (0., - 0.2 * dir)) - 3., 0.))) - eRad;\n  }\n  if (d < dHit) {\n    dHit = d;  idObj = 21;\n    if (dir == 0.) q.y -= 0.1;\n    else q.y -= 2.85;\n    qTrWin = abs (q);\n    dirTrWin = dir;\n  }\n  q = vec3 (p.y + 0.32, abs (p.x) - 0.46, p.z + 0.4);\n  vec2 ww = vec2 (0.12 - sign (q.y) * 0.02, 0.04);\n  d = min (PrCylDf (q, ww), PrCylDf (q - vec3 (0., 0., 1.), ww));\n  if (d < dHit) {\n    dHit = d;  idObj = 22;\n  }\n  if (dir != 0.) {\n    q = p;\n    if (dir > 0.) {\n      q.x = abs (q.x) - 0.2;\n      q.yz += vec2 (0.2, -1.6);\n      d = PrCylDf (q.xzy, vec2 (0.05, 0.1));\n      if (d < dHit) {\n        dHit = d;  idObj = 23;\n      }\n    } else {\n      q.yz += vec2 (0.15, 1.6);\n      d = PrCylDf (q.xzy, vec2 (0.07, 0.1));\n      if (d < dHit) {\n        dHit = d;  idObj = 24;\n      }\n    }\n  }\n  return dHit;\n}\n\nfloat RailDf (vec3 p, float dHit)\n{\n  vec2 w = vec2 (abs (p.x) - 0.5, p.y + 0.57);\n  float d = min (length (max (abs (w - vec2 (0., 0.14)) - vec2 (0.02), 0.)),\n     SmoothMin (length (max (abs (w - vec2 (0., 0.08)) - vec2 (0.01, 0.08), 0.)),\n     length (max (abs (w - vec2 (0., -0.02)) - vec2 (0.04), 0.)), 0.06));\n  if (d < dHit) {\n    dHit = d;  idObj = 10;\n  }\n  vec3 q = vec3 (p.x, p.y + 0.7, mod (p.z, 2.4) - 1.2);\n  d = PrOBoxDf (q, vec3 (0.75, 0.03, 0.15));\n  if (d < dHit) {\n    dHit = d;  idObj = 11;\n  }\n  return dHit;\n}\n\nfloat BridgeDf (vec3 p, float dHit, float hg)\n{\n  vec3 q = p;\n  float d = max (abs (q.x) - 0.85, q.y + 0.68);\n  q.y += 4.5;\n  q.z = mod (q.z + 1.3, 2.6) - 1.3;\n  d = max (max (d, - max (length (q.yz +\n     vec2 (4. * clamp (q.y \/ 4., -0.5, 0.5), 0.)) - 5.5, abs (q.z) - 0.9)), - hg);\n  if (d < dHit) {\n    dHit = d;  idObj = 12;\n  }\n  return dHit;\n}\n\nfloat PlatformDf (vec3 p, float dHit, float hg)\n{\n  vec3 q = vec3 (p.x, p.y, mod (p.z, 150.) - 75.);\n  vec3 qq = q + vec3 (-1.9, -0.4, 0.);\n  float d = min (min (PrBoxDf (vec3 (abs (q.x) - 1.7, q.y + 0.5, q.z),\n     vec3 (0.7, 0.05, 5.)), max (PrBoxDf (qq, vec3 (0.1, 0.7, 2.)),\n     - PrBoxDf (qq, vec3 (0.15, 0.5, 1.5)))),\n     max (PrCylDf (vec3 (abs (abs (q.x) - 1.7) - 0.4, q.y + 4.5, abs (q.z) - 4.4),\n     vec2 (0.13, 4.)), - hg));\n  if (d < dHit) {\n    dHit = d;  idObj = 13;\n  }\n  d = PrCylDf (q + vec3 (-1.9, -1.2, 0.), vec2 (0.1, 0.06));\n  if (d < dHit) {\n    dHit = d;  idObj = 14;\n  }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  dHit = TrainDf (trainMat[0] * (p - trainPos[0]), dHit, -1.);\n  dHit = TrainDf (trainMat[1] * (p - trainPos[1]), dHit, 0.);\n  dHit = TrainDf (trainMat[2] * (p - trainPos[2]), dHit, 0.);\n  dHit = TrainDf (trainMat[3] * (p - trainPos[3]), dHit, 0.);\n  dHit = TrainDf (trainMat[4] * (p - trainPos[4]), dHit, 1.);\n  float hg = p.y;\n  p.xy -= TrackPath (p.z).xy;\n  p.y -= 0.9;\n  dHit = RailDf (p, dHit);\n  dHit = BridgeDf (p, dHit, hg);\n  dHit = PlatformDf (p, dHit, hg);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 180; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  float v0 = ObjDf (p + e.xxx);\n  float v1 = ObjDf (p + e.xyy);\n  float v2 = ObjDf (p + e.yxy);\n  float v3 = ObjDf (p + e.yyx);\n  return normalize (vec3 (v0 - v1 - v2 - v3) + 2. * vec3 (v1, v2, v3));\n}\n\nvec4 ObjCol (vec3 p, vec3 n)\n{\n  vec3 col = vec3 (0.);\n  float sp;\n  float dkFac = 1.;\n  if (idObj >= 10 && idObj <= 19) {\n    sp = 0.;\n    if (idObj == 10) {\n      col = vec3 (0.3);\n      sp = 1.;\n    } else if (idObj == 11) {\n      col = vec3 (0.12, 0.08, 0.04) * (1.5 + Noisefv2 (30. * p.xz));\n    } else if (idObj == 12) {\n      if (n.y > 0.9) col = vec3 (0.025) * (2. + Noisefv2 (15. * p.xz));\n      else col = 0.1 * BrickCol (0.5 * p, n);\n      dkFac = 0.4;\n    } else if (idObj == 13) {\n      p.xy -= TrackPath (p.z).xy;\n      col = vec3 (0.26, 0.22, 0.2) * BrickCol (0.3 * p, n);\n      dkFac = 0.2;\n    } else if (idObj == 14) {\n      if (isNight) col = vec3 (1., 0., 0.);\n      else col = vec3 (0.7, 1., 0.7);\n    }\n  } else if (idObj >= 21 && idObj <= 29) {\n    sp = 0.7;\n    if (idObj == 21) {\n      col = vec3 (0.7, 0.2, 0.2);\n      dkFac = 0.02;\n      sp = 0.7;\n    } else if (idObj == 22) {\n      col = vec3 (0.7, 0.3, 0.);\n      dkFac = 0.1;\n    } else if (idObj == 23) {\n      col = vec3 (1., 0., 0.);\n    } else if (idObj == 24) {\n      if (isNight) col = vec3 (1.);\n      else col = vec3 (1., 1., 0.);\n    }\n  }\n  if (isNight) col *= dkFac;\n  return vec4 (col, sp);\n}\n\nvoid TrainCarPM (float t)\n{\n  vec3 vp, vd, ve, vf;\n  trPos = TrackPath (tCur + t);\n  vp = TrackPath (tCur + t + 0.1) - trPos;\n  vd = - normalize (vec3 (vp.x, 0., vp.z));\n  ve = normalize (vec3 (0., vp.yz));\n  trPos.y += 0.9;\n  trMat = mat3 (vec3 (1., 0., 0.), vec3 (0., ve.z, - ve.y), ve) *\n      mat3 (vec3 (- vd.z, 0., vd.x), vec3 (0., 1., 0.), vd);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd, vec2 vDir)\n{\n  const float eps = 0.01;\n  vec4 col4;\n  vec3 col, vn;\n  float f;\n  vec3 roo = ro;\n  float dstHit = dstFar;\n  float dstGrnd = GrndRay (ro, rd);\n  idObj = 0;\n  float dstObj = ObjRay (ro, rd);\n  int idObjT = idObj;\n  float refFac = 1.;\n  if (dstGrnd < dstObj && ro.y + dstGrnd * rd.y < 0.) {\n    float dw = - ro.y \/ rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));\n    ro += eps * rd;\n    dstGrnd = GrndRay (ro, rd);\n    idObj = 0;\n    dstObj = ObjRay (ro, rd);\n    idObjT = idObj;\n    refFac *= 0.6;\n  }\n  bool isLit = true;\n  bool isGrnd = false;\n  if (dstObj < dstGrnd) {\n    if (idObjT == 21 && (qTrWin.y < 0.2 &&\n       (qTrWin.x < 0.45 || qTrWin.x > 0.65) || dirTrWin == 0. &&\n       qTrWin.x < 0.3 && qTrWin.z < 0.7)) idObjT = 20;\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    if (idObjT == 20) {\n      rd = reflect (rd, vn);\n      ro += eps * rd;\n      dstGrnd = GrndRay (ro, rd);\n      if (dstGrnd < dstFar) {\n        ro += dstGrnd * rd;\n        dstHit = dstGrnd;\n        refFac *= 0.4;\n        isGrnd = true;\n      } else {\n        col = refFac * SkyCol (ro, rd);\n        isLit = false;\n      }\n    } else {\n      col4 = ObjCol (ro, vn);\n      col = refFac * col4.xyz;\n      if (! isNight) {\n        col *=  sunCol * (0.3 + (max (0., dot (sunDir, vn)) +\n           col4.w * pow (max (dot (rd, reflect (sunDir, vn)), 0.), 20.)));\n      } else {\n        if (idObjT == 21) col *= moonCol * (0.6 +\n           col4.w * pow (max (dot (rd, reflect (moonDir, vn)), 0.), 40.));\n      }\n      dstHit = dstObj;\n      isLit = ! (idObjT == 14 || (idObjT >= 20 && idObjT <= 29));\n    }\n  } else {\n    vec3 rp = ro + dstGrnd * rd;\n    if (refFac < 1.) dstHit = length (rp - roo);\n    else dstHit = dstGrnd;\n    if (dstHit < dstFar) {\n      ro = rp;\n      isGrnd = true;\n    } else {\n      col = refFac * SkyCol (ro, rd);\n      isLit = false;\n    }\n  }\n  if (isGrnd) {\n    vn = GrndNf (ro, dstHit);\n    col4 = GrndCol (ro, vn);\n    col = col4.xyz * refFac;\n    if (! isNight) {\n      f = dot (sunDir, vn);\n      col = sunCol * mix (col * (max (f, 0.) + 0.1), vec3 (refFac),\n         step (f, 0.) * col4.w * pow (max (dot (reflect (sunDir, vn), rd), 0.), 3.));\n    }\n  }\n  if (dstHit < dstFar) {\n    f = dstHit \/ dstFar;\n    col = mix (col, refFac * SkyBg (rd), clamp (1.03 * f * f, 0., 1.));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  if (isNight && isLit) {\n    vec3 vLight = ro - trainPos[0];\n    vLight.z -= 2.2;\n    float dstLightI = 1. \/ length (vLight);\n    vLight *= dstLightI;\n    f = dot (vLight.xz, vDir);\n    if (dstLightI > 0.02 && f > 0.4) {\n      col *= (0.1 + pow (f, 8.)) * min (1., 100. * dstLightI * dstLightI);\n    } else {\n      col = RgbToHsv (col);\n      col.y = 0.1;\n      col.z *= col.z;\n      col.z *= 0.3 * col.z;\n      col = HsvToRgb (col);\n    }\n  }\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  vec2 uvs = uv;\n  uv.x *= iResolution.x \/ iResolution.y;\n  trkOffset = vec2 (0.);\n  float zmFac = 1.8;\n  tCur = 15. * iGlobalTime + 100. * trkOffset.y;\n  sunDir = normalize (vec3 (0.4, 0.5, 0.5));\n  moonDir = normalize (vec3 (0.3, 0.25, 0.5));\n  sunCol = vec3 (1., 0.9, 0.8);\n  moonCol = vec3 (1., 0.9, 0.5);\n  float dt = 0.3;\n  isNight = mod (floor (tCur \/ 1000.), 2.) != 0.;\n  float trStart = 12.;\n  float trGap = 2.2;\n  float tz;\n  tz = tCur + trStart - 2. * trGap;\n  vec2 vDir = normalize ((TrackPath (tz + dt).xz -\n     TrackPath (tz - dt).xz) \/ (2. * dt));\n  float dGap = sqrt (1. - vDir.x * vDir.x);\n  TrainCarPM (trStart);\n  trainPos[0] = trPos;  trainMat[0] = trMat;\n  TrainCarPM (trStart - trGap * dGap);\n  trainPos[1] = trPos;  trainMat[1] = trMat;\n  TrainCarPM (trStart - (2. * trGap + 0.25) * dGap);\n  trainPos[2] = trPos;  trainMat[2] = trMat;\n  TrainCarPM (trStart - (3. * trGap + 0.5) * dGap);\n  trainPos[3] = trPos;  trainMat[3] = trMat;\n  TrainCarPM (trStart - (4. * trGap + 0.5) * dGap);\n  trainPos[4] = trPos;  trainMat[4] = trMat;\n  bool fixCam = mod (floor (tCur \/ 500.), 2.) == 0.;\n  mat3 scMat;\n  vec3 ro, rd, vd;\n  if (fixCam) {\n    tz = ceil (tCur \/ 100.) * 100.;\n    ro = TrackPath (tz - 40.);\n    float dx = 2. * mod (tz \/ 100., 2.) - 1.;\n    ro.x += 13. * dx;\n    float gh = GrndHt (ro.xz, 0);\n    ro.xy += vec2 (-3. * dx, 3. + 0.1 * gh * gh);\n    vd = normalize (TrackPath (tCur + 8.) - ro);\n    vec3 u = - vd.y * vd;\n    float f = 1. \/ sqrt (1. - vd.y * vd.y);\n    scMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  } else {\n    tz = tCur + trStart - 6. * trGap * dGap;\n    ro = TrackPath (tz);\n    ro.y += 4.;\n    vd = TrackPath (tz + dt) - TrackPath (tz - dt);\n    vd.y = 0.;\n    vd = normalize (vd);\n    scMat = mat3 (vd.z, 0., - vd.x, 0., 1., 0., vd);\n  }\n  rd = scMat * normalize (vec3 (uv, zmFac));\n  vec3 col = ShowScene (ro, rd, vDir);\n  uvs *= uvs * uvs;\n  col = mix (vec3 (0.7), col, pow (max (0., 0.95 - length (uvs * uvs * uvs)), 0.3));\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}