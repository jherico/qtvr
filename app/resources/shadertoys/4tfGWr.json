{"Shader":{"ver":"0.1","info":{"id":"4tfGWr","date":"1420622838","viewed":1112,"name":"render a star shape","username":"stebi","description":"render a star shape","likes":5,"published":3,"flags":0,"tags":["2d","star","shape"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":9,"src":"\/presets\/tex08.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Parameters to play with:\nconst float segments = 5.0;\nconst float indent = 0.08;\nconst float softness = 0.6;\n\n\/\/ constants\nconst float pi = 3.141592654;\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = fragCoord.xy \/ iResolution.xy;\n    \/\/ vec2 q = p - vec2(iMouse.x \/ iResolution.x, iMouse.y \/ iResolution.y);\n    vec2 q = p - vec2(0.5, 0.5);\n    q *= normalize(iResolution).xy; \/\/ maintain aspect ratio\n\n    \/\/ Rotation\n    float startAngle = iGlobalTime * 0.7;\n    mat4 RotationMatrix = mat4( cos( startAngle ), -sin( startAngle ), 0.0, 0.0,\n\t\t\t    sin( startAngle ),  cos( startAngle ), 0.0, 0.0,\n\t\t\t             0.0,           0.0, 1.0, 0.0,\n\t\t\t\t     0.0,           0.0, 0.0, 1.0 );    \n    q = (RotationMatrix * vec4(q, 0.0, 1.0)).xy;\n\n    float distance = length(q);\n    float progress = (sin(iGlobalTime) + 1.0) \/ 2.0;\n    \n    vec4 col;\n    col = texture2D( iChannel0, q).xyzw;\n\n    \n    float angle = (atan(q.y, q.x) + pi) \/ (2.0 * pi); \/\/ 0-1\n    \n    float segment = angle * segments;\n    \n    \n    float segmentI = floor(segment);\n    float segmentF = fract(segment);\n        \n    angle = (segmentI + 0.5) \/ segments;\n    if (segmentF > 0.5) {\n\t\tcol *= vec4(1.0, .9, 0.6, 1.0);\n        angle -= indent;\n    } else\n    {\n\t\tcol *= vec4(1.0, 0.5, 0.5, 1.0);\n        angle += indent;\n    }\n    angle *= 2.0 * pi;\n\n\tvec2 outline;\n\toutline.y = sin(angle);\n    outline.x = cos(angle);\n\n\t\/\/ Distance Point\/Line (Hessische Normalform)\n\tdistance = abs(dot(outline, q));\n    \n    col *= smoothstep(progress, progress + softness * progress, distance * 6.0);\n\n    vec4 starcol = texture2D( iChannel1, (RotationMatrix * vec4(q, 0.0, 1.0)).xy).xyzw; \n    starcol = mix(starcol, vec4(2.0, 2.0, 1.0, 1.0), 0.5);\n    col = mix(starcol, col, col.w);\n    fragColor = vec4((col));\n}","name":"","description":"","type":"image"}]}}