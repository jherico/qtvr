{"Shader":{"ver":"0.1","info":{"id":"lsd3zj","date":"1451041006","viewed":141,"name":"Bsides","username":"bsides","description":"Testshader ","likes":2,"published":3,"flags":2,"tags":["webcam"],"hasliked":0},"renderpass":[{"inputs":[{"id":15,"src":"\/presets\/tex10.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":31,"src":"\/presets\/webcam.png","ctype":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define PI 3.1416\n\nvec2 pixelate ( vec2 pixel, vec2 details ) { return floor(pixel * details) \/ details; }\nfloat luminance ( vec3 color ) { return (color.r + color.g + color.b) \/ 3.0; }\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Get normalized texture coordinates\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    \/\/ Aspect ratio fix\n   \tuv.x -= 0.5;\n    uv.x *= iResolution.x \/ iResolution.y;\n    uv.x += 0.5;\n    \n    \/\/ Inverse texture coordinates\n    \/\/uv = 1.0;\n    \n    \/\/ Pixelate\n   \tuv = pixelate(uv, iResolution.xy \/ 1.0);\n    \n    \/\/ Maths infos about the current pixel position\n    vec2 center = uv - vec2(0.5);\n    float angle = atan(center.y, center.x);\n    float radius = length(center);\n    float ratioAngle = (angle \/ PI) * 0.5 + 0.5;\n    \n    \/\/ Displacement from noise\n    vec2 angleUV = mod(abs(vec2(0, angle \/ PI)), 1.0);\n    float offset = texture2D(iChannel1, angleUV).r * 0.5;\n    \n    \/\/ Displaced pixel color\n    vec2 p = vec2(cos(angle), sin(angle)) * offset + vec2(0.5);\n    \n    \/\/ Apply displacement\n    uv = mix(uv, p, step(offset, radius));\n    \n    \/\/ Get color from texture\n    vec3 color = texture2D(iChannel0, uv).rgb;\n\n    \/\/ Treshold color from luminance\n    float lum = luminance(color);    \n    color = mix(vec3(0), vec3(1,0,0), step(0.45, lum));\n    color = mix(color, vec3(1,1,0), step(0.65, lum));\n    color = mix(color, vec3(1,1,1), step(0.85, lum));\n    \n    \/\/ Voila\n\tfragColor = vec4(color,1.0);\n}","name":"","description":"","type":"image"}]}}