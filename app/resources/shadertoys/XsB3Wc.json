{"Shader":{"ver":"0.1","info":{"id":"XsB3Wc","date":"1394102815","viewed":3415,"name":"Weird Thing","username":"iq","description":"Some broken experiment on something undefined","likes":45,"published":3,"flags":0,"tags":["3d","raymarching","volumetric"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\n#define HIGH_QUALITY_NOISE\n\nvec3 hash( vec3 x )\n{\n\treturn texture2D( iChannel0, (x.xy+vec2(3.0,1.0)*x.z+0.5)\/256.0, -100.0 ).xyz;\n}\n\nfloat noise( in vec3 x )\n{\n    vec3 p = floor(x);\n    vec3 f = fract(x);\n\tf = f*f*(3.0-2.0*f);\n#ifndef HIGH_QUALITY_NOISE\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z) + f.xy;\n\tvec2 rg = texture2D( iChannel0, (uv+0.5)\/256.0, -100.0 ).yx;\n#else\n\tvec2 uv = (p.xy+vec2(37.0,17.0)*p.z);\n\tvec2 rg1 = texture2D( iChannel0, (uv+vec2(0.5,0.5))\/256.0, -100.0 ).yx;\n\tvec2 rg2 = texture2D( iChannel0, (uv+vec2(1.5,0.5))\/256.0, -100.0 ).yx;\n\tvec2 rg3 = texture2D( iChannel0, (uv+vec2(0.5,1.5))\/256.0, -100.0 ).yx;\n\tvec2 rg4 = texture2D( iChannel0, (uv+vec2(1.5,1.5))\/256.0, -100.0 ).yx;\n\tvec2 rg = mix( mix(rg1,rg2,f.x), mix(rg3,rg4,f.x), f.y );\n#endif\t\n\treturn mix( rg.x, rg.y, f.z );\n}\n\nvec2 iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return vec2(-1.0);\n\th = sqrt(h);\n\treturn vec2(-b-h, -b+h );\n}\n\nvec2 voronoi( in vec3 x, out vec3 cen )\n{\n    vec3 p = floor( x );\n    vec3 f = fract( x );\n\n\tfloat id = 0.0;\n    float res = 100.0;\n    for( int k=-1; k<=1; k++ )\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec3 b = vec3( float(i), float(j), float(k) );\n        vec3 r = vec3( b ) - f + hash( p + b );\n        float d = dot( r, r );\n\n        if( d < res )\n        {\n\t\t\tid = dot( p+b, vec3(1.0,57.0,113.0 ) );\n            res = d;\n\t\t\tcen = p + r + f;\n        }\n    }\n\n    return vec2( sqrt( res ), id );\n}\n\nvec4 map( in vec3 p )\n{\n\tvec3 q = 8.0*p;\n\tfloat n = 0.0;\n\tn  = 0.5000*noise( q ); q = q*2.02;\n    n += 0.2500*noise( q ); q = q*2.03;\n    n += 0.1250*noise( q );\n\t\n\tvec3 cen = vec3(0.0);\n\tvec2 vor = voronoi( 2.0*p, cen );\n\tfloat f = 1.0-1.5*vor.x; cen \/= 2.0;\n\tf -= smoothstep( 0.4, 0.5, n );\n\t\n    float d = 2.0*f;\n\t\n\td *= smoothstep( 0.0, 0.2, 1.0-length(p) );\n\td *= smoothstep( 0.0, 0.2, 1.0-length(cen) );\n\td = clamp( d, 0.0, 1.0 );\n\t\n\tvec3 col = mix( vec3(1.0,0.85,0.7), vec3(0.2,0.0,0.0), d );\n\t\n\tcol -= 0.05*sin( 5.0*vor.y + vec3(1.0,2.0,3.0) );\n\t\n\treturn vec4( col, d );\n}\n\nconst vec3 sundir = vec3(0.0,0.5,-1.0);\n\nvec4 raymarch( in vec3 ro, in vec3 rd, in vec2 tminmax )\n{\n\tvec4 sum = vec4(0, 0, 0, 0);\n\n\tfloat dt = 0.015;\n\t\n\tfloat t = tminmax.x;\/\/ + dt*hash(ro).x;\n\tfor(int i=0; i<64; i++)\n\t{\n\t\tif( sum.a > 0.99 || t>tminmax.y ) break;\n\n\t\tvec3 pos = ro + t*rd;\n\t\tvec4 col = map( pos );\n\t\t\n\t\tfloat dif = clamp((col.w - map(pos+0.01*sundir).w)\/0.01, 0.0, 1.0 );\n        float occ = dot(pos,pos);\n        vec3 lin = vec3(0.2,0.2,0.2) + vec3(1.0, 0.9, 0.7)*dif;\n\t\tcol.xyz *= lin*2.5*occ*occ;\n\t\t\n\t\tcol.a *= 0.1;\n\t\tcol.rgb *= col.a;\n\n\t\tsum = sum + col*(1.0 - sum.a) * dt\/0.01;\t\n\n\t\tt += dt;\n\t}\n\n\tsum.xyz \/= (0.001+sum.w);\n\n\treturn clamp( sum, 0.0, 1.0 );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0*q;\n    p.x *= iResolution.x\/ iResolution.y;\n    vec2 mo = iMouse.xy \/ iResolution.xy;\n    float an = 2.0 + 0.2*iGlobalTime - mo.x;\n\n\tvec3 ro = 2.0*vec3(cos(an), 0.17, sin(an));\n\tvec3 ta = vec3(0.0, 0.0, 0.0);\n    vec3 ww = normalize( ta - ro);\n    vec3 uu = normalize( cross( vec3(0.0,1.0,0.0), ww ) );\n    vec3 vv = normalize( cross(ww,uu) );\n    vec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\tvec3 col = vec3(0.05,0.04,0.03);\n    vec2 seg = iSphere( ro, rd, vec4(0.0,0.0,0.0,1.0) );\n\tif( seg.x>0.0 )\n\t{\n        vec4 res = raymarch( ro, rd, seg );\n\t    col = mix( col, res.xyz, res.w );\n\t}\n\t\n\tcol = mix( col, vec3(dot(col,vec3(0.333))), -0.1 );\n\t\n\tcol = pow( col, vec3(0.45) ) * 1.2;\n\n\tcol *= sqrt( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y) );\n\t    \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}