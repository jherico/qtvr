{"Shader":{"ver":"0.1","info":{"id":"MlSXRR","date":"1440913200","viewed":372,"name":"Gotthard Tunnel","username":"dr2","description":"A trip through the (soon to be old) Gotthard train tunnel.","likes":8,"published":3,"flags":0,"tags":["raymarching","tunnel","landscape","train"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Gotthard Tunnel\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;  p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r)\n{\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat VBlockRingDf (vec3 p, float r, float w)\n{\n  vec2 q = vec2 (length (p.yx) - r, p.z);\n  q = q * q * q;\n  return pow (dot (q, q), 1.\/6.) - w *\n     (0.7 + 0.3 * pow (abs (sin (13. * atan (p.y, p.x))), 0.25));\n}\n\nfloat SmoothMin (float a, float b, float k)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ k, 0., 1.);\n  return mix (b, a, h) - k * h * (1. - h);\n}\n\nmat3 vuMat;\nvec3 vuPos, vuDir, sunDir;\nfloat tCur, vuSpd, grDir;\nint idObj;\nconst int nCar = 4;\nconst float carSep = 3.5;\nconst float dstFar = 250.;\n\nconst int idTun = 0, idLight = 1, idArch = 2, idRail = 3, idTie = 4,\n   idBody = 5, idBase = 6, idWheel = 7, idCable = 8, idFlash = 9, idWin = 10,\n   idFrm = 11;\n\nvec3 SkyHrzCol (vec3 ro, vec3 rd, int refl)\n{\n  const float skyHt = 150.;\n  vec3 col;\n  vec2 p;\n  float w, f, cloudFac, s;\n  if (refl == 0 &&\n     rd.y < max (0.015 * Fbm1 (20. * rd.z + 0.5 * tCur) - 0.01, 0.002))\n     col = vec3 (0.03, 0.07, 0.03);\n  else {\n    if (rd.y > 0.) {\n      ro.x += 1.5 * tCur;\n      p = 0.02 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n      w = 0.8;\n      f = 0.;\n      for (int j = 0; j < 4; j ++) {\n\tf += w * Noisefv2 (p);\n\tw *= 0.5;\n\tp *= 2.;\n      }\n      cloudFac = clamp (5. * (f - 0.5) * rd.y + 0.1, 0., 1.);\n    } else cloudFac = 0.;\n    s = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.1, 0.6) + 0.2 * pow (1. - max (rd.y, 0.), 5.) +\n       (0.35 * pow (s, 6.) + 0.65 * min (pow (s, 256.), 0.3));\n    col = mix (col, vec3 (0.75), cloudFac);\n  }\n  return col;\n}\n\nfloat WaterHt (vec3 p)\n{\n  const float wb = 1.414;\n  float ht, w;\n  p *= 0.02;\n  ht = 0.;\n  w = wb;\n  for (int j = 0; j < 6; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float h;\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  h = WaterHt (p);\n  return normalize (vec3 (h - WaterHt (p + e.xyy), e.x,\n     h - WaterHt (p + e.yyx)));\n}\n\nvec3 TrackPath (float t)\n{\n  return vec3 (0.3 * sin (0.3 * t) * cos (0.04 * t) + 0.9 * cos (0.017 * t),\n     0.6 + 0.3 * cos (0.15 * t) * cos (0.04 * t) * sin (0.021 * t), t);\n}\n\nfloat GrndHt (vec2 p, int hiRes)\n{\n  const vec2 vRot = vec2 (1.4624, 1.6721);\n  vec3 v;\n  vec2 q, vyz;\n  float h, w;\n  p -= TrackPath (p.y).xy;\n  q = p * 0.06;\n  w = 0.75 * Noisefv2 (0.25 * q) + 0.15;\n  w *= 36. * w;\n  vyz = vec2 (0.);\n  h = 0.;\n  for (int j = 0; j < 10; j ++) {\n    v = Noisev3v2 (q);\n    vyz += v.yz;\n    h += w * v.x \/ (1. + dot (vyz, vyz));\n    if (j == 4 && hiRes == 0) break;\n    w *= -0.4;      \n    q *= mat2 (vRot.x, vRot.y, - vRot.y, vRot.x);\n  }\n  return h * smoothstep (0., 5., - grDir * p.x) + 0.1 * Noisefv2 (3. * p) - 1.;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 200; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz, 0);\n    if (h < 0.) break;\n    sLo = s;\n    s += 0.4 * h + 0.008 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 6; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz, 0));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float h;\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  h = GrndHt (p.xz, 1);\n  return normalize (vec3 (h - GrndHt (p.xz + e.xy, 1), e.x,\n     h - GrndHt (p.xz + e.yx, 1)));\n}\n\nvec3 GrndCol (vec3 p, vec3 rd, vec3 n)\n{\n  const vec3 gCol1 = vec3 (0.6, 0.7, 0.7), gCol2 = vec3 (0.2, 0.1, 0.1),\n     gCol3 = vec3 (0.4, 0.3, 0.3), gCol4 = vec3 (0.1, 0.2, 0.1),\n     gCol5 = vec3 (0.7, 0.7, 0.8), gCol6 = vec3 (0.05, 0.3, 0.03),\n     gCol7 = vec3 (0.02, 0.1, 0.02), gCol8 = vec3 (0.1, 0.08, 0.);\n  vec3 col, c;\n  vec2 q;\n  float f, d, cSpec;\n  q = p.xz;\n  cSpec = 0.;\n  f = 0.5 * (clamp (Noisefv2 (0.1 * q), 0., 1.) +\n      0.8 * Noisefv2 (0.2 * q + 2.1 * n.xy + 2.2 * n.yz));\n  col = f * mix (f * gCol1 + gCol2, f * gCol3 + gCol4, 0.65 * f);\n  if (n.y < 0.5) {\n    f = 0.4 * (Noisefv2 (0.4 * q + vec2 (0., 0.57 * p.y)) +\n       0.5 * Noisefv2 (6. * q));\n    d = 4. * (0.5 - n.y);\n    col = mix (col, vec3 (f), clamp (d * d, 0.1, 1.));\n    cSpec += 0.1;\n  }\n  if (p.y > 22.) {\n    if (n.y > 0.25) {\n      f = clamp (0.07 * (p.y - 22. - Noisefv2 (0.2 * q) * 15.), 0., 1.);\n      col = mix (col, gCol5, f);\n      cSpec += f;\n    }\n  } else {\n    if (n.y > 0.45) {\n      c = (n.y - 0.3) * (gCol6 * vec3 (Noisefv2 (0.4 * q),\n         Noisefv2 (0.34 * q), Noisefv2 (0.38 * q)) + gCol7);\n      col = mix (col, c, smoothstep (0.45, 0.65, n.y) *\n         (1. - smoothstep (15., 22., p.y - 1.5 + 1.5 * Noisefv2 (0.2 * q))));\n    }\n    if (p.y < 0.65 && n.y > 0.4) {\n      d = n.y - 0.4;\n      col = mix (col, d * d + gCol8, 2. * clamp ((0.65 - p.y -\n         0.35 * (Noisefv2 (0.4 * q) + 0.5 * Noisefv2 (0.8 * q) +\n         0.25 * Noisefv2 (1.6 * q))), 0., 0.3));\n      cSpec += 0.1;\n    }\n  }\n  return col * (0.2 + max (dot (n, sunDir), 0.)) +\n     cSpec * pow (max (0., dot (sunDir, reflect (rd, n))), 128.);\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dMin, dTun, d, tw1, tw2;\n  dMin = dstFar;\n  p.xy -= TrackPath (p.z).xy;\n  d = length (max (abs (vec2 (abs (p.x) - 0.25, p.y + 0.51)) -\n     vec2 (0.01, 0.03), 0.));\n  if (d < dMin) { dMin = d; idObj = idRail; }\n  tw1 = 0.5 + 0.1 * sin (2.5 * p.z) * sin (31.4 * p.z);\n  tw2 = 0.8 + 0.02 * sin (6.5 * p.z) * sin (7.4 * p.z);\n  dTun = length (p.xy - vec2 (0., tw1 * clamp (p.y \/ tw1, -0.5, 0.5))) - tw2;\n  if (dTun < 0.1)\n     dTun = SmoothMin (- dTun, p.y + 0.6 + 0.02 * sin (4.1 * p.z), 0.05);\n  else dTun -= 0.2;\n  q = vec3 (p.x * sign (mod (p.z, 10.) - 5.1) + 0.9, p.y - 0.15,\n     mod (p.z, 5.) - 1.5);\n  d = max (dTun, - PrBoxDf (q, vec3 (0.6, 0.4, 1.)));\n  if (d < dMin) { dMin = d; idObj = idTun; }\n  d = PrBoxDf (vec3 (q.x + 0.1, q.yz), vec3 (0.1, 0.4, 1.));\n  if (d < dMin) { dMin = d; idObj = idWin; }\n  d = max (PrBoxDf (q, vec3 (0.13, 0.4, 1.)),\n     - PrBoxDf (q, vec3 (0.14, 0.38, 0.98)));\n  if (d < dMin) { dMin = d; idObj = idFrm; }\n  q = vec3 (p.x, p.y + 0.58, mod (p.z, 0.8) - 0.4);\n  d = PrBoxDf (q, vec3 (0.37, 0.02, 0.07));\n  if (d < dMin) { dMin = d; idObj = idTie; }\n  d = VBlockRingDf (vec3 (p.xy, mod (p.z, 5.) - 4.5), 0.9, 0.16);\n  if (d < dMin) { dMin = d; idObj = idArch; }\n  d = PrBoxDf (vec3 (p.x, p.y - 0.92, mod (p.z, 5.) - 2.),\n     vec3 (0.02, 0.03, 0.2));\n  if (d < dMin) { dMin = d; idObj = idLight; }\n  d = length (max (abs (vec2 (p.x, p.y - 0.92)) - vec2 (0.01), 0.));\n  if (d < dMin) { dMin = d; idObj = idCable; }\n  float ppz = p.z - vuSpd * tCur - 2.;\n  for (int nc = nCar - 1; nc >= 0; nc --) {\n    p.z = ppz - carSep * float (nc);\n    q = p;\n    q.y -= -0.12;\n    d = max (PrCylDf (q, 0.28, 0.4), - PrCylDf (q, 0.27, 0.38));\n    d = max (d, - min (PrCylDf (q, 0.23, 0.41),\n      PrBoxDf (q, vec3 (0.3, 0.1, 0.35))));\n    if (d < dMin) { dMin = d; idObj = idBody; }\n    q.y -= -0.28;\n    d = PrRoundBoxDf (q, vec3 (0.2, 0.02, 0.38), 0.01);\n    if (d < dMin) { dMin = d; idObj = idBase; }\n    q.y -= 0.57;\n    d = PrCylDf (q.xzy, 0.04, 0.03);\n    if (d < dMin) { dMin = d; idObj = idFlash; }\n    q = vec3 (abs (p.x) - 0.23, p.y + 0.41, abs (p.z + 0.2) - 0.2);\n    d = PrCylDf (q.yzx, 0.06 - sign (q.x) * 0.01, 0.02);\n    if (d < dMin) { dMin = d; idObj = idWheel; }\n  }\n  return dMin;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.2, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nvec3 ObjCol (vec3 ro, vec3 rd, float dist)\n{\n  vec4 col4;\n  vec3 ltPos, ltDir, ltAx;\n  float ltDiff, ltSpec, amb, di, atten, t;\n  int idObjT;\n  vec3 col;\n  idObjT = idObj;\n  col4 = vec4 (0.);\n  if      (idObjT == idTun) col4 = vec4 (0.05, 0.05, 0.055, 0.5);\n  else if (idObjT == idFrm) col4 = vec4 (0.1, 0.1, 0.11, 0.6);\n  else if (idObjT == idLight) col4 = vec4 (0.);\n  else if (idObjT == idArch) col4 = vec4 (0.3, 0.2, 0.1, 0.5);\n  else if (idObjT == idRail) col4 = vec4 (0.5, 0.5, 0.55, 1.);\n  else if (idObjT == idTie) col4 = vec4 (0.15, 0.15, 0.1, 0.5);\n  else if (idObjT == idBody) col4 = vec4 (0.15, 0.25, 0.3, 0.2);\n  else if (idObjT == idBase) col4 = vec4 (0.1, 0.2, 0.2, 0.2);\n  else if (idObjT == idWheel) col4 = vec4 (0.15, 0.12, 0.05, 0.3);\n  else if (idObjT == idCable) col4 = vec4 (1., 1., 0., 1.);\n  else if (idObjT == idFlash) col4 = vec4 ((mod (2. * tCur, 1.) < 0.5) ?\n     vec3 (2., 0., 0.) : vec3 (0., 0., 2.), 0.);\n  vec3 vn = ObjNf (ro);\n  if (idObjT == idTun || idObjT == idFrm) {\n    vn = VaryNf (20. * ro, vn, 10.);\n  } else if (idObjT == idArch || idObjT == idTie) {\n    vn = VaryNf (40. * ro, vn, 2.);\n  }\n  if (idObjT == idLight) col = vec3 (1., 1., 0.9);\n  else {\n    amb = 0.05;\n    ltDiff = 0.;\n    ltSpec = 0.;\n    for (int nc = nCar; nc >= 0; nc --) {\n      t = vuSpd * tCur + carSep * float (nc);\n      ltPos = TrackPath (t);\n      ltAx = normalize (TrackPath (t + 0.1) - ltPos);\n      ltPos.y += 0.2;\n      ltDir = ro - ltPos;\n      di = 1. \/ max (length (ltDir), 0.01);\n      ltDir *= di;\n      atten = pow (min (di, 1.), 2.) * max (dot (ltAx, ltDir), 0.);\n      ltDiff += atten * max (dot (- ltDir, vn), 0.);\n      ltSpec += atten * pow (max (dot (reflect (- ltDir, vn), rd), 0.), 128.);\n    }\n    col = col4.rgb * (amb + (1. - amb) * ltDiff) + col4.a * ltSpec;\n  }\n  return clamp (col, 0., 1.);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  float dstHit, reflFac, dw;\n  int refl;\n  vec3 col;\n  sunDir = normalize (vec3 (0.8, 1., 1.));\n  grDir = -1.;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  reflFac = 1.;\n  refl = -1;\n  if (idObj != idWin) {\n    ro += rd * dstHit;\n    col = ObjCol (ro, rd, dstHit);\n  } else {\n    ro += rd * dstHit;\n    if (grDir * (ro.x - TrackPath (ro.z).x) > 0.) {\n      if (rd.y < 0.) {\n        dw = - ro.y \/ rd.y;\n        ro += dw * rd;\n        rd = reflect (rd, WaterNf (ro, dw));\n        ro += 0.01 * rd;\n\treflFac *= 0.7;\n\trefl = 1;\n      } else refl = 0;\n    } else {\n      dstHit = GrndRay (ro, rd);\n      if (dstHit < dstFar || rd.y < 0.) {\n        ro += rd * dstHit;\n        col = GrndCol (ro, rd, GrndNf (ro, dstHit));\n      } else refl = 0;\n    }\n  }\n  if (refl >= 0) col = reflFac * SkyHrzCol (ro, rd, refl);\n  return sqrt (clamp (col, 0., 1.));\n}\n\nvoid VuPM (float t)\n{\n  vec3 vuF, vuB, vel, acc, va, ort, cr, sr;\n  float dt;\n  dt = 0.2;\n  vuPos = TrackPath (t);\n  vuF = TrackPath (t + dt);\n  vuB = TrackPath (t - dt);\n  vel = (vuF - vuB) \/ (2. * dt);\n  vuDir = normalize (vel);\n  vel.y = 0.;\n  acc = (vuF - 2. * vuPos + vuB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  ort = vec3 (0., atan (vel.z, vel.x) - 0.5 * pi,\n     0.5 * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  vuMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * (fragCoord - 0.5 * iResolution.xy) \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 rd, ro;\n  vuSpd = 3.;\n  VuPM (vuSpd * tCur);\n  rd = normalize (vec3 (uv, 2.2)) * vuMat;\n  ro = vuPos;\n  ro.y += 0.1;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}