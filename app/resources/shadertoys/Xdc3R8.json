{"Shader":{"ver":"0.1","info":{"id":"Xdc3R8","date":"1447883780","viewed":412,"name":"Easy RM (287c => 172c)","username":"aiekick","description":"based on shader \/\/ https:\/\/www.shadertoy.com\/view\/4ljSDt from gilesruscoe ","likes":9,"published":3,"flags":0,"tags":["ray","spiral","marching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/*\nbased on shader \/\/ https:\/\/www.shadertoy.com\/view\/4ljSDt from gilesruscoe \n*\/\n\n\/\/ new version by 834144373, coyote, FabriceNeyret2 172c \nvoid mainImage( out vec4 f, vec2 v )\n{\n    f.xyz = iResolution;\n\t\n\tfor (int i = 0; i < 60; i++) \n        f.z += length((v-f.xy*.5)*f.z\/f.y + sin(f.z - 3.*iDate.w + vec2(1.6,0))) - 2.;\n\n    f = vec4(1,2,3,1) \/ (2. + .2*f*f).z;\n}\/**\/\n\n\/* new version by FabriceNeyret2 180c\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec3 R = iResolution;\n    v = (v - R.xy*.5)\/R.y;\n\t\n\tfloat s=0.;\n    for (int i = 0; i < 60; i++) \n        s += length(v*s + sin(s - 3.*iDate.w + vec2(1.6,0))) - 2.;\n\n\tf = vec4(1,2,3,1) \/ (2. + .2*s*s);\n}*\/\n\n\/* new version with help of the team golf :) FabriceNeyret2 & Coyote 200c\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec3 R = iResolution,\n        V = normalize(vec3(v - R.xy*.5, R.y));\n\t\n\tv \/= v;\n    for (int i = 0; i < 60; i++) \n        v += length(V.xy * v + sin(V.z * v.x - 3.*iDate.w + vec2(1.6,0))) - 2.;\n\n\tf = vec4(1,2,3,1) \/ (2. + v * v * .2).x;\n}*\/\n\n\/* original 222c\nvoid mainImage( out vec4 f, vec2 v )\n{\n    f = vec4(normalize(vec3((v + v - (v = iResolution.xy)) \/ v.y, 2)), iDate.w * 3.);\n\t\n\tv \/= v;\n    for (int i = 0; i < 80; i++)\n        v += length(f.xy * v + vec2(cos(f.z * v.x - f.w), sin(f.z * v.x - f.w))) - 2.;\n\n\tf = vec4(1,2,3,0) * .5 \/ (1. + v * v *.1).x;\n}*\/\n\n\/* original code before reducing 287c\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 s = iResolution.xy;\n\tvec2 uv = (2.*v - s) \/ s.y;\n    \n    float fov = 2.0;\n    vec3 r = normalize(vec3(uv, fov));\n\tvec3 o = vec3(0,0,-iGlobalTime * 3.);\n\t\n   \tfloat t = 0.;\n\tvec3 p;\n    for (int i = 0; i < 80; ++i)\n    {\n\t\tp = o + r * t;\n        p.xy += vec2(cos(p.z),sin(p.z));\n        t += length(p.xy) - 2.;\n    }\n\n\tf.rgb = vec3(.5,1,1.5) \/ (1. + t * t * .1);\n}*\/","name":"","description":"","type":"image"}]}}