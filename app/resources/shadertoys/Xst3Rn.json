{"Shader":{"ver":"0.1","info":{"id":"Xst3Rn","date":"1447724569","viewed":305,"name":"Triangles!","username":"jackdavenport","description":"A raymarched pair of triangles, forming a quad. Based on the distance functions by iq: http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm","likes":1,"published":3,"flags":0,"tags":["triangle","raymarcher"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"mipmap","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"vec3 tri1A = vec3(1.0, 1., 0.0);\nvec3 tri1B = vec3(-1.0, -1.0, 0.0);\nvec3 tri1C = vec3(1.0, -1.0, 0.0);\nvec3 tri2A = vec3(-1.,1.,0.);\nvec3 tri2B = vec3(1.,1.,0.);\nvec3 tri2C = vec3(-1.,-1.,0.);\n\nfloat dot2( in vec3 v ) { return dot(v,v); }\nfloat distTriangle(vec3 p, vec3 a, vec3 b, vec3 c) {\n    \n    vec3 ba = b - a; vec3 pa = p - a;\n    vec3 cb = c - b; vec3 pb = p - b;\n    vec3 ac = a - c; vec3 pc = p - c;\n    vec3 nr = cross(ba,ac);\n    \n    return sqrt(\n    (sign(dot(cross(ba,nr),pa)) +\n     sign(dot(cross(cb,nr),pb)) +\n     sign(dot(cross(ac,nr),pc)) < 2.) ?\n     min( min(\n     dot2(ba*clamp(dot(ba,pa)\/dot2(ba),0.0,1.0)-pa),\n     dot2(cb*clamp(dot(cb,pb)\/dot2(cb),0.0,1.0)-pb) ),\n     dot2(ac*clamp(dot(ac,pc)\/dot2(ac),0.0,1.0)-pc) )\n     :\n     dot(nr,pa)*dot(nr,pa)\/dot2(nr));\n    \n}\n\nfloat distScene(vec3 p) {\n \n    float s = sin(iGlobalTime);\n    \n    float tri1 = distTriangle(p,tri1A + s,tri1B + s,tri1C + s);\n    float tri2 = distTriangle(p,tri2A,tri2B,tri2C);\n    \n    return min(tri1,tri2);\n    \n}\n\nvec4 shade(vec3 dir) {\n \n    vec3 p = vec3(0.,0.,-3.);\n    int id = -1;\n    \n    for(int i = 0; i < 256; i++) {\n        \n        float dst = distScene(p);\n        p += dir * dst;\n        \n        if(dst <= .001) {\n         \n            id = 0;\n            break;\n            \n        }\n        \n    }\n    \n    if(id == 0) {\n     \n        vec3 rd = reflect(dir,vec3(0.,0.,-1.));\n        return textureCube(iChannel0,rd) * .5;\n        \n    }\n    \n    return textureCube(iChannel0,dir);\n    \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy - iResolution.xy \/ 2.) \/ iResolution.y;\n    fragColor = shade(vec3(uv,1.));\n}","name":"","description":"","type":"image"}]}}