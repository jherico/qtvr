{"Shader":{"ver":"0.1","info":{"id":"XljXzV","date":"1445041433","viewed":488,"name":"Minimal Color Wheel","username":"freerunnering","description":"A simple color wheel","likes":0,"published":3,"flags":0,"tags":["color","rgb","wheel","hsl"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float M_PI = 3.14159265359;\n\nvec3 hsl2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ Position normalised into (0, 1)\n    vec2 position = fragCoord.xy\/iResolution.xy;\n\tposition.y = 1.0-position.y; \/\/ Flip y to match iOS\n    \/\/ Position normalised into (-1, 0, 1)\n    vec2 d = 1.0 - (position * 2.0);\n    \n    \/\/ Distance from screen center\n    float dist = sqrt((d.x*d.x) + (d.y*d.y));\n    \n    \/\/ Rotation\n    float r = acos(d.x \/ dist);\n    if (d.y < 0.0) { r = M_PI-(r + M_PI); } \/\/ Sort out the bottom half (y=-1)\n    \n    r += (M_PI * 1.5); \/\/ Rotate (red on top, green on right, blue on left)\n    \n    \/\/ From radians (0 - 2_PI) to hue (0 - 1)\n    float hue = ((r \/ M_PI) \/ 2.0);\n    \n    \/\/ Into color\n    fragColor = vec4(hsl2rgb( vec3(hue, 1.0, 0.5)), 1.0);\n}\n","name":"","description":"","type":"image"}]}}