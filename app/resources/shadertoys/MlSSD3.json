{"Shader":{"ver":"0.1","info":{"id":"MlSSD3","date":"1446823990","viewed":425,"name":"04","username":"yiwenl","description":"04","likes":0,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\/\/\tTOOLS\nvec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\n\/\/\tGEOMETRY\nfloat sphere(vec3 pos, float radius) {\treturn length(pos) - radius;\t}\nfloat displacement(vec3 p) {\treturn sin(2.0*p.x+iGlobalTime*.983265)*sin(2.0*p.y+iGlobalTime*.57834)*sin(1.0*p.z+iGlobalTime*0.857834) * .5 + .5;\t}\n\nfloat map(vec3 pos) {\n\tpos.xz = rotate(pos.xz, iGlobalTime+pos.y*2.0 + pos.x*.5);\n\n\tfloat sphereSize = 2.5;\n\tfloat d1 = sphere(pos, sphereSize);\n\tfloat d2 = displacement(pos)*.1;\n\tfloat d3 = sphere(pos+vec3(.15, 0.0, 0.0), sphereSize);\n\n\treturn max(d3, -(d1+d2));\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\n\/\/\tLIGHTING\n\nfloat diffuse(vec3 normal, vec3 lightDirection) {\n\treturn max(dot(normal, normalize(lightDirection)), 0.0);\n}\n\nvec3 diffuse(vec3 normal, vec3 lightDirection, vec3 lightColor) {\n\treturn lightColor * diffuse(normal, lightDirection);\n}\n\nfloat specular(vec3 normal, vec3 dir) {\n\tvec3 h = normalize(normal - dir);\n\treturn pow(max(dot(h, normal), 0.0), 40.0);\n}\n\n\nconst vec3 lightPos0 = vec3(1.0, .75, -1.0);\nconst vec3 lightColor0 = vec3(1.0, 1.0, .96);\nconst float lightWeight0 = 0.75;\n\nconst vec3 lightPos1 = vec3(-1.0, -0.75, 0.0);\nconst vec3 lightColor1 = vec3(.96, .96, 1.0);\nconst float lightWeight1 = 0.0;\n\n\nvec4 getColor(vec3 pos, vec3 dir, vec3 normal) {\n\tfloat ambient = .2;\n\tvec3 diff0 = diffuse(normal, lightPos0, lightColor0) * lightWeight0;\n\tvec3 diff1 = diffuse(normal, lightPos1, lightColor1) * lightWeight1;\n\n\tfloat spec = specular(normal, dir) * .25;\n\tvec3 color = vec3(ambient) + diff0 + diff1 + spec;\n\n\tif(pos.z > 0.0) {\n\t\tcolor *= vec3(.25);\n\t}\n\n\treturn vec4(color, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float focus = 2.25;\n    vec3 pos = vec3(0.0, 0.0, -10.0);\n    vec3 dir = normalize(vec3(uv, focus));\n    float prec = 0.001;\n    vec4 color = vec4(.1, .1, .1, 1.0);\n    float d;\n    \n    const int NUM_ITER = 64;\n    const float maxDist = 4.0;\n    for(int i=0; i<NUM_ITER; i++) {\n\t\td = map(pos);\t\t\t\t\t\t\/\/\tdistance to object\n\n\t\tif(d < prec) {\t\t\t\t\t\t\/\/ \tif get's really close, set as hit the object\n\t\t\tcolor       = vec4(1.0);\n\t\t\tvec3 normal = computeNormal(pos);\n\t\t\tcolor       = getColor(pos, dir, normal);\n\t\t\tbreak;\n\t\t}\n\n\t\tpos += d * dir;\t\t\t\t\t\t\/\/\tmove forward by\n\t\tif(length(pos) > maxDist) break;\n\t}\n\t\n    fragColor = color;\n}","name":"","description":"","type":"image"}]}}