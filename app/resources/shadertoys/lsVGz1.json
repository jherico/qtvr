{"Shader":{"ver":"0.1","info":{"id":"lsVGz1","date":"1453349406","viewed":97,"name":"BCH colorspace","username":"kurtoon","description":"A GLSL implementation of BCH colorspace as described by Bezryadin and Bourov:<br\/><a href=\"http:\/\/www.slideserve.com\/orien\/color-coordinate-systems-for-accurate-color-image-editing-software\" class=\"regular\" target=\"_blank\">http:\/\/www.slideserve.com\/orien\/color-coordinate-systems-for-accurate-color-image-editing-software<\/a><br\/>","likes":5,"published":3,"flags":0,"tags":["colorspace"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/* \tBCH Colorspace\n\tKurt Kaminski, 2015\n\n\tDescribed by Bezryadin and Bourov:\n\thttp:\/\/www.slideserve.com\/orien\/color-coordinate-systems-for-accurate-color-image-editing-software\n\n\tmouse x wipes between BCH and HSV visualizations\n\t\tleft = BCH\t\t\n        right = HSV\n*\/\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ H S V\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ RGB 2 HSV\nvec3 rgb2HSV(vec3 _col){\n  vec3 hsv;\n  float mini = 0.0;\n  float maxi = 0.0;\n  if (_col.r < _col.g) mini = _col.r;\n    else mini = _col.g;\n  if (_col.b < mini) mini = _col.b;\n  if (_col.r > _col.g) maxi = _col.r;\n    else maxi = _col.g;\n  if (_col.b > maxi) maxi = _col.b;\n  hsv.z = maxi; \/\/VALUE\n  float delta = maxi - mini; \/\/delta\n  if (maxi > 0.0) hsv.y = delta \/ maxi; \/\/SATURATION\n    else hsv.y = 0.0;\n  if (_col.r >= maxi) hsv.x = (_col.g - _col.b) \/ delta;\n  else if (_col.g >= maxi) hsv.x = 2.0 + (_col.b - _col.r)\/delta;\n  else hsv.x = 4.0 + (_col.r - _col.g) \/ delta;\n  hsv.x *= 60.0;\n  if (hsv.x < 0.0) hsv.x += 360.0;\n  return hsv;\n}\n\n\/\/ HSV 2 RGB\nvec3 hsv2RGB(vec3 _hsv){\n  float hh, p, q, t, ff;\n  int i;\n  vec3 rgb;\n  if(_hsv.y <= 0.0){\n    rgb.r = _hsv.z;\n    rgb.g = _hsv.z;\n    rgb.b = _hsv.z;\n    return rgb;\n  }\n  hh = _hsv.x;\n  if(hh >= 360.) hh = (hh\/360.);\n  hh \/= 60.0;\n  i = int(hh);\n  ff = hh - float(i);\n  p = _hsv.z * (1.0 - _hsv.y);\n  q = _hsv.z * (1.0 - (_hsv.y * ff));\n  t = _hsv.z * (1.0 - (_hsv.y * (1.0 - ff)));\n\n  if (i == 0){\n      rgb.r = _hsv.z;\n      rgb.g = t;\n      rgb.b = p;\n      return rgb;\n    }\n  else if (i == 1){\n      rgb.r = q;\n      rgb.g = _hsv.z;\n      rgb.b = p;\n      return rgb;\n    }\n  else if (i == 2){\n      rgb.r = p;\n      rgb.g = _hsv.z;\n      rgb.b = t;\n      return rgb;\n    }\n  else if (i == 3){\n      rgb.r = p;\n      rgb.g = q;\n      rgb.b = _hsv.z;\n      return rgb;\n    }\n  else if (i == 4){\n      rgb.r = t;\n      rgb.g = p;\n      rgb.b = _hsv.z;\n      return rgb;\n    }\n  else if (i == 5){\n      rgb.r = _hsv.z;\n      rgb.g = p;\n      rgb.b = q;\n      return rgb;\n    }\n  else {\n      rgb.r = _hsv.z;\n      rgb.g = p;\n      rgb.b = q;\n    return rgb;\n  }\n}\n\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ B C H\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\nvec3 rgb2DEF(vec3 _col){\n  mat3 XYZ; \/\/ Adobe RGB (1998)\n  XYZ[0] = vec3(0.5767309, 0.1855540, 0.1881852);\n  XYZ[1] = vec3(0.2973769, 0.6273491, 0.0752741);\n  XYZ[2] = vec3(0.0270343, 0.0706872, 0.9911085); \n  mat3 DEF;\n  DEF[0] = vec3(0.2053, 0.7125, 0.4670);\n  DEF[1] = vec3(1.8537, -1.2797, -0.4429);\n  DEF[2] = vec3(-0.3655, 1.0120, -0.6104);\n\n  vec3 xyz = _col.rgb * XYZ;\n  vec3 def = xyz * DEF;\n  return def;\n}\n\nvec3 def2RGB(vec3 _def){\n  mat3 XYZ; \n  XYZ[0] = vec3(0.6712, 0.4955, 0.1540);\n  XYZ[1] = vec3(0.7061, 0.0248, 0.5223);\n  XYZ[2] = vec3(0.7689, -0.2556, -0.8645); \n  mat3 RGB; \/\/ Adobe RGB (1998)\n  RGB[0] = vec3(2.0413690, -0.5649464, -0.3446944);\n  RGB[1] = vec3(-0.9692660, 1.8760108, 0.0415560);\n  RGB[2] = vec3(0.0134474, -0.1183897, 1.0154096);\n\n  vec3 xyz = _def * XYZ;\n  vec3 rgb = xyz * RGB;\n  return rgb;\n}\nfloat getB(vec3 _def){\n    float b = sqrt((_def.r*_def.r) + (_def.g*_def.g) + (_def.b*_def.b));\n    return b;\n}\nfloat getC(vec3 _def){\n    vec3 def_D = vec3(1.,0.,0.);\n    float C = atan(length(cross(_def,def_D)), dot(_def,def_D));\n    return C;\n}\nfloat getH(vec3 _def){\n    vec3 def_E_axis = vec3(0.,1.,0.);\n    float H = atan(_def.z, _def.y) - atan(def_E_axis.z, def_E_axis.y) ;\n    return H;\n}\n\/\/ RGB 2 BCH\nvec3 rgb2BCH(vec3 _col){\n  vec3 DEF = rgb2DEF(_col);\n  float B = getB(DEF);\n  float C = getC(DEF);\n  float H = getH(DEF);\n  return vec3(B,C,H);\n}\n\/\/ BCH 2 RGB\nvec3 bch2RGB(vec3 _bch){\n  vec3 def;\n  def.x = _bch.x * cos(_bch.y);\n  def.y = _bch.x * sin(_bch.y) * cos(_bch.z);\n  def.z = _bch.x * sin(_bch.y) * sin(_bch.z);\n  vec3 rgb = def2RGB(def);\n  return rgb;\n}\n\n\/\/ BRIGHTNESS\nvec3 Brightness(vec3 _col, float _f){\n  vec3 BCH = rgb2BCH(_col);\n  vec3 b3 = vec3(BCH.x,BCH.x,BCH.x);\n  float x = pow((_f + 1.)\/2.,2.);\n  x = _f;\n  _col = _col + (b3 * x)\/3.;\n  return _col;\n}\n\n\/\/ CONTRAST\n\/\/ simple contrast\n\/\/ needs neighboring brightness values for higher accuracy\nvec3 Contrast(vec3 _col, float _f){\n  vec3 def = rgb2DEF(_col);\n  float B = getB(def);\n  float C = getC(def);\n  float H = getH(def);\n  \n  B = B * pow(B*(1.-C), _f);\n\n  def.x = B * cos(C);\n  def.y = B * sin(C) * cos(H);\n  def.z = B * sin(C) * sin(H);\n\n  _col.rgb = def2RGB(def);\n  return _col;\n}\n\nvec3 Hue(vec3 _col, float _f){\n  vec3 BCH = rgb2BCH(_col);\n  BCH.z += _f * 3.1459 * 2.;\n  BCH = bch2RGB(BCH);\n  return BCH;\n}\n\nvec3 Saturation(vec3 _col, float _f){\n  vec3 BCH = rgb2BCH(_col);\n  BCH.y *= (_f + 1.);\n  BCH = bch2RGB(BCH);\n  return BCH;\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/ M A I N\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec3 bch;\n    bch.x = 1.0;\n    bch.y = 1.0;\n    bch.z = uv.x*3.1459*2.0;\n    \n    vec3 hsv;\n    hsv.x = uv.x*360.0;\n    hsv.y = 1.0;\n    hsv.z = 1.0;\n\n    vec3 rgb;\n    if (iMouse.x < fragCoord.x)\n        rgb = bch2RGB(bch);\n    else \n        rgb = hsv2RGB(hsv);\n    \n\tfragColor = vec4(rgb,1.0);\n}","name":"","description":"","type":"image"}]}}