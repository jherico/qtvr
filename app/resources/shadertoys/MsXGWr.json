{"Shader":{"ver":"0.1","info":{"id":"MsXGWr","date":"1367548764","viewed":28375,"name":"Mike","username":"iq","description":"Raymarching (a simplified version of) Mike's procedural distance field. Modeling and shading are pretty arbitrary, and made after the first picture you get in google image when you type his name. You can see him in 3D if you uncomment line 9.","likes":66,"published":3,"flags":0,"tags":["3d","raymarching","distancefield"],"hasliked":0},"renderpass":[{"inputs":[{"id":16,"src":"\/presets\/tex11.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Made with love after a famous movie character. Modeling is pretty arbitrary and was \n\/\/ done by visual inspiration from the first picture you get in google images when you \n\/\/ type \"mike wazowski\".\n\n\/\/ Uncomment the following define in order to see Mike in 3D!\n\/\/#define STEREO \n\nfloat hash( float n )\n{\n    return fract(sin(n)*158.5453123);\n}\n\nfloat noise( in float x )\n{\n    float p = floor(x);\n    float f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    return mix( hash(p+0.0), hash(p+1.0),f);\n}\n\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n\n    f = f*f*(3.0-2.0*f);\n\n    float n = p.x + p.y*157.0;\n\n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nconst mat2 m2 = mat2( 0.80, -0.60, 0.60, 0.80 );\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n\n    f += 0.5000*noise( p ); p = m2*p*2.02;\n    f += 0.2500*noise( p ); p = m2*p*2.03;\n    f += 0.1250*noise( p ); p = m2*p*2.01;\n    f += 0.0625*noise( p );\n\n    return f\/0.9375;\n}\n\nvec3 texturize( sampler2D sa, vec3 p, vec3 n )\n{\n\tvec3 x = texture2D( sa, p.yz ).xyz;\n\tvec3 y = texture2D( sa, p.zx ).xyz;\n\tvec3 z = texture2D( sa, p.xy ).xyz;\n\treturn x*abs(n.x) + y*abs(n.y) + z*abs(n.z);\n}\n\n\/\/----------------------------------------------------------------\n\nvec2 sdSegment( vec3 a, vec3 b, vec3 p )\n{\n\tvec3 pa = p-a, ba = b-a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn vec2( length( pa - ba*h ), h );\n}\n\nbool gUseMin;\nfloat smin( float a, float b )\n{\n\tif( gUseMin ) return min(a,b);\n\t\n\t\n    float k = 0.06;\n\tfloat h = clamp( 0.5 + 0.5*(b-a)\/k, 0.0, 1.0 );\n\treturn mix( b, a, h ) - k*h*(1.0-h);\n}\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d1,d2);\n}\n\nvec2 map( vec3 p )\n{\n\tp.y -= 1.8;\n    \n\tp.x = abs(p.x);\n\n\tvec3 q = p;\n\tq.y -= 0.3*pow(1.0-length(p.xz),1.0)*smoothstep(0.0, 0.2, p.y);\n\tq.y *= 1.05;\n\tq.z *= 1.0 + 0.1*smoothstep( 0.0, 0.5, q.z )*smoothstep( -0.5, 0.5, p.y );\n    float dd = length( (p - vec3(0.0,0.65,0.8))*vec3(1.0,0.75,1.0) );\n\tfloat am = clamp( 4.0*abs(p.y-0.45), 0.0, 1.0 );\n\tfloat fo = -0.03*(1.0-smoothstep( 0.0, 0.04*am, abs(dd-0.42) ))*am;\n    float dd2 = length( (p - vec3(0.0,0.65,0.8))*vec3(1.0,0.25,1.0) );\n\tfloat am2 = clamp( 1.5*(p.y-0.45), 0.0, 1.0 );\n\tfloat fo2 = -0.085*(1.0-smoothstep( 0.0, 0.08*am2, abs(dd2-0.42) ))*am2;\n    q.y += -0.05+0.05*length(q.x);\n\t\n\tfloat d1 = length( q ) - 0.9 + fo + fo2;\n    vec2 res = vec2( d1, 1.0 );\n\n\t\/\/ arms\n\tvec2 h = sdSegment( vec3(.83,0.15,0.0), vec3(1.02,-0.6,-.1), p );\n\tfloat d2 = h.x - 0.07;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(1.02,-0.6,-.1), vec3(0.95,-1.2,0.1), p );\n\td2 = h.x - 0.07 + h.y*0.02;\n\tres.x = smin( res.x, d2 );\n\t\n\t\/\/ hands\n\tif( p.y<-1.0 )\n\t{\n    float fa = sin(3.0*iGlobalTime);\n\th = sdSegment( vec3(0.95,-1.2,0.1), vec3(0.97,-1.5,0.0), p );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.97,-1.5,0.0), vec3(0.95,-1.7,0.0)-0.01*fa, p );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.95,-1.2,0.1), vec3(1.05,-1.5,0.1), p );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(1.05,-1.5,0.1), vec3(1.0,-1.75,0.1)-0.01*fa, p );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.95,-1.2,0.1), vec3(0.98,-1.5,0.2), p );\n\td2 = h.x - 0.03;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.98,-1.5,0.2), vec3(0.95,-1.7,0.15)-0.01*fa, p );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.95,-1.2,0.1), vec3(0.85,-1.4,0.2), p );\n\td2 = h.x - 0.04 + 0.01*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.85,-1.4,0.2), vec3(0.85,-1.63,0.15)+0.01*fa, p );\n\td2 = h.x - 0.03 + 0.01*h.y;\n\tres.x = smin( res.x, d2 );\n\t}\n\t\n\t\/\/ legs\n\tif( p.y<0.0 )\n\t{\n\th = sdSegment( vec3(0.5,-0.5,0.0), vec3(0.6,-1.2,0.1), p );\n\td2 = h.x - 0.14 + h.y*0.08;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.6,-1.2,0.1), vec3(0.5,-1.8,0.0), p );\n\td2 = h.x - 0.06;\n\tres.x = smin( res.x, d2 );\n\t}\n\n    \/\/ feet\n\tif( p.y<-1.5 )\n\t{\n\th = sdSegment( vec3(0.5,-1.8,0.0), vec3(0.6,-1.8,0.4), p );\n\td2 = h.x - 0.09 + 0.02*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.5,-1.8,0.0), vec3(0.77,-1.8,0.35), p );\n\td2 = h.x - 0.08 + 0.02*h.y;\n\tres.x = smin( res.x, d2 );\n\th = sdSegment( vec3(0.5,-1.8,0.0), vec3(0.9,-1.8,0.2), p );\n\td2 = h.x - 0.07 + 0.02*h.y;\n\tres.x = smin( res.x, d2 );\n\t}\n\t\n\t\/\/ horns\n\tvec3 hp = p - vec3(0.0,0.8,0.0);\n\tfloat hh = -2.5*hp.x*hp.x;\n\tfloat co = cos(hh);\n\tfloat si = sin(hh);\n\thp.xy = mat2(co,si,-si,co)*hp.xy;\n\tfloat d4 = length( hp*vec3(0.3,1.0,1.0) ) - 0.19;\n\td4 *= 0.5;\n\tif( d4<res.x ) res = vec2( d4, 3.0 );\n\n\t\/\/ eyes\n\tfloat d3 = length( (p - vec3(0.0,0.25,0.35))*vec3(1.0,0.8,1.0) ) - 0.5;\n\tif( d3<res.x ) res = vec2( d3, 2.0 );\n\n\t\/\/ mouth\n\tfloat mo = length( (q-vec3(0.0,-0.35,1.0))*vec3(1.0,1.2,0.25)\/1.2 ) -0.3\/1.2;\n\tfloat of = 0.1*pow(smoothstep( 0.0, 0.2, abs(p.x-0.3) ),0.5);\n\tmo = max( mo, -q.y-0.35-of );\n\n\tfloat li = smoothstep( 0.0, 0.05, mo+0.02 ) - smoothstep( 0.05, 0.10, mo+0.02 );\n\tres.x -= 0.03*li*clamp( (-q.y-0.4)*10.0, 0.0, 1.0 );\n\t\n\tif( -mo > res.x )\n\t\tres = vec2( -mo, 4.0 );\n\n    res.x += 0.01*(smoothstep( 0.0, 0.05, mo+0.062 ) - smoothstep( 0.05, 0.10, mo+0.062 ));\n\n    \/\/ teeth\t\n\tif( p.x<0.3 )\n\t{\n    p.x = mod( p.x, 0.16 )-0.08;\t\n    float d5 = length( (p-vec3(0.0,-0.37,0.65))*vec3(1.0,2.0,1.0))-0.08;\n\tif( d5<res.x )\n\t\tres = vec2( d5, 2.0 );\n\t}\n\t\n\treturn vec2(res.x*0.8,res.y);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.002,0.0,0.0);\n\treturn normalize( vec3(\n           map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n           map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n           map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd )\n{\n    float m = -1.0;\n\tfloat mint = 10.0;\n\n    \/\/ plane\t\n\tfloat tf = (0.0-ro.y)\/rd.y;\n\tif( tf>0.0 ) { mint = tf; m = 0.0; }\n\t\n\t\/\/ mike\n\tfloat maxd = min(10.0,mint);\n\tfloat precis = 0.001;\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat d = 0.0;\n    for( int i=0; i<80; i++ )\n    {\n        if( h<precis||t>maxd ) break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x;\n\t\td = res.y;\n    }\n\n    if( t<maxd && t<mint )\n\t{\n\t\tmint = t;\n\t\tm = d;\n\t}\n\n    return vec3( mint, m, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k )\n{\n    float res = 1.0;\n    float t = mint;\n\tfloat h = 1.0;\n    for( int i=0; i<30; i++ )\n    {\n        h = map(ro + rd*t).x;\n        res = min( res, smoothstep(0.0,1.0,k*h\/t) );\n\t\tt += clamp( h, 0.02, 2.0 );\n\t\tif( res<0.01 || t>10.0 ) break;\n    }\n    return clamp(res,0.0,1.0);\n}\n\n\nvec3 lig = normalize(vec3(1.0,0.7,0.9));\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\t\/\/if( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n    \n    bool gUseMin = iMouse.z>0.0 && iMouse.x>fragCoord.x;\n\n\t#ifdef STEREO\n\tfloat eyeID = mod(fragCoord.x + mod(fragCoord.y,2.0),2.0);\n    #endif\n\n    \/\/-----------------------------------------------------\n    \/\/ animate\n    \/\/-----------------------------------------------------\n\t\n\tfloat ctime = iGlobalTime;\n\n\t\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\t\n\tfloat an = sin(-0.25 + 0.31416*ctime) - 6.2831*(m.x-0.5);\n\n\tvec3 ro = vec3(3.5*sin(an),1.8,3.5*cos(an));\n    vec3 ta = vec3(0.0,1.5,0.0);\n\n    \/\/ camera matrix\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\n\t\/\/ create view ray\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n\t#ifdef STEREO\n\tvec3 fo = ro + rd*7.0; \/\/ put focus plane behind Mike\n\tro -= 0.1*uu*eyeID;    \/\/ eye separation\n\trd = normalize(fo-ro);\n    #endif\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = vec3(1.0);\n\n\t\/\/ raymarch\n    vec3 tmat = intersect(ro,rd);\n    if( tmat.z>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + tmat.x*rd;\n        vec3 nor = calcNormal(pos);\n\t\tvec3 ref = reflect( rd, nor );\n\n        \/\/ materials\n\t\tvec4 mate = vec4(0.0);\n\t\tvec2 mate2 = vec2(1.0,1.0);\n\t\tif( tmat.z<0.5 )\n\t\t{\n\t\t\tnor = vec3(0.0,1.0,0.0);\n\t\t    ref = reflect( rd, nor );\n\t\t\tmate.xyz = vec3(1.0);\n            mate2.y = 1.0 - 0.9*(2.0\/(2.0+dot(pos.xz,pos.xz)));\n\t\t}\n\t\telse if( tmat.z<1.5 )\n\t\t{\n            mate2.x = 4.0;\n\t\t\tmate = vec4(0.16,0.32,0.0,0.8);\n\n            float f = texturize( iChannel0, 0.15*pos, nor ).x * texturize( iChannel0, 0.2*0.25*pos, nor ).x;\n\t\t\tmate.xyz = mix( 0.8*mate.xyz, vec3(0.3,0.4,0.0), f );\n\n\t\t\tf = texturize( iChannel0, pos, nor ).x * texturize( iChannel0, 0.25*pos, nor ).x;\n\t\t\tf = f*f;\n\t\t    mate.xyz = mix( mate.xyz, vec3(0.3,0.4,0.0), 0.6*f );\n\n\t\t\tvec3 bnor = -1.0+2.0*texturize( iChannel0, 4.0*pos, nor );\n\t\t\tnor = normalize( nor + 0.15*bnor );\n\t\t\t\n\t\t\tmate.xyz *= 0.7;\n\n\t\t}\n\t\telse if( tmat.z<2.5 )\n\t\t{\n\t\t\tvec3 q = pos-vec3(0.0,1.8,0.0) - vec3(0.0,0.44,0.35);\n\n\t\t\tfloat an2 = an + 0.015*(-1.0+2.0*noise( 6.0*iGlobalTime ));\n            vec3 oq = q;\t\t\t\n\t\t\tq.x += -2.0*0.15*clamp(sin(an2),-0.42,0.42);\n\t\t\tfloat f = length( q.xy );\n\t\t\t\n\t\t\tmate2.y = 1.0-0.3*smoothstep(0.24,0.35,length( oq.xy-vec2(0.0,0.035) ));\n\t\t\t\n\t\t\tmate = vec4(0.5,0.5,0.5,1.0);\n\t\t\tmate.xyz = mix( mate.xyz, vec3(0.6,0.4,0.3), 0.5*smoothstep(0.1,0.4,f) );\n\t\t\t\n            vec3 c1 = vec3(0.0,0.15,0.05)*(1.0-0.85*f\/0.19);\n\t\t\tfloat a = atan(q.y,q.x);\n\t\t\tc1 *= 0.3 + 5.0*fbm( 20.0*vec2(0.3*a,1.0*f) );\n\t\t\tmate.xyz = mix( mate.xyz, c1, 1.0-smoothstep( 0.18, 0.19, f ) );\n\n\t\t\toq.x += -2.0*0.19*clamp(sin(an2),-0.42,0.42);\n\t\t\tf = length( oq.xy );\n\t\t\tmate.xyz *= smoothstep( 0.07, 0.10, f );\n\t\t\t\n\t\t\tmate.w = 2.0;\n            mate2.x = 32.0;\n\t\t}\n\t\telse if( tmat.z<3.5 )\n\t\t{\n\t\t\tmate = 0.8*vec4(0.85,0.7,0.6,0.0);\n            mate2.x = 0.0;\n\n\t\t\tfloat f = smoothstep( 0.0, 0.1, 0.5*abs(pos.x)+pos.y-3.02 );\n\t\t\tmate.xyz *= 1.0 - 0.8*vec3( f );\n\t\t\t\n\t\t\tmate.xyz *= 0.2 + 0.8*smoothstep( 0.0, 1.0, texturize( iChannel0, 0.1*2.1*pos*vec3(4.0,0.1,4.0), nor ).x );\n\t\t}\n\t\telse if( tmat.z<4.5 )\n\t\t{\n\t\t\tfloat z = smoothstep( 0.0, 2.0, pos.z+0.5 );\n\t\t\tmate = 0.5*vec4(0.5,0.25,0.1,0.0);\n\t\t\tmate.x += 0.1*(1.0-z);\n\t\t\tmate2.y = z;\n\t\t}\n\n\n\t\t\/\/ lighting\n\t\tfloat occ = (0.5 + 0.5*nor.y)*mate2.y;\n        float amb = 0.5;\n\t\tfloat bou = clamp(-nor.y,0.0,1.0);\n\t\tfloat dif = max(dot(nor,lig),0.0);\n        float bac = max(0.3 + 0.7*dot(nor,-lig),0.0);\n\t\tfloat sha = 0.0; if( dif>0.01 ) sha=softshadow( pos+0.01*nor, lig, 0.0005, 32.0 );\n        float fre = pow( clamp( 1.0 + dot(nor,rd), 0.0, 1.0 ), 2.0 );\n        float spe = max( 0.0, pow( clamp( dot(lig,reflect(rd,nor)), 0.0, 1.0), mate2.x ) );\n\t\t\n\t\t\/\/ lights\n\t\tvec3 lin = vec3(0.0);\n        lin += 2.0*dif*vec3(1.00,1.00,1.00)*pow(vec3(sha),vec3(1.0,1.2,1.5));\n\t\tlin += 1.0*amb*vec3(0.30,0.30,0.30)*occ;\n\t\tlin += 2.0*bou*vec3(0.40,0.40,0.40)*mate2.y;\n\t\tlin += 4.0*bac*vec3(0.40,0.30,0.25)*occ;\n        lin += 1.0*fre*vec3(1.00,1.00,1.00)*2.0*mate.w*(0.5+0.5*dif*sha)*occ;\n\t\tlin += 1.0*spe*vec3(1.0)*occ*mate.w*dif*sha;\n\n\t\t\/\/ surface-light interacion\n\t\tcol = mate.xyz* lin + vec3(0.3)*mate.w*pow(spe,2.0)*sha;\n\t}\n\n\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.45) );\n\n\t\/\/ vigneting\n    col *= 0.5 + 0.5*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.25 );\n\n    #ifdef STEREO\t\n    col *= vec3( eyeID, 1.0-eyeID, 1.0-eyeID );\t\n\t#endif\n\n\tif( iMouse.z>0.0 )\n    {\n\tfloat f = abs(iMouse.x-fragCoord.x);\n\tf = 1.0 - smoothstep( 1.0, 2.0, f );\n\tcol = mix( col, vec3(0.0), f );\n    }\n\t   \n    fragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}