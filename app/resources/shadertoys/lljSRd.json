{"Shader":{"ver":"0.1","info":{"id":"lljSRd","date":"1445988322","viewed":425,"name":"Kids Game Color Wheel 2","username":"freerunnering","description":"Another attempt at color wheel for the UI for a kids game.<br\/><br\/>I deliberately avoid the more elegant and complex vector maths operations as I need to reimplement the algorithm used in normal C in the touch handling code to tell which color the user pressed","likes":1,"published":3,"flags":0,"tags":["rgb","wheel","ui","hsl","colorwheel"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float M_PI = 3.14159265359;\n\n\nvec3 hsl2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0,1.0);\n    return c.z + c.y * (rgb-0.5)*(1.0-abs(2.0*c.z-1.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float sections = 12.;\n    const float section = 1.\/sections;\n    \n    const float center = 0.4;\n    const float end = 1.0;\n    \n    \n    float l = 0.55;\n    \/\/ Position normalised into (0, 1)\n    vec2 position = fragCoord.xy\/iResolution.xy;\n\tposition.y = 1.0-position.y; \/\/ Flip y to match iOS\n    \/\/ Position normalised into (-1, 0, 1)\n    vec2 d = 1.0 - (position * 2.0);\n    \n    \/\/ Distance from screen center\n    float dist = sqrt((d.x*d.x) + (d.y*d.y));\n    \n    float delta = fwidth(dist);\n    \/*if (dist > end) {\n        l = (1. - smoothstep(end, end+delta, dist)) * 0.5; \/\/ 0\n    }\n    else *\/if (dist < center) {\n        float smoothedStep = (smoothstep(center-delta, center, dist) \/ 2.);\n        if (position.x > 0.5) { \/\/ Top half\n            l = (1.0 - smoothedStep); \/\/ 1\n        } else {\n            l = (0.0 + smoothedStep); \/\/ 0\n        }\n    }\n    \n    \/\/ Rotation\n    float r = acos(d.x \/ dist);\n    if (d.y < 0.0) { r = M_PI-(r + M_PI); } \/\/ Sort out the bottom half (y=-1)\n    \n    r += (M_PI * 1.5); \/\/ Rotate (red on top, green on right, blue on left)\n    \n    \/\/ From radians (0 - 2_PI) to hue (0 - 1)\n    float hue = ((r \/ M_PI) \/ 2.0);\n    \n    hue = ((floor((hue \/ section) + 0.5)) * section);\n    \/*if (dist > 0.6 && dist < 0.9) {\n        hue += (section*0.45);\n        l = 0.45;\n    }*\/\n    \n    \/\/ Into color\n    fragColor = vec4(hsl2rgb( vec3(hue, 1.0, l)), 1.0);\n}","name":"","description":"","type":"image"}]}}