{"Shader":{"ver":"0.1","info":{"id":"Xds3Rr","date":"1361680213","viewed":6601,"name":"Input - Sound","username":"iq","description":"The simplest sound visualized possible. It reads the FFT (frequency analysis) and wave information and displays it. The sound is uploaded as a 512x2 texture. First row is the spectrum, second one is the waveform.","likes":61,"published":3,"flags":0,"tags":["2d","sound","fft","wave","reactive","music"],"hasliked":0},"renderpass":[{"inputs":[{"id":13,"src":"\/presets\/mzk00.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ create pixel coordinates\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\n\t\/\/ first texture row is frequency data\n\tfloat fft  = texture2D( iChannel0, vec2(uv.x,0.25) ).x; \n\t\n    \/\/ second texture row is the sound wave\n\tfloat wave = texture2D( iChannel0, vec2(uv.x,0.75) ).x;\n\t\n\t\/\/ convert frequency to colors\n\tvec3 col = vec3( fft, 4.0*fft*(1.0-fft), 1.0-fft ) * fft;\n\n    \/\/ add wave form on top\t\n\tcol += 1.0 -  smoothstep( 0.0, 0.15, abs(wave - uv.y) );\n\t\n\t\/\/ output final color\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}