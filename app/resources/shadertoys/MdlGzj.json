{"Shader":{"ver":"0.1","info":{"id":"MdlGzj","date":"1374851190","viewed":744,"name":"Distance Estimation (via iq)","username":"yaro_b","description":"Slightly modified example from an article by iq:<br\/>http:\/\/www.iquilezles.org\/www\/articles\/distance\/distance.htm","likes":3,"published":3,"flags":0,"tags":["procedural","2d","distancefield"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float f(vec2 p)\n{\n\tfloat r = length(p);\n\tfloat a = atan(p.y, p.x);\n\treturn r - 1.0 + 0.5 * sin(3.0 * a + 2.0 * r * r - 2.0 * 3.1415 * iGlobalTime);\n}\n\nvec2 grad_f(vec2 p)\n{\n    vec2 h = vec2(0.01, 0.0);\n    return vec2(\n\t\tf(p + h.xy) - f(p - h.xy),\n        f(p + h.yx) - f(p - h.yx)) \/ (2.0 * h.x);\n}\n\nfloat color(vec2 p)\n{\n    float v = f(p);\n    return smoothstep(0.0, 0.05, abs(v));\n}\n\nfloat color_grad(vec2 p)\n{\n    float v = f(p);\n    vec2 g = grad_f(p);\n    float de = abs(v) \/ length(g);\n    \/\/return step(0.05, de);\n\treturn smoothstep(0.0, 1.0 \/ 32.0, de);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = -1.0 + 2.0 * fragCoord.xy \/ iResolution.xy;\n\t\n\t\/\/ Account for aspect ratio.\n\tuv.x *= iResolution.x \/ iResolution.y;\n\t\n\tvec2 mouse_p = -1.0 + 2.0 * iMouse.xy \/ iResolution.xy;\n\tmouse_p.x *= iResolution.x \/ iResolution.y;\n\t\n\tvec2 p = 2.0 * uv;\n\tfloat c;\n\t\/\/if (p.x < 2.0 * mouse_p.x)\n\tif (p.x < 0.0)\n\t\tc = color(p);\n\telse\n\t\tc = color_grad(p);\n\n\tfragColor = vec4(c, c, c, 1.0);\n}","name":"","description":"","type":"image"}]}}