{"Shader":{"ver":"0.1","info":{"id":"llSXzK","date":"1444922684","viewed":270,"name":"Stromboli2","username":"dr2","description":"A 3-D volcano - daytime view (mouse enabled).","likes":8,"published":3,"flags":0,"tags":["raymarching","volcano"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Stromboli2\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ A 3-D volcano - daytime view.\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nfloat Hashff (float p)\n{\n  return fract (sin (p) * cHashM);\n}\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec4 t1, t2;\n  vec3 ip, fp;\n  float q;\n  ip = floor (p);  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  q = dot (ip, cHashA3);\n  t1 = Hashv4f (q);\n  t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n              mix (mix (t2.x, t2.y, fp.x), mix (t2.z, t2.w, fp.x), fp.y), fp.z);\n}\n\nvec2 Noisev2v4 (vec4 p)\n{\n  vec4 ip, fp, t1, t2;\n  ip = floor (p);  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t1 = Hashv4f (dot (ip.xy, cHashA3.xy));\n  t2 = Hashv4f (dot (ip.zw, cHashA3.xy));\n  return vec2 (mix (mix (t1.x, t1.y, fp.x), mix (t1.z, t1.w, fp.x), fp.y),\n               mix (mix (t2.x, t2.y, fp.z), mix (t2.z, t2.w, fp.z), fp.w));\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s, a;\n  s = 0.;  a = 1.;\n  for (int i = 0; i < 6; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;  p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float s, a;\n  s = 0.;  a = 0.5;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    s += a * Noisefv3 (p);\n    a *= 0.5;  p *= 4. * mr;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;  p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  return length (vec2 (length (p.xy) - rc, p.z)) - ri;\n}\n\n#define NROCK 16\nvec4 rkPos[NROCK];\nvec3 sunDir, waterDisp, cloudDisp, flmCylPos;\nfloat tCur, lavHt, qRad, waterHt, flmCylRad, flmCylLen;\nint idObj;\nconst float dstFar = 100.;\nconst int nRock = NROCK;\nconst int idMnt = 1, idRock = 2, idLav = 3;\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const float skyHt = 150.;\n  vec3 col, bgCol;\n  float cloudFac;\n  bgCol = vec3 (0.1, 0.2, 0.5);\n  if (rd.y > 0.) {\n    ro.xz += 0.5 * tCur;\n    vec2 p = 0.01 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.65;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (3. * (f - 0.5) * rd.y + 0.1, 0., 1.);\n    col = bgCol + 0.2 * pow (1. - max (rd.y, 0.), 5.);\n    col = mix (col, vec3 (0.75), cloudFac);\n  } else col = 0.9 * bgCol + 0.25;\n  return col;\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 mr = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, t4o, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.2;  wAmp = 1.;  pRough = 5.;\n  t4o.xz = 1.3 * tCur * vec2 (1., -1.);\n  q2 = 10. * p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 3; j ++) {\n    t4 = (t4o.xxzz + vec4 (q2, q2)) * wFreq;\n    t2 = Noisev2v4 (t4);\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + sqrt (1. - ta4 * ta4));\n    v2 = pow (1. - pow (v4.xz * v4.yw, vec2 (0.65)), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= mr;  wFreq *= 2.;  wAmp *= 0.2;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return 0.03 * ht + waterHt;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 70; j ++) {\n    p = ro + s * rd;\n    h = p.y - WaveHt (p);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.4, 1.2 * h) + 0.01 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - WaveHt (p));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.002, 1e-3 * d * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    q = ro + dHit * rd - flmCylPos;\n    d = PrCylDf (q.xzy, flmCylRad, flmCylLen);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat MountDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, a, r, hd, s;\n  q = p;\n  a = atan (q.z, q.x) \/ (2. * pi) + 0.5;\n  r = length (q.xz);\n  s = Fbm2 (vec2 (33. * a, 7. * r)) - 0.5;\n  d = PrCylDf (q.xzy, 2., 0.75);\n  q.y -= 0.75;\n  d = max (d, - (PrSphDf (q, 0.35) - 0.03 * s));\n  hd = 0.015 * (1. + sin (64. * pi * a) + 2. * sin (25. * pi * a)) *\n     SmoothBump (0.5, 1.8, 0.3, r) + 0.15 * s * SmoothBump (0.1, 2., 0.2, r);\n  q.y -= 1.2 + hd;\n  d = max (max (d, - PrTorusDf (q.xzy, 2.8, 2.8)), 0.15 - length (q.xz));\n  if (d < dMin) { dMin = d;  idObj = idMnt; }\n  q = p;\n  q.y -= lavHt;\n  d = PrCylDf (q.xzy, 0.3, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idLav; }\n  return 0.8 * dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin, d;\n  dMin = dstFar;\n  dMin = MountDf (p, dMin);\n  for (int j = 0; j < nRock; j ++) {\n    d = PrSphDf (p - rkPos[j].xyz, rkPos[j].w);\n    if (d < dMin) { dMin = d;  idObj = idRock;  qRad = rkPos[j].w; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  if (d >= 0.001) dHit = dstFar;\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvoid SetRocks ()\n{\n  vec3 bv0, bp0, bp;\n  float a, tm, fj;\n  for (int j = 0; j < nRock; j ++) {\n    fj = float (j);\n    a = 2. * pi * Hashff (100.11 * fj);\n    bv0.xz = 0.7 * vec2 (cos (a), sin (a));\n    bv0.y = 1.4 + 0.3 * Hashff (11.11 * fj);\n    bp0.xz = 0.1 * bv0.xz;  bp0.y = 0.5;\n    tm = mod (tCur + 0.15 * (fj + 0.6 * Hashff (fj)), 3.);\n    bp = bp0 + bv0 * tm;  bp.y -= 0.6 * tm * tm;\n    rkPos[j] = vec4 (bp, 0.04 - 0.035 * tm \/ 3.);\n  }\n}\n\nfloat FlmAmp (vec3 ro, vec3 rd, float dHit)\n{\n  vec3 p, q, dp;\n  float g, s, fh, fr, f, hs;\n  p = ro + dHit * rd - flmCylPos;\n  hs = min (p.y \/ flmCylLen, 1.);\n  dp = (flmCylRad \/ 20.) * rd;\n  g = 0.;\n  for (int i = 0; i < 20; i ++) {\n    p += dp;\n    s = distance (p.xz, flmCylPos.xz);\n    q = 4. * p;  q.y -= 6. * tCur;\n    fh = 0.5 * max (1. - (p.y - flmCylPos.y) \/ flmCylLen, 0.);\n    fr = max (1. - s \/ flmCylRad, 0.);\n    f = Fbm3 (q);\n    q = 7. * p;  q.y -= 8.5 * tCur;\n    f += Fbm3 (q);\n    g += max (0.5 * fr * fr * fh * (f * f - 0.6), 0.);\n    q = 23. * p;  q.y -= 11. * tCur;\n    g += 1000. * pow (abs (Noisefv3 (q) - 0.11), 64.);\n    if (s > flmCylRad || p.y < flmCylPos.y - 0.99 * flmCylLen || g > 1.) break;\n  }\n  g = clamp (0.9 * g, 0., 1.);\n  if (hs > 0.) g *= 1. - hs * hs;\n  return g;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 col, vn;\n  float dstHit, dstWat, dstFlm, dstFlmR, intFlm, bgFlm, reflFac, s;\n  int idObjT;\n  waterDisp = 0.002 * tCur * vec3 (-1., 0., 1.);\n  waterHt = -0.65;\n  lavHt = 0.4 + 0.08 * sin (0.47 * tCur) + 0.05 * cos (0.77 * tCur);\n  SetRocks ();\n  ro.y = max (ro.y, WaveHt (ro) + 0.3);\n  flmCylPos = vec3 (0., 0.9, 0.);\n  flmCylRad = 0.35;\n  flmCylLen = 1.3;\n  reflFac = 1.;\n  dstFlm = TransObjRay (ro, rd);\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  bgFlm = (0.7 + 0.6 * Noiseff (10. * tCur));\n  intFlm = (dstFlm < dstHit) ? FlmAmp (ro, rd, dstFlm) : 0.;\n  dstWat = WaveRay (ro, rd);\n  if (rd.y < 0. && dstWat >= dstFar) dstWat = - (ro.y - waterHt) \/ rd.y;\n  if (dstWat < dstHit) {\n    ro += rd * dstWat;\n    rd = reflect (rd, WaveNf (ro, dstWat));\n    ro += 0.01 * rd;\n    dstFlmR = TransObjRay (ro, rd);\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    if (dstFlmR < dstFlm) {\n      intFlm = (dstFlmR < dstHit) ? FlmAmp (ro, rd, dstFlmR) : 0.;\n      dstFlm = dstFlmR;\n    }\n    reflFac = 0.9;\n  }\n  if (dstHit >= dstFar) col = reflFac * SkyCol (ro, rd);\n  else {\n    ro += dstHit * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idMnt) {\n      s = clamp (ro.y \/ 1.2 + 0.6, 0., 1.);\n      vn = VaryNf (11. * ro, vn, 10. - 7. * s);\n      col = (0.5 + 0.7 * bgFlm * s) * vec3 (0.2 + 0.1 * (1. - s),\n         0.05 + 0.2 * (1. - s), 0.05);\n      col = reflFac * col * (0.1 + 0.1 * max (vn.y, 0.) +\n         0.8 * max (dot (vn, sunDir), 0.));\n    } else if (idObj == idLav) {\n      col = mix (vec3 (0.4, 0., 0.), vec3 (0.8, 0.7, 0.),\n         step (1.1, Fbm2 (41. * ro.xz * vec2 (1. + 0.2 * sin (1.7 * tCur) *\n\t vec2 (1. + 0.13 * sin (4.31 * tCur), 1. + 0.13 * cos (4.61 * tCur))))));\n      vn = VaryNf (21. * ro, vn, 10.);\n      col *= 0.5  + 1.5 * pow (max (vn.y, 0.), 32.);\n    } else if (idObj == idRock) {\n      col = mix (vec3 (1., 0., 0.), vec3 (0.1, 0.3, 0.1),\n         1. - (qRad - 0.005) \/ 0.03);\n      vn = VaryNf (200. * ro, vn, 10.);\n      col = reflFac * col * (0.6 + 0.4 * max (dot (vn, vec3 (0., 0.5, 0.)), 0.));\n    }\n  }\n  if (intFlm > 0.) col = mix (col, bgFlm * mix (vec3 (1., 0.1, 0.1),\n     vec3 (1., 1., 0.5), 0.5 * intFlm), 1.2 * intFlm);\n  return (clamp (col, 0., 1.));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 mPtr;\n  mat3 vuMat;\n  vec3 rd, ro;\n  vec2 canvas, uv, ori, ca, sa;\n  float az, el, dist;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  dist = 8. + 3. * cos (0.2 * tCur);\n  az = - 0.03 * tCur;\n  el = 0.15 * (11. - dist);\n  if (mPtr.z > 0.) {\n    az -= 3. * mPtr.x;\n    el = clamp (el - 3. * mPtr.y, 0., 1.3);\n  }\n  ori = vec2 (el, az);\n  ca = cos (ori);  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  ro = - vec3 (0., 0., dist) * vuMat;\n  rd = normalize (vec3 (uv, 3.5)) * vuMat;\n  sunDir *= vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}