{"Shader":{"ver":"0.1","info":{"id":"Ml2GWc","date":"1433279108","viewed":335,"name":"Filter: Gamma Correction","username":"4rknova","description":"A simple gamma correction filter","likes":1,"published":3,"flags":0,"tags":["gammacorrection"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2015\n\/\/ WTFPL\n\n#define GAMMA 2.2\n\nvec3 gamma(vec3 col, float g)\n{\n    float i = 1. \/ g;\n    return vec3(pow(col.x, i)\n              , pow(col.y, i)\n              , pow(col.z, i));\n}\n\nvec3 sample(in vec2 uv)\n{\n    return texture2D(iChannel0, uv).xyz;\n}\n\nvec3 filter(in vec2 uv)\n{\n    vec3 val = sample(uv);    \n\treturn gamma(val, GAMMA);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv.y = 1. - uv.y;\n    \n    float m = iMouse.x \/ iResolution.x;\n    \n    float l = smoothstep(0., 1. \/ iResolution.y, abs(m - uv.x));\n    \n    vec3 cf = filter(uv);\n    vec3 cl = sample(uv);\n    vec3 cr = (uv.x < m ? cl : cf) * l;\n    \n    fragColor = vec4(cr, 1);\n}","name":"","description":"","type":"image"}]}}