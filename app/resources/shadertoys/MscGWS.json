{"Shader":{"ver":"0.1","info":{"id":"MscGWS","date":"1451957821","viewed":281,"name":"Multipass 2D DFT","username":"Flyguy","description":"A 2D Discrete Fourier Transform (DFT) effect using the new multipass feature to split the calculation into two 1D horizonal and vertical DFTs. ","likes":8,"published":3,"flags":32,"tags":["fft","spectrum","frequency","fourier","dft","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Size must be changed in each tab.\n#define SIZE 256.0\n\n\/\/Display modes\n#define MAGNITUDE 0\n#define PHASE 1\n#define COMPONENT 2\n\n#define DISPLAY_MODE MAGNITUDE\n\n\/\/Scaling\n#define LOG 0\n#define LINEAR 1\n\n#define MAG_SCALE LOG\n\nfloat pi = atan(1.0)*4.0;\nfloat tau = atan(1.0)*8.0;\n\nvec3 rainbow(float x)\n{\n    vec3 col = vec3(0);\n    col.r = cos(x * tau - (0.0\/3.0)*tau);\n    col.g = cos(x * tau - (1.0\/3.0)*tau);\n    col.b = cos(x * tau - (2.0\/3.0)*tau);\n    \n    return col * 0.5 + 0.5;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pixel = fragCoord - iResolution.xy\/2.0 + (vec2(2,1)*SIZE)\/2.0;\n    \n\tvec2 uv = fract(pixel \/ SIZE);\n    \n    vec2 tile = floor(pixel \/ SIZE);\n    \n    vec3 color = vec3(0.1);\n    \n    \/\/Input effect (Left)\n    if(tile == vec2(0,0))\n    {\n        vec2 dft_in = texture2D(iChannel0, uv * (SIZE \/ iResolution.xy)).rg;\n        \n        color = vec3(length(dft_in));\n    }\n    \n    \/\/2D DFT of input (Right)\n    if(tile == vec2(1,0))\n    {\n        vec2 dft_out = texture2D(iChannel1, uv * (SIZE \/ iResolution.xy)).rg;\n        \n        #if DISPLAY_MODE == MAGNITUDE\n        \t#if MAG_SCALE == LOG\n        \t\tcolor = vec3(log(length(dft_out)) \/ log(SIZE*SIZE));\n        \t#elif MAG_SCALE == LINEAR\n        \t\tcolor = vec3(length(dft_out) \/ SIZE);\n        \t#endif\n        #elif DISPLAY_MODE == PHASE\n        \tcolor = vec3(rainbow(atan(dft_out.y,dft_out.x) \/ pi + 0.5));        \n        #elif DISPLAY_MODE == COMPONENT      \n        \tcolor = vec3((dft_out \/ SIZE) * 0.5 + 0.5, 0.0);        \n        #endif\n    }\n    \n\tfragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":36,"src":"\/presets\/vid03.webm","ctype":"video","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/DFT input effect.\n\/\/fragColor.x = Real part\n\/\/fragColor.y = Imaginary part (usually 0 for input)\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nfloat sinc(float x)\n{\n    return (x == 0.0) ? 1.0 : sin(x)\/x;\n}\n\nfloat average(vec3 v)\n{\n\treturn dot(v, vec3(1.0)) \/ 3.0;   \n}\n\nmat2 rotate(float a)\n{\n\treturn mat2(cos(a),sin(a),-sin(a),cos(a));   \n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord \/ SIZE;\n    \n    vec2 comp = vec2(0.0);\n    \n    comp.x = average(texture2D(iChannel0,uv).rgb);\n    \n    fragColor = vec4(comp,0,0);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Horizontal DFT of the input.\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord;\n    \n    float w = uv.x - SIZE\/2.0;\n    \n    vec2 xw = vec2(0);\n    \n    for(float n = 0.0;n < SIZE;n++)\n    {\n        float a = -(tau * w * n) \/ SIZE;\n        \n        vec2 xn = texture2D(iChannel0, vec2(n, uv.y) \/ iResolution.xy).xy;\n        \n        xw += cmul(xn, polar(1.0, a));\n    }\n    \n    fragColor = vec4(xw,0,0);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Vertical DFT of horizontal DFT (final 2D dft).\n\n#define SIZE 256.0\n\nfloat tau = atan(1.0)*8.0;\n\nvec2 polar(float m, float a)\n{\n\treturn m*vec2(cos(a), sin(a));   \n}\n\nvec2 cmul(vec2 a,vec2 b)\n{\n\treturn vec2(a.x*b.x - a.y*b.y, a.x*b.y + a.y*b.x);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(fragCoord.x > SIZE || fragCoord.y > SIZE)\n    {\n        fragColor = vec4(0);\n        return;\n    }\n    \n    vec2 uv = fragCoord;\n    \n    float w = uv.y - SIZE\/2.0;\n    \n    vec2 xw = vec2(0);\n    \n    for(float n = 0.0;n < SIZE;n++)\n    {\n        float a = -(tau * w * n) \/ SIZE;\n        \n        vec2 xn = texture2D(iChannel0, vec2(uv.x, n) \/ iResolution.xy).xy;\n        \n        xw += cmul(xn, polar(1.0, a));\n    }\n    \n    fragColor = vec4(xw,0,0);\n}","name":"","description":"","type":"buffer"}]}}