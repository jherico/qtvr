{"Shader":{"ver":"0.1","info":{"id":"lst3Dr","date":"1449142243","viewed":355,"name":"2015\/12\/03","username":"hughsk","description":"Going overboard with (likely incorrect) reflections here <img src=\"\/img\/emoticonHappy.png\"\/>","likes":8,"published":3,"flags":0,"tags":["3d","reflection","sdf","overkill"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define GLSLIFY 1\n\nvec2 doModel(vec3 p);\n\nvec2 calcRayIntersection_1_3(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 30; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_1_3(vec3 rayOrigin, vec3 rayDir) {\n  return calcRayIntersection_1_3(rayOrigin, rayDir, 20.0, 0.001);\n}\n\nvec3 calcNormal_2_4(vec3 pos, float eps) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps ).x +\n                    v2 * doModel( pos + v2*eps ).x +\n                    v3 * doModel( pos + v3*eps ).x +\n                    v4 * doModel( pos + v4*eps ).x );\n}\n\nvec3 calcNormal_2_4(vec3 pos) {\n  return calcNormal_2_4(pos, 0.002);\n}\n\nvec2 squareFrame_4_1(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy \/ screenSize.xy) - 1.0;\n  position.x *= screenSize.x \/ screenSize.y;\n  return position;\n}\n\nmat3 calcLookAtMatrix_5_0(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\nvec3 getRay_6_2(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay_6_2(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix_5_0(origin, target, 0.0);\n  return getRay_6_2(camMat, screenPos, lensLength);\n}\n\nvoid orbitCamera_7_5(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection,\n  in vec2 coord\n) {\n  vec2 screenPos = squareFrame_4_1(screenResolution, coord);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay_6_2(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\n\/\/ Description : Array and textureless GLSL 2D\/3D\/4D simplex\n\/\/               noise functions.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/\n\nvec4 mod289_0_6(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nfloat mod289_0_6(float x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0; }\n\nvec4 permute_0_7(vec4 x) {\n     return mod289_0_6(((x*34.0)+1.0)*x);\n}\n\nfloat permute_0_7(float x) {\n     return mod289_0_6(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_0_8(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat taylorInvSqrt_0_8(float r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec4 grad4_0_9(float j, vec4 ip)\n  {\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\n  vec4 p,s;\n\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\n  s = vec4(lessThan(p, vec4(0.0)));\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\n\n  return p;\n  }\n\n\/\/ (sqrt(5) - 1)\/4 = F4, used once below\n#define F4 0.309016994374947451\n\nfloat snoise_0_10(vec4 v)\n  {\n  const vec4  C = vec4( 0.138196601125011,  \/\/ (5 - sqrt(5))\/20  G4\n                        0.276393202250021,  \/\/ 2 * G4\n                        0.414589803375032,  \/\/ 3 * G4\n                       -0.447213595499958); \/\/ -1 + 4 * G4\n\n\/\/ First corner\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\n  vec4 x0 = v -   i + dot(i, C.xxxx);\n\n\/\/ Other corners\n\n\/\/ Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\n  vec4 i0;\n  vec3 isX = step( x0.yzw, x0.xxx );\n  vec3 isYZ = step( x0.zww, x0.yyz );\n\/\/  i0.x = dot( isX, vec3( 1.0 ) );\n  i0.x = isX.x + isX.y + isX.z;\n  i0.yzw = 1.0 - isX;\n\/\/  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\n  i0.y += isYZ.x + isYZ.y;\n  i0.zw += 1.0 - isYZ.xy;\n  i0.z += isYZ.z;\n  i0.w += 1.0 - isYZ.z;\n\n  \/\/ i0 now contains the unique values 0,1,2,3 in each channel\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\n\n  \/\/  x0 = x0 - 0.0 + 0.0 * C.xxxx\n  \/\/  x1 = x0 - i1  + 1.0 * C.xxxx\n  \/\/  x2 = x0 - i2  + 2.0 * C.xxxx\n  \/\/  x3 = x0 - i3  + 3.0 * C.xxxx\n  \/\/  x4 = x0 - 1.0 + 4.0 * C.xxxx\n  vec4 x1 = x0 - i1 + C.xxxx;\n  vec4 x2 = x0 - i2 + C.yyyy;\n  vec4 x3 = x0 - i3 + C.zzzz;\n  vec4 x4 = x0 + C.wwww;\n\n\/\/ Permutations\n  i = mod289_0_6(i);\n  float j0 = permute_0_7( permute_0_7( permute_0_7( permute_0_7(i.w) + i.z) + i.y) + i.x);\n  vec4 j1 = permute_0_7( permute_0_7( permute_0_7( permute_0_7 (\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\n\n\/\/ Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\n\/\/ 7*7*6 = 294, which is close to the ring size 17*17 = 289.\n  vec4 ip = vec4(1.0\/294.0, 1.0\/49.0, 1.0\/7.0, 0.0) ;\n\n  vec4 p0_0_11 = grad4_0_9(j0,   ip);\n  vec4 p1 = grad4_0_9(j1.x, ip);\n  vec4 p2 = grad4_0_9(j1.y, ip);\n  vec4 p3 = grad4_0_9(j1.z, ip);\n  vec4 p4 = grad4_0_9(j1.w, ip);\n\n\/\/ Normalise gradients\n  vec4 norm = taylorInvSqrt_0_8(vec4(dot(p0_0_11,p0_0_11), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0_0_11 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n  p4 *= taylorInvSqrt_0_8(dot(p4,p4));\n\n\/\/ Mix contributions from the five corners\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\n  m0 = m0 * m0;\n  m1 = m1 * m1;\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0_0_11, x0 ), dot( p1, x1 ), dot( p2, x2 )))\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\n\n  }\n\nfloat smin_3_12(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) \/ k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nvec2 doModel(vec3 p) {\n  vec3 P = p;\n  \n  p.z += iGlobalTime * 2.0;\n  p.xzy = mod(p.xzy + 3.0, 6.0) - 3.0;\n  \n  float r  = 0.75;\n  float d  = length(p) - r;\n  float id = 0.0;\n  \n  d = smin_3_12(d, 10.0 - length(P), 3.95);\n\n  return vec2(d, id);\n}\n\nbool bounce(vec3 ro, vec3 rd, out vec3 pos, out vec3 nor, out vec3 col) {\n  vec2 t = calcRayIntersection_1_3(ro, rd);\n  bool hits = t.x > -0.5;\n  \n  if (hits) {\n    pos = ro + rd * t.x;\n    nor = calcNormal_2_4(pos);\n    col = vec3(0.75, 0.9, 1.25) * max(0.0, dot(nor, normalize(vec3(0, 1, 0))));\n  }\n  \n  return hits;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 color = vec3(0.0);\n  vec3 ro, rd;\n\n  float rotation = iMouse.z > 0.0 ? 5.0 * (1.0 - iMouse.x \/ iResolution.x) : iGlobalTime * 0.4;\n  float height   = iMouse.z > 0.0 ? 8.0 * (1.0 - iMouse.y \/ iResolution.y - 0.5) : sin(iGlobalTime * 0.5) * 2.0;\n  float dist     = 4.0;\n  orbitCamera_7_5(rotation, height, dist, iResolution.xy, ro, rd, fragCoord);\n  \n  vec3 pos, nor, col;\n\n  for (int i = 0; i < 3; i++) {\n    if (!bounce(ro, rd, pos, nor, col)) break;\n    color += max(vec3(0.0), col) * pow(0.325, float(i));\n    ro = pos + nor * 0.01;\n    rd = reflect(rd, nor);\n  }\n\n  color = pow(color, vec3(0.4545));\n  color.r = smoothstep(-0.05, 1., color.r);\n  color.b = smoothstep(0., 0.9, color.b);\n  color.g = smoothstep(0., 0.925, color.g);\n  color = mix(color, color * length(color), 0.25);\n  color -= 0.1;\n  \n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}","name":"","description":"","type":"image"}]}}