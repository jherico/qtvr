{"Shader":{"ver":"0.1","info":{"id":"4tf3D8","date":"1424724478","viewed":475,"name":"Antialiasing: FXAA","username":"4rknova","description":"FXAA<br\/>Fast approXimate Anti-Aliasing","likes":2,"published":3,"flags":0,"tags":["antialiasing","screenspace"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2015\n\/\/ WTFPL\n\n#define RES iResolution.xy\n\nvec3 sample(vec2 p)\n{\n    p = p * .008 + vec2(.123,.657);\n    vec2 z = vec2(0);  \n\n\tfor (int i = 0; i < 256; ++i) {  \n\t\tz = vec2(z.x * z.x - z.y * z.y, 2. * z.x * z.y) + p; \n\n\t\tif (dot(z,z) > 4.) {\n\t\t\tfloat s = .125662 * float(i);\n\t\t\treturn vec3(vec3(cos(s + .9), cos(s + .3), cos(s + .2)) * .4 + .6);\t\t\t\n\t\t}  \n\t}\n    return vec3(0);\n}\n\nvec3 fxaa(vec2 p)\n{\n\tfloat FXAA_SPAN_MAX   = 8.0;\n    float FXAA_REDUCE_MUL = 1.0 \/ 8.0;\n    float FXAA_REDUCE_MIN = 1.0 \/ 128.0;\n\n    \/\/ 1st stage - Find edge\n    vec3 rgbNW = sample(p + (vec2(-1.,-1.) \/ RES));\n    vec3 rgbNE = sample(p + (vec2( 1.,-1.) \/ RES));\n    vec3 rgbSW = sample(p + (vec2(-1., 1.) \/ RES));\n    vec3 rgbSE = sample(p + (vec2( 1., 1.) \/ RES));\n    vec3 rgbM  = sample(p);\n\n    vec3 luma = vec3(0.299, 0.587, 0.114);\n\n    float lumaNW = dot(rgbNW, luma);\n    float lumaNE = dot(rgbNE, luma);\n    float lumaSW = dot(rgbSW, luma);\n    float lumaSE = dot(rgbSE, luma);\n    float lumaM  = dot(rgbM,  luma);\n\n    vec2 dir;\n    dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\n    dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\n    \n    float lumaSum   = lumaNW + lumaNE + lumaSW + lumaSE;\n    float dirReduce = max(lumaSum * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);\n    float rcpDirMin = 1. \/ (min(abs(dir.x), abs(dir.y)) + dirReduce);\n\n    dir = min(vec2(FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX), dir * rcpDirMin)) \/ RES;\n\n    \/\/ 2nd stage - Blur\n    vec3 rgbA = .5 * (sample(p + dir * (1.\/3. - .5)) +\n        \t\t\t  sample(p + dir * (2.\/3. - .5)));\n    vec3 rgbB = rgbA * .5 + .25 * (\n        \t\t\t  sample(p + dir * (0.\/3. - .5)) +\n        \t\t\t  sample(p + dir * (3.\/3. - .5)));\n    \n    float lumaB = dot(rgbB, luma);\n    \n    float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\n    float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\n\n    return ((lumaB < lumaMin) || (lumaB > lumaMax)) ? rgbA : rgbB;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (fragCoord.xy \/ iResolution.xy * 2. - 1.);\n\tvec2 nv = uv * vec2(iResolution.x\/iResolution.y, 1) * 1.1;\n            \n    float t = iGlobalTime * .1;\n          t = (mod(t, 2.) < 1. ? 1. : -1.) * (fract(t) * 2. - 1.);\n    vec3  col = vec3((uv.x < t ? fxaa(nv) : sample(nv)) \n              * smoothstep(0., 1. \/ iResolution.y, abs(t - uv.x))\n\t);\n    \n\tfragColor = vec4(col, 1);\n}","name":"","description":"","type":"image"}]}}