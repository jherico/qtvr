{"Shader":{"ver":"0.1","info":{"id":"llBXRD","date":"1441962940","viewed":336,"name":"Mandelball","username":"dr2","description":"Testing the buoyancy of a fractal.","likes":6,"published":3,"flags":0,"tags":["fractal","raymarch","water"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Mandelball\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nmat3 ballMat;\nvec3 ballPos, sunDir, cloudDisp, waterDisp;\nfloat tCur, qStep;\nconst float dstFar = 100.;\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float sd, w, f;\n  col = vec3 (0.15, 0.25, 0.5) + 0.2 * pow (1. - max (rd.y, 0.), 8.);\n  sd = max (dot (rd, sunDir), 0.);\n  rd.y = abs (rd.y);\n  ro += cloudDisp;\n  p = 0.2 * (rd.xz * (20. - ro.y) \/ rd.y + ro.xz);\n  w = 1.;\n  f = 0.;\n  for (int j = 0; j < 4; j ++) {\n    f += w * Noisefv2 (p);\n    w *= 0.5;\n    p *= 2.;\n  }\n  col += 0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n  return mix (col, vec3 (1.), clamp (0.8 * f * rd.y + 0.1, 0., 1.));\n}\n\nfloat WaveHt (vec3 p)\n{\n  const mat2 qRot = mat2 (1.6, -1.2, 1.2, 1.6);\n  vec4 t4, ta4, v4;\n  vec2 q2, t2, v2;\n  float wFreq, wAmp, pRough, ht;\n  wFreq = 0.3;  wAmp = 0.3;  pRough = 5.;\n  q2 = p.xz + waterDisp.xz;\n  ht = 0.;\n  for (int j = 0; j < 4; j ++) {\n    t2 = tCur * vec2 (1., -1.);\n    t4 = vec4 (q2 + t2.xx, q2 + t2.yy) * wFreq;\n    t2 = vec2 (Noisefv2 (t4.xy), Noisefv2 (t4.zw));\n    t4 += 2. * vec4 (t2.xx, t2.yy) - 1.;\n    ta4 = abs (sin (t4));\n    v4 = (1. - ta4) * (ta4 + abs (cos (t4)));\n    v2 = pow (1. - sqrt (v4.xz * v4.yw), vec2 (pRough));\n    ht += (v2.x + v2.y) * wAmp;\n    q2 *= qRot;  wFreq *= 2.;  wAmp *= 0.25;\n    pRough = 0.8 * pRough + 0.2;\n  }\n  return ht;\n}\n\nfloat WaveRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  dHit = dstFar;\n  if (rd.y < 0.) {\n    s = 0.;\n    sLo = 0.;\n    for (int j = 0; j < 80; j ++) {\n      p = ro + s * rd;\n      h = p.y - WaveHt (p);\n      if (h < 0.) break;\n      sLo = s;\n      s += max (0.3, h) + 0.005 * s;\n      if (s > dstFar) break;\n    }\n    if (h < 0.) {\n      sHi = s;\n      for (int j = 0; j < 4; j ++) {\n        s = 0.5 * (sLo + sHi);\n        p = ro + s * rd;\n        h = step (0., p.y - WaveHt (p));\n        sLo += h * (s - sLo);\n        sHi += (1. - h) * (s - sHi);\n      }\n      dHit = sHi;\n    }\n  }\n  return dHit;\n}\n\nvec3 WaveNf (vec3 p, float d)\n{\n  vec2 e = vec2 (max (0.1, 0.01 * d), 0.);\n  float h = WaveHt (p);\n  return normalize (vec3 (h - WaveHt (p + e.xyy), e.x, h - WaveHt (p + e.yyx)));\n}\n\nfloat ObjDf (vec3 p)\n{\n  float mScale = 2.;\n  vec4 q, q0;\n  const int nIter = 12;\n  p *= ballMat;\n  p -= ballPos;\n  q0 = vec4 (p, 1.);\n  q = q0;\n  for (int n = 0; n < nIter; n ++) {\n    q.xyz = clamp (q.xyz, -1., 1.) * 2. - q.xyz;\n    q = q * mScale \/ clamp (dot (q.xyz, q.xyz), 0.5, 1.) + q0;\n  }\n  return max (length (q.xyz) \/ abs (q.w), length (p) - 6.);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const int nStep = 100;\n  float dHit, h, s;\n  dHit = 0.;\n  s = 0.;\n  for (int j = 0; j < nStep; j ++) {\n    h = ObjDf (ro + dHit * rd);\n    dHit += h;\n    ++ s;\n    if (h < 0.001 || dHit > dstFar) break;\n  }\n  if (h >= 0.001) dHit = dstFar;\n  qStep = s \/ float (nStep);\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.01, -0.01, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 c1 = vec3 (1.5, 0.2, 0.), c2 = vec3 (0.1, 0.55, 0.5);\n  vec3 col, vn;\n  float dstObj, dstWat;\n  col = vec3 (1.);\n  dstObj = ObjRay (ro, rd);\n  dstWat = WaveRay (ro, rd);\n  if (dstObj < min (dstWat, dstFar)) {\n    ro += rd * dstObj;\n    vn = ObjNf (ro);\n    rd = reflect (rd, vn);\n    col = mix (c1, col, max (0., 1. - 1.3 * qStep));\n    dstWat = WaveRay (ro, rd);\n    if (dstWat < dstFar) {\n      ro += rd * dstWat;\n      vn = WaveNf (ro, dstWat);\n      rd = reflect (rd, vn);\n      col = mix (c2, col, pow (1. - abs (dot (rd, vn)), 5.));\n    }\n  } else if (dstWat < min (dstObj, dstFar)) {\n    ro += rd * dstWat;\n    vn = WaveNf (ro, dstWat);\n    rd = reflect (rd, vn);\n    col = mix (c2, col, pow (1. - abs (dot (rd, vn)), 5.));\n    dstObj = ObjRay (ro, rd);\n    if (dstObj < dstFar) {\n      ro += rd * dstObj;\n      vn = ObjNf (ro);\n      rd = reflect (rd, vn);\n      col = mix (c1, col, max (0., 1. - 1.3 * qStep));\n    }\n  }\n  col *= SkyCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid BallPM ()\n{\n  const vec3 e = vec3 (4., 0., 0.);\n  float h[5], b, a, c, s;\n  ballPos = vec3 (0.);\n  h[0] = WaveHt (ballPos);\n  h[1] = WaveHt (ballPos + e.yyx);  h[2] = WaveHt (ballPos - e.yyx);\n  h[3] = WaveHt (ballPos + e);  h[4] = WaveHt (ballPos - e);\n  ballPos.y = 0.5 + (2. * h[0] + h[1] + h[2] + h[3] + h[4]) \/ 6.;\n  b = (h[1] - h[2]) \/ (2. * e.x);\n  ballMat[2] = normalize (vec3 (0., b, 0.5));\n  b = (h[3] - h[4]) \/ (2. * e.x);\n  ballMat[1] = normalize (cross (ballMat[2], vec3 (0.5, b, 0.)));\n  ballMat[0] = cross (ballMat[1], ballMat[2]);\n  a = 0.4 * sin (0.03 * tCur);\n  c = cos (a);\n  s = sin (a);\n  ballMat *= mat3 (c, 0., s, 0., 1., 0., - s, 0., c);\n  ballPos.y += 4. * sin (0.1 * tCur) - 1.;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 ro, rd;\n  sunDir = normalize (vec3 (1., 1., -1.));\n  cloudDisp = tCur * vec3 (0., 0., 1.);\n  waterDisp = 0.2 * tCur * vec3 (-1., 0., 1.);\n  rd = normalize (vec3 (uv, 2.));\n  ro = vec3 (0., 3., -20.);\n  rd.xz = Rot2D (rd.xz, - pi \/ 4.);\n  ro.xz = Rot2D (ro.xz, - pi \/ 4.);\n  BallPM ();\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}