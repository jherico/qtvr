{"Shader":{"ver":"0.1","info":{"id":"4sd3WX","date":"1452517682","viewed":112,"name":"Spider Ascent","username":"dr2","description":"Who knows where they come from, or where they go?","likes":4,"published":3,"flags":0,"tags":["raymarching","fog","octopod"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Spider Ascent\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrEllipsDf (vec3 p, vec3 r, float dFac)\n{\n  return dFac * (length (p \/ r) - 1.);\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat BrickPat (vec2 p)\n{\n  vec2 q, iq;\n  q = p * vec2 (1., 4.);\n  iq = floor (q);\n  if (2. * floor (iq.y \/ 2.) != iq.y) q.x += 0.5;\n  q = smoothstep (0.02, 0.05, abs (fract (q + 0.5) - 0.5));\n  return (0.7 + 0.3 * q.x * q.y);\n}\n\nvec3 footPos[8], kneePos[8], hipPos[8], fBallPos, noiseDisp, qHit, sunDir, wkrPos;\nfloat legLenU, legLenD, bdyHt, trRad, trGap, trWid, trThk, wkrAz, wkrEl, wkrSpd,\n   trCoil, fBallRad, tCur, dstFar;\nint idObj;\nconst int idPath = 1, idCol = 2, idWall = 3, idBdy = 11, idHead = 12, idEye = 13,\n   idAnt = 14, idLegU = 15, idLegD = 16;\n\nfloat FrAbsf (float p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nvec3 FrAbsv3 (vec3 p)\n{\n  return abs (fract (p) - 0.5);\n}\n\nfloat TriNoise3d (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  vec3 q;\n  float a, f;\n  a = 1.;\n  f = 0.;\n  p *= 0.005;\n  q = p;\n  for (int j = 0; j < 5; j ++) {\n    p += FrAbsv3 (q + FrAbsv3 (q).yzx) + noiseDisp;\n    p *= 1.2;\n    f += a * (FrAbsf (p.x + FrAbsf (p.y + FrAbsf (p.z))));\n    q *= 2. * mr;\n    q += 0.21;\n    a *= 0.9;\n  }\n  return 0.1 * clamp (2. * f - 1.3, 0., 1.);\n}\n\nfloat ShpCylDf (vec3 p, vec3 v, float md, float r, float rf)\n{\n  float len, s;\n  len = length (v);\n  v = normalize (v);\n  s = clamp (dot (p, v), 0., len);\n  p -= s * v;\n  s = s \/ len - md;\n  return length (p) - r * (1. - rf * s * s);\n}\n\nvec3 GrndCol (vec3 ro, vec3 rd)\n{\n  vec3 vn, col;\n  vec2 w;\n  float f;\n  vec2 e = vec2 (0.01, 0.);\n  w = 0.1 * ro.xz;\n  f = Fbm2 (w);\n  vn = normalize (vec3 (f - Fbm2 (w + e.xy), 0.07, f - Fbm2 (w + e.yx)));\n  col = mix (vec3 (0.4, 0.8, 0.2), vec3 (0.3, 0.25, 0.),\n    1. + (f - 1.) * (1. - pow (1. + rd.y, 3.)));\n  col *= 0.1 + 0.9 * max (dot (vn, sunDir), 0.);\n  col = mix (col, vec3 (0.1, 0.2, 0.4) + 0.25, pow (1. + rd.y, 32.));\n  return col;\n}\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    f = Fbm2 (0.02 * (ro.xz + rd.xz * (300. - ro.y) \/ rd.y));\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    sd = - ro.y \/ rd.y;\n    ro += sd * rd;\n    col = GrndCol (ro, rd);\n  }\n  return col;\n}\n\nfloat FBallHit (vec3 ro, vec3 rd, vec3 p, float s)\n{\n  vec3 v;\n  float h, b, d;\n  v = ro - p;\n  b = dot (rd, v);\n  d = b * b + s * s - dot (v, v);\n  h = dstFar;\n  if (d >= 0.) h = - b - sqrt (d);\n  return h;\n}\n\nfloat WkrDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float d, yLim, s, len;\n  yLim = max (- p.y, p.y - trCoil * trGap);\n  p.y = mod (p.y + 0.5 * trGap - (wkrPos.y + bdyHt), trGap) -\n     (0.5 * trGap - (wkrPos.y + bdyHt));\n  p -= wkrPos;\n  p.xz = Rot2D (p.xz, - wkrAz);\n  p.yz = Rot2D (p.yz, wkrEl);\n  p.y -= bdyHt + trThk;\n  d = max (PrCylDf (p.xzy, 4.5, 2.2), yLim);\n  if (d < dMin) {\n    q = p - vec3 (0., -0.15, 0.2);\n    d = PrEllipsDf (q, vec3 (0.7, 0.5, 1.3), 0.6);\n    if (d < dMin) { dMin = d;  idObj = idBdy;  qHit = q; }\n    q = p - vec3 (0., 0.1, 1.1);\n    d = PrEllipsDf (q, vec3 (0.2, 0.4, 0.5), 0.2);\n    if (d < dMin) { dMin = d;  idObj = idHead;  qHit = q; }\n    q = p;\n    q.x = abs (q.x);\n    q -= vec3 (0.15, 0.25, 1.5);\n    d = PrSphDf (q, 0.13);\n    if (d < dMin) { dMin = d;  idObj = idEye; }\n    q -= vec3 (0., 0.15, -0.3);\n    d = ShpCylDf (q, vec3 (0.3, 1.1, 0.4), 0., 0.1, 0.7);\n    if (d < dMin) { dMin = d;  idObj = idAnt; }\n    p.y += bdyHt;\n    for (int j = 0; j < 8; j ++) {\n      q = p - hipPos[j];\n      d = 0.6 * ShpCylDf (q, kneePos[j] - hipPos[j], 0., 0.22, 0.4);\n      if (d < dMin) { dMin = d;  idObj = idLegU;  qHit = q; }\n      q = p - kneePos[j];\n      d = 0.6 * ShpCylDf (q, footPos[j] - kneePos[j], 0.3, 0.15, 1.3);\n      if (d < dMin) { dMin = d;  idObj = idLegD;  qHit = q; }\n    }\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dMin = dstFar;\n  vec3 q;\n  float dr, d;\n  q = p;\n  q.y = mod (q.y + trGap - 0.0001, trGap) - (trGap - 0.0001);\n  q.y -= trGap * atan (q.z, q.x) \/ (2. * pi);\n  dr = length (q.xz) - trRad;\n  d = PrBox2Df (vec2 (dr, q.y), vec2 (trWid, trThk));\n  q.y += trGap;\n  d = min (d, PrBox2Df (vec2 (dr, q.y), vec2 (trWid, trThk)));\n  d = max (d, p.y - trCoil * trGap);\n  if (d < dMin) { dMin = d;  idObj = idPath;  qHit = q; }\n  q = p;\n  q.xz = abs (q.xz) - (trRad - trWid - 4. * trThk) \/ 1.414;\n  d = PrCylDf (q.xzy, 3. * trThk, trCoil * trGap);\n  if (d < dMin) { dMin = d;  idObj = idCol;  qHit = q; }\n  q = p;\n  q.y -= 0.1 * trGap;\n  d = min (PrCylAnDf (q.xzy, trRad + 1.1 * trWid, 0.1 * trWid, trGap),\n     PrCylAnDf (q.xzy, trRad - 1.1 * trWid, 0.1 * trWid, trGap));\n  if (d < dMin) { dMin = d;  idObj = idWall;  qHit = q; }\n  dMin = WkrDf (p, dMin);\n  d = p.y;\n  if (d < dMin) { dMin = d;  idObj = -1; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.0001, -0.0001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 20; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, smoothstep (0., 1., 20. * h \/ d));\n    d += 0.25 + 0.1 * d;\n    if (h < 0.001) break;\n  }\n  return 0.5  + 0.5 * sh;\n}\n\nvec3 FBallCol (vec3 col, vec3 ro, vec3 rd, float dHit, float tRot)\n{\n  vec3 p;\n  const vec3 cFog = vec3 (0.8, 0.8, 0.9);\n  float diAx, d, b, f;\n  ro -= fBallPos;\n  ro.xz = Rot2D (ro.xz, tRot);\n  rd.xz = Rot2D (rd.xz, tRot);\n  diAx = 1. \/ max (0.001, length (ro - dot (rd, ro) * rd));\n  b = 0.05 * fBallRad;\n  d = 0.;\n  for (int i = 0; i < 20; i ++) {\n    d += b;\n    f = smoothstep (1., 1.3, sqrt (d * (2. * fBallRad - d)) * diAx);\n    p = ro + d * rd;\n    f = clamp (TriNoise3d (p) * f * f, 0., 1.);\n    col += f * (cFog - col);\n    if (length (p) > fBallRad) break;\n  }\n  return col;\n}\n\nvec4 WkrCol (vec3 vn)\n{\n  vec4 col;\n  if (idObj == idBdy) {\n    col = vec4 (0.3, 0.3, 1., 0.5);\n  } else if (idObj == idHead) {\n    col = vec4 (0.3, 0.3, 1., 0.5);\n    if (qHit.z > 0.4) col = mix (vec4 (0.2, 0.05, 0.05, 0.1), col,\n       smoothstep (0.02, 0.04, abs (qHit.x)));\n  } else if (idObj == idEye) {\n    col = (vn.z > 0.6) ? vec4 (1., 0., 0., 0.3) : vec4 (1., 1., 0., 1.);\n  } else if (idObj == idLegU || idObj == idLegD) {\n    col = mix (vec4 (0.3, 0.3, 1., 0.5), vec4 (1., 0.2, 0.2, 0.5),\n       SmoothBump (0.4, 1., 0.2, fract (0.7 * length (qHit))));\n  } else if (idObj == idAnt) {\n    col = vec4 (0., 1., 0., 0.5);\n  }\n  return col;\n}\n\nvoid Setup ()\n{\n  vec3 v;\n  float gDisp, a, az, fz, d, ll, t;\n  wkrSpd = 8.;\n  trRad = 20.;\n  trWid = 4.5;\n  trThk = 0.2;\n  trGap = 10.;\n  trCoil = 15.;\n  t = mod ((wkrSpd \/ (2. * pi * (trRad + 1.))) * tCur, 1.);\n  wkrAz = 2. * pi * t;\n  wkrEl = asin (trGap \/ (2. * pi * trRad));\n  wkrPos.xz = trRad * vec2 (cos (wkrAz), sin (wkrAz));\n  wkrPos.y = trGap * t;\n  fBallRad = trRad + 4.2 * trWid;\n  fBallPos = vec3 (0., trCoil * trGap, 0.);\n  for (int j = 0; j < 4; j ++) {\n    a = 0.2 * (1. + float (j)) * pi;\n    hipPos[j] = 0.5 * vec3 (- sin (a), 0., 1.5 * cos (a));\n    hipPos[j + 4] = hipPos[j];  hipPos[j + 4].x *= -1.;\n  }\n  gDisp = wkrSpd * tCur;\n  bdyHt = 2.4;\n  legLenU = 2.2;\n  legLenD = 3.;\n  ll = legLenD * legLenD - legLenU * legLenU;\n  for (int j = 0; j < 8; j ++) {\n    fz = fract ((gDisp + 0.93 + ((j < 4) ? -1. : 1.) +\n       mod (7. - float (j), 4.)) \/ 3.);\n    az = smoothstep (0.7, 1., fz);\n    footPos[j] = 5. * hipPos[j];\n    footPos[j].x *= 1.7;\n    footPos[j].y += 0.7 * sin (pi * clamp (1.4 * az - 0.4, 0., 1.));\n    footPos[j].z += ((j < 3) ? 0.5 : 1.) - 3. * (fz - az);\n    hipPos[j] += vec3 (0., bdyHt - 0.3, 0.2);\n    v = footPos[j] - hipPos[j];\n    d = length (v);\n    a = asin ((hipPos[j].y - footPos[j].y) \/ d);\n    kneePos[j].y = footPos[j].y + legLenD *\n       sin (acos ((d * d + ll) \/ (2. * d *  legLenD)) + a);\n    kneePos[j].xz = hipPos[j].xz + legLenU * sin (acos ((d * d - ll) \/\n       (2. * d *  legLenU)) + 0.5 * pi - a) * normalize (v.xz);\n  }\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 vn, col, roo;\n  float dstHit, dstBHit, spec, sh, f;\n  int idObjT;\n  col = vec3 (0.);\n  noiseDisp = 0.07 * tCur * vec3 (-1., 0., 1.);\n  dstBHit = FBallHit (ro, rd, fBallPos, fBallRad);\n  roo = ro;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj >= idBdy) {\n      objCol = WkrCol (vn);\n      col = objCol.rgb;\n      spec = objCol.a;\n    } else if (idObj == idPath) {\n      vn = VaryNf (100. * ro, vn, 0.5);\n      col = vec3 (0.45, 0.4, 0.4);\n      spec = 0.2;\n    } else if (idObj == idCol) {\n      col = vec3 (0.3, 0.3, 0.35);\n      spec = 0.5;\n    } else if (idObj == idWall) {\n      col = vec3 (0.8, 0.5, 0.) * BrickPat (mod (vec2 (50. *\n         atan (qHit.z, - qHit.x) \/ (2. * pi), 0.2 * qHit.y), 1.));\n      spec = 0.2;\n    } else {\n      col = vec3 (1., 1., 0.5);\n    }\n    sh = ObjSShadow (ro, sunDir);\n    col = col * (0.2 + sh * 0.7 * max (dot (vn, sunDir), 0.)) +\n       0.5 * sh * spec * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.);\n    f = clamp (5. * ro.y \/ (trCoil * trGap) - 4., 0., 1.);\n    col = mix (col, BgCol (roo, rd), f * f * f);\n  } else {\n    col = BgCol (ro, rd);\n    if (rd.y < 0.) col *= ObjSShadow (ro - rd * ro.y \/ rd.y, sunDir);\n  }\n  if (dstBHit < min (dstHit, dstFar))\n     col = FBallCol (col, roo + rd * dstBHit, rd, dstBHit, 0.1 * tCur);\n  col = pow (clamp (col, 0., 1.), vec3 (0.7));\n  return col;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 ro, rd;\n  vec2 canvas, uv, vf, cf, sf;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  Setup ();\n  vf = vec2 (0.02 * pi, pi - 0.05 * tCur);\n  cf = cos (vf);\n  sf = sin (vf);\n  vuMat = mat3 (1., 0., 0., 0., cf.x, - sf.x, 0., sf.x, cf.x) *\n     mat3 (cf.y, 0., sf.y, 0., 1., 0., - sf.y, 0., cf.y);\n  rd = normalize (vec3 (uv, 6.)) * vuMat;\n  dstFar = 300.;\n  ro = vec3 (0., 0., -200.) * vuMat;\n  ro.y = trCoil * trGap * (0.25 + 0.75 *\n     SmoothBump (0.25, 0.75, 0.2, mod (0.02 * tCur, 1.)));\n  sunDir = normalize (vec3 (0.5, 1., 0.5));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n\n","name":"","description":"","type":"image"}]}}