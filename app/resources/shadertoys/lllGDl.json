{"Shader":{"ver":"0.1","info":{"id":"lllGDl","date":"1426274066","viewed":1063,"name":"Fluid with Obstacles","username":"eiffie","description":"Thanks to andregc we have fluid! Use the mouse to position some \"movers\".<br\/>The original is found here: <a href=\"https:\/\/www.shadertoy.com\/view\/4llGWl\" class=\"regular\" target=\"_blank\">https:\/\/www.shadertoy.com\/view\/4llGWl<\/a>","likes":24,"published":3,"flags":0,"tags":["fluid","fluidsolver"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/fluid with obstacles by eiffie based on...\n\/\/2d fluid by andregc https:\/\/www.shadertoy.com\/view\/4llGWl\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define TEXTURE iChannel0\n#define STEP_COUNT 10\n\n\nconst float PI = 3.14159265;\n\n\/\/these are the field movers\nvec2 swirl(vec2 uv, vec2 center, float strength, float eyeWall) {\n\tvec2 d = uv - center;\n\treturn vec2(d.y, -d.x)\/(dot(d,d)\/strength+eyeWall);\n}\nvec2 spray(vec2 uv, vec2 center, vec2 dir, float strength, float eyeWall){\n\tvec2 d = uv - center;\n\treturn vec2(d.x, d.y)\/(dot(d,d)\/strength+eyeWall)*dot(d,dir);\n}\nvec2 drain(vec2 uv, vec2 center, float strength, float eyeWall){\n\tvec2 d = uv - center;\n\treturn -vec2(d.x, d.y)\/(dot(d,d)\/strength+eyeWall);\n}\n\/\/DE is used to define barriors\nfloat Tube(vec2 pa, vec2 ba){return length(pa-ba*clamp(dot(pa,ba)\/dot(ba,ba),0.0,1.0));}\nfloat DE(vec2 p){\n\tp+=vec2(0.5);\n\treturn min(length(p),Tube(p-vec2(1.0),vec2(0.4,0.2)));\n}\nvec2 ReflectOffSurf(vec2 p, vec2 r){\n\tfloat d=max(DE(p),0.001);\n\tvec2 v=vec2(d,0.0);\n\tvec2 N=normalize(vec2(DE(p+v.xy)-DE(p-v.xy),DE(p+v.yx)-DE(p-v.yx)));\n\td=clamp(sqrt(d)*1.1,0.0,1.0);\n\tr=mix(reflect(r,N)*clamp(0.5-0.5*dot(r,N),0.0,1.0),r*d,d);\n\treturn r;\n}\nvec2 field(vec2 uv) {\n\tvec2 mouse = (iMouse.x == 0. && iMouse.y==0.) ? vec2(-0.15,-0.1) : iMouse.xy\/iResolution.xy-vec2(0.5);\n\tmouse.x *= iResolution.x\/ iResolution.y;\n\tmouse*=3.0;\n\tvec2 p= \n\t\tswirl(uv, mouse,1.5,0.25)\n\t\t+spray(uv,-mouse,vec2(-1.0,0.5),0.5,0.1)\n\t\t+drain(uv,mouse,0.5,0.75)\n\t;\n\tp=ReflectOffSurf(uv,p);\n\treturn p;\n}\n\n\/\/just basic clouds from perlin noise \nfloat rand(vec2 co){return fract(sin(dot(co,vec2(12.9898,78.233)))*43758.5453);}\nfloat noyz(vec2 co){\n\tvec2 d=smoothstep(0.0,1.0,fract(co));\n\tco=floor(co);\n\tconst vec2 v=vec2(1.0,0.0);\n\treturn mix(mix(rand(co),rand(co+v.xy),d.x),\n\t\tmix(rand(co+v.yx),rand(co+v.xx),d.x),d.y);\n}\nfloat clouds( in vec2 q, in float tm )\n{\n\tfloat f=0.0,a=0.6;\n\tfor(int i=0;i<5;i++){\n    \t\tf+= a*noyz( q+tm ); \n\t\tq = q*2.03;\n\t\ta = a*0.5;\n\t}\n\treturn f;\n}\n\nfloat getPattern(vec2 uv) {  \/\/this can be any pattern but moving patterns work best \n\t\/\/float w=texture2D(TEXTURE, uv*0.3).r;   \n\tfloat w=clouds(uv*5.0, iGlobalTime*0.5);\n\treturn w;\n}\n\nvec2 calcNext(vec2 uv, float t) {\n\tt \/= float(STEP_COUNT);\n\tfor(int i = 0; i < STEP_COUNT; ++i) {\n\t\tuv -= field(uv)*t;\n\t}\n\treturn uv;\n}\n\nvec3 heatmap(float h){\n\treturn mix(vec3(0.1,0.2,0.4),vec3(2.0,1.5-h,0.5)\/(1.0+h),h);\n}\n\nvec3 Fluid(vec2 uv, float t) {\n\tfloat t1 = t*0.5;\n\tfloat t2 = t1 + 0.5;\n\tvec2 uv1 = calcNext(uv, t1);\n\tvec2 uv2 = calcNext(uv, t2);\n\tfloat c1 = getPattern(uv1);\n\tfloat c2 = getPattern(uv2);\n\tfloat c=mix(c2,c1,t);\n    float f=1.5-0.5*abs(t-0.5);\n\tc=pow(c,f)*f;\/\/correcting the contrast\/brightness when sliding\n\tfloat h=mix(length(uv-uv2),length(uv-uv1),t);\n\treturn 2.0*c*heatmap(clamp(h*0.5,0.0,1.0));\/\/blue means slow, red = fast\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord\/iResolution.xy - vec2(0.5);\n\tuv.x *= iResolution.x\/iResolution.y;\n\tuv*=3.0;\n\tfloat t = fract(iGlobalTime);\n\tvec3 c = Fluid(uv,t);\/\/draws fluid\n\tfloat d=DE(uv);\/\/get distance to objects\n\tc=mix(vec3(1.0-10.0*d*d),c,smoothstep(0.2,0.25,d));\/\/mix in objects\n\tfragColor = vec4(c,1.0);\n}","name":"","description":"","type":"image"}]}}