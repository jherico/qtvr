{"Shader":{"ver":"0.1","info":{"id":"Xdc3Wr","date":"1448879690","viewed":313,"name":"Wedding Cake","username":"dr2","description":"A cake made from two cylinders and some decoration.","likes":6,"published":3,"flags":0,"tags":["raymarching","shadow","light"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Wedding Cake\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  vec2 t;\n  float ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv2f (ip);\n  return mix (t.x, t.y, fp);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm1 (float p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noiseff (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  const vec3 e = vec3 (0.1, 0., 0.);\n  vec3 g;\n  float s;\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s, Fbmn (p + e.yxy, n) - s,\n     Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d;\n  float s;\n  d = abs (p) - b;\n  s = length (max (d, 0.));\n  d = min (d, 0.);\n  return max (d.x, max (d.y, d.z)) + s;\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrRCylDf (vec3 p, float r, float rt, float h)\n{\n  vec2 dc;\n  float dxy, dz;\n  dxy = length (p.xy) - r;\n  dz = abs (p.z) - h;\n  dc = vec2 (dxy, dz) + rt;\n  return min (min (max (dc.x, dz), max (dc.y, dxy)), length (dc) - rt);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (length (p.xy) - rc, p.z);\n  return length (q) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat AngQnt (float a, float s, float nr)\n{\n  return (s + floor (a * (nr \/ (2. * pi)))) * (2. * pi \/ nr);\n}\n\nvec3 qHit, ltPos, ltDir;\nfloat tCur, qRad, ltAng, fGlow;\nint idObj;\nconst float dstFar = 40.;\nconst int idSlab = 1, idCol = 2, idBall = 3, idCand = 4, idBulb = 5,\n   idRing = 6, idPlate = 7, idTable = 8, idBWall = 9, idSWall = 10;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float d, db, dMin, iy, a, aa, da, r, a1, a2;\n  dMin = dstFar;\n  db = PrBoxDf (p - vec3 (0., -0.3, 0.), vec3 (3., 1.699, 3.));\n  p.y -= -2.;\n  iy = floor (p.y);\n  q = p;\n  q.y = mod (q.y, 1.) - 0.2;\n  r = 1.4 - 0.2 * iy;\n  d = max (PrRCylDf (q.xzy, r, 0.1, 0.2), db);\n  if (d < dMin) { dMin = d;  qHit = q;  qRad = r;  idObj = idSlab; }\n  q.y -= 0.2;\n  d = max (PrTorusDf (q.xzy, 0.03, 0.8 - 0.2 * iy), db);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idRing; }\n  da = max (8. - 2. * iy, 1.);\n  aa = atan (q.z, q.x);\n  a = AngQnt (aa, 0.5, da);\n  q.y -= 0.3;\n  q.xz -= (1.05 - 0.2 * iy) * vec2 (cos (a), sin (a));\n  r = 0.06 + 0.003 * sin (8. * (atan (q.z, q.x) + pi * q.y));\n  d = max (min (d, PrCylDf (q.xzy, r, 0.3)), db);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idCol; }\n  q.y -= -0.27;\n  q.xz = Rot2D (p.xz, pi \/ da);\n  a = AngQnt (aa + pi \/ da, 0.5, da);\n  q.xz -= (1.2 - 0.2 * iy) * vec2 (cos (a), sin (a));\n  d = max (min (d, PrSphDf (q, 0.1)), db);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idBall; }\n  q = p;\n  q.y -= 3.4;\n  d = PrTorusDf (q.xzy, 0.03, 0.2);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idRing; }\n  q = p;\n  q.z += 0.03;\n  a1 = 1.24 * pi - 0.05 * pi;\n  a2 = a1 + 0.1 * pi;\n  dMin = max (dMin, min (1. - q.y, min (dot (q.xz, vec2 (sin (a1), cos (a1))),\n     - dot (q.xz, vec2 (sin (a2), cos (a2))))));\n  q = p;\n  q.y -= 3.67;\n  r = 0.07 * (1. + 0.07 * sin (12. * (aa - 1.5 * pi * q.y)));\n  d = PrCylDf (q.xzy, r, 0.3);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idCand; }\n  q.y -= 0.42;\n  d = PrSphDf (q, 0.15);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idBulb; }\n  q = p;\n  q.y -= -0.03;\n  d = PrRCylDf (q.xzy, 1.6, 0.01, 0.03);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idPlate; }\n  q = p;\n  d = q.y + 0.06;\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idTable; }\n  q.y -= -0.1;\n  d = min (4. - q.z, 20. + q.z);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idBWall; }\n  d = 20. - abs (q.x);\n  if (d < dMin) { dMin = d;  qHit = q;  idObj = idSWall; }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float d, dHit, srd, dda;\n  dHit = 0.;\n  srd = - sign (rd.y);\n  dda = - srd \/ (rd.y + 0.00001);\n  for (int j = 0; j < 200; j ++) {\n    p = ro + dHit * rd;\n    d = ObjDf (p);\n    dHit += min (d, 0.01 + max (0., fract (dda * fract (srd * p.y))));\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 50; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 40. * h \/ d);\n    d += 0.1;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nfloat GlowCol (vec3 ro, vec3 rd, float dstHit)\n{\n  vec3 ltDir;\n  float ltDist, wGlow;\n  wGlow = 0.;\n  ltDir = vec3 (0., 2.2, 0.) - ro;\n  ltDist = length (ltDir);\n  ltDir \/= ltDist;\n  if (ltDist < dstHit - 0.5)\n     wGlow += pow (max (dot (rd, ltDir), 0.), 2048.) \/ ltDist;\n  return clamp (wGlow * fGlow, 0., 1.);\n}\n\nvec3 BrickCol (vec2 p)\n{\n  vec2 q, iq;\n  q = p * vec2 (1., 1.67);\n  iq = floor (q);\n  if (2. * floor (iq.y \/ 2.) != iq.y) q.x += 0.5;\n  q = smoothstep (0.02, 0.04, abs (fract (q + 0.5) - 0.5));\n  return (0.5 + 0.5 * q.x * q.y) * vec3 (0.5, 0.55, 0.5);\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  float f;\n  p *= 4.;\n  f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return vec3 (1., 0.9, 0.9) * mix (1., 0.8, f);\n}\n\nfloat EvalLight (vec3 ro)\n{\n return 0.02 + 0.98 * smoothstep (0., 0.02,\n    ltAng - acos (dot (normalize (ltPos - ro), ltDir)));\n}\n\nvec3 EvalCol (vec3 ro, vec3 rd, vec3 vn, vec4 col4)\n{\n  float illum, sh;\n  illum = EvalLight (ro);\n  sh = 0.3 * illum;\n  if (illum > 0.1) sh += 0.7 * illum * (0.2 +\n     0.8 * ObjSShadow (ro + 0.01 * vn, ltDir));\n  return col4.rgb * (0.025 + sh * max (dot (vn, ltDir), 0.)) +\n     sh * col4.a * pow (max (0., dot (ltDir, reflect (rd, vn))), 128.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, wCol, bgCol, vn, rog, rdg;\n  float dstHit, dstHitg;\n  int idObjT;\n  bool hitWall;\n  idObj = -1;\n  hitWall = false;\n  dstHit = ObjRay (ro, rd);\n  rog = ro;\n  rdg = rd;\n  dstHitg = dstHit;\n  if (idObj == idBWall) {\n    hitWall = true;\n    ro += dstHit * rd;\n    vn = ObjNf (ro);\n    col4 = vec4 (BrickCol (qHit.xy), 0.2);\n    wCol = EvalCol (ro, rd, vn, col4);\n    rd = reflect (rd, vn);\n    ro += 0.1 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n  }\n  if (idObj < 0) dstHit = dstFar;\n  idObjT = idObj;\n  bgCol = vec3 (0.01);\n  if (dstHit >= dstFar) col = bgCol;\n  else {\n    ro += dstHit * rd;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idSlab) {\n      if (length (qHit.xz) < qRad - 0.08 &&\n         abs (qHit.y) < 0.16) {\n        col4 = vec4 (0.3, 0.1, 0.1, 0.2);\n\tvn = VaryNf (50. * qHit, vn, 2.);\n      } else {\n        col4 = vec4 (1., 1., 1., 0.4);\n\tvn = VaryNf (100. * qHit, vn, 0.3);\n      }\n    } else if (idObj == idCol) {\n      col4 = vec4 (0.8, 0.8, 0.9, 0.2);\n    } else if (idObj == idBall) {\n      col4 = vec4 (0., 0.3, 0.7, 0.5);\n    } else if (idObj == idCand) {\n      col4 = vec4 (0.7, 0.7, 0.3, 0.2);\n    } else if (idObj == idBulb) {\n      col4 = vec4 (vec3 (0.5, 0., 0.) * fGlow, 1.);\n    } else if (idObj == idRing) {\n      col4 = vec4 (0.8, 0.8, 0.9, 1.);\n    } else if (idObj == idPlate) {\n      col4 = vec4 (0.8, 0.8, 0.2, 1.);\n    } else if (idObj == idTable) {\n      col4 = vec4 (WoodCol (ro, vn), 0.2);\n    } else if (idObj == idSWall) {\n      col4 = vec4 (BrickCol (qHit.zy), 0.2);\n    } else if (idObj == idBWall) {\n      col4 = vec4 (BrickCol (qHit.xy), 0.2);\n    }\n    if (idObj != idBulb) col = EvalCol (ro, rd, vn, col4);\n    else col = col4.rgb * (0.7 + 0.3 * EvalLight (ro));\n  }\n  if (hitWall) col = mix (col, wCol, 0.6);\n  col = mix (col, 0.7 * vec3 (1., 0.8, 0.5), 5. * GlowCol (rog, rdg, dstHitg));\n  return sqrt (clamp (col, 0., 1.));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec2 canvas, uv, vf, cf, sf;\n  vec3 ro, rd;\n  canvas = iResolution.xy;\n  uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  ltPos = vec3 (8., 10., -30.) + 3. * vec3 (sin (tCur), cos (tCur), 0.);\n  ltDir = normalize (ltPos - vec3 (0., -0.3, 0.));\n  ltAng = 0.1 * (0.8 + 0.4 * sin (0.7 * tCur));\n  fGlow = 0.3 + 0.6 * Fbm1 (2. * tCur);\n  vf = vec2 (0.2, 0.5 * sin (0.3 * tCur));\n  cf = cos (vf);\n  sf = sin (vf);\n  vuMat = mat3 (1., 0., 0., 0., cf.x, - sf.x, 0., sf.x, cf.x) *\n     mat3 (cf.y, 0., sf.y, 0., 1., 0., - sf.y, 0., cf.y);\n  rd = normalize (vec3 (uv, 5.)) * vuMat;\n  ro = vec3 (0., 0., -15.) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}