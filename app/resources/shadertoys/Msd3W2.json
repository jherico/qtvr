{"Shader":{"ver":"0.1","info":{"id":"Msd3W2","date":"1452310098","viewed":271,"name":"Image Diffusion Warp","username":"cornusammonis","description":"Image warping using diffusion.","likes":15,"published":3,"flags":32,"tags":["diffusion","image","feedback","reaction"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec3 im = texture2D(iChannel0, uv).xyz;\n    fragColor = vec4(im, 0.0);\n    \/\/fragColor = 0.5 + 0.5 * texture2D(iChannel1, uv);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float _K0 = -20.0\/6.0; \/\/ center weight\n    const float _K1 = 4.0\/6.0; \/\/ edge-neighbors\n    const float _K2 = 1.0\/6.0; \/\/ vertex-neighbors\n    const float cs = -0.1; \/\/ curl scale\n    const float ls = 0.3; \/\/ laplacian scale\n    const float ps = -0.05; \/\/ laplacian of divergence scale\n    const float ds = 0.05; \/\/ divergence scale\n    const float is = 0.01; \/\/ image derivative scale\n    const float pwr = 1.0; \/\/ power when deriving rotation angle from curl\n    const float amp = 1.0; \/\/ self-amplification\n    const float sq2 = 0.7; \/\/ diagonal weight\n\n    vec2 vUv = fragCoord.xy \/ iResolution.xy;\n    vec2 texel = 1. \/ iResolution.xy;\n    \n    \/\/ 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n    \n    \/\/ sobel filter\n    vec3 im = texture2D(iChannel2, vUv).xyz;\n    vec3 im_n = texture2D(iChannel2, vUv+n).xyz;\n    vec3 im_e = texture2D(iChannel2, vUv+e).xyz;\n    vec3 im_s = texture2D(iChannel2, vUv+s).xyz;\n    vec3 im_w = texture2D(iChannel2, vUv+w).xyz;\n    vec3 im_nw = texture2D(iChannel2, vUv+nw).xyz;\n    vec3 im_sw = texture2D(iChannel2, vUv+sw).xyz;\n    vec3 im_ne = texture2D(iChannel2, vUv+ne).xyz;\n    vec3 im_se = texture2D(iChannel2, vUv+se).xyz;\n\n    float dx = 3.0 * (length(im_e) - length(im_w)) + (length(im_ne) + length(im_se) - length(im_sw) - length(im_nw));\n    float dy = 3.0 * (length(im_n) - length(im_s)) + (length(im_nw) + length(im_ne) - length(im_se) - length(im_sw));\n\n    \/\/ vector field neighbors\n    vec3 uv =    texture2D(iChannel0, vUv).xyz;\n    vec3 uv_n =  texture2D(iChannel0, vUv+n).xyz;\n    vec3 uv_e =  texture2D(iChannel0, vUv+e).xyz;\n    vec3 uv_s =  texture2D(iChannel0, vUv+s).xyz;\n    vec3 uv_w =  texture2D(iChannel0, vUv+w).xyz;\n    vec3 uv_nw = texture2D(iChannel0, vUv+nw).xyz;\n    vec3 uv_sw = texture2D(iChannel0, vUv+sw).xyz;\n    vec3 uv_ne = texture2D(iChannel0, vUv+ne).xyz;\n    vec3 uv_se = texture2D(iChannel0, vUv+se).xyz;\n    \n    \/\/ uv.x and uv.y are our x and y components, uv.z is divergence \n\n    \/\/ laplacian of all components\n    vec3 lapl  = _K0*uv + _K1*(uv_n + uv_e + uv_w + uv_s) + _K2*(uv_nw + uv_sw + uv_ne + uv_se);\n    float sp = ps * lapl.z;\n    \n    \/\/ calculate curl\n    \/\/ vectors point clockwise about the center point\n    float curl = uv_n.x - uv_s.x - uv_e.y + uv_w.y + sq2 * (uv_nw.x + uv_nw.y + uv_ne.x - uv_ne.y + uv_sw.y - uv_sw.x - uv_se.y - uv_se.x);\n    \n    \/\/ compute angle of rotation from curl\n    float sc = cs * sign(curl) * pow(abs(curl), pwr);\n    \n    \/\/ calculate divergence\n    \/\/ vectors point inwards towards the center point\n    float div  = uv_s.y - uv_n.y - uv_e.x + uv_w.x + sq2 * (uv_nw.x - uv_nw.y - uv_ne.x - uv_ne.y + uv_sw.x + uv_sw.y + uv_se.y - uv_se.x);\n    float sd = ds * div;\n\n    vec2 norm = normalize(uv.xy);\n    \n    \/\/ temp values for the update rule\n    float ta = amp * uv.x + ls * lapl.x + norm.x * sp + uv.x * sd + is * dx;\n    float tb = amp * uv.y + ls * lapl.y + norm.y * sp + uv.y * sd + is * dy;\n\n    \/\/ rotate\n    float a = ta * cos(sc) - tb * sin(sc);\n    float b = ta * sin(sc) + tb * cos(sc);\n    \n    \/\/ initialize with noise\n    if(iFrame<10) {\n        fragColor = -0.5 + texture2D(iChannel1, fragCoord.xy \/ iResolution.xy);\n    } else {\n        fragColor = clamp(vec4(a,b,div,1), -1., 1.);\n    }\n    \n\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    const float ds = 0.4; \/\/ diffusion rate\n    const float darken = 0.01; \/\/ darkening\n    const float D1 = 0.2;  \/\/ edge neighbors\n    const float D2 = 0.05; \/\/ vertex neighbors\n    \n    vec2 vUv = fragCoord.xy \/ iResolution.xy;\n    vec2 texel = 1. \/ iResolution.xy;\n    \n    \/\/ 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n    \n    vec3 components = texture2D(iChannel2, vUv).xyz;\n    \n    float a = components.x;\n    float b = components.y;\n    \n    vec3 im =    texture2D(iChannel1, vUv).xyz;\n    vec3 im_n =  texture2D(iChannel1, vUv+n).xyz;\n    vec3 im_e =  texture2D(iChannel1, vUv+e).xyz;\n    vec3 im_s =  texture2D(iChannel1, vUv+s).xyz;\n    vec3 im_w =  texture2D(iChannel1, vUv+w).xyz;\n    vec3 im_nw = texture2D(iChannel1, vUv+nw).xyz;\n    vec3 im_sw = texture2D(iChannel1, vUv+sw).xyz;\n    vec3 im_ne = texture2D(iChannel1, vUv+ne).xyz;\n    vec3 im_se = texture2D(iChannel1, vUv+se).xyz;\n\n    float D1_e = D1 * a;\n    float D1_w = D1 * -a;\n    float D1_n = D1 * b;\n    float D1_s = D1 * -b;\n    float D2_ne = D2 * (b + a);\n    float D2_nw = D2 * (b - a);\n    float D2_se = D2 * (a - b);\n    float D2_sw = D2 * (- a - b);\n\n    vec3 diffusion_im = -darken * length(vec2(a, b)) * im + im_n*D1_n + im_ne*D2_ne + im_e*D1_e + im_se*D2_se + im_s*D1_s + im_sw*D2_sw + im_w*D1_w + im_nw*D2_nw;\n\n    \/\/ initialize with image\n    if(iFrame<10) {\n        fragColor = texture2D(iChannel0, vUv);\n    } else {\n        fragColor = vec4(clamp(im + ds * diffusion_im, 0.0, 1.0), 0.0);\n    }\n}","name":"","description":"","type":"buffer"}]}}