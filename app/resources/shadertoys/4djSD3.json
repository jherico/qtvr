{"Shader":{"ver":"0.1","info":{"id":"4djSD3","date":"1416610184","viewed":2131,"name":"Texture flow II","username":"iq","description":"Integrating uv coordinates across texture isolines (giving rise to curl-like features)","likes":12,"published":3,"flags":0,"tags":["2d","texture"],"hasliked":0},"renderpass":[{"inputs":[{"id":2,"src":"\/presets\/tex01.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec2 flow( vec2 uv )\n{\n\tvec2 e = 1.0\/iChannelResolution[0].xy;\n    \n    float time = 5.0 * mod( iGlobalTime, 12.0 );\n    \n\tfor( int i=0; i<50; i++ )\n\t{\n\t\tfloat h0 = dot( texture2D(iChannel0, uv              ).xyz, vec3(0.333) );\n\t\tfloat h1 = dot( texture2D(iChannel0, uv+vec2(e.x,0.0)).xyz, vec3(0.333) );\n\t\tfloat h2 = dot( texture2D(iChannel0, uv+vec2(0.0,e.y)).xyz, vec3(0.333) );\n        \/\/ tangent\n\t\tvec2 f = vec2( h2-h0, h0-h1 )\/(255.0*e);\n        \/\/ move        \n        uv += 0.0015*f   *clamp( (time-float(i)), 0.0, 1.0 );\n\t}\n    \n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy \/ iResolution.xy;\n\n    \/\/ orbit, distance and distance gradient\n    vec2 uva = 0.05*(p + vec2(1.0,0.0)\/iResolution.xy);\n\tvec2 uvb = 0.05*(p + vec2(0.0,1.0)\/iResolution.xy);\n\tvec2 uvc = 0.05*p;\n\tvec2 nuva = flow( uva  );\n\tvec2 nuvb = flow( uvb );\n\tvec2 nuvc = flow( uvc );\n    float fa = length(nuva-uva)*64.0;\n    float fb = length(nuvb-uvb)*64.0;\n    float fc = length(nuvc-uvc)*64.0;\n    vec3 nor = normalize( vec3((fa-fc)*iResolution.x,1.0,(fb-fc)*iResolution.y ) );\n\n    \/\/ color\n  \tvec3 col = texture2D(iChannel1, 4.0*nuvc).xyz;\n    \/\/ ilumination\n    vec3 lig = normalize( vec3( 1.0,1.0,-0.4 ) );\n    col *= vec3(0.5,0.6,0.7) + vec3(1.0,0.9,0.8) * clamp( dot(nor,lig), 0.0, 1.0 );\n    col *= fc;\n    \/\/ postprocess    \n    col = 2.0*pow( col, vec3(0.8,0.8,0.7) );\n    col *= 0.75 + 0.25*sqrt( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y) );\n    \n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}