{"Shader":{"ver":"0.1","info":{"id":"ldl3DS","date":"1378761304","viewed":1390,"name":"Voxel Ambient Occlusion","username":"fb39ca4","description":"Wrote this a while back, and forgot to release it. As seen in Reinder's Minecraft shader: https:\/\/www.shadertoy.com\/view\/4ds3WS","likes":9,"published":3,"flags":0,"tags":["raycasting","voxel","occlusion","ambient","dda","branchless"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const bool USE_BRANCHLESS_DDA = true;\nconst int MAX_RAY_STEPS = 64;\n\nvec2 rotate2d(vec2 v, float a) {\n\tfloat sinA = sin(a);\n\tfloat cosA = cos(a);\n\treturn vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);\t\n}\n\nfloat sum(vec3 v) { return dot(v, vec3(1.0)); }\n\nfloat sdSphere(vec3 p, float d) { return length(p) - d; } \n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3 d = abs(p) - b;\n  return min(max(d.x,max(d.y,d.z)),0.0) +\n         length(max(d,0.0));\n}\n\nfloat getVoxel(vec3 c) {\n\tvec3 p = floor(c) + vec3(0.5);\n\tfloat d = min(max(-sdSphere(p, 7.5), sdBox(p, vec3(6.0))), -sdSphere(p, 25.0));\n\treturn float(d < 0.0);\n}\n\nfloat vertexAo(vec2 side, float corner) {\n\t\/\/if (side.x == 1.0 && side.y == 1.0) return 1.0;\n\treturn (side.x + side.y + max(corner, side.x * side.y)) \/ 3.0;\n}\n\nvec4 voxelAo(vec3 pos, vec3 d1, vec3 d2) {\n\tvec4 side = vec4(getVoxel(pos + d1), getVoxel(pos + d2), getVoxel(pos - d1), getVoxel(pos - d2));\n\tvec4 corner = vec4(getVoxel(pos + d1 + d2), getVoxel(pos - d1 + d2), getVoxel(pos - d1 - d2), getVoxel(pos + d1 - d2));\n\tvec4 ao;\n\tao.x = vertexAo(side.xy, corner.x);\n\tao.y = vertexAo(side.yz, corner.y);\n\tao.z = vertexAo(side.zw, corner.z);\n\tao.w = vertexAo(side.wx, corner.w);\n\treturn 1.0 - ao;\n}\n\nfloat zeroToOne(float x) { return x + float(!bool(x)); } \n\nfloat voxelDistance(vec3 pos) {\n\tvec3 p = floor(pos); \/\/integer coordinates\n\tpos = mod(pos, 1.0);\n\tconst vec3 o = vec3(0, 1.0, -1.0); \/\/for swizzling\n\t\n\tfloat faceX = min(zeroToOne(pos.x * getVoxel(p + o.zxx)), zeroToOne((1.0 - pos.x) * getVoxel(p + o.yxx)));\n\tfloat faceY = min(zeroToOne(pos.y * getVoxel(p + o.xzx)), zeroToOne((1.0 - pos.y) * getVoxel(p + o.xyx)));\n\tfloat faceZ = min(zeroToOne(pos.y * getVoxel(p + o.xxz)), zeroToOne((1.0 - pos.z) * getVoxel(p + o.xxz)));\n\tfloat face = min(faceX, min(faceY, faceZ));\n\t\n\t\/\/float edgeX1 = \n\treturn 0.0;\n\t\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 screenPos = (fragCoord.xy \/ iResolution.xy) * 2.0 - 1.0;\n\tvec3 cameraDir = vec3(0.0, 0.0, 0.8);\n\tvec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);\n\tvec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * iResolution.y \/ iResolution.x;\n\tvec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;\n\tvec3 rayPos = vec3(0.0, 2.0 * sin(iGlobalTime * 2.7), -12.0);\n\t\t\n\trayPos.xz = rotate2d(rayPos.xz, iGlobalTime);\n\trayDir.xz = rotate2d(rayDir.xz, iGlobalTime);\n\t\n\tvec3 mapPos = vec3(floor(rayPos));\n\n\tvec3 deltaDist = abs(vec3(length(rayDir)) \/ rayDir);\n\t\n\tvec3 rayStep = sign(rayDir);\n\n\tvec3 sideDist = (sign(rayDir) * (mapPos - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; \n\t\n\tvec3 mask;\n\t\n\tfor (int i = 0; i < MAX_RAY_STEPS; i++) {\n\t\tif (bool(getVoxel(mapPos))) continue;\n\t\tmask = step(sideDist.xyz, sideDist.yzx) * step(sideDist.xyz, sideDist.zxy);\n\t\t\n\t\tsideDist += mask * deltaDist;\n\t\tmapPos += mask * rayStep;\n\t}\n\t\n\tvec3 intersectPlane = vec3(mapPos + vec3(lessThan(rayDir, vec3(0.0))));\n\tvec3 endRayPos;\n\tvec2 uv;\n\tvec4 ambient;\n\t\n\tambient = voxelAo(mapPos - rayStep * mask, mask.zxy, mask.yzx);\n\tendRayPos = rayDir \/ sum(mask * rayDir) * sum(mask * (intersectPlane - rayPos)) + rayPos;\n\t\n\tuv.x = dot(mask * endRayPos.yzx, vec3(1.0));\n\tuv.y = dot(mask * endRayPos.zxy, vec3(1.0));\n\tuv = mod(uv, vec2(1.0));\n\n\tfloat interpAo = mix(mix(ambient.z, ambient.w, uv.x), mix(ambient.y, ambient.x, uv.x), uv.y);\n\tinterpAo = pow(interpAo, 1.0 \/ 3.0);\n\n\tfloat color = 0.75 + interpAo * 0.25;\n\n\tfragColor.rgb = pow(vec3(color), vec3(2.2));\n}","name":"","description":"","type":"image"}]}}