{"Shader":{"ver":"0.1","info":{"id":"XtBXWK","date":"1446375382","viewed":412,"name":"01","username":"yiwenl","description":"Learning ray tracing, homework 01","likes":1,"published":3,"flags":0,"tags":["raytracing"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"vec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\nfloat smin( float a, float b, float k )\n{\n    float res = exp( -k*a ) + exp( -k*b );\n    return -log( res )\/k;\n}\n\nfloat smin( float a, float b )\n{\n    return smin(a, b, 3.0);\n}\n\nfloat iPlane(vec3 pos) {\n    return pos.y;\n}\n\nfloat iSphere(vec3 pos, float radius) {\n    return length(pos) - radius;\n}\n\n\nfloat map(vec3 pos) {\n    float dPlane = iPlane(pos);\n    float dSphere = iSphere(pos, 2.0);\n    \n    float s1 = iSphere(pos - vec3(sin(iGlobalTime*.55)*1.85, cos(iGlobalTime*.19) * 0.95, sin(iGlobalTime*.91) * 1.21) * 1.0, 2.6451);\n    float s2 = iSphere(pos - vec3(cos(iGlobalTime*.43)*1.55, sin(iGlobalTime*.38) * 1.12, cos(iGlobalTime*.76) * 1.67) * 1.4, 2.564821);\n    float s3 = iSphere(pos - vec3(sin(iGlobalTime*.26)*2.52, cos(iGlobalTime*.57) * 0.56, sin(iGlobalTime*.12) * 1.58) * 1.2, 2.98441);\n    float s4 = iSphere(pos - vec3(sin(iGlobalTime*.97)*1.72, sin(iGlobalTime*.22) * 0.81, cos(iGlobalTime*.34) * 0.97) * 1.5, 2.12373);\n    float s5 = iSphere(pos - vec3(sin(iGlobalTime*.62)*1.47, cos(iGlobalTime*.76) * 0.73, sin(iGlobalTime*.75) * 1.45) * 1.7, 2.2748186);\n    \n    return smin(s1, smin(s2, smin(s3, smin(s4, s5))));\n}\n\nconst float PI = 3.141592657;\nconst vec3 lightDirection = vec3(1.0, 1.0, -1.0);\nconst vec4 lightBlue = vec4(186.0, 209.0, 222.0, 255.0)\/255.0;\n\nfloat diffuse(vec3 normal) {\n    return max(dot(normal, normalize(lightDirection)), 0.0);   \n}\n\nfloat specular(vec3 normal, vec3 dir) {\n\tvec3 h = normalize(normal - dir);\n\treturn pow(max(dot(h, normal), 0.0), 40.0);\n}\n\nvec3 getColor(vec3 pos, vec3 normal, vec3 dir) {\n    pos.xz = rotate(pos.xz, sin(iGlobalTime*.25)*.2);\n    pos.yz = rotate(pos.yz, cos(sin(iGlobalTime*.25)*.2)+iGlobalTime*.1) * .3;    \n    float zOffset = 200.0 + sin(cos(iGlobalTime*0.443256)*0.716786) * 200.0;\n    zOffset = 1.0 + zOffset*.05;\n    float grey = fract(pos.z*zOffset - iGlobalTime*.1);\n    grey = 1.0 - sin(grey * PI);\n    grey *= mix(1.0 + sin(pos.z*50.0 - iGlobalTime*.1) * 0.5, 0.0, .25);\n    grey = grey * grey;\n    \n    float diff = diffuse(normal);\n    float spec = specular(normal, dir);\n    \n\/\/    return vec3(grey+diff*.75);\n    return vec3(grey+spec*.75+diff*.5);\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float focus = 1.25;\n    vec3 pos = vec3(0.0, 0.0, -10.0);\n    vec3 dir = normalize(vec3(uv, focus));\n    \n    vec4 color = vec4(.0);\n    float d;\n    \n    const int NUM_ITER = 64;\n    for(int i=0; i<NUM_ITER; i++) {\n        d = map(pos);\n        if(d < 0.0001) {\n            vec3 normal = computeNormal(pos);\n            color.rgb = getColor(pos, normal, dir);\n            color.a = 1.0;\n            break;\n        }\n        \n        pos += d * dir;\n        if(length(pos) > 10.0) break;\n    }\n    \n    color = color;\n    \n\tfragColor = vec4(color) * lightBlue;\n}","name":"","description":"","type":"image"}]}}