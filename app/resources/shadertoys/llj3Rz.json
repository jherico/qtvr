{"Shader":{"ver":"0.1","info":{"id":"llj3Rz","date":"1426763378","viewed":7393,"name":"[NV15] Space Curvature","username":"iq","description":"Space curvature","likes":131,"published":3,"flags":9,"tags":["3d","raytracing","raymarching","space","vr","nv15"],"hasliked":0},"renderpass":[{"inputs":[{"id":4,"src":"\/presets\/tex03.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":17,"src":"\/presets\/tex12.png","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nvec3 fancyCube( sampler2D sam, in vec3 d, in float s, in float b )\n{\n    vec3 colx = texture2D( sam, 0.5 + s*d.yz\/d.x, b ).xyz;\n    vec3 coly = texture2D( sam, 0.5 + s*d.zx\/d.y, b ).xyz;\n    vec3 colz = texture2D( sam, 0.5 + s*d.xy\/d.z, b ).xyz;\n    \n    vec3 n = d*d;\n    \n    return (colx*n.x + coly*n.y + colz*n.z)\/(n.x+n.y+n.z);\n}\n\n\nvec2 hash( vec2 p ) { p=vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))); return fract(sin(p)*43758.5453); }\n\nvec2 voronoi( in vec2 x )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec3 m = vec3( 8.0 );\n    for( int j=-1; j<=1; j++ )\n    for( int i=-1; i<=1; i++ )\n    {\n        vec2  g = vec2( float(i), float(j) );\n        vec2  o = hash( n + g );\n        vec2  r = g - f + o;\n\t\tfloat d = dot( r, r );\n        if( d<m.x )\n            m = vec3( d, o );\n    }\n\n    return vec2( sqrt(m.x), m.y+m.z );\n}\n\nfloat shpIntersect( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 po = ro - sph.xyz;\n    \n    float b = dot( rd, po );\n    float c = dot( po, po ) - sph.w*sph.w;\n    float h = b*b - c;\n    \n    if( h>0.0 ) h = -b - sqrt( h );\n    \n    return h;\n}\n\nfloat sphDistance( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    float d = sqrt( max(0.0,sph.w*sph.w-h)) - sph.w;\n    return d;\n}\n\nfloat sphSoftShadow( in vec3 ro, in vec3 rd, in vec4 sph, in float k )\n{\n    vec3 oc = sph.xyz - ro;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n    float h = b*b - c;\n    return (b<0.0) ? 1.0 : 1.0 - smoothstep( 0.0, 1.0, k*h\/b );\n}    \n   \n\nvec3 sphNormal( in vec3 pos, in vec4 sph )\n{\n    return (pos - sph.xyz)\/sph.w;    \n}\n\n\/\/=======================================================\n\nvec3 background( in vec3 d, in vec3 l )\n{\n    vec3 col = vec3(0.0);\n         col += 0.5*pow( fancyCube( iChannel1, d, 0.05, 5.0 ).zyx, vec3(2.0) );\n         col += 0.2*pow( fancyCube( iChannel1, d, 0.10, 3.0 ).zyx, vec3(1.5) );\n         col += 0.8*vec3(0.80,0.5,0.6)*pow( fancyCube( iChannel1, d, 0.1, 0.0 ).xxx, vec3(6.0) );\n    float stars = smoothstep( 0.3, 0.7, fancyCube( iChannel1, d, 0.91, 0.0 ).x );\n\n    \n    vec3 n = abs(d);\n    n = n*n*n;\n    vec2 vxy = voronoi( 50.0*d.xy );\n    vec2 vyz = voronoi( 50.0*d.yz );\n    vec2 vzx = voronoi( 50.0*d.zx );\n    vec2 r = (vyz*n.x + vzx*n.y + vxy*n.z) \/ (n.x+n.y+n.z);\n    col += 0.9 * stars * clamp(1.0-(3.0+r.y*5.0)*r.x,0.0,1.0);\n\n    col = 1.5*col - 0.2;\n    col += vec3(-0.05,0.1,0.0);\n\n    float s = clamp( dot(d,l), 0.0, 1.0 );\n    col += 0.4*pow(s,5.0)*vec3(1.0,0.7,0.6)*2.0;\n    col += 0.4*pow(s,64.0)*vec3(1.0,0.9,0.8)*2.0;\n    \n    return col;\n\n}\n\n\/\/--------------------------------------------------------------------\n\nvec4 sph1 = vec4( 0.0, 0.0, 0.0, 1.0 );\n\nfloat rayTrace( in vec3 ro, in vec3 rd )\n{\n    return shpIntersect( ro, rd, sph1 );\n}\n\nfloat map( in vec3 pos )\n{\n    float d = length( pos.xz - sph1.xz );\n    \n    float h = 1.0-2.0\/(1.0 + 0.3*d*d);\n    \n    return pos.y - h;\n}\n\nfloat rayMarch( in vec3 ro, in vec3 rd, float tmax )\n{\n    float t = 0.0;\n    \n    \/\/ bounding plane\n    float h = (1.0-ro.y)\/rd.y;\n    if( h>0.0 ) t=h;\n\n    \/\/ raymarch 30 steps    \n    for( int i=0; i<30; i++ )    \n    {        \n        vec3 pos = ro + t*rd;\n        float h = map( pos );\n        if( h<0.001 || t>tmax ) break;\n        t += h;\n    }\n    return t;    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{\n    vec3 lig = normalize( vec3(1.0,0.2,1.0) );\n    vec3 col = background( rd, lig );\n    \n    \/\/ raytrace stuff    \n    float t = rayTrace( ro, rd );\n\n    if( t>0.0 )\n    {\n        vec3 mat = vec3( 0.18 );\n        vec3 pos = ro + t*rd;\n        vec3 nor = sphNormal( pos, sph1 );\n            \n        float am = 0.1*iGlobalTime;\n        vec2 pr = vec2( cos(am), sin(am) );\n        vec3 tnor = nor;\n        tnor.xz = mat2( pr.x, -pr.y, pr.y, pr.x ) * tnor.xz;\n\n        float am2 = 0.08*iGlobalTime - 1.0*(1.0-nor.y*nor.y);\n        pr = vec2( cos(am2), sin(am2) );\n        vec3 tnor2 = nor;\n        tnor2.xz = mat2( pr.x, -pr.y, pr.y, pr.x ) * tnor2.xz;\n\n        vec3 ref = reflect( rd, nor );\n        float fre = clamp( 1.0+dot( nor, rd ), 0.0 ,1.0 );\n\n        float l = fancyCube( iChannel0, tnor, 0.03, 0.0 ).x;\n        l += -0.1 + 0.3*fancyCube( iChannel0, tnor, 8.0, 0.0 ).x;\n\n        vec3 sea  = mix( vec3(0.0,0.07,0.2), vec3(0.0,0.01,0.3), fre );\n        sea *= 0.15;\n\n        vec3 land = vec3(0.02,0.04,0.0);\n        land = mix( land, vec3(0.05,0.1,0.0), smoothstep(0.4,1.0,fancyCube( iChannel0, tnor, 0.1, 0.0 ).x ));\n        land *= fancyCube( iChannel0, tnor, 0.3, 0.0 ).xyz;\n        land *= 0.5;\n\n        float los = smoothstep(0.45,0.46, l);\n        mat = mix( sea, land, los );\n\n        vec3 wrap = -1.0 + 2.0*fancyCube( iChannel1, tnor2.xzy, 0.025, 0.0 ).xyz;\n        float cc1 = fancyCube( iChannel1, tnor2 + 0.2*wrap, 0.05, 0.0 ).y;\n        float clouds1 = smoothstep( 0.3, 0.6, cc1 );\n\n        float cc2 = fancyCube( iChannel1, tnor2, 0.2, 0.0 ).y;\n        float clouds2 = smoothstep( 0.3, 0.6, cc2);\n\n        float clouds = clouds1;\/\/ + clouds2*0.1;\n\n        \/\/mat = mix( mat, vec3(0.0), smoothstep( 0.0, 0.6, cc1 ) );\n\n        mat = mix( mat, vec3(0.93*0.15), clouds );\n\n        float dif = clamp( dot(nor, lig), 0.0, 1.0 );\n        mat *= 0.8;\n        vec3 lin  = vec3(3.0,2.5,2.0)*dif;\n        lin += 0.01;\n        col = mat * lin;\n        col = pow( col, vec3(0.4545) );\n        col += 0.6*fre*fre*vec3(0.9,0.9,1.0)*(0.3+0.7*dif);\n\n        float spe = clamp( dot(ref,lig), 0.0, 1.0 );\n        float tspe = pow( spe, 3.0 ) + 0.5*pow( spe, 16.0 );\n        col += (1.0-0.5*los)*clamp(1.0-2.0*clouds,0.0,1.0)*0.3*vec3(0.5,0.4,0.3)*tspe*dif;;\n    }\n    \n    \/\/ raymarch stuff    \n    float tmax = 20.0;\n    if( t>0.0 ) tmax = t; \n    t = rayMarch( ro, rd, tmax );    \n    if( t<tmax )\n    {\n            vec3 pos = ro + t*rd;\n\n            vec2 scp = sin(2.0*6.2831*pos.xz);\n            \n            vec3 wir = vec3( 0.0 );\n            wir += 1.0*exp(-12.0*abs(scp.x));\n            wir += 1.0*exp(-12.0*abs(scp.y));\n            wir += 0.5*exp( -4.0*abs(scp.x));\n            wir += 0.5*exp( -4.0*abs(scp.y));\n            wir *= 0.2 + 1.0*sphSoftShadow( pos, lig, sph1, 4.0 );\n\n            col += wir*0.5*exp( -0.05*t*t );;\n    }        \n\n    if( dot(rd,sph1.xyz-ro)>0.0 )\n    {\n    float d = sphDistance( ro, rd, sph1 );\n    vec3 glo = vec3(0.0);\n    glo += vec3(0.6,0.7,1.0)*0.3*exp(-2.0*abs(d))*step(0.0,d);\n    glo += 0.6*vec3(0.6,0.7,1.0)*0.3*exp(-8.0*abs(d));\n    glo += 0.6*vec3(0.8,0.9,1.0)*0.4*exp(-100.0*abs(d));\n    col += glo*2.0;\n    }        \n    \n    col *= smoothstep( 0.0, 6.0, iGlobalTime );\n\n    return col;\n}\n\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy +2.0*fragCoord.xy) \/ iResolution.y;\n\n    float zo = 1.0 + smoothstep( 5.0, 15.0, abs(iGlobalTime-48.0) );\n    float an = 3.0 + 0.05*iGlobalTime + 6.0*iMouse.x\/iResolution.x;\n    vec3 ro = zo*vec3( 2.0*cos(an), 1.0, 2.0*sin(an) );\n    vec3 rt = vec3( 1.0, 0.0, 0.0 );\n    mat3 cam = setCamera( ro, rt, 0.35 );\n    vec3 rd = normalize( cam * vec3( p, -2.0) );\n\n    vec3 col = render( ro, rd );\n    \n    vec2 q = fragCoord.xy \/ iResolution.xy;\n    col *= 0.2 + 0.8*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.1 );\n\n\tfragColor = vec4( col, 1.0 );\n}\n\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    float zo = 1.0 + smoothstep( 5.0, 15.0, abs(iGlobalTime-48.0) );\n    float an = 3.0 + 0.05*iGlobalTime;\n    vec3 ro = zo*vec3( 2.0*cos(an), 1.0, 2.0*sin(an) );\n\n    vec3 rt = vec3( 1.0, 0.0, 0.0 );\n    mat3 cam = setCamera( ro, rt, 0.35 );\n    \n    fragColor = vec4( render( ro + cam*fragRayOri,\n                                   cam*fragRayDir ), 1.0 );\n\n}","name":"","description":"","type":"image"},{"inputs":[{"id":10,"src":"\/presets\/tex09.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"vec2 mainSound( float time )\n{\n\tvec2 y = vec2( 0.0 );\n\t\n    float d = 1.0;\n    for( int j=0; j<4; j++ )\n    {\n\n        float base = 512.0 + 512.0*sin( time * 0.25 );\n\n        for(int i=0; i<256; i++ )\n        {\n            float h = float(i)\/256.0;\n\n            vec2 ti = texture2D( iChannel0, vec2(h,time*0.1)).xy;\n\n            float a = ti.x*ti.x\/(0.1+h*h);\n\n            y += d * a * cos( vec2(3.0*h,0.0) + 6.2831*time*base*h + ti.y*100.0 );\n        }\n        time += 0.15;\n        d *= 0.9;\n    }    \n\n    y \/= 256.0;\n    y \/= 2.0;\n    \n    y = sin(1.57*y);\n    \n    return y;\n}","name":"","description":"","type":"sound"}]}}