{"Shader":{"ver":"0.1","info":{"id":"ltXSWN","date":"1436792690","viewed":868,"name":"[2TC15] Warp Experiment 3 (271c)","username":"aiekick","description":"reduced version of <a href=\"https:\/\/www.shadertoy.com\/view\/ltXXW4\"  class=\"regular\" target=\"_blank\">Warp Experiment 3<\/a><br\/>mouse available (thanks to coyote <img src=\"\/img\/emoticonHappy.png\"\/>)<br\/>483 chars for the original and 250 for the shortest version (271 with mouse and mouse test)","likes":3,"published":3,"flags":0,"tags":["experiment","warp","code","3","short","reduced"],"hasliked":0},"renderpass":[{"inputs":[{"id":2,"src":"\/presets\/tex01.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/ WITH MOUSE AND MOUSE TEST \/\/\/\/\/ 279 \/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/\/ 276 chars by coyote with mouse and mouse test ^^\n#define b(p) +vec4( T=.7*length(v+v-R-f.p)\/R.y,T,1e-3\/T\/T,0)\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy;\n    float T=iDate.w*.5, C=cos(T);\n    f = R.y*.8*vec4(C, T=sin(T), C+C, -.5*T);\n    f = b(x*0.)b(xy*.5)b(xw)b(zy) +\n        step(0., f=iMouse).z * \/\/ mouse test\n        \tb(xy*2.+R); \/\/ mouse pos\n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/ WITHOUT MOUSE \/\/\/\/\/\/ 250 \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\n\/*\n\/\/ 250 chars by coyote without mouse ^^ 274 with mouse\n#define b(p) vec4( vec2(T=.7*length((v+v-R)\/R.y-p)),1e-3\/T\/T,0)\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy;\n    float T=iGlobalTime*.5, C=cos(T);\n    f = .8*vec4(C, T=sin(T), C+C, -.5*T);\n    f = b(0.) + b(f.xy*.5) + b(f.xw) + b(f.zy);\/\/ + b((2.*iMouse.xy-R)\/R.y); \/\/ mouse\n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n*\/\n\/*\n\/\/ 258 can be 2 char shorter (see under ) but keep the calcul of v one time per pixel\n\/\/better version ( save 1 char ^^) by replacing of\n\/\/ float T=iGlobalTime*.5, C=cos(T);\n\/\/ f = vec4(C, T=sin(T), C+C, -.5*T);\n\/\/by\n\/\/ f.z = (f.x = cos(R.x=iGlobalTime*.5))*2.;\n\/\/ f.w = -.5*(f.y = sin(R.x)); \n#define b(p) vec4(R = length(v-p*.8) * vec2(.7),2e-3\/dot(R,R),0)\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy;\n    v = (v+v-R)\/R.y;\n    f.z = (f.x = cos(R.x=iGlobalTime*.5))*2.; \n\tf.w = -.5*(f.y = sin(R.x)); \n    f = b(0.) + b(f.xy*.5) + b(f.xw) + b(f.zy);\n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n*\/\n\n\/*\n\/\/ 257 by coyote :) but less efficient for the calcul of old v\n#define b(p) vec4( A = length((v+v-R)\/R.y-p*.8) * vec2(.7),2e-3\/dot(A,A),0)\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy, A;\n    float T=iGlobalTime*.5, C=cos(T);\n    f = vec4(C, T=sin(T), C+C, -.5*T);\n    f = b(0.) + b(f.xy*.5) + b(f.xw) + b(f.zy);\n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n*\/\n\/*\n\/\/ 262 by coyote :)\n#define b(p) vec4(R = length(v-p) * vec2(.7),2e-3\/dot(R,R),0)\n\nvoid mainImage( out vec4 f, vec2 v )\n{\n    vec2 R = iResolution.xy;\n    v = (v+v-R)\/R.y;\n\n    float T=iGlobalTime*.5, C=cos(T);\n    \n    f = vec4(C, T=sin(T), C+C, -.5*T);\n     \n    f = b(0.) + b(f.xy*.4) + b(f.xw*.8) + b(f.zy*.8);\n   \n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n*\/\n\/* 280 chars by me\n#define b(p) f.z += 2e-3\/dot(o = length(v-p) * vec2(.7), o); f.xy += o; \n\nvoid mainImage( out vec4 f, vec2 v )\n{\n    f.xy = iResolution.xy;\n    v = (v+v-f.xy)\/f.y;\n    vec4 k = vec4(cos(f.w = iDate.w*.5),sin(f.w), 2.*cos(-f.w),.5*sin(-f.w));\n    vec2 o;\n    b(v-v);\n    b(k.xy*.4); \n    b(k.xw*.8); \n    b(k.zy*.8); \n    f = texture2D(iChannel0, f.xy) + f.z;\n}\n*\/\n\n\/* 294 chars ( mouse removed)\n#define b(p) vec3(f.xy = length(v-p) * vec2(0.7),2e-3\/dot(f.xy,f.xy));\n\nvoid mainImage( out vec4 f, vec2 v )\n{\n    f.xy = iResolution.xy;\n    v = (v+v-f.xy)\/f.y;\n    vec4 k = vec4(cos(f.w = iDate.w*.5),sin(f.w), 2.*cos(-f.w),.5*sin(-f.w));\n     \n    vec3 m = b(v-v);\n    m += b(k.xy*.4);  \n    m += b(k.xw*.8);  \n    m += b(k.zy*.8); \n   \n    f = texture2D(iChannel0, m.xy) + m.z;\n}\n*\/ \n\n\/* original 483 chars\nvec3 mBallWarp(vec2 uv, vec2 pos, float radius)\n{\n   \tuv = length(uv-pos) * vec2(0.7);\n\treturn vec3(uv,radius\/dot(uv,uv));\n}\n\nvoid mainImage( out vec4 f, in vec2 v )\n{\n    float \n        t = iGlobalTime*1.,\n        r = 2e-3,\n    \tz = 1.;\n    \n    vec2 \n        s = iResolution.xy,\n        mo = (2.*iMouse.xy-s)\/s.y * z;\n    \n    v = (v+v-s)\/s.y * z;\n    \n\t\n    vec3 mb = mBallWarp(v, vec2(0.), r);  \n    mb += mBallWarp(v, vec2(cos(t),sin(t))*.4, r);  \n    mb += mBallWarp(v, vec2(cos(-t),0.5*sin(-t))*.8, r);  \n    mb += mBallWarp(v, vec2(2.*cos(-t),sin(t))*.8, r); \n    \n    if (iMouse.z > 0.)\n\t\tmb += mBallWarp(v, mo, r);  \n    \n    f = texture2D(iChannel0, mb.xy) + mb.z;\n}\n*\/","name":"","description":"","type":"image"}]}}