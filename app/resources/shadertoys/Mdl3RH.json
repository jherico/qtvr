{"Shader":{"ver":"0.1","info":{"id":"Mdl3RH","date":"1363459291","viewed":3500,"name":"Iterations - trigonometric","username":"iq","description":"Trigonometric iterations. Or, some abstract stuff inspired made after Pickover's popcorn formulas.","likes":33,"published":3,"flags":0,"tags":["procedural","2d","trigonometric"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\t\t\t\t\t\t    \n\nvec2 iterate( in vec2 p, in vec4 t )\n{\n    return p - 0.05*cos(t.xz + p.x*p.y + cos(t.yw+1.5*3.1415927*p.yx)+p.yx*p.yx );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    p *= 1.5;\t\n\n    vec4 t = 0.15*iGlobalTime*vec4( 1.0, -1.5, 1.2, -1.6 ) + vec4(0.0,2.0,3.0,1.0);\n\t\n    vec2 z = p;\n\tvec3 s = vec3(0.0);\n\tfor( int i=0; i<100; i++ ) \n\t{\n\t\tz = iterate( z, t );\n\n\t\tfloat d = dot( z-p, z-p ); \n\t\ts.x += 1.0\/(0.1+d);\n\t\ts.y += sin(atan( p.x-z.x, p.y-z.y ));\n\t\ts.z += exp(-0.2*d );\n\t}\n    s \/= 100.0;\n\t\n\tvec3 col = 0.5 + 0.5*cos( vec3(0.0,0.4,0.8) + 2.5 + s.z*6.2831 );\n\t\n\tcol *= 0.5 + 0.5*s.y;\n    col *= s.x;\n    col *= 0.94+0.06*sin(10.0*length(z));\n\t\n\tvec3 nor = normalize( vec3( dFdx(s.x), 0.02, dFdy(s.x) ) );\n\tfloat dif = dot( nor, vec3(0.7,0.1,0.7) );\n\tcol -= 0.05*vec3(dif);\n\n\tcol *= 0.3 + 0.7*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2 );\n\t\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}