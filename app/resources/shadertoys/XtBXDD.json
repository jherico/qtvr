{"Shader":{"ver":"0.1","info":{"id":"XtBXDD","date":"1443570311","viewed":647,"name":"3D Flower","username":"vox","description":"flower","likes":3,"published":3,"flags":0,"tags":["flower"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Spiral Fractal (?)\n\/\/ (c) ivan weston 2015\n\n#define PI 3.14159265359\n#define E 2.7182818284\n\/\/#define iGlobalTime 2.0*tan(1.0*iGlobalTime)\n\nfloat height(vec2 uv)\n{\n    float r = length(uv);\n    \n    if(r > 1.0) return 10.0;\n    \n    float sum = 0.0;\n    \n    \n    \n    for(int i = 0 ; i < 12; i++)\n    {\n        \n        \/\/if(i < 64+int(sin(iGlobalTime)*64.0))\n        {\n            \n            \/\/float theta1 = (7.0*atan(uv.y, uv.x)-r*PI*4.0*cos(float(i)+iGlobalTime))+ cos(iGlobalTime);\n\n            float awesome = pow(clamp(1.0-acos(cos((7.0*atan(uv.y, uv.x)-r*PI*4.0*cos(float(i)+iGlobalTime))+ cos(iGlobalTime))), 0.0, 1.0), PI);\n\n            sum = (sum+awesome);\n        }\n    \n    }\n    return -sum;\n}\n\nvec2 flower(vec3 p, vec3 d)\n{\n    \n    float zoom = 1.0;\n        \n    vec2 uv = p.xz*zoom\/2.0;\n    \n    uv.x *= iResolution.x\/iResolution.y;\n    \n    uv = vec2(uv.x*cos(iGlobalTime)-uv.y*sin(iGlobalTime),\n                 uv.x*sin(iGlobalTime)+uv.y*cos(iGlobalTime));\n    \n    \/\/fragColor = 1.0-vec4(1.0-pow(1.0\/E,2.0*PI*clamp(length(uv), 0.0, 1.0)));\n    \n    vec2 uv2 = uv + vec2(.01\/iResolution.x,  0.0);\n    vec2 uv3 = uv + vec2(0.0,  .01\/iResolution.y);\n    \n    vec3 p1 = vec3(uv, height(uv)).xzy;\n    vec3 p2 = vec3(uv2, height(uv2)).xzy;\n    vec3 p3 = vec3(uv3, height(uv3)).xzy;\n    \n    vec3 n = normalize(cross(p3-p1, p2-p1));\n    \n    return vec2(dot(p-p1, n), p1.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy*2.0-1.0;\n    \n    \n    vec3 origin = vec3(0.0, 1.0, 0.0);\n    vec3 rayOrigin = vec3(0.0, 1.5, .25);\n    vec3 rayPos = rayOrigin.xyz;\n    vec3 up = vec3(0.0, 1.0, 0.0);\n    vec3 mainDir = normalize(origin-rayPos);\n    vec3 right = normalize(cross(up, mainDir));\n    up = normalize(cross(right, mainDir));\n    vec3 rayDir = normalize(mainDir-up*uv.y+right*uv.x);\n\n    \n    for(float t = 0.0; t < 100.0; t += 2.5)\n    {\n        vec2 dist = flower(rayPos, rayDir);\n        rayPos += .1*rayDir;\n        if( rayPos.y - dist.y < 0.0)\n            break;\n        else if(length(rayPos-rayOrigin) >= 10.0 )\n        {\n            fragColor = vec4(1.0);\n            return;\n        }\n    }\n    \n    \n    vec2 sum = flower(rayPos, rayDir);\n    \n    fragColor.r = 1.0-pow(cos(rayPos.y*1.0+cos(iGlobalTime*1.0)), 2.0);\n    fragColor.g = 1.0-pow(cos(rayPos.y*1.0+cos(iGlobalTime*2.0)), 2.0);\n    fragColor.b = 1.0-pow(cos(rayPos.y*1.0+cos(iGlobalTime*3.0)), 2.0);\n    \/\/fragColor.rgb *= sum.y-;\n    \n\/\/fragColor = vec4(uv,0.5+0.5*sin(iGlobalTime),1.0);\n}","name":"","description":"","type":"image"}]}}