{"Shader":{"ver":"0.1","info":{"id":"llBXDc","date":"1446900497","viewed":422,"name":"05","username":"yiwenl","description":"05","likes":5,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\/\/\tTOOLS\nvec2 rotate(vec2 pos, float angle) {\n\tfloat c = cos(angle);\n\tfloat s = sin(angle);\n\n\treturn mat2(c, s, -s, c) * pos;\n}\n\n\/\/\tGEOMETRY\nfloat sphere(vec3 pos, float radius) {\treturn length(pos) - radius;\t}\nfloat box(vec3 pos, vec3 size) {\treturn length(max(abs(pos) - size, 0.0)); }\n\nfloat substract(float d1, float d2) {\treturn max(-d1,d2);\t}\nfloat intersection(float d1, float d2) { return max(d1, d2);\t}\n\n\nconst float thickness = .05;\nconst float gap = .15;\nconst float numLayers = 7.0;\nconst float diff = .3;\nconst float maxDist = 3.6;\nconst int NUM_ITER = 100;\n\nfloat shell(vec3 pos, float radius, float index) {\n\tpos.xz        = rotate(pos.xz, sin(index * diff-iGlobalTime*.35784));\n\tpos.yz        = rotate(pos.yz, cos(index * diff-iGlobalTime*.7845));\n\tfloat dOuter  = sphere(pos, radius);\n\tfloat dInner  = sphere(pos, radius-thickness);\n\tfloat dBox    = box(pos + vec3(0.0, 0.0, -radius), vec3(radius));\n\t\n\tfloat dSphere = substract(dInner, dOuter);\n\tfloat d       = intersection(dSphere, dBox);\n\treturn d;\n}\n\n\nfloat map(vec3 pos) {\n\tfloat r = 1.5;\n\tfloat d = shell(pos, r, 0.0);\n\tfloat dShell;\n\tfor(float i=1.0; i<numLayers; i+= 1.0) {\n\t\tr += gap;\n\t\tdShell = shell(pos, r, i);\n\t\td = min(d, dShell);\n\t}\n\t\n\treturn d;\n}\n\nvec3 computeNormal(vec3 pos) {\n\tvec2 eps = vec2(0.01, 0.0);\n\n\tvec3 normal = vec3(\n\t\tmap(pos + eps.xyy) - map(pos - eps.xyy),\n\t\tmap(pos + eps.yxy) - map(pos - eps.yxy),\n\t\tmap(pos + eps.yyx) - map(pos - eps.yyx)\n\t);\n\treturn normalize(normal);\n}\n\n\n\/\/\tLIGHTING\n\nfloat diffuse(vec3 normal, vec3 lightDirection) {\n\treturn max(dot(normal, normalize(lightDirection)), 0.0);\n}\n\nvec3 diffuse(vec3 normal, vec3 lightDirection, vec3 lightColor) {\n\treturn lightColor * diffuse(normal, lightDirection);\n}\n\nfloat specular(vec3 normal, vec3 dir) {\n\tvec3 h = normalize(normal - dir);\n\treturn pow(max(dot(h, normal), 0.0), 50.0);\n}\n\n\nconst vec3 lightPos0 = vec3(1.0, .75, -1.0);\nconst vec3 lightColor0 = vec3(1.0, 1.0, .96);\nconst float lightWeight0 = 0.75;\n\nconst vec3 lightPos1 = vec3(-1.0, -0.75, 0.0);\nconst vec3 lightColor1 = vec3(.96, .96, 1.0);\nconst float lightWeight1 = 0.25;\n\n\nvec4 getColor(vec3 pos, vec3 dir, vec3 normal) {\n\tfloat ambient = .2;\n\tvec3 diff0 = diffuse(normal, lightPos0, lightColor0) * lightWeight0;\n\tvec3 diff1 = diffuse(normal, lightPos1, lightColor1) * lightWeight1;\n\n\t\/\/ float spec = specular(normal, dir) * 1.;\n\tvec3 color = vec3(ambient) + diff0 + diff1;\n\n\treturn vec4(color, 1.0);\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    uv = -1.0 + uv * 2.0;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    float focus = 2.25;\n    vec3 pos   = vec3(0.0, 0.0, -10.0);\t\t\/\/\tposition of camera\n\tvec3 dir   = normalize(vec3(uv, focus));\t\/\/\tray\n\tvec4 color = vec4(.1, .1, .1, 1.0);\n\tfloat prec = .0001;\n\tfloat d;\n\n\t\n\tfor(int i=0; i<NUM_ITER; i++) {\n\t\td = map(pos);\t\t\t\t\t\t\/\/\tdistance to object\n\n\t\tif(d < prec) {\t\t\t\t\t\t\/\/ \tif get's really close, set as hit the object\n\t\t\tcolor       = vec4(1.0);\n\t\t\tvec3 normal = computeNormal(pos);\n\t\t\tcolor       = getColor(pos, dir, normal);\n\t\t\tbreak;\n\t\t}\n\n\t\tpos += d * dir;\t\t\t\t\t\t\/\/\tmove forward by\n\t\tif(length(pos) > maxDist) break;\n\t}\n\t\n    fragColor = color;\n}","name":"","description":"","type":"image"}]}}