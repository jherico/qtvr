{"Shader":{"ver":"0.1","info":{"id":"XlSGWR","date":"1427921255","viewed":931,"name":"Torus Knot","username":"vgs","description":"A trefoil knot as a (p, q) torus knot. Click to rotate.","likes":10,"published":3,"flags":0,"tags":["3d","torus","knot","trefoil"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Vinicius Graciano Santos - vgs\/2015\n\n#define STEPS 64\n#define EPS 0.01\n#define FAR 21.0\n#define TAU 6.28318530718\n\nfloat knot(vec3 p, float k) {\n    float r = length(p.xy);\n    float oa, a = atan(p.y, p.x); oa = k*a;\n    a = mod(a, 0.001*TAU) - 0.001*TAU\/2.0;\n    p.xy = r*vec2(cos(a), sin(a)); p.x -= 6.0;\n    p.xz = cos(oa)*p.xz + sin(oa)*vec2(-p.z, p.x);\n    p.x = abs(p.x) - 1.35; \n    return length(p) - 1.0;\n}\n\nfloat map(vec3 p) {\n   \tfloat t = mod(iGlobalTime+8.0, 12.0);\n    float k = step(5.0, t)*smoothstep(5.0, 6.0, t)*step(t, 11.0);\n    k += step(11.0, t)*(1.0-smoothstep(11.0, 12.0, t));;\n    \n    return knot(p, mix(1.5, 3.5, k));\n}\n\nvec3 grad(vec3 p) {\n    vec2 q = vec2(0.0, EPS);\n    return vec3(map(p + q.yxx) - map(p - q.yxx),\n                map(p + q.xyx) - map(p - q.xyx),\n                map(p + q.xxy) - map(p - q.xxy));\n}\n\nvec3 bgColor(vec3 rd) {\n    vec3 bl = vec3(22., 122., 198.)\/255.;\n    return bl*(1.0+2.0*rd.y)\/3.0+.35;\n}\n\nvec3 shade(vec3 ro, vec3 rd, float t) {\n    vec3 p = ro + t*rd;\n    for (int i = 0; i < 3; ++i)\n    \tp = p + rd*(map(p) - 4.0*t\/iResolution.x);\n    \n    vec3 n = normalize(grad(p));\n    return bgColor(reflect(rd, n))*(0.2+0.8*pow(1.0-dot(-rd, n), 0.5));\n}\n\nmat3 lookAt(vec3 p) {\n    vec3 z = normalize(p);\n    vec3 x = normalize(cross(vec3(0., 1., 0.), z));\n    return mat3(x, cross(z, x), z);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n    \n\tvec2 uv = (-iResolution.xy + 2.0*fragCoord.xy) \/ iResolution.y;\n    float ms = -1.0+2.0*iMouse.y\/iResolution.y;\n    \n    vec3 ro = vec3(5.0*cos(iGlobalTime), iMouse.z > 0.0 ? 10.0*ms : 0.0, 10.0);\n    vec3 rd = normalize(lookAt(ro)*vec3(uv, -1.0));\n    \n    float d, t = 0.0;\n    for (int i = 0; i < STEPS; ++i) {\n        d = map(ro + t*rd);\n        if (d < EPS) break;\n        t += 0.85*d;\n    }\n    vec3 col = d < EPS ? shade(ro, rd, t) : bgColor(rd);\n    \n    vec2 vig = fragCoord.xy\/iResolution.xy;\n    col *= 0.5+0.7*pow(vig.x*(1.0-vig.x)*vig.y*(1.0-vig.y), 0.15);\n    col = smoothstep(0.0, 0.8, col);\n    col = pow(col, vec3(0.45));\n    \n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"}]}}