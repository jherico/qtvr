{"Shader":{"ver":"0.1","info":{"id":"lsSGRc","date":"1391567190","viewed":2285,"name":"Blocks","username":"iq","description":"A 2D Voronoi pattern (see https:\/\/www.shadertoy.com\/view\/MdSGRc) with textures and colors","likes":40,"published":3,"flags":0,"tags":["2d","voronoi"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ANIMATE\n\n\/\/#define FULL_PROCEDURAL\n\nfloat hash1( float n ) { return fract(sin(n)*43758.5453); }\nvec2  hash2( vec2  p ) { p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) ); return fract(sin(p)*43758.5453); }\n\n#ifdef FULL_PROCEDURAL\nfloat noise( in vec2 x )\n{\n    vec2 p = floor(x);\n    vec2 f = fract(x);\n    f = f*f*(3.0-2.0*f);\n    float n = p.x + p.y*57.0;\n    return mix(mix( hash1(n+  0.0), hash1(n+  1.0),f.x),\n               mix( hash1(n+ 57.0), hash1(n+ 58.0),f.x),f.y);\n}\n\nvec3 texture( in vec2 p )\n{\n\tvec2 q = p;\n\tp = p*vec2(6.0,128.0);\n\tfloat f = 0.0;\n    f += 0.500*noise( p ); p = p*2.02;\n    f += 0.250*noise( p ); p = p*2.03;\n    f += 0.125*noise( p ); p = p*2.01;\n\tf \/= 0.875;\n\t\n\tvec3 col = 0.6 + 0.4*sin( f*2.5 + 1.0+vec3(0.0,0.5,1.0) );\n\tcol *= 0.7 + 0.3*noise( 8.0*q.yx );\n\tcol *= 0.8 + 0.2*clamp(2.0*noise(256.0*q.yx ),0.0,1.0);\n    col *= vec3(1.0,0.65,0.5) * 0.85;\n    return col;\n\n}\n#else\nvec3 texture( in vec2 p )\n{\n    return texture2D( iChannel0, p ).xyz;\n}\n#endif\n\nvec4 voronoi( in vec2 x, out vec2 resUV, out float resOcc )\n{\n    vec2 n = floor( x );\n    vec2 f = fract( x );\n\n\tvec2 uv = vec2(0.0);\n\tvec4 m = vec4( 8.0 );\n\tfloat m2 = 9.0;\n    for( int j=-2; j<=2; j++ )\n    for( int i=-2; i<=2; i++ )\n    {\n        vec2 g = vec2( float(i),float(j) );\n        vec2 o = hash2( n + g );\n\t\t#ifdef ANIMATE\n        o = 0.5 + 0.5*sin( 0.5*iGlobalTime + 6.2831*o );\n        #endif\t\n\t\tvec2 r = g - f + o;\n\n        \/\/ distance and tex coordinates\t\t\n        vec2 u = vec2( dot( r, vec2(0.5, 0.866) ), \n\t\t\t\t\t   dot( r, vec2(0.5,-0.866) ) );\n\t\tvec2 d = vec2( -r.y, 1.0 );\n\t\tfloat h = 0.5*abs(r.x)+0.866*r.y;\n\t\tif( h > 0.0 ) \n\t\t{ \n\t\t\tu = vec2( h, r.x );\n\t\t\td = vec2( 0.866*abs(r.x)+0.5*r.y, 0.5*step(0.0,r.x) ); \n\t\t}\n\t\t\n        if( d.x<m.x )\n        {\n\t\t\tm2 = m.x;\n            m.x = d.x;\n            m.y = dot(n+g,vec2(7.0,113.0) );\n\t\t\tm.z = d.y;\n\t\t\tm.w = max(r.y,0.0);\n\t\t\tuv = u;\n        }\n        else if( d.x<m2 )\n\t\t{\n\t\t\tm2 = d.x;\n        }\n\t\t\t\n    }\n\tresUV = uv;\n\tresOcc = m2-m.x;\n    return m;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t\t\n    vec2  q = fragCoord.xy\/iResolution.xy;\n\tvec2 p = -1.0 + 2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n\tvec2 uv = vec2(0.0);\n\n\tvec2 dp = 2.0*vec2( 1.0\/iResolution.y, 0.0 );\n\n\tfloat occ = 0.0;\n\tvec4  c = voronoi( 3.5*p, uv, occ );\n\n\t\n\tvec2 tmp; float tmp2;\n\tfloat d = abs(voronoi( 3.5*(p+dp.xy), tmp, tmp2 ).z - voronoi( 3.5*(p-dp.xy), tmp, tmp2 ).z ) + \n\t          abs(voronoi( 3.5*(p+dp.yx), tmp, tmp2 ).z - voronoi( 3.5*(p-dp.yx), tmp, tmp2 ).z );\n\n    \/\/ color\n\tc.y = hash1( c.y );\n    vec3 col = 0.6 + 0.4*sin( c.y*2.5 + 1.0+vec3(0.0,0.5,1.0) );\n\tcol *= 0.4 + 0.6*smoothstep( 0.1,0.25,abs(hash1(c.y+0.413)-0.5) );\n\n    \/\/ texture\t\n\tcol *= 1.7*pow(texture( uv ), vec3(0.4) );\n\t\n    \/\/ lighting\n\tcol *= clamp( 0.65 + c.z*0.35, 0.0, 1.0 );\n\tcol *= sqrt(clamp(1.0 - c.x,0.0,1.0));\n\tcol *= clamp(1.0-0.3*c.w, 0.0, 1.0 );\n    col *= 0.6 + 0.4*vec3( sqrt(clamp(8.0*occ,0.0,1.0)) );\n\n    \/\/ patern\n    if( hash1(c.y)>0.6 )\n\t{\n\tfloat pa = sin(c.w+(1.0-0.7*c.y)*25.0*uv.y)*sin((1.0-0.7*c.y)*25.0*uv.x);\n\tcol *= smoothstep( 0.0, 0.3, abs(pa-0.6) );\n\tcol *= 1.0 - 0.35*smoothstep( 0.6, 0.7, pa );\n\t}\n\t\n    \/\/ wireframe\t\n\tcol *= 1.0 - d;\n\n    \/\/ tint \n    col = pow( col, vec3(1.0,1.0,0.8) );\t\n\n    \/\/ vigneting\t\n\tcol *= 0.7 + 0.3*pow( 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y), 0.2 );\n\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}