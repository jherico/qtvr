{"Shader":{"ver":"0.1","info":{"id":"MlX3Rf","date":"1423765942","viewed":318,"name":"Biplanes in the Badlands","username":"dr2","description":"More aviation adventures.","likes":8,"published":3,"flags":0,"tags":["raymarching","terrain","aircraft","flight"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Biplanes in the Badlands\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothStep5 (float xLo, float xHi, float x)\n{\n  x = clamp ((x - xLo) \/ (xHi - xLo), 0., 1.);\n  return x * x * x * (x * (6. * x - 15.) + 10.);\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat PrRoundBoxDf (vec3 p, vec3 b, float r) {\n  return length (max (abs (p) - b, 0.)) - r;\n}\n\nint idObj, idObjGrp;\nmat3 flyerMat[3], flMat;\nvec3 flyerPos[3], flPos, qHit, qHitTransObj, sunDir;\nfloat tCur, flyVel;\nfloat fusLen, wSpan;\nconst float dstFar = 150.;\nconst float pi = 3.14159;\nconst int idFus = 11, idPipe = 12, idWing = 13, idStrut = 14,\n   idHstab = 15, idFin = 16, idLeg = 17, idAxl = 18, idWhl = 19,\n   idNose = 20, idCkpit = 21, idPlt = 22;\n\nvec3 SkyBg (vec3 rd)\n{\n  return mix (vec3 (0.1, 0.1, 0.7), vec3 (0.4, 0.4, 0.7),\n     1. - max (rd.y, 0.));\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  vec3 p, q, cSun, clCol, col;\n  float fCloud, cloudLo, cloudRngI, atFac, colSum, attSum, s,\n     att, a, dDotS, ds;\n  const int nLay = 30;\n  cloudLo = 100.;  cloudRngI = 1.\/100.;  atFac = 0.045;\n  fCloud = 0.5;\n  if (rd.y > 0.) {\n    fCloud = clamp (fCloud, 0., 1.);\n    dDotS = max (dot (rd, sunDir), 0.);\n    ro.x += 2.5 * tCur;\n    p = ro;\n    p.xz += (cloudLo - p.y) * rd.xz \/ rd.y;\n    p.y = cloudLo;\n    ds = 1. \/ (cloudRngI * rd.y * (2. - rd.y) * float (nLay));\n    colSum = 0.;  attSum = 0.;\n    s = 0.;  att = 0.;\n    for (int j = 0; j < nLay; j ++) {\n      q = p + rd * s;\n      q.z *= 0.7;\n      att += atFac * max (fCloud - Fbm3 (0.02 * q), 0.);\n      a = (1. - attSum) * att;\n      colSum += a * (q.y - cloudLo) * cloudRngI;\n      attSum += a;  s += ds;\n      if (attSum >= 1.) break;\n    }\n    colSum += 0.5 * min ((1. - attSum) * pow (dDotS, 3.), 1.);\n    clCol = vec3 (1.) * 2.8 * (colSum + 0.05);\n    cSun = vec3 (1.) * clamp ((min (pow (dDotS, 1500.) * 2., 1.) +\n       min (pow (dDotS, 10.) * 0.75, 1.)), 0., 1.);\n    col = clamp (mix (SkyBg (rd) + cSun, clCol, attSum), 0., 1.);\n    col = mix (col, SkyBg (rd), pow (1. - rd.y, 16.));\n  } else col = SkyBg (- rd);\n  return col;\n}\n\nvec3 TrackPath (float z)\n{\n  return vec3 (30. * sin (0.035 * z) * sin (0.012 * z) * cos (0.01 * z) +\n     26. * sin (0.0032 * z),\n     5. + 1.5 * SmoothBump (55., 105., 20., mod (z, 140.)), z);\n}\n\nfloat GrndHt (vec2 p)\n{\n  const mat2 qRot = mat2 (0.8, -0.6, 0.6, 0.8);\n  vec2 q;\n  float s, a, w;\n  q = 0.1 * p;\n  s = 0.;\n  for (int i = 0; i < 3; i ++) {\n    s += Noisefv2 (q);\n    q *= 2. * qRot;\n  }\n  s = 10. * (clamp (0.33 * s, 0., 1.) - 0.55);\n  w = clamp (0.5 * abs (p.x - TrackPath (p.y).x) - 1.2, 0., 1.);\n  s = 4. * SmoothStep5 (0., 1., SmoothMin (s, 1.5 * w * w, 0.5));\n  q = 0.04 * p * qRot;\n  a = 1.;\n  for (int i = 0; i < 7; i ++) {\n    s += a * Noisefv2 (q);\n    a *= 0.7;\n    q *= 2. * qRot;\n  }\n  return s;\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float dHit, h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  dHit = dstFar;\n  for (int j = 0; j < 180; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz);\n    if (h < 0.) break;\n    sLo = s;\n    s += 0.2 * h + 0.007 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 7; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  vec2 e;\n  float ht;\n  ht = GrndHt (p.xz);\n  e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy), e.x,\n     ht - GrndHt (p.xz + e.yx)));\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float sh, d, h;\n  sh = 1.;\n  d = 0.4;\n  for (int i = 0; i < 20; i ++) {\n    p = ro + rd * d;\n    h = p.y - GrndHt (p.xz);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.4;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 GrndCol (vec3 p, vec3 n)\n{\n  vec3 q;\n  float f;\n  const vec3 wCol1 = vec3 (0.6, 0.3, 0.2), wCol2 = vec3 (0.35, 0.3, 0.4),\n     tCol1 = vec3 (0.4, 0.4, 0.2), tCol2 = vec3 (0., 0.6, 0.),\n     bCol1 = vec3 (0.5, 0.4, 0.2), bCol2 = vec3 (0.6, 0.3, 0.3);\n  vec3 col, vCol, hCol;\n  q = 2.2 * p;\n  vCol = mix (wCol1, wCol2, clamp (1.4 * (Noisefv2 (q.xy +\n     vec2 (0., 0.3 * sin (0.14 * q.z)) *\n     vec2 (2., 7.3)) + Noisefv2 (q.zy * vec2 (3., 6.3))) - 1., 0., 1.));\n  f = clamp (0.7 * Noisefv2 (q.xz) - 0.3, 0., 1.);\n  if (p.y > 3.5) hCol = mix (tCol1, tCol2, f);\n  else hCol = mix (bCol1, bCol2, f);\n  col = 1.4 * mix (vCol, hCol, smoothstep (0.4, 0.7, n.y));\n  return col;\n}\n\nfloat PropelDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p - fusLen * vec3 (0., 0.02, 1.07);\n  d = PrCylDf (q, 0.3 * fusLen, 0.007 * fusLen);\n  if (d < dHit) {\n    dHit = d;\n    qHitTransObj = q;\n  }\n  return dHit;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  float dHit;\n  dHit = dstFar;\n  dHit = PropelDf (flyerMat[0] * (p - flyerPos[0]), dHit);\n  dHit = PropelDf (flyerMat[1] * (p - flyerPos[1]), dHit);\n  dHit = PropelDf (flyerMat[2] * (p - flyerPos[2]), dHit);\n  return dHit;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 120; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat FlyerDf (vec3 p, float dHit)\n{\n  vec3 q, qq;\n  float d, wr;\n  q = p;\n  wr = -0.2 + q.z \/ fusLen;\n  d = PrRoundBoxDf (q, vec3 (0.07 * (1. - 0.8 * wr * wr),\n     0.11 * (1. - 0.6 * wr * wr), 1.) * fusLen, 0.05 * fusLen);\n  q -= vec3 (0., 0.1, 0.3) * fusLen;\n  d = max (d, - PrRoundBoxDf (q, vec3 (0.05, 0.1, 0.15) * fusLen,\n     0.03 * fusLen)); \n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idFus;  qHit = q; }\n  q = p;  q -= vec3 (0., 0.08, 0.3) * fusLen;\n  d = PrRoundBoxDf (q, vec3 (0.05, 0.02, 0.15) * fusLen, 0.03 * fusLen); \n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idCkpit;  qHit = q; }\n  q = p;  q.z = abs (q.z - 0.33 * fusLen) - 0.08 * fusLen;\n  q -= vec3 (0., 0.17, 0.) * fusLen;\n  d = PrSphDf (q, 0.04 * fusLen); \n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idPlt;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.03, 0.8);\n  q.x = abs (q.x) - 0.1 * fusLen;\n  d = PrCapsDf (q, 0.02 * fusLen, 0.15 * fusLen);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idPipe;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.03, 1.05);\n  d = PrCapsDf (q, 0.05 * fusLen, 0.02 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idNose;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.09, 0.2);\n  qq = q;  qq.y = abs (qq.y) - 0.21 * fusLen;\n  wr = q.x \/ wSpan;\n  d = PrFlatCylDf (qq.zyx, 0.24 * (1. - 0.2 * wr * wr) * fusLen,\n     0.01 * (1. - 0.8 * wr * wr) * fusLen, wSpan);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idWing;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.09, 0.25);\n  q.xz = abs (q.xz) - fusLen * vec2 (0.5, 0.1);\n  d = PrCylDf (q.xzy, 0.01 * fusLen, 0.21 * fusLen);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idStrut;  qHit = q; }\n  q = p - fusLen * vec3 (0., 0.15, 0.25);\n  q.x = abs (q.x) - 0.1 * fusLen;\n  d = PrCylDf (q.xzy, 0.01 * fusLen, 0.15 * fusLen);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idStrut;  qHit = q; }\n  float tSpan = 0.35 * wSpan;\n  q = p - fusLen * vec3 (0., 0., - 0.9);\n  wr = q.x \/ tSpan;\n  d = PrFlatCylDf (q.zyx, 0.15 * (1. - 0.25 * wr * wr) * fusLen,\n     0.007 * (1. - 0.2 * wr * wr) * fusLen, tSpan);\n  q.x = abs (q.x);\n  d = max (d, 0.02 * fusLen - 1.5 * q.x - q.z);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idHstab;  qHit = q; }\n  float fSpan = 0.32 * wSpan;\n  q = p - fusLen * vec3 (0., 0., - 0.87);\n  q.yz = Rot2D (q.yz, 0.15);\n  wr = q.y \/ fSpan;\n  d = PrFlatCylDf (q.zxy, 0.15 * (1. - 0.3 * wr * wr) * fusLen,\n     0.007 * (1. - 0.3 * wr * wr) * fusLen, fSpan);\n  d = max (d, - q.y);\n  if (d < dHit) { dHit = min (dHit, d);  idObj = idObjGrp + idFin;  qHit = q; }\n  q = p - fusLen * vec3 (0., -0.25, 0.5);\n  q.x = abs (q.x) - 0.14 * fusLen;\n  q.xy = Rot2D (q.xy, -0.55);  q.yz = Rot2D (q.yz, 0.15);\n  d = PrCylDf (q.xzy, 0.013 * fusLen, 0.12 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idLeg;  qHit = q; }\n  q = p - fusLen * vec3 (0., -0.34, 0.515);\n  q.x = abs (q.x) - 0.22 * fusLen;\n  d = PrCylDf (q.yzx, 0.01 * fusLen, 0.035 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idAxl;  qHit = q; }\n  q.x -= 0.01 * fusLen;\n  d = PrCylDf (q.yzx, 0.1 * fusLen, 0.015 * fusLen);\n  if (d < dHit) { dHit = d;  idObj = idObjGrp + idWhl;  qHit = q; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit;\n  dHit = dstFar;\n  idObjGrp = 1 * 256;\n  dHit = FlyerDf (flyerMat[0] * (p - flyerPos[0]), dHit);\n  idObjGrp = 2 * 256;\n  dHit = FlyerDf (flyerMat[1] * (p - flyerPos[1]), dHit);\n  dHit = FlyerDf (flyerMat[2] * (p - flyerPos[2]), dHit);\n  return 0.9 * dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.02 * fusLen;\n  for (int i = 0; i < 50; i++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.02 * fusLen;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec4 FlyerCol (vec3 n)\n{\n  vec3 col, qqHit, nn;\n  float spec, b;\n  int ig, id;\n  spec = 0.2;\n  qqHit = qHit \/ fusLen;\n  ig = idObj \/ 256;  id = idObj - 256 * ig;\n  col = (ig == 2) ? vec3 (0., 0.9, 0.1) : vec3 (0.9, 0., 0.1);\n  if (ig == 1) nn = flyerMat[0] * n;\n  else if (ig == 2) nn = flyerMat[1] * n;\n  else nn = flyerMat[2] * n;\n  if (id == idFus) {\n    qqHit.yz -= vec2 (-0.1, -0.7);\n    col *= (1. - 0.5 * SmoothBump (0.06, 0.09, 0.01, length (qqHit.yz))) *\n       (1. - 0.5 * SmoothBump (-0.01, 0.03, 0.01, length (qqHit.yz)));\n    if (nn.z > 0.9 && qqHit.y < -0.03) col *= 0.3;\n  } else if (id == idWing) {\n    b = wSpan \/ (8. * fusLen);\n    b = mod (qqHit.x + 0.5 * b, b) - 0.5 * b;\n    col *= 1. + 0.1 * SmoothBump (-0.01, 0.01, 0.002, b);\n    if (qqHit.y * nn.y > 0.) {\n      qqHit.x = abs (qqHit.x) - 0.8;\n      qqHit.z -= 0.03;\n      col *= (1. - 0.5 * SmoothBump (0.08, 0.12, 0.01, length (qqHit.xz))) *\n         (1. - 0.5 * SmoothBump (-0.01, 0.03, 0.01, length (qqHit.xz)));\n    }\n  } else if (id == idFin || id == idHstab) {\n    col *= 1. - 0.6 * SmoothBump (-0.062, -0.052, 0.002, qqHit.z);\n  } else if (id == idPipe || id == idNose) {\n    col = vec3 (0.8, 0.8, 0.);\n    spec = 0.4;\n  } else if (id == idStrut || id == idLeg) {\n    col = 0.6 * col + vec3 (0.4);\n  } else if (id == idAxl) {\n    col = vec3 (0.3, 0.2, 0.);\n  } else if (id == idCkpit) {\n    col = vec3 (0.2, 0.15, 0.05);\n  } else if (id == idPlt) {\n    col = vec3 (0.1, 0.07, 0.);\n    if (nn.z > 0.7) {\n      col *= 2.;\n      qqHit.x = abs (qqHit.x) - 0.015 * fusLen;\n      col *= (1. - 0.9 * SmoothBump (0.003, 0.01, 0.001, length (qqHit.xy)));\n    }\n  } else if (id == idWhl) {\n    if (length (qqHit.yz) < 0.07) col = vec3 (0.4, 0.4, 0.4);\n    else {\n      col = vec3 (0.02);\n      spec = 0.;\n    }\n  }\n  return vec4 (col, spec);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 col4;\n  vec3 col, c1, c2, vn;\n  float dstObj, dstGrnd, dstPropel, f, dif, sh, bk;\n  int idObjT;\n  dstGrnd = GrndRay (ro, rd);\n  dstPropel = TransObjRay (ro, rd);\n  idObj = -1;\n  dstObj = ObjRay (ro, rd);\n  if (idObj < 0) dstObj = dstFar;\n  if (min (dstObj, dstGrnd) < dstPropel) dstPropel = dstFar;\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    col4 = FlyerCol (flyerMat[0] * vn); \/\/ [0]!\n    if (idObj == 256 + idWing || idObj == 256 + idHstab) {\n      vn.yz = Rot2D (vn.yz, -0.6 * qHit.z \/ fusLen);\n      vn = VaryNf (100. * ro, vn, 0.05);\n    } else if (idObj == 256 + idFin) {\n      vn.xz = Rot2D (vn.xz, -0.6 * qHit.z \/ fusLen);\n    }\n    dif = max (dot (vn, sunDir), 0.);\n    sh = ObjSShadow (ro, sunDir);\n    bk = max (dot (vn.xz, - normalize (sunDir.xz)), 0.);\n    col = col4.rgb * (0.2 + 0.2 * bk + 0.6 * sh * max (0., dif)) +\n       sh * col4.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 128.);\n    col = sqrt (clamp (col, 0., 1.));\n  } else if (dstGrnd < dstFar) {\n    ro += dstGrnd * rd;\n    vn = VaryNf (3.2 * ro, GrndNf (ro, dstGrnd), 1.5);\n    col = GrndCol (ro, vn);\n    sh = GrndSShadow (ro, sunDir);\n    bk = max (dot (vn.xz, - normalize (sunDir.xz)), 0.);\n    col *= (0.7 + 0.3 * sh) * (0.2 + 0.4 * bk +\n       0.7 * max (0., max (dot (vn, sunDir), 0.)));\n    f = dstGrnd \/ dstFar;\n    f *= f;\n    col = mix (col, SkyBg (rd), clamp (f * f, 0., 1.));\n  } else col = SkyCol (ro, rd);\n  if (dstPropel < dstFar) col = vec3 (0.1) * (1. -\n     0.3 * SmoothBump (0.25, 0.27, 0.006,\n     length (qHitTransObj.xy) \/ fusLen)) + 0.7 * col;\n  return clamp (col, 0., 1.);\n}\n\nvoid FlyerPM (float t, float vu)\n{\n  vec3 fpF, fpB, vel, acc, va, ort, cr, sr;\n  float vy, dt, vDir, rlFac;\n  dt = 0.2;\n  flPos = TrackPath (t * flyVel);\n  if (vu >= 0.) vDir = 1.;\n  else vDir = -1.;\n  fpF = TrackPath ((t + vDir * dt) * flyVel);\n  fpB = TrackPath ((t - vDir * dt) * flyVel);\n  vel = (fpF - fpB) \/ (2. * dt);\n  vy = vel.y;\n  vel.y = 0.;\n  acc = (fpF - 2. * flPos + fpB) \/ (dt * dt);\n  acc.y = 0.;\n  va = cross (acc, vel) \/ length (vel);\n  vel.y = vy;\n  rlFac = (vu == 0.) ? 0.4 : 0.7;\n  ort = vec3 (0., atan (vel.z, vel.x) - 0.5 * pi,\n     rlFac * length (va) * sign (va.y));\n  cr = cos (ort);\n  sr = sin (ort);\n  flMat = mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  vec2 uvs = uv;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  vec3 ro, rd, col;\n  float tSep, t, fHlx, aHlx;\n  sunDir = normalize (vec3 (cos (0.03 * tCur), 1., sin (0.03 * tCur)));\n  fusLen = 0.5;\n  wSpan = 1.2 * fusLen;\n  flyVel = 5.;\n  aHlx = 2. * fusLen;\n  fHlx = 0.03 * flyVel;\n  FlyerPM (tCur, 0.);\n  ro = flPos;\n  vuMat = flMat;\n  ro.xy += 0.6 * aHlx * vec2 (cos (fHlx * tCur), sin (fHlx * tCur));\n  tSep = 80. * fusLen \/ flyVel;\n  t = ro.z \/ flyVel + (0.025 + 0.015 * sin (0.1 * tCur)) * tSep;\n  FlyerPM (t, 1.);\n  flyerPos[0] = flPos;\n  flyerMat[0] = flMat;\n  flyerPos[0].xy += aHlx * vec2 (cos (fHlx * t), sin (fHlx * t));\n  t = tSep * (1. + floor (ro.z \/ (tSep * flyVel))) - mod (tCur, tSep);\n  FlyerPM (t, -1.);\n  flyerPos[1] = flPos;\n  flyerMat[1] = flMat;\n  flyerPos[1].xy -= aHlx * vec2 (cos (fHlx * t), sin (fHlx * t));\n  t += tSep;\n  FlyerPM (t, -1.);\n  flyerPos[2] = flPos;\n  flyerMat[2] = flMat;\n  flyerPos[2].xy -= aHlx * vec2 (cos (fHlx * t), sin (fHlx * t));\n  rd = normalize (vec3 (uv, 2.2)) * vuMat;\n  col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col = mix (vec3 (0.4), col,\n     pow (max (0., 0.95 - length (uvs * uvs * uvs)), 0.2));\n  fragColor = vec4 (col, 1.);\n}\n\n","name":"","description":"","type":"image"}]}}