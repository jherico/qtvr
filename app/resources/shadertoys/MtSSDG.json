{"Shader":{"ver":"0.1","info":{"id":"MtSSDG","date":"1446127127","viewed":463,"name":"inverse trochoids","username":"FabriceNeyret2","description":"Trochoid wave curve is parametric (x(),y()), while in a shader we need a \"procedural\" form y(x).<br\/>NB: yMouse tunes the amplitude.","likes":3,"published":3,"flags":0,"tags":["parametriccurve","trochoid"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Trochoid : ( x(), y() ) = ( x0+A.cos(x0-t) , A.sin(x0-t) )\n\/\/ problem: we want y(x).\n\nfloat A,  t=iGlobalTime; \nvec2 R = iResolution.xy;\n\n#define C(x)   A*cos(x-t)    \/\/ indeed, x-t should be k.(x-c.t)\n#define S(x)   A*sin(x-t)\n#define X0(x,xx)  x-C(xx)\n\nfloat trochoid(float x, float t) {\n\/\/ solve x = x0 + A.cos(x0-t) for x0\n\/\/  as  x = x_i+1 + A.cos(x_i-t) ; x_0 = x\n\/\/ then apply y = A.sin(x0-t)\n\/\/ see more here: https:\/\/www.desmos.com\/calculator\/r0uowdkejy\n    return S(X0(x,X0(x,X0(x,X0(x,X0(x,x))))));\n}\n\n#define plot(Y) o += smoothstep(40.\/R.y, 0., abs(Y-uv.y))\n\/\/ #define plot(Y) o +=exp(-max(0.,Y-uv.y))\n\nvoid mainImage( out vec4 o, vec2 uv )\n{\n    o = vec4(0.0);\n    uv = 10.* (2.*uv-R)\/R.y; \n    A = iMouse.y<=0. ? sin(t) : iMouse.y\/R.y;\n    \n    \n\tplot(  trochoid(uv.x, t) + 4.); \/\/ positive trochoid (gravity wave) \n\tplot( -trochoid(uv.x, t) - 4.); \/\/ negative trochoid (capillary wave)\n    \n    \/\/ approximations based on jt idea : \n    \/\/ plot( -2.* exp( - abs(sin(0.5 *( uv.x - t - 1.57))))   - 4.5);\n    \/\/ plot( - exp( sin(uv.x -  t ) )      -6.);\n \n    o.b += .2;\n}","name":"","description":"","type":"image"}]}}