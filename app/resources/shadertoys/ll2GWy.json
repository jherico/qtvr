{"Shader":{"ver":"0.1","info":{"id":"ll2GWy","date":"1432179123","viewed":1046,"name":"Smooth XOR","username":"iq","description":"Smoothing out a bit the discontinuous XOR pattern.","likes":11,"published":3,"flags":0,"tags":["2d","xor"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = 256.0 * fragCoord.xy\/iResolution.x + iGlobalTime;\n\n    float an = smoothstep( -0.5, 0.5, cos(3.14159*iGlobalTime) );\n    \n    float x = 0.0;\n    for( int i=0; i<7; i++ ) \n    {\n        vec2 a = floor(p);\n        vec2 b = fract(p);\n        \n        x += mod( a.x + a.y, 2.0 ) * \n            \n            \/\/ the following line implements the smooth xor\n            mix( 1.0, 1.5*pow(4.0*(1.0-b.x)*b.x*(1.0-b.y)*b.y,0.25), an );\n        \n        p \/= 2.0;\n        x \/= 2.0;\n    }\n    \n    fragColor = vec4( x, x, x, 1.0 );\n}","name":"","description":"","type":"image"}]}}