{"Shader":{"ver":"0.1","info":{"id":"4slSWN","date":"1401365213","viewed":1879,"name":"gravity field - 2","username":"FabriceNeyret2","description":"inside an homogeneous sphere, only the mass closer to center than you contributes to your gravity.<br\/>What about an heterogeneous bag of stars ?<br\/>(illustrated with 2D gravity in 1\/r).   Mouse.x to force colormap. Clamps stars out of mouse.y radius.","likes":26,"published":3,"flags":0,"tags":["gravity"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define POINTS 100  \t\t \/\/ number of stars\n\n\/\/ --- GUI utils\n\nfloat t = iGlobalTime;\n\nbool keyToggle(int ascii) {\n\treturn (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.);\n}\n\n\n\/\/ --- math utils\n\nfloat dist2(vec2 P0, vec2 P1) { vec2 D=P1-P0; return dot(D,D); }\n\nfloat hash (float i) { return 2.*fract(sin(i*7467.25)*1e5) - 1.; }\nvec2  hash2(float i) { return vec2(hash(i),hash(i-.1)); }\nvec4  hash4(float i) { return vec4(hash(i),hash(i-.1),hash(i-.3),hash(i+.1)); }\n\t\n\n\n\/\/ === main ===================\n\n\/\/ motion of stars\nvec2 P(float i) {\n\tvec4 c = hash4(i);\n\treturn vec2(   cos(t*c.x-c.z)+.5*cos(2.765*t*c.y+c.w),\n\t\t\t\t ( sin(t*c.y-c.w)+.5*sin(1.893*t*c.x+c.z) )\/1.5\t );\n}\n\n\/\/ ---\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv    = 2.*(fragCoord.xy \/ iResolution.y - vec2(.8,.5));\n\tfloat m = (iMouse.z<=0.) ? .1*t\/6.283 : .5*iMouse.x\/iResolution.x;\n\tfloat my = (iMouse.z<=0.) ? .5*pow(.5*(1.-cos(.1*t)),3.) : iMouse.y\/iResolution.y;\n\tint MODE = int(mod( (iMouse.z<=0.) ? 100.*m : 6.*m ,3.));\n\tfloat fMODE = (1.-cos(6.283*m))\/2.;\n\n\tconst int R = 1;\n\t\n\tfloat v=0.; vec2 V=vec2(0.);\n\tfor (int i=1; i<POINTS; i++) { \/\/ sums stars\n\t\tvec2 p = P(float(i));\n\t\tfor (int y=-R; y<=R; y++)  \/\/ ghost echos in cycling universe\n\t\t\tfor (int x=-R; x<=R; x++) {\n\t\t\t\tvec2 d = p+2.*vec2(float(x),float(y)) -uv; \/\/ pixel to star\n\t\t\t\tfloat r2 = dot(d,d);\n\t\t\t\tr2 = clamp(r2,5e-2*my,1e3);\n\t\t\t\tV +=  d \/ r2;  \/\/ gravity force field\n\t\t\t}\n\t\t}\n\t\n\tv = length(V);\n\tv *= 1.\/(9.*float(POINTS));\n\t\/\/v = clamp(v,0.,.1);\n\t\n\tv *= 2.+100.*fMODE;\n\tif (MODE==0) fragColor = vec4(.2*v)+smoothstep(.05,.0,abs(v-5.*my))*vec4(1,0,0,0);\n\tif (MODE==1) fragColor = vec4(.5+.5*sin(2.*v));\n\tif (MODE==2) fragColor = vec4(sin(v),sin(v\/2.),sin(v\/4.),1.);\n\n\n}","name":"","description":"","type":"image"}]}}