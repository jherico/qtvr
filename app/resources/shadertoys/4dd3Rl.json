{"Shader":{"ver":"0.1","info":{"id":"4dd3Rl","date":"1451771241","viewed":611,"name":"Stockholms Str\u00f6m","username":"trapcode","description":"Attempt to recreate the water in Stockholms Str\u00f6m (\"str\u00f6m\" means current - it's a chaotic patch of water)","likes":23,"published":3,"flags":1,"tags":["fractal","noise","water"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Stockholms Str\u00f6m\n\/\/ by Peder Norrby \/ Trapcode in 2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\nmat3 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat3(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  \n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  \n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c          );\n                                          \n}\n\n\n\/\/\n\/\/ Description : Array and textureless GLSL 2D\/3D\/4D simplex \n\/\/               noise functions.\n\/\/      Author : Ian McEwan, Ashima Arts.\n\/\/  Maintainer : ijm\n\/\/     Lastmod : 20110822 (ijm)\n\/\/     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n\/\/               Distributed under the MIT License. See LICENSE file.\n\/\/               https:\/\/github.com\/ashima\/webgl-noise\n\/\/ \n\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 \/ 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat noise(vec3 v)\n  { \n  const vec2  C = vec2(1.0\/6.0, 1.0\/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n\/\/ First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n\/\/ Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  \/\/   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  \/\/   x1 = x0 - i1  + 1.0 * C.xxx;\n  \/\/   x2 = x0 - i2  + 2.0 * C.xxx;\n  \/\/   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; \/\/ 2.0*C.x = 1\/3 = C.y\n  vec3 x3 = x0 - D.yyy;      \/\/ -1.0+3.0*C.x = -0.5 = -D.y\n\n\/\/ Permutations\n  i = mod289(i); \n  vec4 p = permute( permute( permute( \n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n\/\/ Gradients: 7x7 points over a square, mapped onto an octahedron.\n\/\/ The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; \/\/ 1.0\/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  \/\/  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    \/\/ mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  \/\/vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  \/\/vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n\/\/Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n\/\/ Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n\n\n\n\/*\nmat4 rotationMatrix(vec3 axis, float angle)\n{\n    axis = normalize(axis);\n    float s = sin(angle);\n    float c = cos(angle);\n    float oc = 1.0 - c;\n    \n    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,\n                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,\n                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,\n                0.0,                                0.0,                                0.0,                                1.0);\n}*\/\n\n\n\nfloat fnoise( vec3 p)\n{\n    mat3 rot = rotationMatrix( normalize(vec3(0.0,0.0, 1.0)), 0.5*iGlobalTime);\n    mat3 rot2 = rotationMatrix( normalize(vec3(0.0,0.0, 1.0)), 0.3*iGlobalTime);\n    float sum = 0.0;\n    \n    vec3 r = rot*p;\n    \n    float add = noise(r);\n    float msc = add+0.7;\n   \tmsc = clamp(msc, 0.0, 1.0);\n    sum += 0.6*add;\n    \n    p = p*2.0;\n    r = rot*p;\n    add = noise(r);\n \n    add *= msc;\n    sum += 0.5*add;\n    msc *= add+0.7;\n   \tmsc = clamp(msc, 0.0, 1.0);\n    \n    p.xy = p.xy*2.0;\n    p = rot2 *p;\n    add = noise(p);\n    add *= msc;\n    sum += 0.25*abs(add);\n    msc *= add+0.7;\n   \tmsc = clamp(msc, 0.0, 1.0);\n \n    p = p*2.0;\n  \/\/  p = p*rot;\n    add = noise(p);\/\/ + vec3(iGlobalTime*5.0, 0.0, 0.0));\n    add *= msc;\n    sum += 0.125*abs(add);\n    msc *= add+0.2;\n   \tmsc = clamp(msc, 0.0, 1.0);\n\n    p = p*2.0;\n  \/\/  p = p*rot;\n    add = noise(p);\n    add *= msc;\n    sum += 0.0625*abs(add);\n    \/\/msc *= add+0.7;\n   \t\/\/msc = clamp(msc, 0.0, 1.0);\n\n    \n    return sum*0.516129; \/\/ return msc as detail measure?\n}\n\nfloat getHeight(vec3 p) \/\/ x,z,time\n{\n    \n \treturn 0.3-0.5*fnoise( vec3(0.5*(p.x + 0.0*iGlobalTime), 0.5*p.z,  0.4*iGlobalTime) );   \n}\n\n#define box_y 1.0\n#define box_x 2.0\n#define box_z 2.0\n#define bg vec4(0.0, 0.0, 0.0, 1.0)\n#define step 0.3\n#define red vec4(1.0, 0.0, 0.0, 1.0)\n#define PI_HALF 1.5707963267949\n\nvec4 getSky(vec3 rd)\n{\n    if (rd.y > 0.3) return vec4(0.5, 0.8, 1.5, 1.0); \/\/ bright sky\n    if (rd.y < 0.0) return vec4(0.0, 0.2, 0.4, 1.0); \/\/ no reflection from below\n    \n    if (rd.z > 0.9 && rd.x > 0.3) {\n    \tif (rd.y > 0.2) return 1.5*vec4(2.0, 1.0, 1.0, 1.0); \/\/ red houses\n    \treturn 1.5*vec4(2.0, 1.0, 0.5, 1.0); \/\/ orange houses\n    } else return vec4(0.5, 0.8, 1.5, 1.0 ); \/\/ bright sky\n}\n\n\nvec4 shadeBox(vec3 normal, vec3 pos, vec3 rd)\n{\n    float deep = 1.0+0.5*pos.y;\n    \n    vec4 col = deep*0.4*vec4(0.0, 0.3, 0.4, 1.0);\n    \n    return col;\n \n}\n\nvec4 shade(vec3 normal, vec3 pos, vec3 rd)\n{\n    float ReflectionFresnel = 0.99;\n   \tfloat fresnel = ReflectionFresnel*pow( 1.0-clamp(dot(-rd, normal), 0.0, 1.0), 5.0) + (1.0-ReflectionFresnel);\n    vec3 refVec = reflect(rd, normal);\n    vec4 reflection = getSky(refVec);\n    \n    \/\/vec3 sunDir = normalize(vec3(-1.0, -1.0, 0.5));\n    \/\/float intens = 0.5 + 0.5*clamp( dot(normal, sunDir), 0.0, 1.0);\n    \n    float deep = 1.0+0.5*pos.y;\n    \n    vec4 col = fresnel*reflection;\n    col += deep*0.4*vec4(0.0, 0.3, 0.4, 1.0);\n    \n    return clamp(col, 0.0, 1.0);\n}\n\nvec4 intersect_box(vec3 ro, vec3 rd) \/\/ no top and bottom, just sides!\n{\n    \/\/vec3 normal;\n    float t_min = 1000.0;\n    vec3 t_normal;\n\n    \/\/ x = -box_x plane\n    float t = (-box_x -ro.x) \/ rd.x;\n    vec3 p = ro + t*rd;\n\n    if (p.y > -box_y && p.z < box_z && p.z > -box_z) {\n        t_normal = vec3(-1.0, 0.0, 0.0);\n        t_min = t;\n        \/\/if (dot(normal, rd) > PI_HALF ) return red;\/\/shadeBox(normal, p, rd);\n    }\n\n    \n    \/\/ x = +box_x plane\n    \/\/box_x = ro.x + t*rd.x\n    \/\/t*rd.x = box_x - ro.x\n   \/\/ t = (box_x - ro.x)\/rd.x\n    \n    t = (box_x -ro.x) \/ rd.x;\n    p = ro + t*rd;\n\n    if (p.y > -box_y && p.z < box_z && p.z > -box_z) {\n        if (t < t_min) {\n        \tt_normal = vec3(1.0, 0.0, 0.0);\n\t\t\tt_min = t;\n        }\n    }\n\n    \/\/ z = -box_z plane\n\tt = (-box_z -ro.z) \/ rd.z;\n    p = ro + t*rd;\n    \n    if (p.y > -box_y && p.x < box_x && p.x > -box_x) {\n        \n        if (t < t_min) {\n        \tt_normal = vec3(0.0, 0.0, -1.0);\n            t_min = t;\n        }\n    }\n    \n    \/\/ z = +box_z plane\n\tt = (box_z -ro.z) \/ rd.z;\n    p = ro + t*rd;\n    \n    if (p.y > -box_y && p.x < box_x && p.x > -box_x) {\n        \n        if (t < t_min) {\n        \tt_normal = vec3(0.0, 0.0, 1.0);\n            t_min = t;\n        }\n    }\n    \n    \n    if (t_min < 1000.0) return shadeBox(t_normal, ro + t_min*rd, rd);\n    \n    \n    return bg;\n}\n\n\n\nvec4 trace_heightfield( vec3 ro, vec3 rd)\n{\n    \n    \/\/ intersect with max h plane, y=1\n    \n    \/\/ro.y + t*rd.y = 1.0;\n    \/\/t*rd.y = 1.0 - ro.y;\n    float t = (1.0 - ro.y) \/ rd.y;\n    \n    if (t<0.0) return red;\n    \n    vec3 p = ro + t*rd;\n    \n    if (p.x < -2.0 && rd.x <= 0.0) return bg;\n    if (p.x >  2.0 && rd.x >= 0.0) return bg;\n    if (p.z < -2.0 && rd.z <= 0.0) return bg;\n    if (p.z >  2.0 && rd.z >= 0.0) return bg;\n   \n    \n    \/\/float h = getHeight(p);\n    float h, last_h;\n    bool not_found = true;\n    vec3 last_p = p;\n    \n    for (int i=0; i<20; i++) {\n        \n        p += step*rd;\n    \n    \th = getHeight(p);\n        \n        if (p.y < h) {not_found = false; break;} \/\/ we stepped through\n        last_h = h;\n        last_p = p;\n    }\n    \n    if (not_found) return bg;\n \n \t\/\/ refine interection\n    float dh2 = h - p.y;\n    float dh1 = last_p.y - last_h;\n \tp = last_p + rd*step\/(dh2\/dh1+1.0);\n   \n    \/\/ box shenanigans\n    if (p.x < -2.0) {\n        if (rd.x <= 0.0) return bg; \n        return intersect_box(ro, rd);\n    }\n    if (p.x >  2.0) {\n        if (rd.x >= 0.0) return bg;\n        return intersect_box(ro, rd);\n    }\n    if (p.z < -2.0) {\n        if (rd.z <= 0.0) return bg; \n        return intersect_box(ro, rd);\n    }\n    if (p.z >  2.0) {\n        if (rd.z >= 0.0) return bg;\n        return intersect_box(ro, rd);\n    }\n    \n    vec3 pdx = p + vec3( 0.01, 0.0,  0.00);\n    vec3 pdz = p + vec3( 0.00, 0.0,  0.01);\n    \n    float hdx = getHeight( pdx );\n    float hdz = getHeight( pdz );\n   \th = getHeight( p );\n    \n    p.y = h;\n    pdx.y = hdx;\n    pdz.y = hdz;\n    \n    vec3 normal = normalize(cross( p-pdz, p-pdx)) ;\n    \n \treturn shade(normal, p, rd);\n}\n\n\n\/\/ Shadertoy camera code by iq\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr ) \n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/ iResolution.y;\n    vec2 m = iMouse.xy\/iResolution.xy;\n    \n    m.y += 0.3;\n    m.x += 0.72;\n    \n    \/\/m.y = clamp(m.y, 0.2, 2.0);\n    \/\/m.x = clamp(m.x, 1.15, 1.6);\n    \n    \/\/ camera\n    vec3 ro = 9.0*normalize(vec3(sin(5.0*m.x), 1.0*m.y, cos(5.0*m.x))); \/\/ positon\n\tvec3 ta = vec3(0.0, -1.0, 0.0); \/\/ target\n    mat3 ca = setCamera( ro, ta, 0.0 );\n    \/\/ ray\n    vec3 rd = ca * normalize( vec3(p.xy,4.0));\n    \n    \n    fragColor = trace_heightfield( ro, rd );\n}\n\n\/\/ untested VR hook\nvoid mainVR( out vec4 fragColor, in vec2 fragCoord, in vec3 fragRayOri, in vec3 fragRayDir )\n{\n    fragColor = trace_heightfield( fragRayOri, fragRayDir );\n}\n","name":"","description":"","type":"image"}]}}