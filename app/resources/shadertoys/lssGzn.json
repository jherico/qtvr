{"Shader":{"ver":"0.1","info":{"id":"lssGzn","date":"1361875819","viewed":4604,"name":"Coffee and Tablet","username":"P_Malin","description":"Use the mouse to rotate.<br\/>I wanted to combine some raymarching with interesting materials and lighting.<br\/>Based on the textureless version here: http:\/\/glsl.heroku.com\/e#6171.0","likes":42,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":11,"src":"\/presets\/vid00.ogv","ctype":"video","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":14,"src":"\/presets\/tex14.png","ctype":"texture","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":16,"src":"\/presets\/tex11.png","ctype":"texture","channel":3,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Coffee & Tablet - @P_Malin\n\n#define PI 3.141592654\n\n\/\/#define LOW_QUALITY\n\n\/\/#define ENABLE_MONTE_CARLO\n#define ENABLE_REFLECTIONS\n#define ENABLE_FOG\n#define ENABLE_SPECULAR\n#define ENABLE_POINT_LIGHT\n#define ENABLE_POINT_LIGHT_FLARE\n\n#ifdef LOW_QUALITY\n\n#define kRaymarchMatIter 32\n\n#else\n\n#define kRaymarchMatIter 128\n\n#endif\n\n#ifdef ENABLE_MONTE_CARLO\nuniform sampler2D backbuffer;\n\nvec4 gPixelRandom;\nvec3 gRandomNormal;\n \nvoid CalcPixelRandom( const in vec2 fragCoord, float seed )\n{\n\tvec2 vOffset = fract(sin(seed * 123.3 + vec2(0.2, 0.43)) * 30.0);\n\tgPixelRandom = texture2D(iChannel3, fragCoord.xy \/ 64.0 + vOffset);\n\tgRandomNormal = normalize( gPixelRandom.xyz - 0.5);\n}\n \n#endif\n \n \nstruct C_Ray\n{\n\tvec3 vOrigin;\n\tvec3 vDir;\n};\n\nstruct C_HitInfo\n{\n\tvec3 vPos;\n\tfloat fDistance;\n\tvec3 vObjectId;\n};\n\nstruct C_Material\n{\n\tvec3 cAlbedo;\n\tfloat fR0;\n\tfloat fSmoothness;\n\tvec2 vParam;\n};\n\nvec2 SinCos( const in float x )\n{\n\treturn vec2(sin(x), cos(x));\n}\n\t\nvec3 RotateX( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vPos.x, vSinCos.y * vPos.y + vSinCos.x * vPos.z, -vSinCos.x * vPos.y + vSinCos.y * vPos.z);\n}\n\nvec3 RotateY( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.z, vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.z );\n}\n\nvec3 RotateZ( const in vec3 vPos, const in vec2 vSinCos )\n{\n\treturn vec3( vSinCos.y * vPos.x + vSinCos.x * vPos.y, -vSinCos.x * vPos.x + vSinCos.y * vPos.y, vPos.z);\n}\n\t\nvec3 RotateX( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateX( vPos, SinCos(fAngle) );\n}\n\nvec3 RotateY( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateY( vPos, SinCos(fAngle) );\n}\n      \nvec3 RotateZ( const in vec3 vPos, const in float fAngle )\n{\n\treturn RotateZ( vPos, SinCos(fAngle) );\n}\n\nvec4 DistCombineUnion( const in vec4 v1, const in vec4 v2 )\n{\n\t\/\/if(v1.x < v2.x) return v1; else return v2;\n\treturn mix(v1, v2, step(v2.x, v1.x));\n}\n\nvec4 DistCombineIntersect( const in vec4 v1, const in vec4 v2 )\n{\n\treturn mix(v2, v1, step(v2.x,v1.x));\n}\n\nvec4 DistCombineSubtract( const in vec4 v1, const in vec4 v2 )\n{\n\treturn DistCombineIntersect(v1, vec4(-v2.x, v2.yzw));\n}\n\nfloat GetDistanceYZTorus( const in vec3 p, const in float r1, const in float r2 )\n{\n\tvec2 q = vec2(length(p.yz)-r1,p.x);\n\treturn length(q)-r2;\n}\n\nfloat GetDistanceRoundedBox( const in vec3 vPos, const in vec3 vSize, float fRadius )\n{\n\tvec3 vClosest = max(min(vPos, vSize), -vSize);\n\treturn length(vClosest - vPos) - fRadius;\n}\n\n\nfloat GetDistanceMug( const in vec3 vPos )\n{\n\tfloat fDistCylinderOutside = length(vPos.xz) - 1.0;\n\tfloat fDistCylinderInterior = length(vPos.xz) - 0.9;\n\tfloat fTop = vPos.y - 1.0;\n       \n\tfloat r1 = 0.6;\n\tfloat r2 = 0.15;\n\tvec2 q = vec2(length(vPos.xy + vec2(1.2, -0.1))-r1,vPos.z);\n\tfloat fDistHandle = length(q)-r2;\n       \n\tfloat fDistMug = max(max(min(fDistCylinderOutside, fDistHandle), fTop), -fDistCylinderInterior);\n\treturn fDistMug;\n}\n\nfloat GetDistanceCoffee( const in vec3 vPos )\n{\n\tfloat fTopCoffee = vPos.y - 0.7;\n\tfloat fDistCylinderCoffee = length(vPos.xz) - 0.95;\n\t\n\tfloat fDistCoffee = max(fTopCoffee, fDistCylinderCoffee);\n\treturn fDistCoffee;\n}\n\nvec4 GetDistanceTablet( const in vec3 vPos )\n{             \n\tvec3 vBevelPos = vPos - vec3(0.0, 1.71, 0.0);\n\tfloat r = 1.0;\n\tfloat fBevelDist = GetDistanceRoundedBox( vBevelPos, vec3(1.5, 1.0, 2.0), r );\n\n\tvec3 vCasePos = vPos - vec3(0.0, 0.0, 0.0);\n\tfloat fCaseDist = GetDistanceRoundedBox( vCasePos, vec3(1.5, 1.0, 2.0), 0.5 );\n\n\tvec4 vResult = vec4(max(fBevelDist, fCaseDist), 4.0, vPos.xz);\n\t\n\tvec4 vScreenDist = vec4(-vPos.y, 5.0, vPos.xz);\n\tvResult = DistCombineSubtract(vResult, vScreenDist);\n       \n\tvec4 vButtonDist = vec4( length(vPos + vec3(0.0, -0.25, 2.1)) - 0.3, 5.0, vPos.xz);\n\tvResult = DistCombineSubtract(vResult, vButtonDist);\n\t\n\treturn vResult;\n}\n\n\/\/ result is x=scene distance y=material or object id; zw are material specific parameters (maybe uv co-ordinates)\nvec4 GetDistanceScene( const in vec3 vPos )\n{           \n\tvec4 vResult = vec4(10000.0, -1.0, 0.0, 0.0);\n\t\n\tvec3 vMugDomain = vPos + vec3(2.4, 0.0, -2.0);\n\tvMugDomain = RotateY(vMugDomain, 1.0);\n\t\n\tvec4 vDistMug = vec4( GetDistanceMug(vMugDomain), 2.0, atan(vMugDomain.z,vMugDomain.x), vMugDomain.y);\n\tvResult = DistCombineUnion(vResult, vDistMug);\n\t\n\tvec4 vDistCoffee = vec4( GetDistanceCoffee(vMugDomain), 3.0, vMugDomain.xz);\n\tvResult = DistCombineUnion(vResult, vDistCoffee);\n\t\n\tvec4 vDistFloor = vec4(vPos.y + 1.0, 1.0, vPos.xz);\n\tvResult = DistCombineUnion(vResult, vDistFloor);\n\t\n\tvec3 vTabletDomain = vPos;\n\tvTabletDomain += vec3(-0.8, 0.7, 0.0);\n\tvTabletDomain = RotateY(vTabletDomain, -1.0);\n\tvec4 vDistTablet = GetDistanceTablet(vTabletDomain);\n\tvResult = DistCombineUnion(vResult, vDistTablet);\n\t\n\treturn vResult;\n}\n \nC_Material GetObjectMaterial( const in vec3 vObjId, const in vec3 vPos )\n{\n\tC_Material mat;\n\t\n\tif(vObjId.x < 1.5)\n\t{\n\t\t\/\/ floor\n\t\tvec4 cTextureSample = texture2D(iChannel0, vPos.xz * 0.2);                    \n\t\tmat.fR0 = 0.02;\n\t\tmat.cAlbedo = cTextureSample.rgb * cTextureSample.rgb; \/\/ cheap gamma\n\t\tmat.fSmoothness = mat.cAlbedo.r;\n\t}\n\telse\n\tif(vObjId.x < 2.5)\n\t{\n\t\t\/\/ mug\n\t\tmat.fR0 = 0.05;\n\t\tmat.fSmoothness = 0.9;\n\t\tvec2 vUV = vObjId.yz \/ vec2(PI, -2.0) + vec2(1.0, 0.5);\n\t\tvUV = clamp( vUV, 0.0, 1.0);\n\t\tvUV = (vUV \/ (vec2(6.0,1.0)) - vec2(0.0,0.0));\n\t\tvec4 cTextureSample = texture2D(iChannel2, vUV);  \n\t\tvec3 vColour = cTextureSample.rgb * cTextureSample.rgb;\n\t\tmat.cAlbedo = mix(vec3(0.05, 0.35, 0.75), vColour, cTextureSample.a);\n\t}\n\telse\n\tif(vObjId.x < 3.5)\n\t{\n\t\t\/\/ coffee\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 1.0;\n\t\tmat.cAlbedo = vec3(0.5, 0.3, 0.2);\n\t}\n\telse\n\tif(vObjId.x < 4.5)\n\t{\n\t\t\/\/ tablet back\n\t\tmat.fR0 = 0.25;\n\t\tmat.fSmoothness = 0.0;\n\t\tmat.cAlbedo = vec3(0.8, 0.8, 0.8);                            \n\t}\n\telse\n\t{\n\t\t\/\/ tablet screen\n\t\tmat.fR0 = 0.01;\n\t\tmat.fSmoothness = 1.0;                               \n\t\tmat.cAlbedo = vec3(0.025);\n\t}\n               \t\n\t\n\treturn mat;\n}\n \nvec3 GetSkyGradient( const in vec3 vDir )\n{\n\tfloat fBlend = vDir.y * 0.5 + 0.5;\n\treturn mix(vec3(0.0, 0.0, 0.0), vec3(0.4, 0.9, 1.0), fBlend);\n}\n \nvec3 GetLightPos()\n{\n\tvec3 vLightPos = vec3(0.0, 1.0, 3.0);\n\t#ifdef ENABLE_MONTE_CARLO         \n\tvLightPos += gRandomNormal * 0.2;\n\t#endif\n\treturn vLightPos;\n}\n \nvec3 GetLightCol()\n{\n\treturn vec3(32.0, 6.0, 1.0);\n}\n\nvec3 GetAmbientLight(const in vec3 vNormal)\n{\n\treturn GetSkyGradient(vNormal);\n}\n \n#define kFogDensity 0.025\nvoid ApplyAtmosphere(inout vec3 col, const in C_Ray ray, const in C_HitInfo intersection)\n{\n\t#ifdef ENABLE_FOG\n\t\/\/ fog\n\tfloat fFogAmount = exp(intersection.fDistance * -kFogDensity);\n\tvec3 cFog = GetSkyGradient(ray.vDir);\n\tcol = mix(cFog, col, fFogAmount);\n\t#endif\n\t\n\t\/\/ glare from light (a bit hacky - use length of closest approach from ray to light)\n\t#ifdef ENABLE_POINT_LIGHT_FLARE\n\tvec3 vToLight = GetLightPos() - ray.vOrigin;\n\tfloat fDot = dot(vToLight, ray.vDir);\n\tfDot = clamp(fDot, 0.0, intersection.fDistance);\n\t\n\tvec3 vClosestPoint = ray.vOrigin + ray.vDir * fDot;\n\tfloat fDist = length(vClosestPoint - GetLightPos());\n\tcol += GetLightCol() * 0.01\/ (fDist * fDist);\n\t#endif      \n}\n \nvec3 GetSceneNormal( const in vec3 vPos )\n{\n\t\/\/ tetrahedron normal\n\tfloat fDelta = 0.025;\n\n\tvec3 vOffset1 = vec3( fDelta, -fDelta, -fDelta);\n\tvec3 vOffset2 = vec3(-fDelta, -fDelta,  fDelta);\n\tvec3 vOffset3 = vec3(-fDelta,  fDelta, -fDelta);\n\tvec3 vOffset4 = vec3( fDelta,  fDelta,  fDelta);\n\n\tfloat f1 = GetDistanceScene( vPos + vOffset1 ).x;\n\tfloat f2 = GetDistanceScene( vPos + vOffset2 ).x;\n\tfloat f3 = GetDistanceScene( vPos + vOffset3 ).x;\n\tfloat f4 = GetDistanceScene( vPos + vOffset4 ).x;\n\n\tvec3 vNormal = vOffset1 * f1 + vOffset2 * f2 + vOffset3 * f3 + vOffset4 * f4;\n\n\treturn normalize( vNormal );\n}\n \n#define kRaymarchEpsilon 0.01\n#define kRaymarchStartDistance 0.1\n \n\/\/ This is an excellent resource on ray marching -> http:\/\/www.iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\nvoid Raymarch( const in C_Ray ray, out C_HitInfo result, const float fMaxDist, const int maxIter )\n{          \n\tresult.fDistance = kRaymarchStartDistance;\n\tresult.vObjectId.x = 0.0;\n\t\t\t\t    \n\tfor(int i=0;i<=kRaymarchMatIter;i++)                \n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tvec4 vSceneDist = GetDistanceScene( result.vPos );\n\t\tresult.vObjectId = vSceneDist.yzw;\n\t\t\n\t\t\/\/ abs allows backward stepping - should only be necessary for non uniform distance functions\n\t\tif((abs(vSceneDist.x) <= kRaymarchEpsilon) || (result.fDistance >= fMaxDist) || (i > maxIter))\n\t\t{\n\t\t\tbreak;\n\t\t}                          \t\n\t\t\n\t\tresult.fDistance = result.fDistance + vSceneDist.x;      \n\t}\n\t\n\t\n\tif(result.fDistance >= fMaxDist)\n\t{\n\t\tresult.vPos = ray.vOrigin + ray.vDir * result.fDistance;\n\t\tresult.vObjectId.x = 0.0;\n\t\tresult.fDistance = 1000.0;\n\t}\n}\n \nfloat GetShadow( const in vec3 vPos, const in vec3 vLightDir, const in float fLightDistance )\n{\n\tC_Ray shadowRay;\n\tshadowRay.vDir = vLightDir;\n\tshadowRay.vOrigin = vPos;\n\n\tC_HitInfo shadowIntersect;\n\tRaymarch(shadowRay, shadowIntersect, fLightDistance, 32);\n\t\t\t\t\t\t\t\t\t\t\t\t\t     \n\treturn step(0.0, shadowIntersect.fDistance) * step(fLightDistance, shadowIntersect.fDistance );           \n}\n \n\/\/ http:\/\/en.wikipedia.org\/wiki\/Schlick's_approximation\nfloat Schlick( const in vec3 vNormal, const in vec3 vView, const in float fR0, const in float fSmoothFactor)\n{\n\tfloat fDot = dot(vNormal, -vView);\n\tfDot = min(max((1.0 - fDot), 0.0), 1.0);\n\tfloat fDot2 = fDot * fDot;\n\tfloat fDot5 = fDot2 * fDot2 * fDot;\n\treturn fR0 + (1.0 - fR0) * fDot5 * fSmoothFactor;\n}\n \nfloat GetDiffuseIntensity(const in vec3 vLightDir, const in vec3 vNormal)\n{\n\treturn max(0.0, dot(vLightDir, vNormal));\n}\n \nfloat GetBlinnPhongIntensity(const in C_Ray ray, const in C_Material mat, const in vec3 vLightDir, const in vec3 vNormal)\n{            \n\tvec3 vHalf = normalize(vLightDir - ray.vDir);\n\tfloat fNdotH = max(0.0, dot(vHalf, vNormal));\n\n\tfloat fSpecPower = exp2(4.0 + 6.0 * mat.fSmoothness);\n\tfloat fSpecIntensity = (fSpecPower + 2.0) * 0.125;\n\n\treturn pow(fNdotH, fSpecPower) * fSpecIntensity;\n}\n \n\/\/ use distance field to evaluate ambient occlusion\nfloat GetAmbientOcclusion(const in C_Ray ray, const in C_HitInfo intersection, const in vec3 vNormal)\n{\n\tvec3 vPos = intersection.vPos;\n\t\n\tfloat fAmbientOcclusion = 1.0;\n\t\n\tfloat fDist = 0.0;\n\tfor(int i=0; i<=5; i++)\n\t{\n\t\tfDist += 0.1;\n\t\n\t\tvec4 vSceneDist = GetDistanceScene(vPos + vNormal * fDist);\n\t\n\t\tfAmbientOcclusion *= 1.0 - max(0.0, (fDist - vSceneDist.x) * 0.2 \/ fDist );                                    \n\t}\n\t\n\treturn fAmbientOcclusion;\n}\n\nvec3 GetObjectLighting(const in C_Ray ray, const in C_HitInfo intersection, const in C_Material material, const in vec3 vNormal, const in vec3 cReflection)\n{\n\tvec3 cScene ;\n\t\n\tvec3 vSpecularReflection = vec3(0.0);\n\tvec3 vDiffuseReflection = vec3(0.0);\n\t\n\tfloat fAmbientOcclusion = GetAmbientOcclusion(ray, intersection, vNormal);\n\tvec3 vAmbientLight = GetAmbientLight(vNormal) * fAmbientOcclusion;\n\t\n\tvDiffuseReflection += vAmbientLight;\n\t\n\tvSpecularReflection += cReflection * fAmbientOcclusion;\n\t\t\n\t#ifdef ENABLE_POINT_LIGHT\n\tvec3 vLightPos = GetLightPos();\n\tvec3 vToLight = vLightPos - intersection.vPos;\n\tvec3 vLightDir = normalize(vToLight);\n\tfloat fLightDistance = length(vToLight);\n\t\n\tfloat fAttenuation = 1.0 \/ (fLightDistance * fLightDistance);\n\t\n\tfloat fShadowBias = 0.1;              \n\tfloat fShadowFactor = GetShadow( intersection.vPos + vLightDir * fShadowBias, vLightDir, fLightDistance - fShadowBias );\n\tvec3 vIncidentLight = GetLightCol() * fShadowFactor * fAttenuation;\n\t\n\tvDiffuseReflection += GetDiffuseIntensity( vLightDir, vNormal ) * vIncidentLight;                                                                                  \n\tvSpecularReflection += GetBlinnPhongIntensity( ray, material, vLightDir, vNormal ) * vIncidentLight;\n\t#endif \/\/ ENABLE_POINT_LIGHT\n\t\n\tvDiffuseReflection *= material.cAlbedo;\n\n\t\/\/ emmissive glow from screen\n\tif(intersection.vObjectId.x > 4.5)\n\t{\n\t\tvec2 vScreenPos = intersection.vObjectId.zy * vec2(-0.25, -0.3) + vec2(0.54, 0.5);\n\t       \n\t\t\/\/ emissive brightness is 0 unless screen\n\t\tvec2 vMul = step(vScreenPos, vec2(1.0)) * step(vec2(0.0), vScreenPos);\n\t\tfloat kScreenBrightness = 0.8;\n\t\tfloat fMul = vMul.x * vMul.y * kScreenBrightness;\n\t\tvec3 cVideoColour = texture2D(iChannel1, vScreenPos).xyz;\n\t\tvDiffuseReflection += cVideoColour * cVideoColour * fMul; \/\/ cheap gamma correction\n\t}\n\t\n\t\n\t#ifdef ENABLE_SPECULAR\n\tfloat fFresnel = Schlick(vNormal, ray.vDir, material.fR0, material.fSmoothness * 0.9 + 0.1);\n\tcScene = mix(vDiffuseReflection , vSpecularReflection, fFresnel);\n\t#else\n\tcScene = vDiffuseReflection;\n\t#endif\n\t\n\treturn cScene;\n}\n \nvec3 GetSceneColourSimple( const in C_Ray ray )\n{\n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 16.0, 32);\n\t\t\t     \n\tvec3 cScene;\n       \n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n      \n\t\t\/\/ use sky gradient instead of reflection\n\t\tvec3 cReflection = GetSkyGradient(reflect(ray.vDir, vNormal));\n      \n\t\t\/\/ apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n       \n\tApplyAtmosphere(cScene, ray, intersection);\n       \n\treturn cScene;\n}\n \nvec3 GetSceneColour( const in C_Ray ray )\n{                                                           \n\tC_HitInfo intersection;\n\tRaymarch(ray, intersection, 30.0, 256);\n\t\t     \n\tvec3 cScene;\n\t\n\tif(intersection.vObjectId.x < 0.5)\n\t{\n\t\tcScene = GetSkyGradient(ray.vDir);\n\t}\n\telse\n\t{\n\t\tC_Material material = GetObjectMaterial(intersection.vObjectId, intersection.vPos);\n\t\tvec3 vNormal = GetSceneNormal(intersection.vPos);\n\t\n\t\t#ifdef ENABLE_MONTE_CARLO\n\t\tvNormal = normalize(vNormal + gRandomNormal \/ (5.0 + material.fSmoothness * 200.0));\n\t\t#endif\n\t\n\t\tvec3 cReflection;\n\t\t#ifdef ENABLE_REFLECTIONS\t\n\t\t{\n\t\t\t\/\/ get colour from reflected ray\n\t\t\tfloat fSepration = 0.05;\n\t\t\tC_Ray reflectRay;\n\t\t\treflectRay.vDir = reflect(ray.vDir, vNormal);\n\t\t\treflectRay.vOrigin = intersection.vPos + reflectRay.vDir * fSepration;\n\t\t\t\t\t\t\t\t\t       \n\t\t\tcReflection = GetSceneColourSimple(reflectRay);                                                                          \n\t\t}\n\t\t#else\n\t\tcReflection = GetSkyGradient(reflect(ray.vDir, vNormal));                               \n\t\t#endif\n\t\t\/\/ apply lighting\n\t\tcScene = GetObjectLighting(ray, intersection, material, vNormal, cReflection );\n\t}\n\t\n\tApplyAtmosphere(cScene, ray, intersection);\n\t\n\treturn cScene;\n}\n \nvoid GetCameraRay( const in vec3 vPos, const in vec3 vForwards, const in vec3 vWorldUp, const in vec2 fragCoord, out C_Ray ray)\n{\n\tvec2 vPixelCoord = fragCoord.xy;\n\t#ifdef ENABLE_MONTE_CARLO\n\tvPixelCoord += gPixelRandom.zw;\n\t#endif\n\tvec2 vUV = ( vPixelCoord \/ iResolution.xy );\n\tvec2 vViewCoord = vUV * 2.0 - 1.0;\n\n\tvViewCoord *= 0.75;\n\t\n\tfloat fRatio = iResolution.x \/ iResolution.y;\n\n\tvViewCoord.y \/= fRatio;                            \n\n\tray.vOrigin = vPos;\n\n\tvec3 vRight = normalize(cross(vForwards, vWorldUp));\n\tvec3 vUp = cross(vRight, vForwards);\n\t     \n\tray.vDir = normalize( vRight * vViewCoord.x + vUp * vViewCoord.y + vForwards);         \n}\n \nvoid GetCameraRayLookat( const in vec3 vPos, const in vec3 vInterest, const in vec2 fragCoord, out C_Ray ray)\n{\n\tvec3 vForwards = normalize(vInterest - vPos);\n\tvec3 vUp = vec3(0.0, 1.0, 0.0);\n\n\tGetCameraRay(vPos, vForwards, vUp, fragCoord, ray);\n}\n \nvec3 OrbitPoint( const in float fHeading, const in float fElevation )\n{\n\treturn vec3(sin(fHeading) * cos(fElevation), sin(fElevation), cos(fHeading) * cos(fElevation));\n}\n \nvec3 Tonemap( const in vec3 cCol )\n{\n\treturn 1.0 - exp2(-cCol);\n}\n \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\t#ifdef ENABLE_MONTE_CARLO              \n\tCalcPixelRandom( fragCoord, iGlobalTime );\n\t#endif\n\t\n\tC_Ray ray;\n\t\n\tvec2 mouse = iMouse.xy \/ iResolution.xy;\n\t\n\t\/\/ If we have never moved the mouse\n\tif(iMouse.x <= 0.0)\n\t{\n\t\tmouse.xy = vec2(0.5);\n\t}\n\t\n\tvec3 vCameraPos = OrbitPoint(-mouse.x * 14.0 + PI, (mouse.y) * PI * 0.2 + PI * 0.025) * 7.0 - vec3(0.0, 0.9, 0.0);\n\t#ifdef ENABLE_MONTE_CARLO              \n\tfloat fDepthOfField = 0.1;\n\tvCameraPos += gRandomNormal * 0.05;\n\t#endif\n\t\n\tGetCameraRayLookat( vCameraPos, vec3(0.0, 0.0, 0.0), fragCoord, ray);\n\t\/\/GetCameraRayLookat(vec3(0.0, 0.0, -5.0), vec3(0.0, 0.0, 0.0), ray);\n\t\n\tvec3 cScene = GetSceneColour( ray );\t\n\t\n\tfloat fExposure = 2.5;\n\tcScene = cScene * fExposure;\n\tvec3 cCurr = Tonemap(cScene );\n\t\n\t#ifdef ENABLE_MONTE_CARLO                              \n\tvec3 cPrev = texture2D(backbuffer, fragCoord.xy \/ iResolution.xy).xyz;\n\t\/\/ would be nice to combine before tonemap but undoing a gamma=2.0 will do instead\n\tcPrev = cPrev * cPrev;\n\t\/\/ add noise to pixel value (helps values converge)\n\tcPrev += (gPixelRandom.xyz - 0.5) * (1.0 \/ 255.0);\n\tcCurr = cCurr * cCurr;\n\t\/\/ converge speed\n\t\/\/float fBlend = 8.0\/255.0;\n\tfloat fBlend = 1.0;\n\tvec3 cFinal = mix(cPrev, cCurr, fBlend);\n\t\/\/ re-apply gamma 2.0\n\tcFinal = sqrt(cFinal);\n\t#else\n\tvec3 cFinal = cCurr;\n\t#endif\n\t\n\tfloat fAlpha = 1.0;\n\n\t\n\tfragColor = vec4( cFinal, fAlpha );    \n}\n\n","name":"","description":"","type":"image"}]}}