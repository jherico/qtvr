{"Shader":{"ver":"0.1","info":{"id":"4s33Rj","date":"1451186481","viewed":142,"name":"Music MandelBox Colour","username":"pixelbeast","description":"Added color to an old shardertoty ","likes":3,"published":3,"flags":0,"tags":["viz3dmusicfft"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\n\/\/ Iain Melvin, 2015\n\/\/ fft distortions of mandlebox 3d, colour\n\/\/ with help from:\n\/\/ https:\/\/www.shadertoy.com\/view\/XsB3Rm  \/\/ Original Raymarch tutorial (iq)\n\/\/ https:\/\/www.shadertoy.com\/view\/ldSGRK  \/\/ for mandlebox formula (klems)\n\/\/ Raymarch tutorial: - iq\/2013\n\n\nfloat mandel3D(vec3 z,float fft){\n  const float scale=3.5; \/\/2.0; \/\/ -1.5\n  const float r=0.5; \n  const float f=1.125;\n  vec3 offset = z;\n  const int niter = 13;\n  float dr = 1.0;\n  for (int i=0;i<niter;i++){\n\t\/\/fold\n\tz = clamp(z, -1.0, 1.0) * 2.0 - z;\n\t\/\/warp\n\tfloat l = length(z);\n\tif (l<r){\n\t  z\/=r*r;\n\t}else if (l<1.0){\n\t  z\/=l*l;\n\t}\n\tz*=scale;\n\tdr = dr * abs(scale) + 1.0;\n\t\/\/ scale by fft\n\tfloat fft_scale = 1.0-(fft*0.34);\n\tz*=fft_scale;\n\t\/\/dr = dr * fft_scale; \/\/ I think there is something to do here\n\tz+=offset;\n  }\n  float zr = length(z);\n  return zr \/ abs(dr);\n}\n\nvec2 map( in vec3 pos ) {\n    float d = length(pos);\n    float fft = 0.8*texture2D(iChannel0, vec2((d\/32.0),0.3) )[0];\t\n\treturn vec2(mandel3D(pos*1.5,fft),fft);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd, in float maxd ){\n\tfloat precis = 0.015;\n    float h=precis*2.0;\n    float t = 0.0;\n    float m = -1.0;\n    for( int i=0; i<120; i++ )\n    {\n        if( abs(h)<precis||t>maxd ) break;\n        t += h;\n\t    vec2 res = map( ro+rd*t );\n        h = res.x; \/\/dist to solid\n\t    m = res.y; \/\/fft\n    }\n    if (t>maxd) { t=-0.5; m=0.0; }\n    return vec2( t, m );\n}\n\nvec3 calcNormal( in vec3 pos ){\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\/\/ iq's smooth hsv to rgb\nvec3 hsv2rgb( in vec3 c ){\n    vec3 rgb = clamp( abs(mod(c.x*6.0+vec3(0.0,4.0,2.0),6.0)-3.0)-1.0, 0.0, 1.0 );\n\trgb = rgb*rgb*(3.0-2.0*rgb);\n\treturn c.z * mix( vec3(1.0), rgb, c.y);\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(0.0);\n    vec2 res = castRay(ro,rd,15.0);\n    float t = res.x; \/\/ dist to func\n\tfloat m = res.y; \/\/ fft intense at collision\n    vec3 pos = ro + t*rd;\n    vec3 nor = calcNormal( pos );\n    if (t==-0.5) { nor=vec3(1.0,0.0,0.0); }\n\n\tcol = hsv2rgb(vec3(m*2.0,1.0,1.0)); \/\/ hue sat lum\n    \n    float ao = 1.0;\n\n\tvec3 lig = normalize( vec3(-0.6, 0.7, -0.5) );\n\tfloat amb = clamp( 0.5+0.5*nor.y, 0.0, 1.0 );\n    float dif = clamp( dot( nor, lig ), 0.0, 1.0 );\n    float bac = clamp( dot( nor, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-pos.y,0.0,1.0);\n\tfloat sh = 1.0;\n\n\tvec3 brdf = vec3(0.0);\n\tbrdf += 0.20*amb*vec3(0.10,0.11,0.13)*ao;\n    brdf += 0.20*bac*vec3(0.15,0.15,0.15)*ao;\n    brdf += 2.20*dif*vec3(1.00,0.90,0.70);\n\n\tfloat pp = clamp( dot( reflect(rd,nor), lig ), 0.0, 1.0 );\n\tfloat spe = sh*pow(pp,16.0);\n\tfloat fre = ao*pow( clamp(1.0+dot(nor,rd),0.0,1.0), 2.0 );\n\n\tcol = col*brdf + vec3(1.0)*col*spe + 0.2*fre*(0.5+0.5*col);\n\n\treturn vec3( clamp(col,0.0,10.0) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    vec2 mo = iMouse.xy\/iResolution.xy;\n\t\t \n\tfloat time = -55.0; \/\/+ iGlobalTime;\n    \n    vec3 d = vec3(0.25*mo.x,0.25*mo.y,0.0);\n    \n    d.x += 5.5*(1.0-cos(0.6*iGlobalTime));\n    d.y += 2.5*(1.0-cos(0.05*iGlobalTime));\n    \n\t\/\/ camera\t\n\tvec3 ro = vec3( d.x, d.y, 6.0 );\n    vec3 ta = vec3( -0.0, -0.0, 0.0 );\n\t\n\t\/\/ camera tx\n\tvec3 cw = normalize( ta-ro );\n\tvec3 cp = vec3( 0.0, 1.0, 0.0 );\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n\tvec3 rd = normalize( p.x*cu + p.y*cv + 2.0*cw );\n\n    vec3 col = render( ro, rd );\n\tcol = sqrt( col );\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}