{"Shader":{"ver":"0.1","info":{"id":"MtS3DD","date":"1429195184","viewed":782,"name":" Template : Sphere Mapping","username":"aiekick","description":"Mouse.x => move separator<br\/>Mouse.y => elevation","likes":3,"published":3,"flags":0,"tags":["cube","template","rm","mapping"],"hasliked":0},"renderpass":[{"inputs":[{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":8,"src":"\/presets\/tex07.jpg","ctype":"texture","channel":2,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\nvec2 s,g,m;\nvec2 map(vec3 p)\n{  \n    float dist = 0.;\n    \n    if (g.x<m.x ) \n   \t\tdist = length(max(abs(p)-vec3(0.5),0.0)); \/\/ cube\n    else\n    \tdist = length(p) - 1.; \/\/ sphere\n    \n    vec2 res = vec2(dist, 1.);\n    \n    return res;\n}\n\nvec3 nor( in vec3 p, float prec )\n{\n\tvec2 e = vec2( prec, 0. );\n\tvec3 n = vec3(\n\t    map(p+e.xyy).x - map(p-e.xyy).x,\n\t    map(p+e.yxy).x - map(p-e.yxy).x,\n\t    map(p+e.yyx).x - map(p-e.yyx).x );\n\treturn normalize(n);\n}\n\n\/\/ from iq\nfloat ao( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nfloat atan2(float y, float x)\n{\n    return 2. * atan(y \/ (length(vec2(x,y)) + x));\n}\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    s = iResolution.xy;\n    g = fragCoord.xy;\n    m = iMouse.x==0.?m = s\/2.:iMouse.xy;\n    \n    float time = iGlobalTime*0.5;\n    float cam_a = time; \/\/ angle z\n    \n    float cam_e = 0.3; \/\/ elevation\n    float cam_d = 1.2; \/\/ distance to origin axis\n    \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = .6; \/\/ reflexion intensity\n    float refr_a = 1.2; \/\/ refraction angle\n    float refr_i = .8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float RMPrec = 0.5; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.y\/iResolution.y * 10.; \/\/ mouse x axis \n    \/\/if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = (2. * fragCoord.xy -s )\/ s.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d);\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = 0.;\n    vec3 p = ro+rd*d;\n    float s = prec;\n    \n    vec3 ray, cubeRay;\n    \n    const int RMStep = 250;\n    \n    vec2 res = vec2(0.);\n    \n    for(int i=0;i<RMStep;i++)\n    {      \n    \tif (s<prec||s>maxd) break;\n        res=map(p);\n        d+=s=res.x*RMPrec;\n        p=ro+rd*d;\n    }\n\n    if (d<maxd)\n    {\n        vec3 n = nor(p, 0.0001);\n\n        b=li;\n\n        ray = reflect(rd, n);\n        cubeRay = textureCube(iChannel0, ray).rgb  * refl_i ;\n\n        col = cubeRay+pow(b,15.); \n            \n        \/\/ lighting        \n        float occ = ao( p, n );\n        vec3  lig = normalize( vec3(-0.6, 0.7, -0.5) );\n        float amb = clamp( 0.5+0.5*n.y, 0.0, 1.0 );\n        float dif = clamp( dot( n, lig ), 0.0, 1.0 );\n        float bac = clamp( dot( n, normalize(vec3(-lig.x,0.0,-lig.z))), 0.0, 1.0 )*clamp( 1.0-p.y,0.0,1.0);\n        float dom = smoothstep( -0.1, 0.1, cubeRay.y );\n        float fre = pow( clamp(1.0+dot(n,rd),0.0,1.0), 2.0 );\n        float spe = pow(clamp( dot( cubeRay, lig ), 0.0, 1.0 ),16.0);\n\n        vec3 brdf = vec3(0.0);\n        brdf += 1.20*dif*vec3(1.00,0.90,0.60);\n        brdf += 1.20*spe*vec3(1.00,0.90,0.60)*dif;\n        brdf += 0.30*amb*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.40*dom*vec3(0.50,0.70,1.00)*occ;\n        brdf += 0.30*bac*vec3(0.25,0.25,0.25)*occ;\n        brdf += 0.40*fre*vec3(1.00,1.00,1.00)*occ;\n        brdf += 0.02;\n        col = col*brdf;\n\n        col = mix( col, vec3(0.8,0.9,1.0), 1.0-exp( -0.0005*d*d ) );\n\n        vec3 mat = vec3(0.8,0.2,0.4);\n        if (res.y == 1.)\n        {\n            \/\/ uv mapping\n            p = normalize(p);\n            vec2 tex2DToSphere3D;\n            tex2DToSphere3D.x = 0.5 + atan(p.z, p.x) \/ (2.*3.14159);\n            tex2DToSphere3D.y = 0.5 - asin(p.y) \/ 3.14159;\n            \n            if (g.x<m.x ) \n    \t\t\tmat = texture2D(iChannel1, tex2DToSphere3D*5.).rgb;\n            else\n                mat = texture2D(iChannel2, tex2DToSphere3D*5.).rgb;\n        }\n       \n        col = mix(col, mat, 0.5);\n    }\n    else\n    {\n        col = textureCube(iChannel0, rd).rgb;\n    }\n    \n   \tcol = mix( col, vec3(0.), 1.-smoothstep( 1., 2., abs(m.x-g.x) ) );    \/\/ vertical line\n\n    fragColor = vec4(col,1.);\n}","name":"","description":"","type":"image"}]}}