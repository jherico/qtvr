{"Shader":{"ver":"0.1","info":{"id":"ldjXD3","date":"1416782906","viewed":1491,"name":"Texture flow III","username":"iq","description":"Integrating uv coordinates given a noise flow texture.","likes":13,"published":3,"flags":0,"tags":["2d","texture"],"hasliked":0},"renderpass":[{"inputs":[{"id":6,"src":"\/presets\/tex05.jpg","ctype":"texture","channel":1,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}},{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvec4 texture0( in vec2 x )\n{\n    \/\/return texture2D( iChannel0, x );\n    vec2 res = iChannelResolution[0].xy;\n    vec2 u = x*res - 0.5;\n    vec2 p = floor(u);\n    vec2 f = fract(u);\n    f = f*f*(3.0-2.0*f);    \n    vec4 a = texture2D( iChannel0, (p+vec2(0.5,0.5))\/res, -64.0 );\n\tvec4 b = texture2D( iChannel0, (p+vec2(1.5,0.5))\/res, -64.0 );\n\tvec4 c = texture2D( iChannel0, (p+vec2(0.5,1.5))\/res, -64.0 );\n\tvec4 d = texture2D( iChannel0, (p+vec2(1.5,1.5))\/res, -64.0 );\n    return mix(mix(a,b,f.x), mix(c,d,f.x),f.y);\n}\n    \nvec2 flow( vec2 uv, in mat2 m )\n{\n    for( int i=0; i<50; i++ )\n        uv += 0.00015 * m * (-1.0+2.0*texture0(0.5*uv).xz);\n    return uv;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord.xy \/ iResolution.xy;\n\n    \/\/ animate\n    float an = 0.5*iGlobalTime;\n    float co = cos(an);\n    float si = sin(an);\n    mat2  ma = mat2( co, -si, si, co );\n\n    \/\/ orbit, distance and distance gradient\n    vec2 uva = 0.05*(p + vec2(1.0,0.0)\/iResolution.xy);\n\tvec2 uvb = 0.05*(p + vec2(0.0,1.0)\/iResolution.xy);\n\tvec2 uvc = 0.05*p;\n\tvec2 nuva = flow( uva, ma );\n\tvec2 nuvb = flow( uvb, ma );\n\tvec2 nuvc = flow( uvc, ma );\n    float fa = length(nuva-uva)*95.0;\n    float fb = length(nuvb-uvb)*95.0;\n    float fc = length(nuvc-uvc)*95.0;\n    vec3 nor = normalize( vec3((fa-fc)*iResolution.x,1.0,(fb-fc)*iResolution.y ) );\n\n    \/\/ material\n  \tvec3 col = 0.2 + 0.8*texture2D(iChannel1, 50.0*nuvc).xyz;\n    col *= 1.0 + 0.15*nor;\n    float ss, sw;\n    ss = sin(6000.0*nuvc.x); sw = fwidth(ss); col *= 0.5 + 0.5*smoothstep(-sw,sw,ss+0.95);\n    ss = sin(6000.0*nuvc.y); sw = fwidth(ss); col *= 0.5 + 0.5*smoothstep(-sw,sw,ss+0.95);\n    \n    \/\/ ilumination\n    vec3 lig = normalize( vec3( 1.0,1.0,-0.4 ) );\n    col *= vec3(0.7,0.8,0.9) + vec3(0.6,0.5,0.4)*clamp( dot(nor,lig), 0.0, 1.0 );    \n    col += 0.40*pow( nor.y, 4.0 );\n    col += 0.15*pow( nor.y, 2.0 );\n    col *= sqrt( fc*fc*fc );\n \n    \/\/ postpro\n    col = 1.5*pow( col+vec3(0.0,0.0,0.015), vec3(0.6,0.8,1.0) );\n    col *= 0.5 + 0.5*sqrt( 16.0*p.x*p.y*(1.0-p.x)*(1.0-p.y) );\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}