{"Shader":{"ver":"0.1","info":{"id":"XljGR3","date":"1430923697","viewed":738,"name":"Alien Cavern","username":"aiekick","description":"Alien Cavern","likes":4,"published":3,"flags":0,"tags":["alien","cavern"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat dstepf = 0.0;\nvec2 uScreenSize = iResolution.xy;\nfloat uTime = iGlobalTime;\n\nconst vec2 RMPrec = vec2(0.6, 0.01); \/\/ ray marching tolerance precision \/\/ low, high\nconst vec2 DPrec = vec2(1e-3, 30.); \/\/ ray marching distance precision \/\/ low, high\n    \n\/\/ light\nconst vec3 LCol = vec3(0.8,0.5,0.2);\nconst vec3 LPos = vec3(-0.6, 0.7, -0.5);\nconst vec3 LAmb = vec3( 0. );\nconst vec3 LDif = vec3( 1. , 0.5, 0. );\nconst vec3 LSpe = vec3( 0.8 );\n\n\/\/ material\nconst vec3 MCol = vec3(0.);\nconst vec3 MAmb = vec3( 0. );\nconst vec3 MDif = vec3( 1. , 0.5, 0. );\nconst vec3 MSpe = vec3( 0.6, 0.6, 0.6 );\nconst float MShi =30.;\n    \n#define mPi 3.14159\n#define m2Pi 6.28318\n\nvec2 s,g,uv,m;\n\nvec2 uvs(vec3 p) \/\/ uv sphere\n{\n\tp = normalize(p);\n\tvec2 sp;\n\tsp.x = atan(p.z, p.x) \/ (m2Pi+1.27);\n\tsp.y = asin(p.y) \/ (mPi);\n\treturn sp;\n}\n\nfloat smin( float a, float b, float k )\n{\n\tfloat h = clamp( .5+.5*(b-a)\/k, 0., 1. );\n\treturn mix( b, a, h ) - k*h*(1.-h);\n}\n\nfloat sdCyl( vec3 p, vec2 h )\n{\n  \tvec2 d = abs(vec2(length(p.xz),p.y)) - h;\n  \treturn min(max(d.x,d.y),0.0) + length(max(d,0.0));\n}\n\n\/\/ return color from temperature \n\/\/http:\/\/www.physics.sfasu.edu\/astro\/color\/blackbody.html\n\/\/http:\/\/www.vendian.org\/mncharity\/dir3\/blackbody\/\n\/\/http:\/\/www.vendian.org\/mncharity\/dir3\/blackbody\/UnstableURLs\/bbr_color.html\nvec3 getHotColor(float Temp) \/\/ blackbody temperature color\n{\n\tvec3 col = vec3(255.);\n\tcol.x = 56100000. * pow(Temp,(-3. \/ 2.)) + 148.;\n   \tcol.y = 100.04 * log(Temp) - 623.6;\n   \tif (Temp > 6500.) col.y = 35200000. * pow(Temp,(-3. \/ 2.)) + 184.;\n   \tcol.z = 194.18 * log(Temp) - 1448.6;\n   \tcol = clamp(col, 0., 255.)\/255.;\n\tif (Temp < 1000.) col *= Temp\/1000.;\n   \treturn col;\n}\n\nvec2 getTemp(vec3 p)\n{\n\tp*=2.;\n\tfloat r = fract(p.x+p.z);\n\treturn vec2(dot(p,p)*(1000.)*r,r);\n}\n\n\/\/--------------------------------------------------------------------------\n\/\/ Grab all sky information for a given ray from camera\n\/\/ from Dave Hoskins \/\/ https:\/\/www.shadertoy.com\/view\/Xsf3zX\nvec3 GetSky(in vec3 rd, in vec3 sunDir, in vec3 sunCol)\n{\n\tfloat sunAmount = max( dot( rd, sunDir), 0.0 );\n\tfloat v = pow(1.0-max(rd.y,0.0),6.);\n\tvec3  sky = mix(vec3(.1, .2, .3), vec3(.32, .32, .32), v);\n\tsky = sky + sunCol * sunAmount * sunAmount * .25;\n\tsky = sky + sunCol * min(pow(sunAmount, 800.0)*1.5, .3);\n\treturn clamp(sky, 0.0, 1.0);\n}\n\nvec4 map(vec3 p)\n{\n\tvec2 res = vec2(0.);\n    \n\tfloat t = sin(uTime*0.2)*.5+.5;\n\tt*=2.;\n    \n\tfloat rugo=cos(2.*p.x)*sin(1.5*p.z)*sin(3.*p.y)*cos(1.3);\n    \n\tvec3 sci = vec3(0.9,2.,0.9);\/\/ scale in\n\tvec3 pob = vec3(0.,5.,0.);\/\/ pos bottom\n\tvec3 pocy = vec3(0.,-5.,0.);\/\/pos cyl\n    \n\tvec3 col = getHotColor(getTemp(p).x);\n    \n\tfloat diamhole = 1.1;\n\tfloat spi = length(p*sci) - 4.5 - rugo;\/\/in\n\tfloat spb = length(p+pob) - 4.5 + dot(col, vec3(0.01));\/\/bottom\n\tfloat spo = spi - 1. ;\/\/out\n\n\tfloat cyl = sdCyl(p+pocy, vec2(diamhole,4.));\/\/top hole\n    \n\tfloat disp = dot(col, vec3(0.03));\n    \n\tfloat spicyl = smin(spi,cyl,0.6) + disp;\n\tfloat cavern = smin(max(-spicyl, spo ), spb, 3.5);\n        \n    dstepf += 0.01;\n    \n\treturn vec4(cavern, col);\n}\n\nvec3 nor(vec3 p, float prec)\n{\n\tvec2 e = vec2(prec, 0.);\n    \n\tvec3 n;\n    \n\tn.x = map(p+e.xyy).x - map(p-e.xyy).x; \n\tn.y = map(p+e.yxy).x - map(p-e.yxy).x; \n\tn.z = map(p+e.yyx).x - map(p-e.yyx).x;  \n    \n\treturn normalize(n); \n}\n\nvec3 ads( vec3 p, vec3 n )\n{\n\tvec3 ldif = normalize( LPos - p);\n\tvec3 vv = normalize( vec3(0.) - p );\n\tvec3 refl = reflect( vec3(0.) - ldif, n );\n    \n\tvec3 amb = MAmb*LAmb;\n\tvec3 dif = max(0., dot(ldif, n.xyz)) * MDif * LDif;\n\tvec3 spe = vec3( 0. );\n\tif( dot(ldif, vv) > 0.)\n\t\tspe = pow(max(0., dot(vv,refl)),MShi)*MSpe*LSpe;\n    \n\tvec3 col = amb*1.2 + dif*1.5 + spe*0.8;\n    \n\treturn col;\n}\n\nvec4 scn(vec4 col, vec3 ro, vec3 rd)\n{\n\tfloat s = DPrec.x;\n\tfloat d = 0.;\n\tvec3 p = ro+rd*d;\n\tvec4 c = col;\n    \n\tfloat b = 0.35;\n    \n\tfor(int i=0;i<200;i++)\n\t{\n\t\tif(s<DPrec.x||s>DPrec.y) break;\n\t\ts = map(p).x;\n\t\td += s*(s>DPrec.x?RMPrec.x:RMPrec.y);\n\t\tp = ro+rd*d;\n\t}\t\n    \n\tfloat lightIntensity = sin(uTime*0.2)*.5;\n\n\tif (s<DPrec.x)\n\t{\n\t\tvec2 r = getTemp(p);\n\t\n\t\tvec3 n = nor(p, r.y); \n      \t\n\t\tc.rgb = map(p).yzw + dot(n,rd) + ads(p,n) * lightIntensity;\n\t}\n\telse\n\t{\n\t\tvec3 dir = -normalize(vec3(2.,10.,0.));\n\t\tvec3 col = vec3(lightIntensity);\n\t\tc.rgb = GetSky(rd, dir, col);\n\t}\n    \n\treturn c;\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 org, float persp)\n{\n\tvec3 rorg = normalize(org-ro);\n\tvec3 u =  normalize(cross(cu, rorg));\n\tvec3 v =  normalize(cross(rorg, u));\n\tvec3 rd = normalize(rorg + u*uv.x + v*uv.y);\n\treturn rd;\n}\n\nvec4 Image(in vec2 fragCoord )\n{\n\ts = uScreenSize;\n\tg = fragCoord;\n\tuv = (2.*g-s)\/s.y;\n\t\n\tfloat t = uTime*.2;\n\tfloat ts = sin(t)*.5+.5;\n    \n\tfloat axz = -t\/2.; \/\/ angle XZ\n\tfloat axy = 2.6 + 0.42*ts; \/\/ angle XY \/\/ inf 3.02 \/\/ sup 2.60\n\tfloat cd = 3.;\/\/ cam dist to scene origine\n\n\t\/\/axy = 2.6; \/\/ on bloque la camera an haut pour mise au point\n    \n\tfloat ap = 1.; \/\/ angle de perspective\n\tvec3 cu = vec3(0.,1.,0.); \/\/ cam up \n\tvec3 org = vec3(0., 0.8, 0.); \/\/ scn org\n\tvec3 ro = vec3(cos(axz),sin(axy),sin(axz))*cd; \/\/ cam org\n    \n\tvec3 rd = cam(uv, ro, cu, org, ap);\n    \n\tvec4 c = vec4(0.,0.,0.,1.); \/\/ col\n    \n\tc = scn(c, ro, rd);\/\/scene\n\t\n    c += dstepf;\n    \n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = Image(fragCoord);\n}","name":"","description":"","type":"image"}]}}