{"Shader":{"ver":"0.1","info":{"id":"Xts3Dn","date":"1420918668","viewed":758,"name":"Ray Marching Experiment 3","username":"aiekick","description":"Ray Marching Experiment 3 glassy","likes":1,"published":3,"flags":0,"tags":["3d","ray","displacement","experiment","marching","glass"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define USE_SPHERE_OR_BOX\n\nprecision highp float;\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n\/\/FROM MY SAHDER https:\/\/www.shadertoy.com\/view\/4tX3R4\nvec4 spiral(vec2 uv) \n{\n    float speed = 0.3;\n    float t0 = iGlobalTime*speed;\n    float t1 = sin(t0);\n    float t2 = 0.5*t1+0.5;\n    float zoom=25.;\n    float ratio = iResolution.x\/iResolution.y;\n\t\n\t\/\/ cadre\n    float thick=0.5;\n    float inv=1.;\n    \n    \/\/ uv \/ mo\n    vec2 uvo = uv;\/\/-mo;\n    float phase=1.1;\n    float tho = length(uvo)*phase+t1;\n    float thop = t0*20.;\n    \n    \/\/ map spiral\n   \tuvo+=vec2(tho*cos(tho-1.25*thop),tho*sin(tho-1.15*thop));\n    \n    \/\/ metaball\n    float mbr = 150.;\n    float mb = mbr \/ dot(uvo\/5.5,uvo*5.5);\n\n\t\/\/display\n    float d0 = mb;\n    \n    float d = smoothstep(d0-2.,d0+1.2,1.);\n    \n\tfloat r = mix(1.\/d, d, 1.);\n    float g = mix(1.\/d, d, 3.);\n    float b = mix(1.\/d, d, 5.);\n    vec3 c = vec3(r,g,b);\n    \n    float dist = dot(c,vec3(0.1));\n    \n    return vec4(dist,c);\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 displacement(vec3 p)\n{\n    return spiral(p.xz*5.);\n}\n\n\/\/\/\/\/\/\/\/BASE OBJECTS\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat obox( vec3 p, vec3 b ){ return length(max(abs(p)-b,0.0));}\nfloat osphere( vec3 p, float r ){ return length(p)-r;}\n\/\/\/\/\/\/\/\/MAP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvec4 map(vec3 p)\n{\n   \tfloat scale = 12.;\n    float dist = 0.;\n    \n    float x = 6.;\n    float z = 6.;\n    \n    vec4 disp = displacement(p);\n        \n    float y = 1. - smoothstep(0., 1., disp.x) * scale;\n    \n    #ifdef USE_SPHERE_OR_BOX\n        dist = osphere(p, +5.-y);\n    #else    \n        if ( p.y > 0. ) dist = obox(p, vec3(x,1.-y,z));\n        else dist = obox(p, vec3(x,1.,z));\n\t#endif\n    \n    return vec4(dist, disp.yzw);\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.1, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.5;\n    float cam_a = time; \/\/ angle z\n    \n    #ifdef USE_SPHERE_OR_BOX\n        float cam_e = 7.52; \/\/ elevation\n        float cam_d = 4.28; \/\/ distance to origin axis\n   \t#else\n        float cam_e = 1.; \/\/ elevation\n        float cam_d = 1.8; \/\/ distance to origin axis\n    #endif\n    \n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.61; \/\/ light intensity\n    float rmPrec = 0.001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = 0.8; \/\/ reflexion intensity\n    float refr_a = 0.3; \/\/ refraction angle\n    float refr_i = 0.4; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    float marchPrecision = 0.1; \/\/ ray marching tolerance precision\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.,0.,0.05);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float s = rmPrec;\n    float d = 0.;\n    vec3 p = vec3(0.);\n    for(int i=0;i<300;i++)\n    {      \n        if (s<rmPrec||s>maxd) break;\n        p = ro+rd*d;\n        s = map(p).x*marchPrecision;\n        d += s;\n    }\n    \n    if (d<maxd)\n    {\n        vec3 n = calcNormal(p);\n         \n        b += li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 cubeRefl = textureCube(iChannel0, reflRay).rgb * refl_i;\n        \n        vec3 refrRay = refract(rd, n, refr_a);\n        vec3 cubeRefr = textureCube(iChannel0, refrRay).rgb * refr_i;\n        \n        float ratio = clamp(0.,1.,dot(cubeRefl, cubeRefr));\n        \n        col += cubeRefl + pow(b, 20.);\n        \n       \tcol = mix(col, 1.-map(p).yzw, ratio);\n\n        col = mix(col, cubeRefr + pow(b, 20.), ratio);\n    }\n    else\n    {\n        b+=0.1;\n        col = textureCube(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}