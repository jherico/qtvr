{"Shader":{"ver":"0.1","info":{"id":"4llGWM","date":"1422458071","viewed":2268,"name":"Supershape 3D","username":"eiffie","description":"I just wanted to see what it looks like but actually this method works ok-ish. If anyone knows of a DE for these things let me know - or if you spot improvements!!","likes":33,"published":3,"flags":0,"tags":["3d","superformula","supershape"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/SuperShape 3d by eiffie based on mickdermack's 2d formula\n\n#define time iGlobalTime\n#define size iResolution\n\nvec4 S1,S2;\/\/m,n1,n2,n3\n\n\/\/from mickdermack https:\/\/www.shadertoy.com\/view\/MdXXDB\nfloat SuperFormula(float phi, float a, float b, float m, float n1, float n2, float n3){\n\treturn pow((pow(abs(cos(m*phi\/4.0)\/a),n2) + pow(abs(sin(m*phi\/4.0)\/b), n3)), -(1.0\/n1));\n}\nfloat SuperShape3D(in vec3 p){\n\tfloat d=length(p);\/\/the distance to the center of the shape\n\tfloat sn=p.z\/d;\/\/the sine of rho (the angle between z and xy)\n\tfloat phi=atan(p.y,p.x),rho=asin(sn);\/\/the angles to feed the formula\n\tfloat r1=SuperFormula(phi,0.75+0.25*sin(time),1.0,S1.x,S1.y,S1.z,S1.w);\n\tfloat r2=SuperFormula(rho,1.0,1.0,S2.x,S2.y,S2.z,S2.w);\/\/the radii\n\t\/\/vec3 np=r2*vec3(r1*cos(rho)*vec2(cos(phi),sin(phi)),sin(rho));\/\/reconstituted point\n\t\/\/d-=length(np);\/\/the distance to this point\n\td-=r2*sqrt(r1*r1*(1.0-sn*sn)+sn*sn);\/\/same as above but optimized a bit\n\treturn d;\n\n}\nfloat DDE(in vec3 p, in vec3 rd){\n\tfloat d=SuperShape3D(p),s=d*0.5;\n\tfloat dr=(d-SuperShape3D(p+rd*s))\/s;\n\treturn d\/(1.0+max(dr,0.0));\n}\n\nfloat rnd(vec2 c){return fract(sin(dot(vec2(1.317,19.753),c))*413.7972);}\nfloat rndStart(vec2 fragCoord){\n\treturn 0.5+0.5*rnd(fragCoord.xy+vec2(time*217.0));\n}\nfloat shadao(vec3 ro, vec3 rd, float px,vec2 fragCoord){\/\/pretty much IQ's SoftShadow\n\tfloat res=1.0,d,t=2.0*px*rndStart(fragCoord);\n\tfor(int i=0;i<12;i++){\n\t\td=max(px,DDE(ro+rd*t,rd)*1.5);\n\t\tt+=d;\n\t\tres=min(res,d\/t+t*0.1);\n\t}\n\treturn res;\n}\nvec3 Sky(vec3 rd){\/\/what sky??\n\treturn vec3(0.5+0.5*rd.y);\n}\nvec3 L;\n#define SE SuperShape3D\nvec3 Color(vec3 ro, vec3 rd, float t, float px, vec3 col, bool bFill, vec2 fragCoord){\n\tro+=rd*t;\n\tfloat d=SE(ro);\n\tvec2 e=vec2(px*t,0.0);\n\tvec3 dn=vec3(SE(ro-e.xyy),SE(ro-e.yxy),SE(ro-e.yyx));\n\tvec3 dp=vec3(SE(ro+e.xyy),SE(ro+e.yxy),SE(ro+e.yyx));\n\tvec3 N=(dp-dn)\/(length(dp-vec3(d))+length(vec3(d)-dn));\n\tvec3 R=reflect(rd,N);\n\tvec3 lc=vec3(1.0,0.9,0.8),sc=sqrt(abs(sin(ro))),rc=Sky(R);\n\tfloat sh=clamp(shadao(ro,L,px*t,fragCoord)+0.2,0.0,1.0);\n\tsh=sh*(0.5+0.5*dot(N,L))*exp(-t*0.125);\n\tvec3 scol=sh*lc*(sc+rc*pow(max(0.0,dot(R,L)),4.0));\n\tif(bFill)d*=0.02;\n\tcol=mix(scol,col,clamp(d\/(px*t),0.0,1.0));\n\treturn col;\n}\nmat3 lookat(vec3 fw){\n\tfw=normalize(fw);vec3 rt=normalize(cross(fw,vec3(0.0,1.0,0.0)));return mat3(rt,cross(rt,fw),fw);\n}\n\nvec4 Setup(float t){\n\tt=mod(t,8.0);\n\tif(t<1.0)return vec4(6.75,3.0,4.0,17.0);\n\tif(t<2.0)return vec4(12.0,15.0,20.0,3.0);\n\tif(t<3.0)return vec4(5.0,2.0,6.0,6.0);\n\tif(t<4.0)return vec4(4.0,1.0,1.0,1.0);\n\tif(t<5.0)return vec4(8.0,1.0,1.0,8.0);\n\tif(t<6.0)return vec4(2.0,2.0,2.0,2.0);\n\tif(t<7.0)return vec4(5.0,1.0,1.0,1.0);\n\treturn vec4(3.0,4.5,10.0,10.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\tfloat px=1.0\/size.y;\n\tL=normalize(vec3(0.4,0.8,-0.6));\n\tfloat tim=time;\n\t\n\tvec3 ro=vec3(cos(tim),0.4,sin(tim))*5.0;\n\tvec3 rd=lookat(vec3(-0.1)-ro)*normalize(vec3((2.0*fragCoord.xy-size.xy)\/size.y,3.0));\n\t\n\ttim*=0.7;\n\tS1=mix(Setup(tim-1.0),Setup(tim),smoothstep(0.0,1.0,fract(tim)*2.0));\n\ttim=tim*0.9+2.5;\n\tS2=mix(Setup(tim-1.0),Setup(tim),smoothstep(0.0,1.0,fract(tim)*2.0));\n\n\tfloat t=DDE(ro,rd)*rndStart(fragCoord),d=0.0,od=10.0;\n\tvec2 edge=vec2(-1.0);\n\tbool bGrab=false;\n\tvec3 col=Sky(rd);\n\tfor(int i=0;i<64;i++){\n\t\tt+=d;\n\t\td=DDE(ro+rd*t,rd);\n\t\tif(d>od){\n\t\t\tif(bGrab && od<px*t && edge.x<0.0){\n\t\t\t\tedge=vec2(edge.y,t-od);\n\t\t\t\tbGrab=false;\n\t\t\t}\n\t\t}else bGrab=true;\n\t\tod=d;\n\t\tif(t>1000.0 || d<0.00001)break;\n\t}\n\tbool bFill=false;\n\td*=0.02;\n\tif(d<px*t && t<1000.0){\n\t\tif(edge.x>0.0)edge=edge.yx;\n\t\tedge=vec2(edge.y,t);\n\t\tbFill=true;\n\t}\n\tfor(int i=0;i<2;i++){\n\t\tif(edge.y>0.0)col=Color(ro,rd,edge.y,px,col,bFill,fragCoord);\n\t\tedge=edge.yx;\n\t\tbFill=false;\n\t}\n\tfragColor = vec4(2.0*col,1.0);\n}\n","name":"","description":"","type":"image"}]}}