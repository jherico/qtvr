{"Shader":{"ver":"0.1","info":{"id":"ls3GDM","date":"1449989520","viewed":321,"name":"2015\/12\/13","username":"hughsk","description":"Experimenting a little more with reflections and drawing backgrounds.","likes":17,"published":3,"flags":0,"tags":["reflection","grid","sdf","box","spin","environment","ripple"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define GLSLIFY 1\n\nvec2 doModel(vec3 p);\n\nvec2 squareFrame_1540259130(vec2 screenSize, vec2 coord) {\n  vec2 position = 2.0 * (coord.xy \/ screenSize.xy) - 1.0;\n  position.x *= screenSize.x \/ screenSize.y;\n  return position;\n}\n\nvec2 calcRayIntersection_3557608877(vec3 rayOrigin, vec3 rayDir, float maxd, float precis) {\n  float latest = precis * 2.0;\n  float dist   = +0.0;\n  float type   = -1.0;\n  vec2  res    = vec2(-1.0, -1.0);\n\n  for (int i = 0; i < 90; i++) {\n    if (latest < precis || dist > maxd) break;\n\n    vec2 result = doModel(rayOrigin + rayDir * dist);\n\n    latest = result.x;\n    type   = result.y;\n    dist  += latest;\n  }\n\n  if (dist < maxd) {\n    res = vec2(dist, type);\n  }\n\n  return res;\n}\n\nvec2 calcRayIntersection_3557608877(vec3 rayOrigin, vec3 rayDir) {\n  return calcRayIntersection_3557608877(rayOrigin, rayDir, 20.0, 0.001);\n}\n\nvec3 calcNormal_3997203925(vec3 pos, float eps) {\n  const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n  const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n  const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n  const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n  return normalize( v1 * doModel( pos + v1*eps ).x +\n                    v2 * doModel( pos + v2*eps ).x +\n                    v3 * doModel( pos + v3*eps ).x +\n                    v4 * doModel( pos + v4*eps ).x );\n}\n\nvec3 calcNormal_3997203925(vec3 pos) {\n  return calcNormal_3997203925(pos, 0.002);\n}\n\nmat3 calcLookAtMatrix_1460171947(vec3 origin, vec3 target, float roll) {\n  vec3 rr = vec3(sin(roll), cos(roll), 0.0);\n  vec3 ww = normalize(target - origin);\n  vec3 uu = normalize(cross(ww, rr));\n  vec3 vv = normalize(cross(uu, ww));\n\n  return mat3(uu, vv, ww);\n}\n\nvec3 getRay_870892966(mat3 camMat, vec2 screenPos, float lensLength) {\n  return normalize(camMat * vec3(screenPos, lensLength));\n}\n\nvec3 getRay_870892966(vec3 origin, vec3 target, vec2 screenPos, float lensLength) {\n  mat3 camMat = calcLookAtMatrix_1460171947(origin, target, 0.0);\n  return getRay_870892966(camMat, screenPos, lensLength);\n}\n\nvoid orbitCamera_421267681(\n  in float camAngle,\n  in float camHeight,\n  in float camDistance,\n  in vec2 screenResolution,\n  out vec3 rayOrigin,\n  out vec3 rayDirection,\n  in vec2 coord\n) {\n  vec2 screenPos = squareFrame_1540259130(screenResolution, coord);\n  vec3 rayTarget = vec3(0.0);\n\n  rayOrigin = vec3(\n    camDistance * sin(camAngle),\n    camHeight,\n    camDistance * cos(camAngle)\n  );\n\n  rayDirection = getRay_870892966(rayOrigin, rayTarget, screenPos, 2.0);\n}\n\nhighp float random_2281831123(vec2 co)\n{\n    highp float a = 12.9898;\n    highp float b = 78.233;\n    highp float c = 43758.5453;\n    highp float dt= dot(co.xy ,vec2(a,b));\n    highp float sn= mod(dt,3.14);\n    return fract(sin(sn) * c);\n}\n\nfloat gaussianSpecular_529295689(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n  vec3 H = normalize(lightDirection + viewDirection);\n  float theta = acos(dot(H, surfaceNormal));\n  float w = theta \/ shininess;\n  return exp(-w*w);\n}\n\n\/\/ Originally sourced from:\n\/\/ http:\/\/iquilezles.org\/www\/articles\/distfunctions\/distfunctions.htm\n\nfloat sdBox_1062606552(vec3 position, vec3 dimensions) {\n  vec3 d = abs(position) - dimensions;\n\n  return min(max(d.x, max(d.y,d.z)), 0.0) + length(max(d, 0.0));\n}\n\nfloat smin_1535977339(float a, float b, float k) {\n  float h = clamp(0.5 + 0.5 * (b - a) \/ k, 0.0, 1.0);\n  return mix(b, a, h) - k * h * (1.0 - h);\n}\n\nfloat fogFactorExp2_2315452051(\n  const float dist,\n  const float density\n) {\n  const float LOG2 = -1.442695;\n  float d = density * dist;\n  return 1.0 - clamp(exp2(d * d * LOG2), 0.0, 1.0);\n}\n\nvec2 rotate2D(vec2 p, float a) {\n  return p * mat2(cos(a), -sin(a), sin(a),  cos(a));\n}\n\nfloat doBox(vec3 p) {\n  p += vec3(0, 1, 0) * sin(iGlobalTime * 3.);\n  p.xz = rotate2D(p.xz, (iGlobalTime * 5. + sin(0.8 + iGlobalTime * 3.)) * 0.7);\n  p.xy = rotate2D(p.xy, (iGlobalTime * 5. + sin(0.8 + iGlobalTime * 3.)) * 0.5);\n\n  return sdBox_1062606552(p, vec3(0.3) - 0.05) - 0.05;\n}\n\nfloat doBoard(vec3 p) {\n  const float boardRound = 0.125;\n\n  float d;\n\n  d = p.y - max(-1.0, 2.5 - length(p.xz)) * (sin(length(p.xz) * 12. - iGlobalTime * 10. + sin(iGlobalTime * 3.) * 2.) * 0.5 + 0.5) * 0.1 + 1.0;\n  d = -smin_1535977339(-d, -sdBox_1062606552(p, vec3(2, 2.25, 2) - boardRound) + boardRound * 2., 0.06);\n  d = -smin_1535977339(-d, length(p + vec3(0, 1, 0) * sin(iGlobalTime * 3.)) - 0.5, 1.25);\n\n  return d;\n}\n\nvec2 doModel(vec3 p) {\n  p.xz = rotate2D(p.xz, iMouse.z <= 0.0 ? 0.4 : 5. * iMouse.x \/ iResolution.x);\n  p.y -= 1.25;\n\n  float d = 99999.0;\n  float id = 0.0;\n\n  d = min(doBoard(p), doBox(p));\n\n  return vec2(d, id);\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d ) {\n  return a + b*cos( 6.28318*(c*t+d) );\n}\n\nfloat intersectPlane(vec3 ro, vec3 rd, vec3 nor, float dist) {\n  float denom = dot(rd, nor);\n  float t = -(dot(ro, nor) + dist) \/ denom;\n\n  return t;\n}\n\nvec3 bg(vec3 ro, vec3 rd) {\n  float t = rd.y * 0.4 + 0.4;\n  vec3 grad = vec3(0.1, 0.05, 0.15) + palette(t\n    , vec3(0.55, 0.5, 0.5)\n    , vec3(0.6, 0.6, 0.5)\n    , vec3(0.9, 0.6, 0.45)\n    , vec3(0.03, 0.15, 0.25)\n  );\n\n  float d = intersectPlane(ro, rd, vec3(0, 1, 0), 8.);\n  if (d > 0.0) {\n    vec3 p = ro + rd * d;\n    float g = (1.0 - pow(abs(sin(p.x * 1.25) * cos(p.z * 1.25)), 0.06125));\n\n    grad += (1.0 - fogFactorExp2_2315452051(d, 0.04)) * vec3(0.5, 2.5, 1.9) * g * 0.18;\n  }\n\n  return grad;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n  vec3 ro, rd;\n  vec2 uv = squareFrame_1540259130(iResolution.xy, fragCoord.xy);\n\n  float rotation = 0.9;\n  float height   = iMouse.z <= 0.0 ? 5.0 : (1.0 - iMouse.y \/ iResolution.y * 2.0) * 10.;\n  float dist     = 6.0;\n  orbitCamera_421267681(rotation, height, dist, iResolution.xy, ro, rd, fragCoord.xy);\n\n  vec3 color = bg(ro, rd);\n\n  vec2 t = calcRayIntersection_3557608877(ro, rd, 20., 0.001);\n  if (t.x > -0.5) {\n    vec3 pos = ro + rd * t.x;\n    vec3 nor = calcNormal_3997203925(pos);\n\n    vec3 ldir1 = normalize(vec3(-0.25, 1, -1));\n    vec3 ldir2 = normalize(vec3(0, -0.8, 1));\n\n    color = bg(pos, reflect(rd, nor)) + 0.05;\n    color += 2. * gaussianSpecular_529295689(ldir1, -rd, nor, 0.085);\n    color += 0.55 * gaussianSpecular_529295689(ldir2, -rd, nor, 0.15);\n\n  } else {\n    color = bg(ro, rd);\n  }\n\n  color.g = smoothstep(-0.09, 1.1, color.g);\n  color.r = smoothstep(0.0, 1.02, color.r);\n  color.b += 0.015;\n  color -= (dot(uv * 0.05, uv)) * vec3(0.5, 0.3, 0.6);\n  color += (uv.y * 0.5 + 0.5) * vec3(0.005, -0.05, 0.105) * 0.6;\n  color += random_2281831123(fragCoord.xy * 0.001 + sin(iGlobalTime)) * 0.04;\n\n  fragColor.rgb = color;\n  fragColor.a   = 1.0;\n}\n","name":"","description":"","type":"image"}]}}