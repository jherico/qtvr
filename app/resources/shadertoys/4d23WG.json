{"Shader":{"ver":"0.1","info":{"id":"4d23WG","date":"1392934759","viewed":1031,"name":"Julia - Traps 1","username":"iq","description":"Minimun code showing orbit trapping (line 21) for coloring fractals (and other dynamic systems)","likes":15,"published":3,"flags":0,"tags":["2d","julia","orbittrap"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ line 13: pixel coordinates\t\n\/\/ line 15: c travels around the main cardiod c(t) = \u00bde^it - \u00bce^i2t\n\/\/ line 20: z = z\u00b2 + c\t\t\n\/\/ line 21: trap orbit\n\/\/ line 24: remap\t\n\/\/ line 26: color\t\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 z = 1.15*(-iResolution.xy+2.0*fragCoord.xy)\/iResolution.y;\n\n\tvec2 an = 0.51*cos( vec2(0.0,1.5708) + 0.1*iGlobalTime ) - 0.25*cos( vec2(0.0,1.5708) + 0.2*iGlobalTime );\n\n\tfloat f = 1e20;\n\tfor( int i=0; i<128; i++ ) \n\t{\n\t\tz = vec2( z.x*z.x-z.y*z.y, 2.0*z.x*z.y ) + an;\n\t\tf = min( f, dot(z,z) );\n\t}\n\t\n\tf = 1.0+log(f)\/16.0;\n\n\tfragColor = vec4(f,f*f,f*f*f,1.0);\n}","name":"","description":"","type":"image"}]}}