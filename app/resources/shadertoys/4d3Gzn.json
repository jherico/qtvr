{"Shader":{"ver":"0.1","info":{"id":"4d3Gzn","date":"1447555521","viewed":374,"name":"Sound Experiment 5","username":"aiekick","description":"An attempt to colorize the <a href=\"https:\/\/www.shadertoy.com\/view\/XscGRn\"  class=\"regular\" target=\"_blank\">Sound Experiment 4<\/a>","likes":3,"published":3,"flags":0,"tags":["sound","experiment","5"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ based on https:\/\/www.shadertoy.com\/view\/4ljSDt from gilesruscoe \n\nvec4 freq1, freq2, freq3;\n\nvec4 map(vec3 p)\n{   \n    p.xy += vec2(cos(p.z),sin(p.z));\n\t\n    float c = 1.0;\n\n    float cz = p.z, sz = p.z;\n    \n    cz += freq1.x; sz -= freq2.w;\n   \tfloat tube = length(p.xy + vec2(cos(cz),sin(sz))*.5);\n    vec4 res = vec4(tube, c, freq1.x, freq2.w);\n    \n\tcz += freq1.y; sz -= freq2.z;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*.4));\n    if (tube < res.x) res = vec4(tube, c, freq1.y, freq2.z);\n        \n\tcz += freq1.z; sz -= freq2.y;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*.3));\n    if (tube < res.x) res = vec4(tube, c, freq1.z, freq2.y);\n    \n\tcz += freq1.w; sz -= freq2.x;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*.2));\n    if (tube < res.x) res = vec4(tube, c, freq1.w, freq2.x);\n    \n    \n    cz += freq3.x; sz -= freq1.w;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*.1));\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.y; sz -= freq1.z;\n\ttube = min(tube, length(p.xy\/* + vec2(cos(cz),sin(sz))*.0*\/));\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.z; sz -= freq1.y;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.1));\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n\tcz += freq3.w; sz -= freq1.x;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.2));\n    if (tube < res.x) res = vec4(tube, c, c, c);\n    \n    \n\tcz += freq2.x; sz -= freq3.w;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.3));\n    if (tube < res.x) res = vec4(tube, freq2.x, freq3.w, c);\n    \n\tcz += freq2.y; sz -= freq3.z;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.4));\n    if (tube < res.x) res = vec4(tube, freq2.y, freq3.z, c);\n    \n\tcz += freq2.z; sz -= freq3.y;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.5));\n    if (tube < res.x) res = vec4(tube, freq2.z, freq3.y, c);\n    \n\tcz += freq2.w; sz -= freq3.x;\n\ttube = min(tube, length(p.xy + vec2(cos(cz),sin(sz))*-.6));\n    if (tube < res.x) res = vec4(tube, freq2.w, freq3.x, c);\n    \n\treturn vec4(res.x - 0.05, res.yzw);\n}\n\nvec4 trace(vec3 o, vec3 r)\n{\n    float t = 0.0;\n    vec4 d;\n    for (int i = 0; i < 60; ++i)\n    {\n        vec3 p = o + r * t;\n        d = map(p);\n        t += d.x * (d.x>0.05?0.5:0.1);\n    }\n    return vec4(t, d.yzw);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ from CubeScape : https:\/\/www.shadertoy.com\/view\/Msl3Rr\n    freq1.x = texture2D( iChannel0, vec2( 0.075, 0.25 ) ).x;\n\tfreq1.y = texture2D( iChannel0, vec2( 0.15, 0.25 ) ).x;\n\tfreq1.z = texture2D( iChannel0, vec2( 0.225, 0.25 ) ).x;\n\tfreq1.w = texture2D( iChannel0, vec2( 0.3, 0.25 ) ).x;\n    \n    freq2.x = texture2D( iChannel0, vec2( 0.375, 0.25 ) ).x;\n\tfreq2.y = texture2D( iChannel0, vec2( 0.45, 0.25 ) ).x;\n\tfreq2.z = texture2D( iChannel0, vec2( 0.525, 0.25 ) ).x;\n\tfreq2.w = texture2D( iChannel0, vec2( 0.6, 0.25 ) ).x;\n    \n    freq3.x = texture2D( iChannel0, vec2( 0.675, 0.25 ) ).x;\n    freq3.y = texture2D( iChannel0, vec2( 0.75, 0.25 ) ).x;\n    freq3.z = texture2D( iChannel0, vec2( 0.825, 0.25 ) ).x;\n    freq3.w = texture2D( iChannel0, vec2( 0.9, 0.25 ) ).x;\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    uv = uv * 2.0 - 1.0;\n    \n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 r = normalize(vec3(uv, 2.0));\n    \n    vec3 o = vec3(0.0, 0.0, iGlobalTime * 2.);\n    \n    vec4 t = trace(o, r);\n    \n    float fog = 2. \/ (1. + t.x * t.x * 0.1);\n    \n\tfragColor = vec4(fog * t.yzw, 1.);\n}\n\n","name":"","description":"","type":"image"}]}}