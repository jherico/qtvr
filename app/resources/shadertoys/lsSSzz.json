{"Shader":{"ver":"0.1","info":{"id":"lsSSzz","date":"1408413665","viewed":2502,"name":"Painting - Sho style","username":"iq","description":"A super quick doodling session, using Sho Murase's work as reference.","likes":18,"published":3,"flags":0,"tags":["procedural","2d"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nconst mat2 m = mat2( 0.80,  0.60, -0.60,  0.80 );\n\nfloat hash( vec2 p )\n{\n\tfloat h = dot(p,vec2(127.1,311.7));\n\t\n    return -1.0 + 2.0*fract(sin(h)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    vec2 i = floor( p );\n    vec2 f = fract( p );\n\t\n\tvec2 u = f*f*(3.0-2.0*f);\n\n    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                     hash( i + vec2(1.0,0.0) ), u.x),\n                mix( hash( i + vec2(0.0,1.0) ), \n                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n}\n\nfloat fbm( vec2 p )\n{\n    float f = 0.0;\n    f += 0.5000*noise( p ); p = m*p*2.02; p.y += 0.02*iGlobalTime;\n    f += 0.2500*noise( p ); p = m*p*2.03; p.y -= 0.02*iGlobalTime;\n    f += 0.1250*noise( p ); p = m*p*2.01; p.y += 0.02*iGlobalTime;\n    f += 0.0625*noise( p );\n    return f\/0.9375;\n}\n\nvec2 fbm2( vec2 p )\n{\n    return vec2( fbm(p.xy), fbm(p.yx) );\n}\n\nvec3 doImage( vec2 p, vec2 q )\n{   \n    p *= 0.25;\n    \n    float f = 0.3 + fbm( 1.0*(p + fbm2(2.0*(p + fbm2(4.0*p)))) );\n\n    vec2 r = p.yx*2.0;\n    f -= 0.2*(1.0-2.0*abs(f))*clamp( 0.5 + 3.0*fbm( 1.0*(r + fbm2(2.0*(r + fbm2(4.0*r)))) ), 0.0, 1.0 );\n\n    float v = 16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y);\n    f += 1.1*(1.0-smoothstep( 0.0, 0.6, v ));\n    \n    float w = fwidth(f);\n    float bl = smoothstep( -w, w, f );\n\n    float ti = smoothstep( -0.9, 0.7, fbm(3.0*p+0.5) );\n    \n\treturn mix( mix( vec3(0.0,0.0,0.0), \n                     vec3(0.9,0.0,0.0), ti ), \n                     vec3(1.0,1.0,1.0), bl );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy)\/ iResolution.y;\n    vec2 q = p;\n    \n    q = 0.5 + 0.5*q\/vec2(600.0\/800.0,1.0);\n    \n    vec3 col = doImage( (p-0.0), clamp(q,0.0,1.0) );\n    \n    col *= 1.0 - smoothstep( 0.0, 1.0\/iResolution.y, abs(q.x - 0.5)-0.5 );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}