{"Shader":{"ver":"0.1","info":{"id":"MdGGzR","date":"1452919101","viewed":284,"name":"Multiscale Turing Patterns","username":"cornusammonis","description":"A Gaussian Pyramid implementation of Jonathan McCabe's Multiscale Turing Patterns. Paint with mouse controls.","likes":17,"published":3,"flags":32,"tags":["blur","patterns","diffusion","gaussian","multiscale","pyramid","reaction","turing"],"hasliked":0},"renderpass":[{"inputs":[{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tfragColor = 0.5 + 0.5 * texture2D(iChannel0, uv);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define G(ic,x) texture2D(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 1.0\n#define o1 3.0\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec2 ix = vec2(1.0 \/ iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 \/ iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 \/= sum;\n    g1 \/= sum;\n    g \/= sum;\n\n    \/\/ 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).x, G(iC0, wrap(uv + o0 * ix * i0.y)).x, G(iC0, wrap(uv + o0 * ix * i0.z)).x, G(iC0, wrap(uv + o0 * ix * i0.w)).x);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).x, G(iC0, wrap(uv + o0 * ix * i1.y)).x, G(iC0, wrap(uv + o0 * ix * i1.z)).x, G(iC0, wrap(uv + o0 * ix * i1.w)).x); \n    float centerX0 = g * G(iC0, uv).x;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define G(ic,x) texture2D(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 9.0\n#define o1 27.0\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec2 ix = vec2(1.0 \/ iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 \/ iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 \/= sum;\n    g1 \/= sum;\n    g \/= sum;\n\n    \/\/ 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).w, G(iC0, wrap(uv + o0 * ix * i0.y)).w, G(iC0, wrap(uv + o0 * ix * i0.z)).w, G(iC0, wrap(uv + o0 * ix * i0.w)).w);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).w, G(iC0, wrap(uv + o0 * ix * i1.y)).w, G(iC0, wrap(uv + o0 * ix * i1.z)).w, G(iC0, wrap(uv + o0 * ix * i1.w)).w); \n    float centerX0 = g * G(iC0, uv).w;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define G(ic,x) texture2D(ic, x)\n#define iC0 iChannel0\n#define iC1 iChannel1\n#define o0 81.0\n#define o1 243.0\n#define stddev 2.5\n\nfloat gaussian(float x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec4 gaussian(vec4 x, float s) {\n    return exp(-x*x\/(s*s));\n}\n\nvec2 wrap(vec2 x) {\n    return mod(mod(x, 1.0) + 1.0, 1.0);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    vec2 ix = vec2(1.0 \/ iResolution.x, 0.0);\n    vec2 iy = vec2(0.0, 1.0 \/ iResolution.y);\n    vec4 i0 = vec4(-4.0, -3.0, -2.0, -1.0);\n    vec4 i1 = vec4(1.0, 2.0, 3.0, 4.0);\n    vec4 g0 = gaussian(i0, stddev);\n    vec4 g1 = g0.wzyx;\n    float g = gaussian(0.0, stddev);\n    float sum = 2.0 * dot(g0, vec4(1.0)) + g;\n    g0 \/= sum;\n    g1 \/= sum;\n    g \/= sum;\n\n    \/\/ 2 complete blur passes\n    vec4 leftX0  = g0 * vec4(G(iC0, wrap(uv + o0 * ix * i0.x)).w, G(iC0, wrap(uv + o0 * ix * i0.y)).w, G(iC0, wrap(uv + o0 * ix * i0.z)).w, G(iC0, wrap(uv + o0 * ix * i0.w)).w);\n    vec4 rightX0 = g1 * vec4(G(iC0, wrap(uv + o0 * ix * i1.x)).w, G(iC0, wrap(uv + o0 * ix * i1.y)).w, G(iC0, wrap(uv + o0 * ix * i1.z)).w, G(iC0, wrap(uv + o0 * ix * i1.w)).w); \n    float centerX0 = g * G(iC0, uv).w;\n    float sumX0 = centerX0 + dot(leftX0, vec4(1.0)) + dot(rightX0, vec4(1.0));\n\n    vec4 leftY0  = g0 * vec4(G(iC1, wrap(uv + o0 * iy * i0.x)).x, G(iC1, wrap(uv + o0 * iy * i0.y)).x, G(iC1, wrap(uv + o0 * iy * i0.z)).x, G(iC1, wrap(uv + o0 * iy * i0.w)).x);\n    vec4 rightY0 = g1 * vec4(G(iC1, wrap(uv + o0 * iy * i1.x)).x, G(iC1, wrap(uv + o0 * iy * i1.y)).x, G(iC1, wrap(uv + o0 * iy * i1.z)).x, G(iC1, wrap(uv + o0 * iy * i1.w)).x); \n    float centerY0 = g * G(iC1, uv).x;\n    float sumY0 = centerY0 + dot(leftY0, vec4(1.0)) + dot(rightY0, vec4(1.0));\n\n    vec4 leftX1  = g0 * vec4(G(iC1, wrap(uv + o1 * ix * i0.x)).y, G(iC1, wrap(uv + o1 * ix * i0.y)).y, G(iC1, wrap(uv + o1 * ix * i0.z)).y, G(iC1, wrap(uv + o1 * ix * i0.w)).y);\n    vec4 rightX1 = g1 * vec4(G(iC1, wrap(uv + o1 * ix * i1.x)).y, G(iC1, wrap(uv + o1 * ix * i1.y)).y, G(iC1, wrap(uv + o1 * ix * i1.z)).y, G(iC1, wrap(uv + o1 * ix * i1.w)).y); \n    float centerX1 = g * G(iC1, uv).y;\n    float sumX1 = centerX1 + dot(leftX1, vec4(1.0)) + dot(rightX1, vec4(1.0));\n\n    vec4 leftY1  = g0 * vec4(G(iC1, wrap(uv + o1 * iy * i0.x)).z, G(iC1, wrap(uv + o1 * iy * i0.y)).z, G(iC1, wrap(uv + o1 * iy * i0.z)).z, G(iC1, wrap(uv + o1 * iy * i0.w)).z);\n    vec4 rightY1 = g1 * vec4(G(iC1, wrap(uv + o1 * iy * i1.x)).z, G(iC1, wrap(uv + o1 * iy * i1.y)).z, G(iC1, wrap(uv + o1 * iy * i1.z)).z, G(iC1, wrap(uv + o1 * iy * i1.w)).z); \n    float centerY1 = g * G(iC1, uv).z;\n    float sumY1 = centerY1 + dot(leftY1, vec4(1.0)) + dot(rightY1, vec4(1.0));\n    \n    fragColor = vec4(sumX0, sumY0, sumX1, sumY1);\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":260,"src":"\/presets\/previz\/buffer03.png","ctype":"buffer","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define Pr 0.299\n#define Pg 0.587\n#define Pb 0.114\n#define saturation 0.99\n#define rate 0.005\n#define blur 0.02\n\nfloat hash( vec2 p ) {\n\tfloat h = dot(p,vec2(127.1,311.7));\t\n    return fract(sin(h)*43758.5453123);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 texel = 1.0 \/ iResolution.xy;\n    vec4 b0 = vec4(texture2D(iChannel0, uv).yw, texture2D(iChannel1, uv).yw);\n    vec2 b1 = texture2D(iChannel2, uv).yw;\n    \n    const float _K0 = -20.0\/6.0; \/\/ center weight\n    const float _K1 = 4.0\/6.0; \/\/ edge-neighbors\n    const float _K2 = 1.0\/6.0; \/\/ vertex-neighbors\n    \n    \/\/ 3x3 neighborhood coordinates\n    float step_x = texel.x;\n    float step_y = texel.y;\n    vec2 n  = vec2(0.0, step_y);\n    vec2 ne = vec2(step_x, step_y);\n    vec2 e  = vec2(step_x, 0.0);\n    vec2 se = vec2(step_x, -step_y);\n    vec2 s  = vec2(0.0, -step_y);\n    vec2 sw = vec2(-step_x, -step_y);\n    vec2 w  = vec2(-step_x, 0.0);\n    vec2 nw = vec2(-step_x, step_y);\n\n    vec4 is =    texture2D(iChannel3, uv);\n    vec4 is_n =  texture2D(iChannel3, uv+n);\n    vec4 is_e =  texture2D(iChannel3, uv+e);\n    vec4 is_s =  texture2D(iChannel3, uv+s);\n    vec4 is_w =  texture2D(iChannel3, uv+w);\n    vec4 is_nw = texture2D(iChannel3, uv+nw);\n    vec4 is_sw = texture2D(iChannel3, uv+sw);\n    vec4 is_ne = texture2D(iChannel3, uv+ne);\n    vec4 is_se = texture2D(iChannel3, uv+se);\n\n    \/\/ laplacian of all components\n    vec4 lapl  = _K0*is + _K1*(is_n + is_e + is_w + is_s) + _K2*(is_nw + is_sw + is_ne + is_se);\n    \n    vec3 weights[6]; \n    weights[0] = vec3(1.0, -1.0, 1.0); \n    weights[1] = vec3(2.0, 2.0, 1.0); \n    weights[2] = vec3(3.0, -2.0, -4.0); \n    weights[3] = vec3(4.0, 3.0, 6.0); \n    weights[4] = vec3(5.0, 5.0, 3.0); \n    weights[5] = vec3(6.0, 3.0, -2.0);\n\n    \/\/ difference of gaussians\n    float dogs[6];\n    dogs[0] = is.x - b0.x;\n    dogs[1] = b0.x - b0.y;\n    dogs[2] = b0.y - b0.z;\n    dogs[3] = b0.z - b0.w;\n    dogs[4] = b0.w - b1.x;\n    dogs[5] = b1.x - b1.y;\n    \n    float lowest_variation = 10000.0;\n    vec3 diff = vec3(0.0);\n    for(int i = 0; i < 5; i++) {\n        float variation = abs(dogs[i]);\n        if( variation < lowest_variation )\n        {\n            lowest_variation = variation;\n            diff = sign(dogs[i]) * weights[i];\n        }\n    }\n    \n    vec4 p = vec4(sqrt(is.x*is.x*Pr + is.y*is.y*Pg + is.z*is.z*Pb));\n    vec4 desaturated = vec4(p) + (is - vec4(p)) * saturation;\n    \n    vec4 eps = vec4(0.1);\n    \n    \/\/ initialize with noise\n    if(iFrame<10) {\n        fragColor = vec4(hash(uv));\n    } else {\n        if(distance(fragCoord.xy, iMouse.xy) < 40.0) {\n            fragColor = (vec4(1.0) - eps) * is + eps;    \n        } else {\n            fragColor = clamp(desaturated + rate * vec4(diff, 0.0) + blur * lapl, -1.0, 1.0);\n        }\n    }\n    \n\n}","name":"","description":"","type":"buffer"}]}}