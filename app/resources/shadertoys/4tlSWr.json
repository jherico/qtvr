{"Shader":{"ver":"0.1","info":{"id":"4tlSWr","date":"1435871465","viewed":835,"name":"skyline 3D","username":"FabriceNeyret2","description":"in the spirit of the 2D skylines (e.g., https:\/\/www.shadertoy.com\/view\/4tlXzM )... but in 3D :-)  ( I even reproduced the original temporal aliasing :-D  )<br\/><br\/>Be sure to wait long enough ;-)","likes":7,"published":3,"flags":0,"tags":["3d","raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define T iGlobalTime\n\n\/\/ --- using the base ray-marcher of Trisomie21: https:\/\/www.shadertoy.com\/view\/4tfGRB#\n\nvec4 bg = vec4(0); \/\/ vec4(0,0,.3,0); \n\nvoid mainImage( out vec4 f, vec2 w ) {\n    vec4 p = vec4(w,0,1)\/iResolution.yyxy-.5, d,c; p.x-=.4; \/\/ init ray\n    \/\/ r(p.xz,.13); r(p.yz,.2); r(p.xy,.1);   \/\/ camera rotations\n    d =p;                                 \/\/ ray dir = ray0-vec3(0)\n    p.x += 15.*T; p += 2.*d;\n    f = bg;\n    float l,x=1e9, closest = 999.;\n   \n    for (float i=1.; i>0.; i-=.01)  {\n       \n        vec4 u = floor(p\/8.), t = mod(p, 8.)-4., ta; \/\/ objects id + local frame\n      \tu.y = 0.; \n        u = sin(78.17*(u+u.yzxw));                     \/\/ randomize ids\n        \n        c = p\/p*1.2;\n        ta = abs(t);\n        x=1e9; \n        if (sin(17.*(u.x+u.y+u.z))>.95) { \/\/ 10% of blocks\n            ta.y = p.y + 30.*u.x - .3*pow(abs(.03*floor(p.z)),3.) + 35.;\n            x = max(ta.x,max(ta.y,ta.z))  -3.; \n         }\n        closest = min(closest, p.y+150.); \n        \n        \/\/ artifacts: passed a object, we might be fooled about dist to next (hidden in next modulo-tile)\n#if 1        \/\/ if dist to box border is closest to object, go there.  <<< the working solution ! (at mod8 scale)\n        vec4 k, k1 = (4.-t)\/d ,k2 = (-4.-t)\/d, dd; \n        k = min (k1-1e5*sign(k1),k2-1e5*sign(k2))+1e5; \/\/ ugly trick to get the min only if positive.\n        \/\/ 2 less ugly\/costly formulations, but less robust close to \/0 :\n        \/\/   k = mix(k1,k2, .5+.5*sign(k2));\n        \/\/   dd = d+.001*clamp(1.-d*d,.999,1.); k = (4.*sign(dd)-t)\/dd;\n        l = min(k.x,min(k.y,k.z));\n        if (l<x) { p+= 1.*d*(l+0.01); continue; }\n#endif\n        \/\/ if (x<.01) c = texture2D(iChannel0,.1*(p.xy+p.yz));\n      \n        if(x<.01) \/\/ hit !\n            { f = mix(bg,c,i*i); break;  }  \/\/ color texture + black fog\n       \n        p += d*x;       \/\/ march ray\n     }\n    \/\/if (length(f)==0.) f = vec4(1,1,.6,0)*smoothstep(.31,.3,length(w\/iResolution.y-vec2(1.3,.7)));\n    f += vec4(1) * exp(-.01*closest)*(.5+.5*cos(1.+T\/8.)); \/\/ thanks kuvkar ! \n}\n","name":"","description":"","type":"image"}]}}