{"Shader":{"ver":"0.1","info":{"id":"ldc3Dn","date":"1448929285","viewed":349,"name":"zinetest3","username":"macbooktall","description":"color palette and base ray march code by iq https:\/\/www.shadertoy.com\/view\/Xds3zN<br\/>menger sponge by Cale https:\/\/www.shadertoy.com\/view\/ltjGzd","likes":16,"published":3,"flags":0,"tags":["fractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/forked By Cale Bradbury, 2015 from https:\/\/www.shadertoy.com\/view\/ltjGzd\n\n\/\/fuck yeah, mirror that shit\n#define MIRROR\n\n\/\/ Base ray trace code via https:\/\/www.shadertoy.com\/view\/Xds3zN by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat qbox( vec3 p, float s )\n{\n  return length(max(abs(p)-vec3(s,s,s),0.0));\n}\n\nfloat box(vec3 p, vec3 b){ \n    p = abs(p) - b;\n    return max(p.x, max(p.y,p.z));\n}\n\nvec2 map( in vec3 pos )\n{\n    float size = .35;\n    pos = mod(pos,size)-0.5*size;\n\t\n    float res = qbox(pos,size);\n\n    pos+=size;\n    \n    for(float i = 0.0; i<3.;i++){\n        size \/= 3.0;\n        \n        float b = box(opRep(pos,vec3(size*3.,size*3.,0)),vec3(size,size,10.));\n        res = opS(res,b);\n        b = box(opRep(pos,vec3(size*6.,0.,size*6.)),vec3(size,10.,size));\n        res = opS(res,b);\n        b = box(opRep(pos,vec3(0.,size*6.,size*6.)),vec3(10.,size,size));\n        res = opS(res,b);\n    }\n\t\n    return vec2(res,1.0);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.;\n    float tmax = 120.0;\n    \n\tfloat precis = 0.0001;\n    float t = tmin;\n    float m = 0.0;\n    for( int i=0; i<120; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.;\n    return vec2( t, m );\n}\n\nvec3 palette( in float t, in vec3 a, in vec3 b, in vec3 c, in vec3 d )\n{\n    return a + b*cos( 6.28318*(c*t+d) );\n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(1.0);\n    vec2 res = castRay(ro,rd);\n    \n    const vec3 a = vec3(.5, .0, .5);\n    const vec3 b = vec3(.5, 1., .5);\n    const vec3 c = vec3(1., 1., 1.);\n    const vec3 d = vec3(.0, .1, 0.2);\n    \n    col = palette(0.3+res.x*2., a, b, c, d);\n    col = mix( col, vec3(1.0), 1.0-exp( -.5*res.x*res.x ) );\n\n\treturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = -1.0+2.0*(fragCoord.xy \/ iResolution.xy);\n\tp.x *= iResolution.x\/iResolution.y;\n\n    \/\/ camera\t\n\tvec3 ro = vec3(0., .0, -iGlobalTime*0.4 );\n    \/\/vec3( -0.5+camDist*cos(0.1*time), 5.0, 0.5 + camDist*sin(0.1*time) );\n\tvec3 ta = ro + vec3(0., 0., -1. );\n\t\n\t\/\/ camera-to-world transformation\n\/\/    mat3 ca = setCamera( ro, ta, 56.54 );\n    mat3 ca = setCamera( ro, ta, 0. );\n    \/\/ ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,.8) );\n\n    \/\/ render\t\n    vec3 col = render( ro, rd);\n    col += (vec3(1.)*p.y)*0.35;\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}