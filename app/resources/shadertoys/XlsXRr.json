{"Shader":{"ver":"0.1","info":{"id":"XlsXRr","date":"1434119244","viewed":285,"name":"Chinese Puzzle Balls","username":"dr2","description":"Chinese Puzzle Balls (no ivory and no decorations).","likes":7,"published":3,"flags":0,"tags":["raymarching","shapes"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Chinese Puzzle Balls\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Octavio Good's \"Protophore\" got me thinking about this.\n\nconst float pi = 3.14159;\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrTorusDf (vec3 p, float ri, float rc)\n{\n  vec2 q = vec2 (length (p.xy) - rc, p.z);\n  return length (q) - ri;\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat SmoothMin (float a, float b, float k)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ k, 0., 1.);\n  return mix (b, a, h) - k * h * (1. - h);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat aSpin, sHole, redFac, tCur;\nint idObj;\nconst float dstFar = 100.;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float cLen, rad, smVal, dMin, d, aRot, r;\n  dMin = dstFar;\n  rad = 1.;\n  smVal = 0.02;\n  q = p;\n  d = PrTorusDf (q.xzy, 0.03 * rad, 1.02 * rad);\n  if (d < dMin) { dMin = d;  idObj = 11; }\n  q.xz = abs (q.xz) - 0.707 * 1.02 * rad;\n  cLen = 0.7;\n  q.y -= - cLen;\n  d = PrCylDf (q.xzy, 0.03, cLen);\n  if (d < dMin) { dMin = d;  idObj = 11; }\n  aRot = 1.5 * aSpin;\n  q = p;\n  for (int j = 0; j < 10; j ++) {\n    r = length (q);\n    d = max (r - rad, - (r - 1.03 * redFac * rad));\n    d = - SmoothMin (- d, length (abs (q) - 0.5 * rad) - rad * sHole, smVal);\n    if (d < dMin) { dMin = d;  idObj = j; }\n    q = q.yzx;\n    q.xz = Rot2D (q.xz, aRot);\n    rad *= redFac;\n    smVal *= redFac;\n    aRot *= 1.23;\n  }\n  return dMin;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * vec3 (v.y, v.z, v.w));\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    float d = 0.3 * float (j + 1) \/ 8.;\n    ao += max (0., d - 3. * ObjDf (ro + d * rd));\n  }\n  return clamp (1. - 0.6 * ao, 0., 1.);\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d, h;\n  d = 0.;\n  for (int j = 0; j < 100; j ++) {\n    h = ObjDf (ro + d * rd);\n    d += h;\n    if (h < 0.001 || d > dstFar) break;\n  }\n  return d;\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float d, h, sh;\n  sh = 1.;\n  d = 0.05;\n  for (int j = 0; j < 50; j ++) {\n    h = ObjDf (ro + d * rd);\n    sh = min (sh, 20. * h \/ d);\n    d *= 1.04;\n    if (h < 0.0001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 ltDir, col, bgCol, vn;\n  float dstHit, ts, amb, bAmb, fi, c, sh, bk;\n  int idObjT;\n  ts = fract (tCur * 0.333 + 0.125) - 0.25;\n  aSpin = 0.1 * (tCur + max (0., ts) - 3. * min (0., ts));\n  sHole = clamp (1.1 + sin (tCur * 0.4), 0.17, 0.51);\n  redFac = 0.87;\n  dstHit = dstFar;\n  dstHit = ObjRay (ro, rd);\n  ltDir = normalize (vec3 (0.2, 1., -0.1));\n  col = vec3 (0.);\n  bAmb = 1.;\n  idObjT = idObj;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    amb = ObjAO (ro, vn);\n    rd = reflect (rd, vn);\n    if (idObjT <= 10) {\n      fi = 0.1 * float (idObjT);\n      col = HsvToRgb (vec3 (fi, 1., 1.));\n    } else {\n      col = vec3 (0.5, 0.5, 0.);\n    }\n    bk = max (dot (vn, - normalize (vec3 (ltDir.x, 0., ltDir.z))), 0.);\n    sh = ObjSShadow (ro, ltDir);\n    col = col * (0.2 + 0.2 * bk +\n       sh * 0.8 * max (dot (vn, ltDir), 0.)) +\n       sh * 0.5 * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n    bAmb = 0.2 * amb;\n  }\n  c = (rd.y > max (abs (rd.x), abs (rd.z * 0.25))) ? min (2. * rd.y, 1.) :\n     0.05 * (1. + dot (rd, ltDir));\n  if (rd.y > 0.) c += 0.5 * pow (clamp (1.05 - 0.5 *\n     length (max (abs (rd.xz \/ rd.y) - vec2 (1., 4.), 0.)), 0., 1.), 6.);\n  bgCol = vec3 (0.5, 0.5, 1.) * c + 2. * vec3 (1., 0.8, 0.9) *\n     (clamp (0.0002 \/ (1. - abs (rd.x)), 0., 1.) +\n      clamp (0.0002 \/ (1. - abs (rd.z)), 0., 1.));\n  col += bAmb * bgCol;\n  return sqrt (clamp (col, 0., 1.));\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  mat3 vuMat;\n  vec3 ro, rd, ca, sa;\n  float el, az;\n  az = 0.25 * pi - 0.1 * tCur;\n  el = 0.4 + 0.1 * sin (0.3 * tCur);\n  ca = cos (vec3 (el, az, 0.));\n  sa = sin (vec3 (el, az, 0.));\n  vuMat = mat3 (ca.z, - sa.z, 0., sa.z, ca.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  rd = normalize (vec3 (uv, 4.)) * vuMat;\n  ro = vec3 (0., 0., -5.) * vuMat;\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}