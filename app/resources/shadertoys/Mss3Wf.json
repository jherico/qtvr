{"Shader":{"ver":"0.1","info":{"id":"Mss3Wf","date":"1381182698","viewed":5733,"name":"Basic Fractal","username":"PauloFalcao","description":"A very very simple fractal, just mirror, rotate and scale ;)","likes":41,"published":3,"flags":0,"tags":["2d","fractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/Basic fractal by @paulofalcao\n\nconst int maxIterations=6;\/\/a nice value for fullscreen is 8\n\nfloat circleSize=1.0\/(3.0*pow(2.0,float(maxIterations)));\n\n\/\/generic rotation formula\nvec2 rot(vec2 uv,float a){\n\treturn vec2(uv.x*cos(a)-uv.y*sin(a),uv.y*cos(a)+uv.x*sin(a));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n\t\/\/normalize stuff\n\tvec2 uv=iResolution.xy;uv=-.5*(uv-2.0*fragCoord.xy)\/uv.x;\n\n\t\/\/global rotation and zoom\n\tuv=rot(uv,iGlobalTime);\n\tuv*=sin(iGlobalTime)*0.5+1.5;\n\t\n\t\/\/mirror, rotate and scale 6 times...\n\tfloat s=0.3;\n\tfor(int i=0;i<maxIterations;i++){\n\t\tuv=abs(uv)-s;\n\t\tuv=rot(uv,iGlobalTime);\n\t\ts=s\/2.1;\n\t}\n\t\n\t\/\/draw a circle\n\tfloat c=length(uv)>circleSize?0.0:1.0;\t\n\n\tfragColor = vec4(c,c,c,1.0);\n}","name":"","description":"","type":"image"}]}}