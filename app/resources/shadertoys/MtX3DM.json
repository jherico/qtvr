{"Shader":{"ver":"0.1","info":{"id":"MtX3DM","date":"1422408202","viewed":866,"name":"kali-traps","username":"bergi","description":"hybrid volume sampler \/ surface finder with mouse adjustable attention scale to magnify the different worlds in the kali set. ","likes":12,"published":3,"flags":0,"tags":["3d","fractal","volume","marching","kali","traps"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\tkali-traps by bergi in 2015\n\t\n\t3d plasma fractal ray scrambling and what have you\n\tand another attempt to plot the surface of the kali set.\n\tenjoy this beautiful soup\n\n\taGPL3 *\/\n\n\n\/\/ needs some more iters - lowered for webgl\nconst int  NUM_ITERS = \t\t\t45;\n\nconst vec3 KALI_PARAM = \t\tvec3(.5, .4, 1.5);\n\/\/const vec3 KALI_PARAM = \t\tvec3(.4993, .4046, 1.5);\nconst int  KALI_ITERS = \t\t33;\n\n\/\/ animation time\nfloat ti = iGlobalTime * 0.1 + 17.;\n\n\n\n\/** kali set as usual. \n\treturns last magnitude step and average *\/\nvec4 average;\nfloat kali(in vec3 p)\n{\n    average = vec4(0.);\n\tfloat mag;\n    for (int i=0; i<KALI_ITERS; ++i)\n    {\n        mag = dot(p, p);\n        p = abs(p) \/ mag;\n        average += vec4(p, mag);\n        p -= KALI_PARAM;\n    }\n\taverage \/= 32.;\n    return mag;\n}\n\n\/\/ steps from pos along dir and samples the cloud\n\/\/ stp is 1e-5 - 1e+?? :)\nvec3 ray_color(vec3 pos, vec3 dir, float stp)\n{\n    vec3 p, col = vec3(0.);\n\tfloat t = 0.;\n\tfor (int i=0; i<NUM_ITERS; ++i)\n\t{\n\t\tp = pos + t * dir;\n\t\tfloat d = kali(p);\n\n\t\t\/\/ define a surface and get trapped\n\t\td = 1. - abs(1. - d);\n\t\t\n\t\t\/\/ always step within a certain range\n\t\tt += max(0.001, min(0.01, d )) * (stp + 3. * t);\n\n\t\t\/\/ some color\n\t\tcol += (.5+.5*sin(average.rgb*30.)) \n\t\t\/\/ by distance to surface\n            \/ (1. + d * d * 1000.);\n\t}\n    \n    return clamp(col \/ 5., 0., 1.);\n}\n\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ ray stepsize - or focus scale \n    float foc = 0.0024 + 0.06*pow(sin(ti*0.9) * .5 + .5, 2.);\n\n    \/\/ some position\n\t\/\/ - a circular path depending on the stepsize\n    float rti = ti * 0.2;\n\tfloat rad = foc;\n    \n    if (iMouse.z > .5){\n        foc = pow(iMouse.y \/ iResolution.y, 2.);\n\t\trad = iMouse.x \/ iResolution.x;\n    }\n    \n\tvec3 pos = (vec3(-2.3, 1.19, -3.4)\n\t\t\t\t+ (0.001+rad)*vec3(2.*sin(rti),cos(rti),0.7*sin(rti\/4.)) );\n    \n\tvec2 uv = (fragCoord.xy \/ iResolution.y - .5) * 2.;\n    vec3 dir = normalize(vec3(uv, 1.5-length(uv))).xzy;\n    dir.xz = vec2(sin(ti)*dir.x-cos(ti)*dir.z, cos(ti)*dir.x+sin(ti)*dir.z);\n    \n\tvec3 col = ray_color(pos, dir, foc)\n\/\/\t\t\t+ 0.5 * ray_color(pos, dir, 2.)\n        ;\n\n\tfragColor = vec4(pow(col,vec3(1.\/1.3)), 1.);\t\n}\n","name":"","description":"","type":"image"}]}}