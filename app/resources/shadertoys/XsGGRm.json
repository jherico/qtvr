{"Shader":{"ver":"0.1","info":{"id":"XsGGRm","date":"1453629916","viewed":122,"name":"Colliding Balls","username":"dr2","description":"Colliding elastic balls","likes":11,"published":3,"flags":32,"tags":["dynamics","collisions"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Colliding Balls\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/*\nColliding elastic balls. The 3D version of \"Molecular Dynamics\"\n(with softer interactions and a larger integration time step).\n\nTwo compute steps for each display update.\n\nMouse click restarts run.\n*\/\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nconst int nMolEdge = 3;\nconst int nMol = nMolEdge * nMolEdge * nMolEdge;\n\nvec3 ltDir;\nvec3 pMol[nMol];\nfloat dstFar, hbLen;\nint idObj;\nconst float pi = 3.14159;\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q, eShift, eLen;\n  float dMin, d, eWid;\n  dMin = dstFar;\n  eWid = 0.05;\n  eShift = vec3 (0., hbLen, hbLen);\n  eLen = vec3 (hbLen + eWid, eWid, eWid);\n  q = abs (p);\n  d = min (min (PrBoxDf (q - eShift, eLen), PrBoxDf (q - eShift.yxz, eLen.yxz)),\n     PrBoxDf (q - eShift.yzx, eLen.yzx));\n  if (d < dMin) { dMin = d;  idObj = 1; }\n  for (int n = 0; n < nMol; n ++) {\n    d = PrSphDf (p - pMol[n], 0.45);\n    if (d < dMin) { dMin = d;  idObj = 10 + n; }\n  }\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 100; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.0002, -0.0002, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, vn;\n  float dstHit, c, spec;\n  int idObjT;\n  idObj = -1;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == 1) {\n      objCol = vec3 (0.5, 0.35, 0.2);\n      spec = 0.1;\n    } else {\n      c = float (idObj - 10);\n      objCol = HsvToRgb (vec3 (mod (1.7 * c \/ float (nMol), 1.),\n         1. - 0.3 * mod (c, 3.), 1. - 0.3 * mod (c, 2.)));\n      spec = 0.5;\n    }\n    col = objCol * (0.2 +\n       0.1 * max (dot (vn, ltDir * vec3 (-1., 0., -1.)), 0.) +\n       0.8 * max (dot (vn, ltDir), 0.)) +\n       spec * pow (max (0., dot (ltDir, reflect (rd, vn))), 64.);\n  } else col = vec3 (0., 0.4, 0.);\n  return clamp (col, 0., 1.);\n}\n\nvoid GetMols ()\n{\n  for (int n = 0; n < nMol; n ++) pMol[n] = Loadv4 (2 * n).xyz;\n  hbLen = Loadv4 (2 * nMol).y - 0.3;\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  mat3 vuMat;\n  vec3 rd, ro;\n  vec2 ori, ca, sa;\n  float tCur;\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  dstFar = 50.;\n  ltDir = normalize (vec3 (1., 2., 1.));\n  ori = vec2 (0.8 + 0.3 * sin (2. * pi * 0.07 * tCur), -0.1 * tCur);\n  ca = cos (ori);\n  sa = sin (ori);\n  vuMat = mat3 (1., 0., 0., 0., ca.x, - sa.x, 0., sa.x, ca.x) *\n     mat3 (ca.y, 0., - sa.y, 0., 1., 0., sa.y, 0., ca.y);\n  rd = normalize (vec3 (uv, 6.)) * vuMat;\n  ro = vec3 (0., 0., -25.) * vuMat;\n  GetMols ();\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"},{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Colliding Balls\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nMolEdge = 3;\nconst int nMol = nMolEdge * nMolEdge * nMolEdge;\nfloat hbLen, dt;\n\nvoid Step (int mId, out vec3 r, out vec3 v)\n{\n  vec3 rn, f;\n  vec3 dr;\n  float fOvlap, rSep;\n  fOvlap = 100.;\n  r = Loadv4 (2 * mId).xyz;\n  f = vec3 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rn = Loadv4 (2 * n).xyz;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr;\n  v = Loadv4 (2 * mId + 1).xyz;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid Init (int mId, out vec3 r, out vec3 v)\n{\n  float fm, fme;\n  fme = float (nMolEdge);\n  fm = float (mId);\n  r = floor (vec3 (mod (fm, fme), mod (fm, fme * fme) \/ fme, fm \/ (fme * fme))) -\n     0.5 * (fme - 1.);\n  v = 2. * normalize (vec3 (Hashff (fm), Hashff (fm + 0.3),\n     Hashff (fm + 0.6)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 p, r, v;\n  int mId, pxId;\n  bool doInit;\n  vec2 kv = floor (fragCoord);\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol) discard;\n  mId = pxId \/ 2;\n  doInit = false;\n  dt = 0.02;\n  if (iFrame < 5) {\n    hbLen = 0.8 * float (nMolEdge) + 0.4;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    if (mId < nMol) {\n      Step (mId, r, v);\n      p = (2 * mId == pxId) ? r : v;\n    }\n    if (mPtr.z > 0. && stDat.x > 50.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) {\n    Init (mId, r, v);\n    p = (2 * mId == pxId) ? r : v;\n  }\n  Savev4 (pxId, ((pxId < 2 * nMol) ? vec4 (p, 0.) : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ \"Colliding Balls\" by dr2 - 2016\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n#define txBuf iChannel0\n#define txSize iChannelResolution[0].xy\n#define mPtr iMouse\n\nfloat Hashff (float p)\n{\n  const float cHashM = 43758.54;\n  return fract (sin (p) * cHashM);\n}\n\nconst float txRow = 64.;\n\nvec4 Loadv4 (int idVar)\n{\n  float fi = float (idVar);\n  return texture2D (txBuf, (vec2 (mod (fi, txRow), floor (fi \/ txRow)) + 0.5) \/\n     txSize);\n}\n\nvoid Savev4 (int idVar, vec4 val, inout vec4 fCol, vec2 fCoord)\n{\n  float fi = float (idVar);\n  vec2 d = abs (fCoord - vec2 (mod (fi, txRow), floor (fi \/ txRow)) - 0.5);\n  if (max (d.x, d.y) < 0.5) fCol = val;\n}\n\nconst int nMolEdge = 3;\nconst int nMol = nMolEdge * nMolEdge * nMolEdge;\nfloat hbLen, dt;\n\nvoid Step (int mId, out vec3 r, out vec3 v)\n{\n  vec3 rn, f;\n  vec3 dr;\n  float fOvlap, rSep;\n  fOvlap = 100.;\n  r = Loadv4 (2 * mId).xyz;\n  f = vec3 (0.);\n  for (int n = 0; n < nMol; n ++) {\n    rn = Loadv4 (2 * n).xyz;\n    dr = r - rn;\n    rSep = length (dr);\n    if (n != mId && rSep < 1.) f += fOvlap * (1. \/ rSep - 1.) * dr;\n  }\n  dr = hbLen - abs (r);\n  f -= step (dr, vec3 (1.)) * fOvlap * sign (r) * (1. \/ abs (dr) - 1.) * dr;\n  v = Loadv4 (2 * mId + 1).xyz;\n  v += dt * f;\n  r += dt * v;\n}\n\nvoid Init (int mId, out vec3 r, out vec3 v)\n{\n  float fm, fme;\n  fme = float (nMolEdge);\n  fm = float (mId);\n  r = floor (vec3 (mod (fm, fme), mod (fm, fme * fme) \/ fme, fm \/ (fme * fme))) -\n     0.5 * (fme - 1.);\n  v = 2. * normalize (vec3 (Hashff (fm), Hashff (fm + 0.3),\n     Hashff (fm + 0.6)) - 0.5);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec4 stDat;\n  vec3 p, r, v;\n  int mId, pxId;\n  bool doInit;\n  vec2 kv = floor (fragCoord);\n  pxId = int (kv.x + txRow * kv.y);\n  if (kv.x >= txRow || pxId > 2 * nMol) discard;\n  mId = pxId \/ 2;\n  doInit = false;\n  dt = 0.02;\n  if (iFrame < 5) {\n    hbLen = 0.8 * float (nMolEdge) + 0.4;\n    stDat = vec4 (0., hbLen, 0., 0.);\n    if (mId < nMol) doInit = true;\n  } else {\n    stDat = Loadv4 (2 * nMol);\n    ++ stDat.x;\n    hbLen = stDat.y;\n    if (mId < nMol) {\n      Step (mId, r, v);\n      p = (2 * mId == pxId) ? r : v;\n    }\n    if (mPtr.z > 0. && stDat.x > 50.) {\n      stDat.x = 0.;\n      if (mId < nMol) doInit = true;\n    }\n  }\n  if (doInit) {\n    Init (mId, r, v);\n    p = (2 * mId == pxId) ? r : v;\n  }\n  Savev4 (pxId, ((pxId < 2 * nMol) ? vec4 (p, 0.) : stDat), fragColor, fragCoord);\n}\n","name":"","description":"","type":"buffer"}]}}