{"Shader":{"ver":"0.1","info":{"id":"MsdGzl","date":"1451942717","viewed":3027,"name":"Basic Montecarlo","username":"iq","description":"A simple pathtracer, with progressive rendering. The random numbers are really bad quality, so this is probably noisier than it should, and biased. I have disabled the specular reflections.","likes":49,"published":3,"flags":32,"tags":["3d","raymarching","fractal","gi","global","pathtracing","montecarlo"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\/\/ Display : average down and do gamma adjustment\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\n    vec3 col = vec3(0.0);\n    \n    if( iFrame>0 )\n    {\n        col = texture2D( iChannel0, uv ).xyz;\n        col \/= float(iFrame);\n        col = pow( col, vec3(0.4545) );\n    }\n    \n    \n    \/\/ color grading and vigneting\n    col = pow( col, vec3(0.8,0.85,0.9) );\n    \n    col *= 0.5 + 0.5*pow( 16.0*uv.x*uv.y*(1.0-uv.x)*(1.0-uv.y), 0.1 );\n    \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0\n\n\/\/ Pathtrace the scene. One path per pixel. Samples the sun light and the\n\/\/ sky dome light at each vertex of the path.\n\n\/\/ More info here: http:\/\/iquilezles.org\/www\/articles\/simplepathtracing\/simplepathtracing.htm\n\n\n\/\/------------------------------------------------------------------\n\nfloat hash(float seed)\n{\n    return fract(sin(seed)*43758.5453 );\n}\n\nvec3 cosineDirection( in float seed, in vec3 nor)\n{\n\n    \/\/ compute basis from normal\n    \/\/ see http:\/\/orbit.dtu.dk\/fedora\/objects\/orbit:113874\/datastreams\/file_75b66578-222e-4c7d-abdf-f7e255100209\/content\n    \/\/ (link provided by nimitz)\n    vec3 tc = vec3( 1.0+nor.z-nor.xy*nor.xy, -nor.x*nor.y)\/(1.0+nor.z);\n    vec3 uu = vec3( tc.x, tc.z, -nor.x );\n    vec3 vv = vec3( tc.z, tc.y, -nor.y );\n    \n    float u = hash( 78.233 + seed);\n    float v = hash( 10.873 + seed);\n    float a = 6.283185 * v;\n\n    return  sqrt(u)*(cos(a)*uu + sin(a)*vv) + sqrt(1.0-u)*nor;\n}\n\n\/\/------------------------------------------------------------------\n\nfloat maxcomp(in vec3 p ) { return max(p.x,max(p.y,p.z));}\n\nfloat sdBox( vec3 p, vec3 b )\n{\n  vec3  di = abs(p) - b;\n  float mc = maxcomp(di);\n  return min(mc,length(max(di,0.0)));\n}\n\nfloat map( vec3 p )\n{\n    vec3 w = p;\n    vec3 q = p;\n\n    q.xz = mod( q.xz+1.0, 2.0 ) -1.0;\n    \n    float d = sdBox(q,vec3(1.0));\n    float s = 1.0;\n    for( int m=0; m<6; m++ )\n    {\n        float h = float(m)\/6.0;\n\n        p =  q - 0.5*sin( abs(p.y) + float(m)*3.0+vec3(0.0,3.0,1.0));\n\n        vec3 a = mod( p*s, 2.0 )-1.0;\n        s *= 3.0;\n        vec3 r = abs(1.0 - 3.0*abs(a));\n\n        float da = max(r.x,r.y);\n        float db = max(r.y,r.z);\n        float dc = max(r.z,r.x);\n        float c = (min(da,min(db,dc))-1.0)\/s;\n\n        d = max( c, d );\n   }\n\n    \n   float d1 = length(w-vec3(0.22,0.35,0.4)) - 0.09;\n   d = min( d, d1 );\n\n   float d2 = w.y + 0.22;\n   d =  min( d,d2);\n\n    \n   return d;\n}\n\n\/\/------------------------------------------------------------------\n\nvec3 calcNormal( in vec3 pos )\n{\n    vec3 eps = vec3(0.0001,0.0,0.0);\n\n    return normalize( vec3(\n      map( pos+eps.xyy ) - map( pos-eps.xyy ),\n      map( pos+eps.yxy ) - map( pos-eps.yxy ),\n      map( pos+eps.yyx ) - map( pos-eps.yyx ) ) );\n}\n\n\nfloat intersect( in vec3 ro, in vec3 rd )\n{\n    float res = -1.0;\n    float tmax = 16.0;\n    float t = 0.01;\n    for(int i=0; i<128; i++ )\n    {\n        float h = map(ro+rd*t);\n        if( h<0.0001 || t>tmax ) break;\n        t +=  h;\n    }\n    \n    if( t<tmax ) res = t;\n\n    return res;\n}\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n    float res = 0.0;\n    \n    float tmax = 12.0;\n    \n    float t = 0.001;\n    for(int i=0; i<80; i++ )\n    {\n        float h = map(ro+rd*t);\n        if( h<0.0001 || t>tmax) break;\n        t += h;\n    }\n\n    if( t>tmax ) res = 1.0;\n    \n    return res;\n}\n\n\nvec3 sunDir = normalize(vec3(-0.3,1.3,0.1));\nvec3 sunCol =  6.0*vec3(1.0,0.8,0.6);\nvec3 skyCol =  4.0*vec3(0.2,0.35,0.5);\n\n\nvec3 calculateColor(vec3 ro, vec3 rd, float sa )\n{\n    const float epsilon = 0.0001;\n\n    vec3 colorMask = vec3(1.0);\n    vec3 accumulatedColor = vec3(0.0);\n\n    float fdis = 0.0;\n    for( int bounce = 0; bounce<3; bounce++ ) \/\/ bounces of GI\n    {\n        rd = normalize(rd);\n       \n        \/\/-----------------------\n        \/\/ trace\n        \/\/-----------------------\n        float t = intersect( ro, rd );\n        if( t < 0.0 )\n        {\n            if( bounce==0 ) return mix( 0.05*vec3(0.9,1.0,1.0), skyCol, smoothstep(0.1,0.25,rd.y) );\n            break;\n        }\n\n        if( bounce==0 ) fdis = t;\n\n        vec3 pos = ro + rd * t;\n        vec3 nor = calcNormal( pos );\n        vec3 surfaceColor = vec3(0.4)*vec3(1.2,1.1,1.0);\n\n        \/\/-----------------------\n        \/\/ add direct lighitng\n        \/\/-----------------------\n        colorMask *= surfaceColor;\n\n        vec3 iColor = vec3(0.0);\n\n        \/\/ light 1        \n        float sunDif =  max(0.0, dot(sunDir, nor));\n        float sunSha = 1.0; if( sunDif > 0.00001 ) sunSha = shadow( pos + nor*epsilon, sunDir);\n        iColor += sunCol * sunDif * sunSha;\n        \/\/ todo - add back direct specular\n\n        \/\/ light 2\n        vec3 skyPoint = cosineDirection( sa + 7.1*float(iFrame) + 5681.123 + float(bounce)*92.13, nor);\n        float skySha = shadow( pos + nor*epsilon, skyPoint);\n        iColor += skyCol * skySha;\n\n\n        accumulatedColor += colorMask * iColor;\n\n        \/\/-----------------------\n        \/\/ calculate new ray\n        \/\/-----------------------\n        \/\/float isDif = 0.8;\n        \/\/if( hash(sa + 1.123 + 7.7*float(bounce)) < isDif )\n        {\n           rd = cosineDirection(76.2 + 73.1*float(bounce) + sa + 17.7*float(iFrame), nor);\n        }\n        \/\/else\n        {\n        \/\/    float glossiness = 0.2;\n        \/\/    rd = normalize(reflect(rd, nor)) + uniformVector(sa + 111.123 + 65.2*float(bounce)) * glossiness;\n        }\n\n        ro = pos;\n   }\n\n   float ff = exp(-0.01*fdis*fdis);\n   accumulatedColor *= ff; \n   accumulatedColor += (1.0-ff)*0.05*vec3(0.9,1.0,1.0);\n\n   return accumulatedColor;\n}\n\nmat3 setCamera( in vec3 ro, in vec3 rt, in float cr )\n{\n\tvec3 cw = normalize(rt-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, -cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float sa = hash( dot( fragCoord, vec2(12.9898, 78.233) ) + 1113.1*float(iFrame) );\n    \n    vec2 of = -0.5 + vec2( hash(sa+13.271), hash(sa+63.216) );\n    vec2 p = (-iResolution.xy + 2.0*(fragCoord+of)) \/ iResolution.y;\n\n    vec3 ro = vec3(0.0,0.0,0.0);\n    vec3 ta = vec3(1.5,0.7,1.5);\n\n    mat3  ca = setCamera( ro, ta, 0.0 );\n    vec3  rd = normalize( ca * vec3(p,-1.3) );\n\n    vec3 col = texture2D( iChannel0, fragCoord\/iResolution.xy ).xyz;\n    if( iFrame==0 ) col = vec3(0.0);\n    \n    col += calculateColor( ro, rd, sa );\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"buffer"}]}}