{"Shader":{"ver":"0.1","info":{"id":"MtXXRB","date":"1437524059","viewed":714,"name":"Gears Animated ","username":"athlete","description":"Inspired by the tutorial by iq: https:\/\/www.youtube.com\/watch?v=0ifChJ0nJfM","likes":1,"published":3,"flags":0,"tags":["2d","tutorial","distancefunction","iq"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float PI = 3.1415;\nconst float PIOVER180 = PI\/180.0;\n\nconst int numRects = 17;\nconst float radius = 0.4;\n\n\/\/naive rect \n\/\/#define Rect(p) max(abs(p).x,abs(p).y)>.0385 ? 1. : 0.\n\n\/\/anti aliased rect, thanks @FabriceNeyret2\n#define Rect(p) smoothstep(.035,.0385,max(abs(p).x,abs(p).y))\n\n\/\/rotation, takes angle in degree\nvec2 Rot(vec2 p, float angle)\n{\n\tmat2 rotMatrix = mat2(cos(angle*PIOVER180), sin(angle*PIOVER180), \/\/first column\n                          -sin(angle*PIOVER180), cos(angle*PIOVER180)); \/\/second column\n    vec2 result = p * rotMatrix;\n\n   \treturn result;\n}\n\nfloat DrawGear(vec2 p, float radius)\n{   \n    float A=1.0; \/\/ alpha mask\n    \n    \/\/draw teeth of gear in a circle and angled  \n    for(int i=0; i<numRects; i++)\n    {\n    \tvec2 rec = p;\n        rec = Rot(rec, float(i)*360.0\/float(numRects));\n        \n   \t \trec.y -= 0.4;\n        A *= Rect(rec);\n    }\n    \n    \/\/Draw Circle and subtract 2nd circle in the middle\n    float l = length(p);\n   \n    return max(A*smoothstep(radius, radius+5e-3, l), \n                 smoothstep(radius\/10.+1e-3, radius\/10., l)\n               );\n} \n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/current pixel position stored in p\n\tvec2 p = fragCoord \/ iResolution.y; \/\/keeps the aspect ratio!\n    \n    \/\/move scene\n    p -= vec2(0.715, 0.37);\n    \n    \/\/scale\n    p *= 1.25;\n    \n    \/\/start with background color\n    fragColor = smoothstep(vec4(0,.2,.1,1),vec4(.8,.8,1,1), p.y+vec4(.5,.4,.2,0));\n    \n    \/\/backup current position\n    vec2 q = p;\n    \n    \/\/animate\n    p = Rot(p, iGlobalTime*10.0);    \n    q -= vec2(0.605, 0.60);\n    q = Rot(q, -iGlobalTime*10.0 - 5.0); \/\/rotate in opposite direction\n    \n    float G1 = DrawGear(p, radius);\n    float G2 = DrawGear(q, radius);\n\n    \/\/fragColor *= min(G1, G2);\n    fragColor *= G1 * G2;\n}","name":"","description":"","type":"image"}]}}