{"Shader":{"ver":"0.1","info":{"id":"llS3RK","date":"1430268245","viewed":1226,"name":"Worley Noise Waters","username":"Kyle273","description":"A simple Worley noise shader. Full tutorial at ibreakdownshaders.blogspot.com. Original shader from  http:\/\/glslsandbox.com\/e#23237.0","likes":17,"published":3,"flags":0,"tags":["2d","noise","worley","noob"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/Calculate the squared length of a vector\nfloat length2(vec2 p){\n    return dot(p,p);\n}\n\n\/\/Generate some noise to scatter points.\nfloat noise(vec2 p){\n\treturn fract(sin(fract(sin(p.x) * (43.13311)) + p.y) * 31.0011);\n}\n\nfloat worley(vec2 p) {\n    \/\/Set our distance to infinity\n\tfloat d = 1e30;\n    \/\/For the 9 surrounding grid points\n\tfor (int xo = -1; xo <= 1; ++xo) {\n\t\tfor (int yo = -1; yo <= 1; ++yo) {\n            \/\/Floor our vec2 and add an offset to create our point\n\t\t\tvec2 tp = floor(p) + vec2(xo, yo);\n            \/\/Calculate the minimum distance for this grid point\n            \/\/Mix in the noise value too!\n\t\t\td = min(d, length2(p - tp - noise(tp)));\n\t\t}\n\t}\n\treturn 3.0*exp(-4.0*abs(2.5*d - 1.0));\n}\n\nfloat fworley(vec2 p) {\n    \/\/Stack noise layers \n\treturn sqrt(sqrt(sqrt(\n\t\tworley(p*5.0 + 0.05*iGlobalTime) *\n\t\tsqrt(worley(p * 50.0 + 0.12 + -0.1*iGlobalTime)) *\n\t\tsqrt(sqrt(worley(p * -10.0 + 0.03*iGlobalTime))))));\n}\n      \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    \/\/Calculate an intensity\n    float t = fworley(uv * iResolution.xy \/ 1500.0);\n    \/\/Add some gradient\n    t*=exp(-length2(abs(0.7*uv - 1.0)));\t\n    \/\/Make it blue!\n    fragColor = vec4(t * vec3(0.1, 1.1*t, pow(t, 0.5-t)), 1.0);\n}\n\n","name":"","description":"","type":"image"}]}}