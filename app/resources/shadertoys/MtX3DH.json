{"Shader":{"ver":"0.1","info":{"id":"MtX3DH","date":"1421574561","viewed":321,"name":"Parthenon","username":"dr2","description":"An alternative Parthenon, newly built (use the mouse to help look around).","likes":4,"published":3,"flags":0,"tags":["raymarching","reflection","fire","temple"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Parthenon\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec2 Hashv2f (float p)\n{\n  return fract (sin (p + cHashA4.xy) * cHashM);\n}\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nvec4 Hashv4v3 (vec3 p)\n{\n  const vec3 cHashVA3 = vec3 (37.1, 61.7, 12.4);\n  const vec3 e = vec3 (1., 0., 0.);\n  return fract (sin (vec4 (dot (p + e.yyy, cHashVA3), dot (p + e.xyy, cHashVA3),\n     dot (p + e.yxy, cHashVA3), dot (p + e.xxy, cHashVA3))) * cHashM);\n}\n\nfloat Noiseff (float p)\n{\n  float i, f;\n  i = floor (p);  f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec2 t = Hashv2f (i);\n  return mix (t.x, t.y, f);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3a (vec3 p)\n{\n  vec3 i, f;\n  i = floor (p);  f = fract (p);\n  f *= f * (3. - 2. * f);\n  vec4 t1 = Hashv4v3 (i);\n  vec4 t2 = Hashv4v3 (i + vec3 (0., 0., 1.));\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n              mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm3 (vec3 p)\n{\n  const mat3 mr = mat3 (0., 0.8, 0.6, -0.8, 0.36, -0.48, -0.6, -0.48, 0.64);\n  float f, a, am, ap;\n  f = 0.;  a = 0.5;\n  am = 0.5;  ap = 4.;\n  p *= 0.5;\n  for (int i = 0; i < 6; i ++) {\n    f += a * Noisefv3a (p);\n    p *= mr * ap;  a *= am;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrFlatCylDf (vec3 p, float rhi, float rlo, float h)\n{\n  return max (length (p.xy - vec2 (rhi *\n     clamp (p.x \/ rhi, -1., 1.), 0.)) - rlo, abs (p.z) - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nint idObj;\nvec3 qHit, fCylPos, sunDir;\nfloat tCur, fCylRad, fCylLen, flmFlkr;\nconst float dstFar = 70.;\nbool tryFlm;\nconst int idLogs = 1, idCoal = 2, idFCyl = 3, idBase = 11, idCol = 12,\n   idColEnd = 13, idRoof = 14, idRoofV = 15, idBall = 16, idPool = 17,\n   idGal = 18, idAltr = 19, idPost = 20;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float cloudFac, w, f;\n  if (rd.y > 0.) {\n    ro.x += 0.1 * tCur;\n    p = 0.05 * (rd.xz * (70. - ro.y) \/ rd.y + ro.xz);\n    w = 0.8;  f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);  w *= 0.5;  p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.3, 0., 1.);\n    f = max (dot (rd, sunDir), 0.);\n    col =  mix (vec3 (0.2, 0.3, 0.55) + 0.2 * pow (1. - rd.y, 5.) +\n       (0.35 * pow (f, 6.) + 0.65 * min (pow (f, 256.), 0.3)),\n       vec3 (0.85), cloudFac);\n  } else {\n    p = 0.1 * (rd.xz * (10. - ro.y) \/ rd.y + ro.xz);\n    w = 1.;  f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);  w *= 0.7;  p *= 2.5;\n    }\n    col = mix ((1. + min (f, 1.)) * vec3 (0.15, 0.2, 0.15),\n       vec3 (0.2, 0.3, 0.55) + 0.2, pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nfloat BldgDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, da, db, wr;\n  q = p;\n  d = PrBoxDf (q, vec3 (8.6, 0.101, 12.6));\n  q.y -= 0.3;\n  d = max (min (d, PrBoxDf (q, vec3 (8.2, 0.201, 12.2))),\n     - PrBoxDf (q, vec3 (2., 0.25, 6.)));\n  if (d < dHit) { dHit = d;  idObj = idBase;  qHit = q; }\n  q.y -= 5.52;\n  d = max (PrBoxDf (q, vec3 (7.5, 0.05, 11.5)),\n     - PrBoxDf (q, vec3 (2.5, 5., 6.5)));\n  q.xz = mod (q.xz + vec2 (1.), 2.) - 1.;\n  d = max (d, - PrBoxDf (q, vec3 (0.5, 5., 0.5)));\n  if (d < dHit) { dHit = d;  idObj = idGal;  qHit = q; }\n  q = p;  q.y -= 0.4;\n  d = PrBoxDf (q, vec3 (2., 0.01, 6.));\n  if (d < dHit) { dHit = d;  idObj = idPool;  qHit = q; }\n  q = p;  q.y -= 1.;\n  db = max (PrBoxDf (q, vec3 (8., 4.9, 12.)),\n     - PrBoxDf (q, vec3 (2., 10., 6.)));\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y -= 3.14;\n  wr = q.y \/ 2.36;\n  d = max (PrCylDf (q.xzy, 0.3 * (1.05 - 0.05 * wr * wr), 2.36), db);\n  if (d < dHit) { dHit = d;  idObj = idCol;  qHit = q; }\n  q = p;  q.xz = mod (q.xz, 2.) - 1.;  q.y = abs (q.y - 3.14) - 2.43;\n  d = PrCylDf (q.xzy, 0.4, 0.07);\n  q.y -= 0.14;\n  d = max (min (d, PrBoxDf (q, vec3 (0.5, 0.07, 0.5))), db);\n  if (d < dHit) { dHit = d;  idObj = idColEnd;  qHit = q; }\n  q = p;  q.x = abs (q.x) - 3.;  q.y -= 8.2;\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  d = PrBoxDf (q, vec3 (6., 0.07, 12.3));\n  q.x += 0.4;  q.xz = mod (q.xz, 2.) - 1.;\n  d = max (d, - PrBoxDf (q, vec3 (0.5, 5., 0.5)));\n  if (d < dHit) { dHit = d;  idObj = idRoof;  qHit = q; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (4.1, 7.68, 11.6);\n  d = PrBoxDf (q, vec3 (4.3, 1.9, 0.1));\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  q.xy -= vec2 (-0.4, -2.);\n  d = max (d, PrBoxDf (q, vec3 (4.3, 1.9, 0.1)));\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (2.89, 7.7, 11.6);\n  da = PrBoxDf (q, vec3 (3.2, 1.4, 1.));\n  q.xy = Rot2D (q.xy, 0.15 * pi);\n  q.xy -= vec2 (-0.25, -1.5);\n  d = max (d, - max (da, PrBoxDf (q, vec3 (3.2, 1.4, 1.))));\n  if (d < dHit) { dHit = d;  idObj = idRoofV;  qHit = q; }\n  q = p;  q.y -= 7.7;  q.z = abs (q.z) - 11.6;\n  d = PrCylDf (q.xzy, 0.09, 1.4);\n  if (d < dHit) { dHit = d;  idObj = idRoofV;  qHit = q; }\n  d = PrSphDf (q, 0.4);\n  if (d < dHit) { dHit = d;  idObj = idBall;  qHit = q; }\n  q = p;  q.xz = abs (q.xz);  q -= vec3 (8.5, 0.6, 12.5);\n  d = PrCylDf (q.xzy, 0.05, 0.5);\n  if (d < dHit) { dHit = d;  idObj = idPost;  qHit = q; }\n  q.y -= 0.7;\n  d = PrSphDf (q, 0.2);\n  if (d < dHit) { dHit = d;  idObj = idBall;  qHit = q; }\n  q = p;  q.y -= 1.5;  \n  d = max (max (PrSphDf (q, 0.78), -0.01 + q.y), -0.3 - q.y);\n  q.y -= -0.7;\n  d = min (d, PrCylDf (q.xzy, 0.15, 0.42));\n  if (d < dHit) { dHit = d;  idObj = idAltr;  qHit = q; }\n  return dHit;\n}\n\nfloat FireDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.x = abs (q.x) - 0.3;\n  q.y -= fCylPos.y - fCylLen + 0.09;\n  d = PrCapsDf (q, 0.12 - 0.04 * Noisefv3a (15. * p), 0.5);\n  if (d < dHit) { dHit = d;  qHit = p;  idObj = idLogs; }\n  q = p;  q.y -= fCylPos.y - fCylLen + 0.25;\n  q.z = abs (q.z) - 0.25;\n  d = PrCapsDf (q.zyx, 0.12 - 0.04 * Noisefv3a (15. * p), 0.45);\n  if (d < dHit) { dHit = d;  qHit = p;  idObj = idLogs; }\n  q = p;  q.x = abs (q.x) - 0.2;\n  q.y -= fCylPos.y - fCylLen + 0.43;\n  d = PrCapsDf (q, 0.12 - 0.04 * Noisefv3a (15. * p), 0.4);\n  if (d < dHit) { dHit = d;  qHit = p;  idObj = idLogs; }\n  q = p;  q.y -= fCylPos.y - fCylLen - 0.01;\n  d = PrCylDf (q.xzy, fCylRad, 0.01);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idCoal; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  float dHit, d;\n  dHit = dstFar;\n  if (tryFlm) {\n    q = p;  q -= fCylPos;\n    d = PrCylDf (q.xzy, fCylRad, fCylLen);\n    if (d < dHit) { dHit = d;  idObj = idFCyl;  qHit = q; }\n    q = p;  q.y -= 0.4;\n    d = PrBoxDf (q, vec3 (2., 0.01, 6.));\n    if (d < dHit) { dHit = d;  idObj = idPool;  qHit = q; }\n  } else {\n    dHit = 0.9 * BldgDf (p, dHit);\n    dHit = FireDf (p, dHit);\n  }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd, float dLight)\n{\n  float sh = 1.;\n  float d = 0.15;\n  for (int i = 0; i < 30; i++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += max (0.15, 0.01 * d);\n    if (h < 0.01 || d > dLight) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 FireSrcCol (vec3 n)\n{ \/\/ Inspired by Dave_H's \"Campfire\", but implementation differs.\n  vec3 col, q;\n  float f, di, gl, bri;\n  if (idObj == idLogs) {\n    n = VaryNf (0.4 * qHit, n, 5.);\n    q = 45. * qHit;  q.y -= 0.8 * tCur;\n    f = Noisefv3a (q);   \n    f += Noisefv3a (10. * qHit) + 0.4 * Noisefv3a (123. * qHit);\n    f = 0.01 * pow (abs (f), 13.) + 0.7 * max (1. - 0.11 * dot (qHit, qHit), 0.);\n    bri = max (dot (normalize (vec3 (0., 0.65 + flmFlkr, 0.) - qHit), n), 0.4);\n    col = bri * bri * f * vec3 (0.5, 0.1, 0.);\n    di = 0.;\n    gl = 0.;\n    for (int i = 0; i < 3; i ++) {\n      di += 0.02;\n      gl += max (0., di - 1.2 * ObjDf (qHit + di * n));\n    }\n    col += flmFlkr * flmFlkr * clamp (2. * gl, 0., 1.) * vec3 (1., 0.3, 0.05);\n  } else if (idObj == idCoal) {\n    q.xz = 20. * qHit.xz;  q.y = tCur;\n    f = Noisefv3a (11. * q);\n    q.y = 0.04 * tCur;\n    f += Noisefv3a (3. * q);\n    bri = 3. - 0.5 * flmFlkr;\n    col = 0.1 * bri * bri * pow (f, 4.) * vec3 (0.7, 0.05, 0.) *\n       (1.1 - pow (length (qHit.xz) \/ fCylRad, 4.));\n  }\n  return col;\n}\n\nfloat FireLum (vec3 ro, vec3 rd, float dHit)\n{\n  vec3 p, q, dp;\n  float g, s, fh, fr, f;\n  p = ro;\n  dp = (fCylRad \/ 40.) * rd;\n  g = 0.;\n  for (int i = 0; i < 40; i ++) {\n    p += dp;\n    s = distance (p.xz, fCylPos.xz);\n    q = 4. * p;  q.y -= 6. * tCur;\n    fh = 0.5 * max (1. - (p.y - fCylPos.y) \/ fCylLen, 0.);\n    fr = max (1. - s \/ fCylRad, 0.);\n    f = Fbm3 (q);\n    q = 7. * p;  q.y -= 8.5 * tCur;\n    f += Fbm3 (q);\n    g += max (0.5 * fr * fr * fh * (f * f - 0.6), 0.);\n    q = 23. * p;  q.y -= 11. * tCur;\n    g += 1000. * pow (abs (Noisefv3a (q) - 0.11), 64.);\n    if (s > fCylRad || p.y < fCylPos.y - 0.99 * fCylLen || g > 1.) break;\n  }\n  return g;\n}\n\nvec3 ObjCol (vec3 n)\n{\n  vec3 col;\n  if (idObj == idBase) col = vec3 (0.8, 0.8, 0.7);\n  else if (idObj == idCol || idObj == idColEnd) col = vec3 (0.7, 0.8, 0.6);\n  else if (idObj == idRoof) col = vec3 (0.8, 0.1, 0.1) *\n      (1. - 0.6 * SmoothBump (0.98, 1.02, 0.01, mod (qHit.z, 2.))) *\n      (1. - 0.6 * SmoothBump (0.98, 1.02, 0.01, mod (qHit.x, 2.)));\n  else if (idObj == idRoofV) col = vec3 (0.8, 0.1, 0.1);\n  else if (idObj == idPost) col = vec3 (0.8, 0.1, 0.1);\n  else if (idObj == idBall) col = vec3 (1., 1., 0.1);\n  else if (idObj == idGal) col = vec3 (0.1, 0.3, 0.1);\n  else if (idObj == idAltr) col = vec3 (0.6, 0.5, 0.2);\n  return col;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 roo, rdo, objCol, flmCol, foVec, col, vn;\n  float dstHit, dstFlm, dstHitR, dstFlmR, fIntens, fLum, lDist, sh, bk,\n     dif, ltExt, reflFac, a, f;\n  int idObjT;\n  bool flmRefl, objRefl;\n  fCylPos = vec3 (0., 3.53, 0.);\n  fCylRad = 0.8;\n  fCylLen = 2.;\n  roo = ro;\n  rdo = rd;\n  idObj = -1;\n  tryFlm = true;\n  dstFlm = ObjRay (roo, rdo);\n  flmRefl = false;\n  if (dstFlm < dstFar && idObj == idPool) {\n    dstFlmR = dstFlm;\n    roo += dstFlm * rdo;\n    vn = ObjNf (roo);\n    rdo = reflect (rdo, vn);\n    roo += 0.01 * rdo;\n    idObj = -1;\n    dstFlm = ObjRay (roo, rdo);\n    flmRefl = true;\n  }\n  fIntens = (dstFlm < dstFar) ? FireLum (roo + dstFlm * rdo, rdo, dstFlm) : 0.;\n  flmFlkr = Noiseff (tCur * 64.);\n  idObj = -1;\n  tryFlm = false;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  objRefl = false;\n  reflFac = 1.;\n  if (dstHit < dstFar && idObj == idPool) {\n    dstHitR = dstHit;\n    ro += dstHit * rd;\n    vn = ObjNf (ro);\n    rd = reflect (rd, VaryNf (0.4 * qHit, vn, 0.1));\n    ro += 0.01 * rd;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    reflFac = 0.8;\n    objRefl = true;\n  }\n  idObjT = idObj;\n  if (dstHit >= dstFar) col = 0.1 * BgCol (ro, rd);\n  else {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    if (idObj == idBase) vn = VaryNf (10. * qHit, vn, 0.4);\n    if (idObj == idCol) {\n      a = 0.5 - mod (12. * (atan (qHit.x, qHit.z) \/ (2. * pi) + 0.5), 1.);\n      vn.xz = Rot2D (vn.xz, -0.1 * pi * sin (pi * a));\n    }\n    if (idObj == idCol || idObj == idColEnd) vn = VaryNf (20. * qHit, vn, 0.3);\n    else if (idObj == idAltr) vn = VaryNf (10. * qHit, vn, 1.);\n    idObj = idObjT;\n    if (idObj == idLogs || idObj == idCoal) col = FireSrcCol (vn);\n    else {\n      objCol = ObjCol (vn);\n      foVec = fCylPos - ro;\n      lDist = length (foVec);\n      foVec \/= lDist;\n      sh = ObjSShadow (ro, foVec, lDist);\n      fLum = 5. * sh * (0.6 + 0.4 * flmFlkr) \/ pow (lDist, 1.5) *\n         max (dot (foVec, vn), 0.);\n      dif = max (dot (vn, sunDir), 0.);\n      bk = max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.);\n      ltExt = 0.1 * (0.4 * (1. + bk) + max (0., dif));\n      col = objCol * (ltExt * vec3 (1.) + fLum * vec3 (1., 0.3, 0.2));\n    }\n  }\n  idObj = idObjT;\n  if (dstHit < dstFar && idObj == idBall) col *= 3.;\n  if (! (dstHit < dstFar && (idObj == idCoal || idObj == idAltr) ||\n     flmRefl == objRefl && dstHit < dstFlm ||\n     objRefl && ! flmRefl && dstHitR < dstFlm ||\n     ! objRefl && flmRefl && dstHit < dstFlmR)) {\n    f = clamp (0.7 * fIntens, 0., 1.);\n    f *= f;\n    f *= f;\n    flmCol = 1.5 * mix (vec3 (1., 0.2, 0.2), vec3 (1., 1., 0.5), f);\n    fIntens *= fIntens;\n    if (idObj == idLogs) fIntens *= 0.03;\n    col = mix (col, flmCol, min (fIntens, 1.));\n  }\n  col *= reflFac;\n  return col;\n}\n\nvec3 SetVuPt (float t)\n{\n  vec4 va, vb;\n  vec3 wPt[11], ro;\n  float tp[11], vel, tVu;\n  wPt[0] = vec3 (0., 8., -20.);     wPt[1] = vec3 (0., 2., -12.);\n  wPt[2] = vec3 (-0.5, 2.5, -6.2);  wPt[3] = vec3 (-2.6, 3., -6.2);\n  wPt[4] = vec3 (-2.6, 4., 8.1);    wPt[5] = vec3 (0., 5.6, 8.9);\n  wPt[6] = vec3 (2.6, 4., 8.1);     wPt[7] = vec3 (2.6, 3., -6.2);\n  wPt[8] = wPt[2];  wPt[9] = wPt[1];  wPt[10] = wPt[0];\n  tp[0]  = 0.;\n  tp[1]  = tp[0] + distance (wPt[1],  wPt[0]); \n  tp[2]  = tp[1] + distance (wPt[2],  wPt[1]); \n  tp[3]  = tp[2] + distance (wPt[3],  wPt[2]); \n  tp[4]  = tp[3] + distance (wPt[4],  wPt[3]); \n  tp[5]  = tp[4] + distance (wPt[5],  wPt[4]); \n  tp[6]  = tp[5] + distance (wPt[6],  wPt[5]); \n  tp[7]  = tp[6] + distance (wPt[7],  wPt[6]); \n  tp[8]  = tp[7] + distance (wPt[8],  wPt[7]); \n  tp[9]  = tp[8] + distance (wPt[9],  wPt[8]); \n  tp[10] = tp[9] + distance (wPt[10], wPt[9]);\n  vel = 0.5;\n  tVu = mod (t, tp[10] \/ vel) * vel;\n  if (tVu < tp[5]) {\n    if (tVu < tp[1])      { va = vec4 (wPt[0], tp[0]);  vb = vec4 (wPt[1], tp[1]); }\n    else if (tVu < tp[2]) { va = vec4 (wPt[1], tp[1]);  vb = vec4 (wPt[2], tp[2]); }\n    else if (tVu < tp[3]) { va = vec4 (wPt[2], tp[2]);  vb = vec4 (wPt[3], tp[3]); }\n    else if (tVu < tp[4]) { va = vec4 (wPt[3], tp[3]);  vb = vec4 (wPt[4], tp[4]); }\n    else                  { va = vec4 (wPt[4], tp[4]);  vb = vec4 (wPt[5], tp[5]); }\n  } else {\n    if (tVu < tp[6])      { va = vec4 (wPt[5], tp[5]);  vb = vec4 (wPt[6], tp[6]); }\n    else if (tVu < tp[7]) { va = vec4 (wPt[6], tp[6]);  vb = vec4 (wPt[7], tp[7]); }\n    else if (tVu < tp[8]) { va = vec4 (wPt[7], tp[7]);  vb = vec4 (wPt[8], tp[8]); }\n    else if (tVu < tp[9]) { va = vec4 (wPt[8], tp[8]);  vb = vec4 (wPt[9], tp[9]); }\n    else                  { va = vec4 (wPt[9], tp[9]);  vb = vec4 (wPt[10], tp[10]); }\n  }\n  ro = mix (va.xyz, vb.xyz, (tVu - va.w) \/ (vb.w - va.w));\n  return ro;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ iResolution.xy - 0.5;\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  float zmFac, hLkAt, f;\n  sunDir = normalize (vec3 (1., 1., 1.));\n  hLkAt = 3.;\n  zmFac = 1.4;\n  if (mPtr.z <= 0.) {\n    ro = 0.5 * (SetVuPt (tCur + 0.2) + SetVuPt (tCur - 0.2));\n  } else {\n    ro = SetVuPt (mod (150. * (mPtr.x + 0.45), 1000.));\n    hLkAt += 5. * mPtr.y;\n  }\n  vd = normalize (vec3 (0., hLkAt, 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, zmFac));\n  vec3 col = ShowScene (ro, rd);\n  col = sqrt (clamp (col, 0., 1.));\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}