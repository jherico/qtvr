{"Shader":{"ver":"0.1","info":{"id":"4d3GWS","date":"1451910472","viewed":276,"name":"Gray Scott Reaction Diffusion","username":"Eybor","description":"An implementation of Gray Scott Model of Reaction Diffusion using multipass shaders . When your display is resized you can use the space bar in order for the image to be resized too.","likes":13,"published":3,"flags":48,"tags":["2d","multipass"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n        \n\tfragColor = texture2D(iChannel0, uv);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture2D(iChannel0, vec2(0.)).w == 0. || texture2D(iChannel3,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x\/4. && fragCoord.x < 3.*iResolution.x\/4. &&\n           fragCoord.y > iResolution.y\/4. && fragCoord.y < 3.*iResolution.y\/4.)\n        {\n            fragColor.xyz = vec3(.5);\n        }\n        else\n        { \n            fragColor.xyz = vec3(1.);\n        }\n    }\n\telse\n    {\n        vec3 laplacian = vec3(texture2D(iChannel0, (fragCoord-vec2(0., 1.))\/iResolution.xy) +\n                         \t  texture2D(iChannel0, (fragCoord-vec2(1., 0.))\/iResolution.xy) -\n                         \t  4.*texture2D(iChannel0, fragCoord\/iResolution.xy) +\n            \t\t\t \t  texture2D(iChannel0, (fragCoord+vec2(1., 0.))\/iResolution.xy) +\n            \t\t\t \t  texture2D(iChannel0, (fragCoord+vec2(0., 1.))\/iResolution.xy));\n                \n        vec3 vu = texture2D(iChannel0, fragCoord\/iResolution.xy).xyz;\n        vec3 vv = texture2D(iChannel1, fragCoord\/iResolution.xy).xyz;\n        \n        vec4 params = texture2D(iChannel2, vec2(0.));\n        \n        fragColor.xyz = vu + params.z*laplacian+params.x*(1.-vu)-vu*vv*vv;\n    }\n    fragColor.w = 1.;\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":259,"src":"\/presets\/previz\/buffer02.png","ctype":"buffer","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    if(texture2D(iChannel1, vec2(0.)).w == 0. || texture2D(iChannel3,  vec2(0.126953125, .25)).x > 0.)\n   \t{\n        if(fragCoord.x > iResolution.x\/4. && fragCoord.x < 3.*iResolution.x\/4. &&\n           fragCoord.y > iResolution.y\/4. && fragCoord.y < 3.*iResolution.y\/4.)\n        {\n            fragColor.xyz = vec3(.25);\n        }\n        else\n        {\n            fragColor.xyz = vec3(0.);\n        }\n    }\n    else\n    {\n        vec3 laplacian = vec3(texture2D(iChannel1, (fragCoord-vec2(0., 1.))\/iResolution.xy) +\n                         \t  texture2D(iChannel1, (fragCoord-vec2(1., 0.))\/iResolution.xy) -\n                         \t  4.*texture2D(iChannel1, fragCoord\/iResolution.xy) +\n            \t\t\t \t  texture2D(iChannel1, (fragCoord+vec2(1., 0.))\/iResolution.xy) +\n            \t\t\t \t  texture2D(iChannel1, (fragCoord+vec2(0., 1.))\/iResolution.xy));\n\n        vec3 vu = texture2D(iChannel0, fragCoord\/iResolution.xy).xyz;\n        vec3 vv = texture2D(iChannel1, fragCoord\/iResolution.xy).xyz;\n        \n        vec4 params = texture2D(iChannel2, vec2(0.));\n        \n        fragColor.xyz = vv + params.w*laplacian-(params.x+params.y)*vv+vu*vv*vv;\n    }\n    fragColor.w = 1.;\n}","name":"","description":"","type":"buffer"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    fragColor = vec4(.04,.06,.2,.1);\n}","name":"","description":"","type":"buffer"}]}}