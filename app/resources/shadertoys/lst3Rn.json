{"Shader":{"ver":"0.1","info":{"id":"lst3Rn","date":"1447884462","viewed":429,"name":"goingup","username":"macbooktall","description":"A mod of @netgrind's beautiful fractal https:\/\/www.shadertoy.com\/view\/ltjGzd<br\/>Based on iq's raymarch primitives https:\/\/www.shadertoy.com\/view\/Xds3zN","likes":17,"published":3,"flags":0,"tags":["fractal"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/forked By Cale Bradbury, 2015 from https:\/\/www.shadertoy.com\/view\/ltjGzd\n\n\/\/fuck yeah, mirror that shit\n#define MIRROR\n\n\/\/ Base ray trace code via https:\/\/www.shadertoy.com\/view\/Xds3zN by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\nfloat opS( float d1, float d2 )\n{\n    return max(-d2,d1);\n}\n\nvec3 opRep( vec3 p, vec3 c )\n{\n    return mod(p,c)-0.5*c;\n}\n\nfloat qbox( vec3 p, float s )\n{\n  return length(max(abs(p)-vec3(s,s,s),0.0));\n}\n\nfloat box(vec3 p, vec3 b){ \n    p = abs(p) - b;\n    return max(p.x, max(p.y,p.z));\n}\n\nvec2 map( in vec3 pos )\n{\n    float size = .65;\n    \/\/pos.z = mod(pos.z,size*5.)-0.5*size*5.;\n\tpos.y = mod(pos.y,size)-0.5*size;\n    float res = qbox(pos,size);\n\n    pos+=size;\n    \n    float t = iGlobalTime;\n    for(float i = 0.0; i<3.;i++){\n        size \/= 3.0;\n        \n        float b = box(opRep(pos,vec3(size*5.,size*5.,0)),vec3(size,size,10.));\n        res = opS(res,b);\n        b = box(opRep(pos,vec3(size*5.25,0.,size*5.)),vec3(size,10.,size));\n        res = opS(res,b);\n        b = box(opRep(pos,vec3(0.,size*2.,size*6.)),vec3(10.,size,size));\n        res = opS(res,b);\n    }\n\t\n    return vec2(res,1.0);\n}\n\nvec2 castRay( in vec3 ro, in vec3 rd )\n{\n    float tmin = 0.;\n    float tmax = 120.0;\n    \n\tfloat precis = 0.001;\n    float t = tmin;\n    float m = 0.0;\n    for( int i=0; i<120; i++ )\n    {\n\t    vec2 res = map( ro+rd*t );\n        if( res.x<precis || t>tmax ) break;\n        t += res.x;\n\t    m = res.y;\n    }\n\n    if( t>tmax ) m=-1.;\n    return vec2( t, m );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, in float mint, in float tmax )\n{\n\tfloat res = 1.0;\n    float t = mint;\n    for( int i=0; i<4; i++ )\n    {\n\t\tfloat h = map( ro + rd*t ).x;\n        res = min( res, 8.0*h\/t );\n        t += clamp( h, 0.02, 0.10 );\n        if( h<0.001 || t>tmax ) break;\n    }\n    return clamp( res, 0.0, 1.0 );\n\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.001, 0.0, 0.0 );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor )\n{\n\tfloat occ = 0.0;\n    float sca = 1.0;\n    for( int i=0; i<5; i++ )\n    {\n        float hr = 0.01 + 0.12*float(i)\/4.0;\n        vec3 aopos =  nor * hr + pos;\n        float dd = map( aopos ).x;\n        occ += -(dd-hr)*sca;\n        sca *= 0.95;\n    }\n    return clamp( 1.0 - 3.0*occ, 0.0, 1.0 );    \n}\n\nvec3 render( in vec3 ro, in vec3 rd )\n{ \n    vec3 col = vec3(1.0);\n    vec2 res = castRay(ro,rd);\n    float t = res.x;\n\tfloat m = res.y;\n    \n    if( m>-0.5 )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n        vec3 ref = reflect( rd, nor );\n        \n        \/\/ material        \n        float occ = calcAO( pos, nor );\n\t\tcol = occ*smoothstep(vec3(0.8, 0.2, 0.2)*(1.0-occ), vec3(0.2, 0.8, .8)*occ, vec3(occ));\n    }\n\nreturn vec3( clamp(col,0.0,1.0) );\n}\n\nmat3 setCamera( in vec3 ro, in vec3 ta, float cr )\n{\n\tvec3 cw = normalize(ta-ro);\n\tvec3 cp = vec3(sin(cr), cos(cr),0.0);\n\tvec3 cu = normalize( cross(cw,cp) );\n\tvec3 cv = normalize( cross(cu,cw) );\n    return mat3( cu, cv, cw );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy\/iResolution.xy;\n    vec2 p = -1.0+2.0*q;\n\tp.x *= iResolution.x\/iResolution.y;\n    #ifdef MIRROR\n    p.x = -abs(p.x);\n    #endif\n\t\t \n\tfloat time = 15.0 + iGlobalTime*.5;\n\tfloat camDist = 3.;\n\t\/\/ camera\t\n\tvec3 ro = vec3(-.02, iGlobalTime*.1, 0.);\n    \/\/vec3( -0.5+camDist*cos(0.1*time), 5.0, 0.5 + camDist*sin(0.1*time) );\n\tvec3 ta = ro + vec3(-1., -1., -1. );\n\t\n\t\/\/ camera-to-world transformation\n\/\/    mat3 ca = setCamera( ro, ta, 56.54 );\n    mat3 ca = setCamera( ro, ta, 0. );\n    \/\/ ray direction\n\tvec3 rd = ca * normalize( vec3(p.xy,5.) );\n\n    \/\/ render\t\n    vec3 col = render( ro, rd);\n    col += (vec3(1.)*p.y)*0.35;\n\n    fragColor=vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}