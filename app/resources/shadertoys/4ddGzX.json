{"Shader":{"ver":"0.1","info":{"id":"4ddGzX","date":"1451912142","viewed":80,"name":"Truchet Tiles, Smith","username":"4rknova","description":"Simple truchet Smith pattern.","likes":1,"published":3,"flags":0,"tags":["truchet","smith"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ by Nikos Papadopoulos, 4rknova \/ 2016\n\/\/ Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define ZOOM 3.\n#define WGHT .04\n\nfloat hash(vec2 p)\n{\n    return fract(sin(dot(p,vec2(127.1,311.7))) * 43758.5453123);\n}\n\nfloat df_circ(in vec2 p, in vec2 c, in float r)\n{\n    return abs(r - length(p - c));\n}\n\nfloat sharpen(in float d, in float w)\n{\n    float e = 1. \/ min(iResolution.y , iResolution.x);\n    return 1. - smoothstep(-e, e, d - w);\n}\n\nfloat df_pattern(vec2 st, vec2 uv)\n{\n    float l1 = sharpen(df_circ(uv, vec2(0), .5), WGHT);\n    float l2 = sharpen(df_circ(uv, vec2(1), .5), WGHT);\n    return max(l1,l2);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 uv = (fragCoord.xy \/ iResolution.xy * 2. - 1.) * ZOOM;\n    uv.x *= iResolution.x \/ iResolution.y;\n    \n    vec2 st = floor(uv);\n    uv = fract(uv);\n \n    if (hash(st * floor(iGlobalTime)) >.7) uv.x = 1. - uv.x;\n    vec3 col = vec3(df_pattern(st, uv));\n\tfragColor = vec4(col, 1);\n}","name":"","description":"","type":"image"}]}}