{"Shader":{"ver":"0.1","info":{"id":"4sdGDj","date":"1452220838","viewed":2812,"name":"Punch Keys!","username":"elias","description":"Press numbers 1 through 4 (or change the amount of columns). You can also change the difficulty in Buf A.<br\/><br\/>If the audio won't load: open iChannel2 in Buf A, click on the SoundCloud button, press enter and then play with the audio controls until it works.","likes":27,"published":3,"flags":112,"tags":["game","guitar","hero"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ TODO\n\/\/ - fix row scaling\/alignment\n\/\/ - prevent cheating by holding down the keys\n\/\/ - maybe add longer\/stretched beats\n\n\/\/ Font by Flyguy (Bit Packed Sprites)\n\/\/ https:\/\/www.shadertoy.com\/view\/XtsGRl\n\n#define S 0.8 \/\/ scaling\n#define N 4.0 \/\/ columns (change in buffers too)\n#define M 8.0 \/\/ rows    (change in buffers too)\n\n\/\/#define ORTHOGRAPHIC_VIEW\n\n#ifndef ORTHOGRAPHIC_VIEW\n    #define NEAR 0.05\n    #define FAR  1.8\n#else\n    #define NEAR 0.0\n    #define FAR  100.\n#endif\n\n#define T sound_info.x\n#define load(a,b) texture2D(b,(fract(a.x)==0.1?vec2(fragCoord.x,a.y+0.5):(a+0.5))\/iResolution.xy)\n\nconst vec2 bufA_sound_info_uv = vec2(0.0,0);\nconst vec2 bufA_sound_freq_uv = vec2(0.1,1);\n\nfloat sdLine(vec2 p, vec2 a, vec2 b, float r)\n{\n    vec2 ab = b-a;\n    vec2 ap = p-a;\n    return length(ap-ab*clamp(dot(ap,ab)\/dot(ab,ab),0.,1.))-r;\n}\n\nfloat sdBox(vec2 p, vec2 q, vec2 s)\n{\n    vec2 d = abs(p-q)-s;\n    return min(max(d.x,d.y),0.0)+length(max(d,0.0));\n}\n\n\/\/ http:\/\/lolengine.net\/blog\/2013\/07\/27\/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 \/ 3.0, 1.0 \/ 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 uva = (2.*fragCoord.xy - iResolution.xy)\/iResolution.yy;\n    float a = iResolution.x\/iResolution.y;\n    \n    float d = 1e10;\n    float n = 0.0;\n    \n    float dboard = 1e10;\n    float dblack = 1e10;\n    float dfrets = 1e10;\n    \n    vec4 sound_info  = load(bufA_sound_info_uv, iChannel0);\n    float sound_freq = load(bufA_sound_freq_uv, iChannel0).x;\n    \n    float cw = S\/N;\n    float cs = 1.-max(uv.y-NEAR,0.)\/(FAR-NEAR);\n\n    float top    = (FAR-0.5)*2.;\n    float bottom = (NEAR-0.5)*2.;\n    \n    \/\/ font\n    fragColor = vec4(texture2D(iChannel1,uv).x);\n    \n    \/\/ columns\n    for(float i = 0.; i < N; i++)\n    {\n        vec2 pa = vec2((2.*i-N+1.)*cw,bottom);\n        vec2 pb = vec2(0,top);\n        vec2 pc = vec2(pa.x*cs,pa.y+cw);\n        \n        dboard = min(dboard,d=sdLine(uva,pa,pb,cw*cs));\n        \n        \/\/ border\n        dblack = min(dblack,sdLine(vec2(abs(uva.x),uva.y),pa+vec2(cw,0),pb,cs*0.025));\n\n        \/\/ sockets\n        dblack = min(dblack, max(length(uva-pc)-cw*0.6,-(length(uva-pc)-cw*0.4)));\n        \n        if (dboard==d) { n = i; }\n    }\n    \n    \/\/ bridge\n    dboard = min(dboard,sdBox(uva,vec2(0,bottom-0.5\/N),vec2(S,0.5\/N)));\n\n    \/\/ border\/frets\n    {\n        float t = 1.\/(M+1.);\n        \n        dblack = min(dblack, sdBox(uva,vec2(0,bottom-cw),vec2(S+S\/N,cw)));\n        dfrets = sdLine(vec2(uv.x,mod((mod(uv.y,t)+T)\/t,1.)),vec2(0,0.5),vec2(a,0.5),cs*0.05);\n        dfrets = 1.-smoothstep(dfrets,dfrets+0.01,0.0);\n    \n        \/\/ key press indicator\n        if (texture2D(iChannel3,vec2(49.5+n,0.5)\/256.).x > 0.0)\n        {\n            vec2 p = vec2((n\/(N-1.)-0.5)*2.*cw*(N-1.)*cs,bottom)+vec2(0,cw);\n        \n            dblack = min(dblack,length(uva-p)-cw*cs*0.4);\n        }\n        \n        if (uva.y<bottom+2.*cw) { dfrets = 1.; }\n    }\n    \n    \/\/ beats\n    {\n        for(float i = 0.; i < N; i++)\n        {\n            \n            for(float j = 0.; j < M; j++)\n            {               \n                vec4 beat = load(vec2(j,i+3.),iChannel0);\n                if (beat.w == 0.0) { continue; }\n\n                float r = cw*(1.-max(uv.y-NEAR,0.)\/(FAR-NEAR));\n                vec2 pa = vec2((2.*i-N+1.)*r,bottom+cw);\n                vec2 pb = vec2(pa.x,top);\n\n                #ifdef ORTHOGRAPHIC_VIEW\n                pb.y = 1.-r;\n                #endif\n\n                dblack = min(dblack, length(uva-pb-(pa-pb)*(beat.x+T))-r*0.5);\n            }\n        }\n\n    }\n    \n    float f = 0.5*pow(abs(dboard\/0.1),0.2)*clamp(pow(uv.y+0.5,0.5),0.,1.);\n    vec3 bg = vec3((1.-sound_freq*0.5)>uv.y?f*0.5:f) -pow(length(uva*0.5),2.)*0.2;\/\/*(1.-pow(sound_info.y,5.));\n\n    \/\/ background\n    if (dboard>0.0)\n    {\n        fragColor.rgb += bg;\n        return;\n    }\n\n    float hit = texture2D(iChannel0,vec2(n+0.5,2.5)\/iChannelResolution[0].xy).x;\n    float fade = 1.-uv.y;\n    \n    vec3 col = hit < 0.01\n    ? hsv2rgb(vec3(mod(n\/N+0.2,1.),0.2,0.8))\n    : hsv2rgb(vec3(mod(n\/N+0.2,1.),0.2+hit,(0.8+hit)));\n    \n    dblack = 1.-smoothstep(dblack,dblack+0.01,0.0);\n    \n    fragColor.rgb += mix(col*dblack*dfrets,bg,1.-fade);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":3,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":1292,"src":"https:\/\/soundcloud.com\/helloworldhello\/mega-23-1","ctype":"musicstream","channel":2,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define N 4.0 \/\/ columns\n#define M 8.0 \/\/ rows\n#define D 0.6 \/\/ difficulty (0 = hardest, 1 = no beats at all)\n\n#define T iChannelTime[2]*0.5\n\n#define inside(a) (fragCoord.y-a.y == 0.5 && (fract(a.x) == 0.1 || fragCoord.x-a.x == 0.5))\n#define load(a,b) texture2D(b,(a+0.5)\/iResolution.xy)\n#define save(a,b) if(inside(a)){fragColor=b;return;}\n\nfloat noise(vec3 p){return fract(sin(dot(p,vec3(12.9898,78.233,128.852)))*43758.5453);}\n\nconst vec2 bufA_sound_info_uv = vec2(0.0,0);\nconst vec2 bufA_sound_freq_uv = vec2(0.1,1);\n\nvec4 makeBeat(vec2 coord)\n{\n    float x = -floor(T)-0.6-0.8\/N*0.5*(1.+floor(noise(vec3(coord\/M,T))+0.5)*2.+2.*coord.x);\n    float l = 1.0;\n    \n    return vec4(\n        x, \/\/ position\n        l, \/\/ length\n        0,\n        1  \/\/ visible\n    );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 uv = fragCoord.xy \/ iResolution.xy;\n    \n    fragColor = texture2D(iChannel0,uv);\n    \n    float amp = texture2D(iChannel2,vec2(uv.x,1)).x;\n\tfloat t = mod(T,0.2);\n    \n\tif (inside(bufA_sound_info_uv))\n    {\n    \tfragColor = vec4(T,amp,0,0);\n    }\n    \n    else if (inside(bufA_sound_freq_uv))\n    {\n    \tfragColor.x = texture2D(iChannel2,vec2(floor(uv.x*50.)\/50.,0)).x;\n    }\n    \n    \/\/ Hit fade\n    else if (fragCoord.y-0.5 == 2.0 && fragCoord.x-0.5 <= N)\n    {\n\t\tif(fragColor.x>0.01) { fragColor.x *= 0.95; }\n        \n        float key_press = texture2D(iChannel3, vec2(49.5+fragCoord.x-0.5,0.5)\/256.).x;\n        float x = -1e10;\n            \n        for(float i = 0.; i < M; i++)\n        {\n            vec4 beat = load(vec2(i,3.+fragCoord.x-0.5),iChannel0);\n            if (beat.w == 0.0) { continue; }\n            x = max(x,beat.x);\n        }\n            \n        float t = x+T;\n\n        if (t > 0.95 && t <= 1.0 && key_press > 0.0)\n        {\n            \/\/if (fragColor.x > 0.0)\n            {\n                fragColor.x = 1.0;\n                fragColor.y++;\n            }\n            \/\/else\n            \/\/{\n            \/\/    fragColor.x = 0.0;\n            \/\/}\n        }\n        \/\/else if (t > 0.8 && t <= 1.0 && key_press > 0.0)\n        \/\/{\n        \/\/    fragColor.x = -1.;\n        \/\/    fragColor.y = max(fragColor.y-1.,0.);\n        \/\/}\n    }\n    \n    \/\/ Beats\n    else if (fragCoord.y-0.5 >= 3.0 && fragCoord.y-0.5 <= N+3. && fragCoord.x-0.5 <= N)\n    {        \n        \/\/ Beat exists\n\t\tif (fragColor.w==1.0)\n        {\n            if (fragColor.x+T > 1.0)\n            {\n                fragColor.w = 0.0;\n            }\n        }\n        else if(pow(amp,2.)>D && floor(noise(vec3(uv,T))*N+3.5)==fragCoord.y-0.5)\n        {\n           fragColor = makeBeat(fragCoord+0.5); \n        }\n        \n    } else {\n        discard;\n    }\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define N 4.\n#define load(a,b) texture2D(b,(a+0.5)\/iResolution.xy)\n\n\/\/ ==================================================\n\/\/ Bit Packed Sprites by Flyguy\n\/\/ https:\/\/www.shadertoy.com\/view\/XtsGRl\n\n#define CHAR_SIZE vec2(3, 7)\n#define CHAR_SPACING vec2(4, 8)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n\/*\nTop left pixel is the most significant bit.\nBottom right pixel is the least significant bit.\n\n \u2588     010    \n\u2588 \u2588    101    \n\u2588 \u2588    101    \n\u2588\u2588\u2588 -> 111 -> 010 101 101 111 101 101 101 -> 712557\n\u2588 \u2588    101    \n\u2588 \u2588    101    \n\u2588 \u2588    101    \n*\/\n\n\/\/Automatically generated from a sprite sheet.\nfloat ch_sp = 0.0;\nfloat ch_a = 712557.0;\nfloat ch_b = 1760622.0;\nfloat ch_c = 706858.0;\nfloat ch_d = 1760110.0;\nfloat ch_e = 2018607.0;\nfloat ch_f = 2018596.0;\nfloat ch_g = 706922.0;\nfloat ch_h = 1498989.0;\nfloat ch_i = 1909911.0;\nfloat ch_j = 1872746.0;\nfloat ch_k = 1498477.0;\nfloat ch_l = 1198375.0;\nfloat ch_m = 1571693.0;\nfloat ch_n = 1760109.0;\nfloat ch_o = 711530.0;\nfloat ch_p = 711972.0;\nfloat ch_q = 711675.0;\nfloat ch_r = 1760621.0;\nfloat ch_s = 2018927.0;\nfloat ch_t = 1909906.0;\nfloat ch_u = 1497963.0;\nfloat ch_v = 1497938.0;\nfloat ch_w = 1498109.0;\nfloat ch_x = 1496429.0;\nfloat ch_y = 1496210.0;\nfloat ch_z = 2004271.0;\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_5 = 1985614.0;\nfloat ch_6 = 707946.0;\nfloat ch_7 = 1873042.0;\nfloat ch_8 = 709994.0;\nfloat ch_9 = 710250.0;\nfloat ch_0 = 711530.0;\nfloat ch_per = 2.0;\nfloat ch_que = 693378.0;\nfloat ch_exc = 599170.0;\nfloat ch_com = 10.0;\nfloat ch_scl = 65556.0;\nfloat ch_col = 65552.0;\nfloat ch_usc = 7.0;\nfloat ch_crs = 11904.0;\nfloat ch_dsh = 3584.0;\nfloat ch_ast = 21824.0;\nfloat ch_fsl = 304292.0;\nfloat ch_bsl = 1189001.0;\nfloat ch_lpr = 346385.0;\nfloat ch_rpr = 1118804.0;\nfloat ch_lba = 862355.0;\nfloat ch_rpa = 1647254.0;\n\nvec2 res = iResolution.xy \/ 4.0;\nvec2 print_pos = vec2(2,2);\n\n\/\/Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n\treturn floor(mod(floor(n \/ pow(2.0,floor(b))),2.0));   \n}\n\n\/\/Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \/\/Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    \/\/Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? extract_bit(spr, bit) : 0.0;\n\n}\n\n\/\/Prints a character and moves the print position forward by 1 character width.\nfloat char(float ch, vec2 uv)\n{\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n\/\/Returns the digit sprite for the given number.\nfloat get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return 0.0;\n}\n\n\/\/Prints out the given number starting at pos.\nfloat print_number(float number,vec2 pos, vec2 uv)\n{\n\tvec2 dec_pos = pos;\n    float result = 0.0;\n    \n\tfor(int i = 3;i >= 0;i--)\n    {\n        float clip = float(abs(number) > pow(10.0, float(i)) || i == 0); \/\/Clip off leading zeros.\n        \n        float digit = mod(number \/ pow(10.0, float(i)),10.0);\n        \n        result += sprite(get_digit(digit),CHAR_SIZE, uv - dec_pos) * clip;\n        \n        dec_pos.x += CHAR_SPACING.x * clip;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xx * 200.;\n    vec4 sound_info = load(vec2(0), iChannel0);\n    \n    float score = 0.0;\n    float col = 0.0;\n    \n    print_pos = vec2(res.y\/res.x,1)*res*0.05;\n    print_pos = floor(print_pos);\n       \n    col += char(ch_s,uv);\n    col += char(ch_c,uv);\n    col += char(ch_o,uv);\n    col += char(ch_r,uv);\n    col += char(ch_e,uv);\n    col += char(ch_col,uv);\n    \n    for (float i = 0.; i < N; i++)\n    {\n\t\tscore += texture2D(iChannel0,vec2(i+0.5,2.5)\/iChannelResolution[0].xy).y;\n    }\n    \n    col += print_number(score,print_pos,uv);\n    \n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"","description":"","type":"buffer"}]}}