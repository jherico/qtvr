{"Shader":{"ver":"0.1","info":{"id":"XljXzt","date":"1445897320","viewed":409,"name":"TazonCircles","username":"fernandoanton","description":"Circulos para tazon","likes":0,"published":3,"flags":0,"tags":["circles","tazon"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define RADIO 0.4\n#define RADIO_2 0.16\n\n#define CENTER_X 0.3\n#define CENTER_Y 0.2\n\n#define COLOR_R 1.0\n#define COLOR_G 0.5\n#define COLOR_B 0.5\n\n#define SPEED 0.4\n#define MOVE_RADIO 0.3\n\n#define SPEED_2 0.6\n#define MOVE_RADIO_2 0.6\n\n\n#define PI 3.14159265359\n#define TWOPI 6.28318530718\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat CenterX = CENTER_X + MOVE_RADIO*cos(SPEED*PI*iGlobalTime) + MOVE_RADIO_2*sin(SPEED_2*PI*iGlobalTime);\n\tfloat CenterY = CENTER_Y + MOVE_RADIO*sin(SPEED*PI*iGlobalTime) + MOVE_RADIO_2*cos(SPEED_2*PI*iGlobalTime);\n\tvec3 Color = vec3(0);\n\t\/\/ Convertimos las coordenadas del pixel X,Y con el que estamos trabajando (fragCoord)\n\t\/\/ R valdra un valor entre (-iResolution.X\/2 .. +iResolution.X\/2 , -iResolution.Y\/2 .. +iResolution.Y\/2)\n\t\/\/ Es una sentencia vectorial - R es un vector bidimensional y la operacion trabaja sobre las dos componentes\n\t\/\/ La sintaxis es igual que la de R o la de Matlab\n\tvec2 R = vec2( fragCoord.xy - 0.5*iResolution.xy );\n\t\/\/ Ahora normalizamos R\n\t\/\/ R valdra un valor entre (-AspectRatio .. +AspectRatio , -1 .. +1)\n\t\/\/ Donde AspectRatio es iResolution.X \/ iResolution.Y - es decir, ajustamos por la pantalla que no es cuadrada\n\tR = 2.0 * R.xy \/ iResolution.y;\n\t\/\/ Procesamos el pixel. Se trata de saber si esta o no dentro de la circunferencia\n\tfloat DistanceX2 = (R.x - CenterX) * (R.x - CenterX);\n\tfloat DistanceY2 = (R.y - CenterY) * (R.y - CenterY);\n\tfloat Distance2 = DistanceX2+DistanceY2;\n\tif (Distance2<RADIO_2) Color=vec3(COLOR_R,COLOR_G,COLOR_B);\n\tfragColor=vec4(Color,1.0);\n}\n","name":"","description":"","type":"image"}]}}