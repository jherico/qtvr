{"Shader":{"ver":"0.1","info":{"id":"MllGWN","date":"1422261408","viewed":700,"name":"Funky Triangles","username":"SexyEvilGenius","description":"Was looking for method to check if point is inside triangle. Shadertoy is best place to check this works. Code it, automate it, crashtest it! B-)","likes":0,"published":3,"flags":0,"tags":["triangle","random","vector"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Constant parameters. Play with that numbers;\nconst float SPEED = 1.0;\nconst float TRESHOLD = 40.0;\nconst float SIZE = 3.;\nconst int COUNT = 24; \/\/ Remember: amount of triangles is COUNT^2-1!;\n\n\/\/ Initializing main variables;\nvec2 uv = vec2(0.0);\nvec3 finalColor = vec3(0.0);\nvec3 rndColor = vec3(0.0);\nfloat time = 0.0;\nvec2 rnd1, rnd2, rnd3;\nvec2 seed = vec2(0, 0);\nfloat centerMask = 0.0;\nstruct Triangle { vec2 a, b, c; };\nTriangle rndTriangle;\n\n\/\/ Simple PRNG;\nvec2 rand(vec2 co, bool isForColor){\n    float x = fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n    float y = fract(sin(dot(co.xy ,vec2(65.13214,24.6543))) * 123124.43225);\n    \n\tif(isForColor) return vec2(x,y); \t\t\/\/ For color number must be in 0..1 range...\n    else return (vec2(x,y)-vec2(0.5))*SIZE;\t\/\/ but for coordinates it can be any number;\n}\n\n\/\/ Thats what all this for. Function to check is point inside triangle or not;\nvec3 DrawTriangle(Triangle tr, vec3 color) {\n    float N1 = (tr.b.y-tr.a.y)*(uv.x-tr.a.x) - (tr.b.x-tr.a.x)*(uv.y-tr.a.y); \n\tfloat N2 = (tr.c.y-tr.b.y)*(uv.x-tr.b.x) - (tr.c.x-tr.b.x)*(uv.y-tr.b.y); \n\tfloat N3 = (tr.a.y-tr.c.y)*(uv.x-tr.c.x) - (tr.a.x-tr.c.x)*(uv.y-tr.c.y);\n    float result = abs(sign(N1) + sign(N2) + sign(N3));\n    \n    if (result == 3.) result = 1.;\t\t\t\/\/ Inside. All N's have same sign;\n    \/\/else if (result < 3.) result = 0.; \t\/\/ On edge. One or more N's == 0. *Meanless in my case*;\n    else result = 0.;\t\t\t\t\t\t\/\/ Outside. Any other case;\n    return (result*color);\n}\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tuv = fragCoord.xy \/ iResolution.xy;\n    uv = uv*2.-1.;\t\t\t\t\t\t\t\/\/ Remap to center;\n    time = ((iGlobalTime\/50000000.)*SPEED);\n    \n    for (int i = 0; i < COUNT; i++) {\n        for(int j = 0; j < COUNT; j++) {\n            seed = vec2(i, j);\n            \n            rnd1 = rand(seed+time, false);\n            rnd2 = rand(seed*rnd1+time, false);\n            rnd3 = rand(seed*rnd1*rnd2+time, false);\n            rndTriangle = Triangle(rnd1, rnd2, rnd3);\n            \n            rnd1 = rand(rnd1, true); \n            rnd2 = rand(rnd2, true); \n            rnd3 = rand(rnd3, true);\n            rndColor = vec3(rnd1.y, rnd2.y, rnd3.y);\n            \n            centerMask = (3.-distance(uv, vec2(0.0,0.0))*2.)*TRESHOLD; \/\/ Masking non-constant PRNG-generated numbers density; \n            \n            finalColor += DrawTriangle(rndTriangle, rndColor)\/centerMask;\n        }\n    }\n    \n\tfragColor = vec4(finalColor, 1.0);\n}","name":"","description":"","type":"image"}]}}