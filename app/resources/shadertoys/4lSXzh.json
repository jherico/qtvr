{"Shader":{"ver":"0.1","info":{"id":"4lSXzh","date":"1441330609","viewed":1352,"name":"Traced Minkowski Tube","username":"Shane","description":"A point lit, rounded square tunnel, produced without the use of ray marching.","likes":35,"published":3,"flags":0,"tags":["raytracing","voronoi","tunnel","oldschool"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/*\n    Simplified, Traced Minkowski Tube.\n    ----------------------------------\n    \n    This was inspired by Shadertoy user Akaitora's \"Worley Tunnel\" which you can find here:\n    https:\/\/www.shadertoy.com\/view\/XtjSzR\n    \n    Akaitora had a question, but I didn't have room to answer, so this is for anyone who's interested\n    in understanding the reasoning behind the oldschool tunnel effect. I see a \"lot\" of them around.\n    \n    I'll assume most know that the endless tunnel effect is a simplification of a raytraced, \n    cylindrically-mapped inner cylinder. Without going into detail, by restricting the \"XY\" coordinates \n\tof \tthe ray origin (camera position) \"ro\" to zero, the ray intersection equation becomes almost \n\ttrivial. For a 3D unit ray-direction vector, \"rd,\" the solution is something along the lines of:\n    \n    float distance = 1.\/length(rd.xy);\n    \n    The 3D surface point is then: sp = vec3(0., 0., ro.z) + rd\/length(rd.xy); \/\/ Where \"ro.z\" is time.\n    \n    The surface point coordinates enable you to color the surface using a 3D method, or in the case of \n\tthe endless tunnel effect, cylindrically map a texture, or texture-function, (preferably seamless) \n\tonto the surface:\n    \n\tvec3 color = TexFunction(vec3 sp) { return texUV(scaleU*atan(sp.y, sp.x)\/6.2832, scaleV*sp.z); }\n    \n    You can see that \"sp.z\" is equal to: ro.z(time)*scaleV + rd.z*scaleV(constant)\/length(rd.xy);\n    \n    The light attenuation is usually a scaled inverse of the distance, or \"k*length(rd.xy)\" and the \n    normal vector is about as straight forward as it gets: normalize(vec3(-sp.xy, 0.));\n    \n    Anyway, to save cycles, 1990s demo coders threw out the 3D surface information, bypassed the \n    normalization of the ray-direction vector, and a bunch of other stuff, until there was virtually \n\tnothing left to calculate other than the texture coordinates and distance attenuation.\n\n\tThe point is, for the price of just a few extra lines and almost no extra effort on the part of the\n\tGPU, you could have a 3D \"lit\" tunnel, which is more visually enticing. Like the oldschool tunnel \n\tdemos, you could also have square, rounded square tunnels, etc.\n    \n    Hence, this simple demonstration. It's a point lit, rounded square tunnel, produced without the use \n\tof raymarching. As a point of interest that's probably not interesting, there's not a single \"for \n\tloop\" or \"if statement\" used in the code. Do I get points for that? :)\n\n\tIf you ignore the 3D Voronesque function (which I'll explain another time), bump mapping, amateur\n\tcamera movement and extra lighting, there's barely any code here. In fact, I believe you could fit \n\ta 3D lit, 3D-function mapped, possibly bumped, tunnel into a tweet or two... but I'll leave that to \n\tFabrice Neyret, Greg Rostami, etc. ;-)\n\n\t\n\tUpdate: Here's a private link to a cylindrically mapped tube I put together. It's for those who'd \n\tlike to see how to apply repeated 2D functions and textures:\n\thttps:\/\/www.shadertoy.com\/view\/ltSSR1\n\n*\/\n\n\n\/\/ 2D rotation. Always handy.\nmat2 rot(float th){ float cs = cos(th), si = sin(th); return mat2(cs, -si, si, cs); }\n\n\/\/ 3D Voronoi-like function. Cheap, low quality, 1st and 2nd order 3D Voronoi imitation.\n\/\/\n\/\/ I wrote this a while back because I wanted a stand-alone algorithm fast enough to produce regular, or 2nd order, \n\/\/ Voronoi-looking patterns in a raymarching setting. Anyway, this is what I came up with. Obviously, it wouldn't \n\/\/ pass as genuine 3D Voronoi, but there's only so much you can do with a few lines. Even so, it has a Voronoi feel\n\/\/ to it. Hence, Voronesque.\n\/\/\n\/\/ Here's a rough explanation of how it works: Instead of partitioning space into cubes, partition it into its \n\/\/ simplex form, namely tetrahedrons. Use the four tetrahedral vertices to create some random falloff values, then \n\/\/ pick off the two highest, or lowest, depending on perspective. That's it. If you'd like to know more, the \n\/\/ function is roughly commented, plus there's a simplex noise related link below that should make it more clear.\n\/\/\n\/\/ Credits: Ken Perlin, the creator of simplex noise, of course. Stefan Gustavson's paper - \"Simplex Noise Demystified.\"\n\/\/ IQ, other \"ShaderToy.com\" people, Brian Sharpe (does interesting work), etc.\n\/\/\n\/\/ My favorite simplex-related write up: \"Simplex Noise, keeping it simple.\" - Jasper Flick?\n\/\/ http:\/\/catlikecoding.com\/unity\/tutorials\/simplex-noise\/\n\/\/\nfloat Voronesque( in vec3 p ){\n    \n    \/\/ Skewing the cubic grid, then determining the first vertice.\n    vec3 i  = floor(p + dot(p, vec3(0.333333)) );  p -= i - dot(i, vec3(0.166666)) ;\n    \n    \/\/ Breaking the skewed cube into tetrahedra with partitioning planes, then determining which side of the \n    \/\/ intersecting planes the skewed point is on. Ie: Determining which tetrahedron the point is in.\n    vec3 i1 = step(0., p-p.yzx), i2 = max(i1, 1.0-i1.zxy); i1 = min(i1, 1.0-i1.zxy);    \n    \n    \/\/ Using the above to calculate the other three vertices. Now we have all four tetrahedral vertices.\n    vec3 p1 = p - i1 + 0.166666, p2 = p - i2 + 0.333333, p3 = p - 0.5;\n    \n    vec3 rnd = vec3(7, 157, 113); \/\/ I use this combination to pay homage to Shadertoy.com. :)\n    \n    \/\/ Falloff values from the skewed point to each of the tetrahedral points.\n    vec4 v = max(0.5 - vec4(dot(p, p), dot(p1, p1), dot(p2, p2), dot(p3, p3)), 0.);\n    \n    \/\/ Assigning four random values to each of the points above. \n    vec4 d = vec4( dot(i, rnd), dot(i + i1, rnd), dot(i + i2, rnd), dot(i + 1., rnd) ); \n    \n    \/\/ Further randomizing \"d,\" then combining it with \"v\" to produce the final random falloff values. Range [0, 1]\n    d = fract(sin(d)*262144.)*v*2.; \n \n    \/\/ Reusing \"v\" to determine the largest, and second largest falloff values. Analogous to distance.\n    v.x = max(d.x, d.y), v.y = max(d.z, d.w), v.z = max(min(d.x, d.y), min(d.z, d.w)), v.w = min(v.x, v.y); \n   \n    return  max(v.x, v.y)- max(v.z, v.w); \/\/ Maximum minus second order, for that beveled Voronoi look. Range [0, 1].\n    \/\/return max(v.x, v.y); \/\/ Maximum, or regular value for the regular Voronoi aesthetic.  Range [0, 1].\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    \n    \/\/ Screen coordinates, plus some movement about the center.\n    vec2 uv = (fragCoord.xy - iResolution.xy*0.5)\/iResolution.y + vec2(0.5*cos(iGlobalTime*0.5), 0.25*sin(iGlobalTime*0.5));\n    \n    \/\/ Unit direction ray.\n    vec3 rd = normalize(vec3(uv, 1.));\n    rd.xy *= rot(sin(iGlobalTime*0.25)*0.5); \/\/ Very subtle look around, just to show it's a 3D effect.\n    rd.xz *= rot(sin(iGlobalTime*0.25)*0.5);\n \n    \/\/ Screen color. Initialized to black.\n    vec3 col = vec3(0);\n    \n    \/\/ Ray intersection of a cylinder (radius one) - centered at the origin - from a ray-origin that has XY coordinates \n    \/\/ also centered at the origin.\n    \/\/float sDist = max(dot(rd.xy, rd.xy), 1e-16); \/\/ Analogous to the surface function.\n    \/\/sDist = 1.\/sqrt(sDist); \/\/ Ray origin to surface distance.\n    \n    \/\/ Same as above, but using a Minkowski distance and scaling factor. I tried it on a whim, and it seemed to work.\n    \/\/ I know, not scientific at all, but it kind of makes sense. They'll let anyone get behind a computer these days. :)\n    vec2 scale = vec2(0.75, 1.);\n    float power = 6.;\n    float sDist = max(dot( pow(abs(rd.xy)*scale, vec2(power)), vec2(1.) ), 1e-16); \/\/ Analogous to the surface function.\n    sDist = 1.\/pow( sDist, 1.\/power ); \/\/ Ray origin to surface distance.\n    \n    \/\/if(sDist>1e-8){\n        \n        \/\/ Using the the distance \"sDist\" above to calculate the surface position. Ie: sp = ro + rd*t;\n        \/\/ I've hardcoded \"ro\" to reduce line count. Note that \"ro.xy\" is centered on zero. The cheap\n        \/\/ ray-intersection formula above relies on that.\n        vec3 sp = vec3(0.0, 0.0, iGlobalTime*2.) + rd*sDist;\n \n        \/\/ The surface normal. Based on the derivative of the surface description function. See above.\n        \/\/vec3 sn = normalize(vec3(-sp.xy, 0.)); \/\/ Cylinder normal.\n        vec3 sn = normalize(-sign(sp)*vec3(pow(abs(sp.xy)*scale, vec2(power-1.)), 0.)); \/\/ Minkowski normal.\n        \n        \/\/ Bump mapping.\n        \/\/\n        \/\/ I wanted to make this example as simple as possible, but it's only a few extra lines. Note the larger \n        \/\/ \"eps\" number. Increasing the value spreads the samples out, which effectively blurs the result, thus \n        \/\/ reducing the jaggies. The downside is loss of bump precision, which isn't noticeable in this particular \n        \/\/ example. Decrease the value to \"0.001\" to see what I'm talking about.\n        const vec2 eps = vec2(0.025, 0.);\n        float c = Voronesque(sp*2.5); \/\/ Base value. Used below to color the surface.\n        \/\/ 3D gradient vector... of sorts. Based on the bump function. In this case, Voronoi.                \n        vec3 gr = (vec3(Voronesque((sp-eps.xyy)*2.5), Voronesque((sp-eps.yxy)*2.5), Voronesque((sp-eps.yyx)*2.5))-c)\/eps.x;\n        gr -= sn*dot(sn, gr); \/\/ There's a reason for this... but I need more room. :)\n        sn = normalize(sn + gr*0.1); \/\/ Combining the bump gradient vector with the object surface normal.\n\n        \/\/ Lighting.\n        \/\/\n        \/\/ The light is hovering just in front of the viewer.\n        vec3 lp = vec3(0.0, 0.0, iGlobalTime*2. + 3.);\n        vec3 ld = lp - sp; \/\/ Light direction.\n        float dist = max(length(ld), 0.001); \/\/ Distance from light to the surface.\n        ld \/= dist; \/\/ Use the distance to normalize \"ld.\"\n\n        \/\/ Light attenuation, based on the distance above.\n        float atten = min(1.0\/max(0.75 + dist*0.25 + dist*dist*0.05, 0.001), 1.0);\n        \n       \n        float diff = max(dot(sn, ld), 0.); \/\/ Diffuse light value.\n        float spec = pow(max(dot(reflect(-ld, sn), -rd), 0.), 16.); \/\/ Specular highlighting.\n        \/\/ Adding some fake, reflective environment information.\n        float ref = Voronesque((sp + reflect(rd, sn)*0.5)*2.5);\n        \n        \/\/ Coloring the surface with the Voronesque function that is used to bump the surface. See \"bump mapping\" above.\n        vec3 objCol = vec3(min(c*1.5, 1.), pow(c, 2.5), pow(c, 12.)); \/\/ Cheap, but effective, red palette.\n        \/\/vec3 objCol = vec3(c*c*0.9, c, c*c*0.4); \/\/ Cheap green palette.\n        \/\/vec3 objCol = vec3(pow(c, 1.6), pow(c, 1.7), c); \/\/ Purpley blue.\n        \/\/vec3 objCol = vec3(c); \/\/ Grey scale.\n\n        \/\/ Using the values above to produce the final color.\n        \/\/col = (objCol*(diff + ref*0.25 + 0.25) + vec3(1., 0.8, 0.9)*ref*0.25 + spec*vec3(0.75, 0.9, 1.))*atten;\n        col = (objCol*(vec3(1.0, 0.97, 0.92)*diff + ref*0.5 + 0.25) + vec3(1., 0.8, 0.9)*ref*0.3 + vec3(1., 0.9, 0.7)*spec)*atten;\n        \/\/col = ((vec3(1.0, 0.97, 0.92)*diff + ref*0.5 + 0.25)*c + vec3(1., 0.8, 0.9)*ref*0.3 + vec3(0.75, 0.9, 1.)*spec)*atten;\n         \n        \n    \/\/}\n    \n    fragColor = vec4(min(col, 1.), 1.);\n}\n","name":"","description":"","type":"image"}]}}