{"Shader":{"ver":"0.1","info":{"id":"llBSDK","date":"1446464923","viewed":314,"name":"Magic tree","username":"dr2","description":"A tree with its own temple (mouse enabled).","likes":3,"published":3,"flags":0,"tags":["raymarching","fractal","tree"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Magic tree\" by dr2 - 2015\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Tree includes ideas from eiffie (4s23Rh) and iapafoto (XsS3Dm).\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec4 t;\n  vec2 ip, fp;\n  ip = floor (p);\n  fp = fract (p);\n  fp = fp * fp * (3. - 2. * fp);\n  t = Hashv4f (dot (ip, cHashA3.xy));\n  return mix (mix (t.x, t.y, fp.x), mix (t.z, t.w, fp.x), fp.y);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float f, a;\n  f = 0.;\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    f += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return f;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s;\n  float a;\n  s = vec3 (0.);\n  a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 g;\n  float s;\n  vec3 e = vec3 (0.1, 0., 0.);\n  s = Fbmn (p, n);\n  g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h;\n  h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  const vec2 e = vec2 (1., -1.);\n  return q * cos (a) * e.xx + q.yx * sin (a) * e.yx;\n}\n\nmat3 RMat3D (vec3 a)\n{\n  vec3 cr, sr;\n  cr = cos (a);\n  sr = sin (a);\n  return mat3 (cr.z, - sr.z, 0., sr.z, cr.z, 0., 0., 0., 1.) *\n     mat3 (1., 0., 0., 0., cr.x, - sr.x, 0., sr.x, cr.x) *\n     mat3 (cr.y, 0., - sr.y, 0., 1., 0., sr.y, 0., cr.y);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p;\n  p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  return min (max (d.x, max (d.y, d.z)), 0.) + length (max (d, 0.));\n}\n\nfloat PrBox2Df (vec2 p, vec2 b)\n{\n  vec2 d = abs (p) - b;\n  return min (max (d.x, d.y), 0.) + length (max (d, 0.));\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCylAnDf (vec3 p, float r, float w, float h)\n{\n  return max (abs (length (p.xy) - r) - w, abs (p.z) - h);\n}\n\nfloat PrECapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., clamp (p.z, 0., h))) - r;\n}\n\nmat3 bRot;\nvec3 qHit, sunDir;\nfloat tCur, trAge, trBloom, szTree, nCyc, flRad, brLen, brRad, brRadMax;\nint idObj;\nconst float sScale = 0.726;\nconst float dstFar = 100.;\nconst int brMax = 14;\nconst int idBase = 1, idCol = 2, idRing = 3, idTop = 4, idWat = 5, idIWall = 6,\n   idLatt = 7, idOWall = 8, idBrnch = 101, idFlwr = 120;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  float sd, f;\n  if (rd.y > 0.) {\n    ro.xz += 2. * tCur;\n    sd = max (dot (rd, sunDir), 0.);\n    col = vec3 (0.1, 0.2, 0.4) + 0.2 * pow (1. - max (rd.y, 0.), 8.) +\n       0.35 * pow (sd, 6.) + 0.65 * min (pow (sd, 256.), 0.3);\n    f = Fbm2 (0.1 * (ro.xz + rd.xz * (50. - ro.y) \/ rd.y));\n    col = mix (col, vec3 (1.), clamp (0.1 + 0.8 * f * rd.y, 0., 1.));\n  } else {\n    f = Noisefv2 ((ro.xz - rd.xz * ro.y \/ rd.y) * 17.1);\n    col = mix (mix (vec3 (0.2, 0.4, 0.2), vec3 (0.3, 0.6, 0.3), f),\n       0.9 * (vec3 (0.1, 0.2, 0.4) + 0.2) + 0.1, pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nfloat TreeDf (vec3 p, float dMin)\n{\n  vec3 q;\n  float rFac, d, fr;\n  q = p \/ szTree;\n  q.xz = Rot2D (q.xz, 1.3 * nCyc);\n  q *= RMat3D (vec3 (0.2, 0.5, -0.2));\n  rFac = 1.;\n  for (int j = 0; j < brMax - 4; j ++) {\n    rFac *= sScale;\n    brRad = max (brRadMax - 0.02 * q.y, 0.02);\n    d = PrECapsDf (q.xzy, brRad, brLen) * rFac;\n    if (d < dMin) {\n      dMin = SmoothMin (dMin, d, 0.1 * brRad * rFac);\n      idObj = idBrnch + j;\n      qHit = q;\n    }\n    q.x = abs (q.x);\n    q.y -= brLen;\n    q *= bRot;\n  }\n  fr = 0.8 * flRad;\n  for (int j = 0; j < 4; j ++) {\n    rFac *= sScale;\n    d = PrCylDf (q + vec3 (brRad, brLen, 0.), fr, 0.03 * brLen) * rFac;\n    if (d < dMin) {\n      dMin = d;\n      idObj = idFlwr + j;\n      qHit = q;\n    }\n    q.x = abs (q.x);\n    q.y -= brLen;\n    q *= bRot;\n    fr += 0.05 * flRad;\n  }\n  return dMin;\n}\n\nfloat ObjDf (vec3 p)\n{\n  vec3 q;\n  const vec3 bIw = vec3 (7., 0., 9.);\n  const vec3 bOw = vec3 (8.9, 0., 10.9);\n  const float tIw = 0.3, hIw = 0.6;\n  const float tOw = 0.15, cLen = 2.4, hb = 0.05, hTop = 0.4;\n  float dMin, d, da, db, wr;\n  dMin = dstFar;\n  q = p;\n  db = max (PrBox2Df (q.xz, bIw.xz + tIw), - PrBox2Df (q.xz, bIw.xz - tIw));\n  q.y -= hb;\n  d = PrBoxDf (q, vec3 (bOw.x + 0.5, hb, bOw.z + 0.5));\n  if (d < dMin) { dMin = d;  idObj = idBase;  qHit = q; }\n  q = p;\n  q.y -= 2. * hb + cLen + hIw + 1.1 * hTop;\n  d = max (max (PrBox2Df (q.xz, bOw.xz + tOw),\n     - PrBox2Df (q.xz, bOw.xz - tOw)), abs (q.y) - (cLen + hIw + 1.1 * hTop));\n  d = max (d, - min (PrBox2Df (q.xy, vec2 (bOw.x - 0.5, 3.)),\n     PrBox2Df (q.zy, vec2 (bOw.z - 0.5, 3.))));\n  d = max (d, min (- q.y, 0.7 - min (abs (q.x), abs (q.z))));\n  if (d < dMin) { dMin = d;  idObj = idOWall;  qHit = q; }\n  q = p;\n  q.y -= hIw + 2. * hb;\n  d = min (d, max (max (PrBoxDf (q, vec3 (bIw.x + tIw, hIw, bIw.z + tIw)),\n     0.7 - min (abs (q.x), abs (q.z))), db));\n  if (d < dMin) { dMin = d;  idObj = idIWall;  qHit = q; }\n  q = p;\n  q.y -= 2. * cLen + hTop + 2. * hIw + 2. * hb;\n  d = max (PrBoxDf (q, vec3 (bIw.x + tIw, hTop, bIw.z + tIw)), db);\n  q.xz = mod (q.xz + 1., 2.) - 1.;\n  q.y -= -0.6;\n  d = max (d, - min (PrCylDf (q, 0.7, bIw.z + 1.),\n     PrCylDf (q.zyx, 0.7, bIw.x + 1.)));\n  if (d < dMin) { dMin = d;  idObj = idTop;  qHit = q; }\n  q = p;\n  q.y -= 2. * cLen + 2. * hTop + 2. * hIw;\n  d = max (PrBoxDf (q, vec3 (bOw.x, hb, bOw.z)),\n     - PrBox2Df (q.xz, bIw.xz - 0.15));\n  q.xz = mod (q.xz + 1., 2.) - 1.;\n  d = max (d, - PrBox2Df (q.xz, vec2 (0.8)));    \n  if (d < dMin) { dMin = d;  idObj = idLatt;  qHit = q; }\n  q = p;\n  q.xz = mod (q.xz, 2.) - 1.;\n  q.y -= cLen + 2. * hIw + 2. * hb;\n  wr = q.y \/ cLen;\n  d = max (PrCylDf (q.xzy, tIw * (0.8 - 0.05 * wr * wr), cLen), db);\n  if (d < dMin) { dMin = d;  idObj = idCol;  qHit = q; }\n  q = p;\n  q.y -= 0.2;\n  d = PrCylAnDf (q.xzy, 4.4, 0.1, 0.15);\n  if (d < dMin) { dMin = d;  idObj = idRing;  qHit = q; }\n  q = p;\n  q.y -= 0.2;\n  d = PrCylDf (q.xzy, 4.5, 0.02);\n  if (d < dMin) { dMin = d;  idObj = idWat;  qHit = q; }\n  dMin = TreeDf (q, dMin);\n  return dMin;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 200; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  vec4 v;\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 10; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 5. * h \/ d);\n    d *= 1.7;\n    if (h < 0.001) break;\n  }\n  return max (sh, 0.);\n}\n\nfloat ChqPat (vec3 p, float dHit)\n{\n  vec2 q, iq;\n  float f;\n  q = p.xz;\n  iq = floor (q);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = smoothstep (0., 0.1, abs (fract (q + 0.5) - 0.5));\n  f = dHit \/ dstFar;\n  return 1. - 0.6 * exp (-10. * f * f) * (1. - q.x * q.y);\n}\n\nvec3 ChqNorm (vec3 p, vec3 n)\n{\n  vec2 q, iq;\n  q = p.xz;\n  iq = floor (q);\n  if (2. * floor (iq.x \/ 2.) != iq.x) q.y += 0.5;\n  q = 2. * fract (q) - 1.;\n  n.xz += 0.5 * q * q * sign (q);\n  return normalize (n);\n}\n\nvoid SetupTree ()\n{\n  float t;\n  nCyc = floor (tCur \/ 60.);\n  trAge = tCur \/ 60. - nCyc;\n  trBloom = mod (5. * trAge, 1.);\n  szTree = 2.3 - 2.2 * smoothstep (0.93, 0.98, trAge);\n  t = min (trAge, 0.8);\n  brLen = min (0.95, 0.03 + 1.3 * sqrt (t));\n  brRadMax = 0.01 + 0.12 * sqrt (t);\n  flRad = (0.2 + 6. * t) * (0.05 +\n     0.8 * clamp (6. * trBloom * (1. - trBloom) - 0.1, 0., 1.));\n  bRot = RMat3D (vec3 (-0.5 + 0.3 * t, -1.5, 0.7 + 0.2 * t) +\n     0.05 * sin (0.5 * nCyc)) \/ sScale;\n}\n  \nvec3 TrackPath (float t)\n{\n  vec3 p;\n  vec2 tr;\n  float ti[5], chRingO, chRingI, vuVel, a, r, tO, tI, tR, rGap;\n  bool rotStep;\n  chRingO = 21.;\n  chRingI = 6.;\n  vuVel = 2.;\n  tO = 0.5 * pi * chRingO \/ vuVel;\n  tI = 0.5 * pi * chRingI \/ vuVel;\n  rGap = chRingO - chRingI;\n  tR = rGap \/ vuVel;\n  rotStep = false;\n  ti[0] = 0.;\n  ti[1] = ti[0] + tO;  ti[2] = ti[1] + tR;\n  ti[3] = ti[2] + tI;  ti[4] = ti[3] + tR;\n  p.y = 4.;\n  t = mod (t, ti[4]);\n  tr = vec2 (0.);\n  if (t < ti[1]) {\n    rotStep = true;\n    a = (t - ti[0]) \/ (ti[1] - ti[0]);\n    r = chRingO;\n  } else if (t < ti[2]) {\n    tr.y = chRingO - rGap * (t - ti[1]) \/ (ti[2] - ti[1]);\n  } else if (t < ti[3]) {\n    rotStep = true;\n    a = 1. - (t - ti[2]) \/ (ti[3] - ti[2]);\n    r = chRingI;\n  } else {\n    tr.x = chRingI + rGap * (t - ti[3]) \/ (ti[4] - ti[3]);\n  }\n  if (rotStep) {\n    a *= 0.5 * pi;\n    p.xz = r * vec2 (cos (a), sin (a));\n  } else {\n    p.xz = tr;\n  }\n  return p;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec3 objCol, col, roo, vn, vnw;\n  float dstHit, refl, sh, a, f;\n  int idObjT;\n  refl = 1.;\n  idObj = -1;\n  roo = ro;\n  dstHit = ObjRay (ro, rd);\n  if (dstHit < dstFar && idObj == idWat) {\n    ro += rd * dstHit;\n    vn = ObjNf (ro);\n    vec2 u = ro.xz;\n    float s = length (u);\n    u \/= s;\n    u *= cos (20. * s - 5. * tCur) * (1. - s \/ 5.);\n    vn = normalize (vec3 (u.x, 50., u.y));\n    rd = reflect (rd, vn);\n    ro += 0.01 * rd;\n    refl *= 0.9;\n    idObj = -1;\n    dstHit = ObjRay (ro, rd);\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    idObjT = idObj;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    if (idObj == idCol) {\n      a = 0.5 - mod (20. * (atan (qHit.x, qHit.z) \/ (2. * pi) + 0.5), 1.);\n      vn.xz = Rot2D (vn.xz, -0.15 * pi * sin (pi * a));\n    }\n    if (idObj == idBase) {\n      objCol = vec3 (0.6, 0.6, 0.5);\n      if (vn.y > 0.99) {\n        if (abs (abs (qHit.x) - 3.7) < 3. && abs (abs (qHit.z) - 4.7) < 4.) {\n\t  objCol = mix (vec3 (0.2, 0.5, 0.2), vec3 (0.3, 0.8, 0.2),\n             Noisefv2 (qHit.xz * 41.)) * (0.5 + 0.5 * Noisefv2 (qHit.zx * 57.));\n\t} else {\n          objCol *= ChqPat (qHit * vec3 (3., 1., 3.), dstHit);\n          vn = ChqNorm (qHit * vec3 (3., 1., 3.), vn);\n          vn = VaryNf (10. * qHit, vn, 2.);\n\t}\n      } else {\n        vn = VaryNf (20. * qHit, vn, 5.);\n      }\n    } else if (idObj == idTop || idObj == idIWall) {\n      objCol = vec3 (0.6, 0.6, 0.5);\n      vn = VaryNf (20. * qHit, vn, 2.);\n    } else if (idObj == idOWall) {\n      objCol = vec3 (0.6, 0.57, 0.6);\n      vn = VaryNf (20. * qHit, vn, 5.);\n    } else if (idObj == idLatt) {\n      objCol = vec3 (0.6, 0.6, 0.5);\n      vn = VaryNf (5. * qHit, vn, 1.);\n    } else if (idObj == idRing) {\n      objCol = vec3 (0.9, 0.7, 0.4);\n      vn = VaryNf (20. * qHit, vn, 1.);\n    } else if (idObj == idCol) {\n      objCol = vec3 (0.9, 0.7, 0.6);\n      vn = VaryNf (20. * qHit, vn, 1.);\n    } else if (idObj >= idBrnch && idObj < idFlwr + 4) {\n      if (idObj < idFlwr) {\n\tobjCol = mix (vec3 (0.3, 0.7, 0.3), vec3 (0.5, 0.3, 0.1),\n           smoothstep (0.02, 0.05, trAge));\n\tobjCol *= (0.7 + 0.3 * clamp (0.7 + 0.6 * cos (11. * qHit.y), 0., 1.));\n\ta = mod (20. * (atan (qHit.z, qHit.x) \/ (2. * pi) + 0.5), 1.);\n\tvn.xz = Rot2D (vn.xz, 0.5 * sin (pi * a));\n\tvn = VaryNf (50. * ro, vn, 5. * smoothstep (0.03, 0.08, trAge));\n      } else {\n\tobjCol = HsvToRgb (vec3 (0.35 * max (0.05 * float (idObj - idFlwr) +\n           1. - 1.2 * trBloom, 0.),\n\t   0.05 + 0.95 * smoothstep (0.15, 0.2, trBloom), 1.)); \n\tif (idObj == idFlwr + 3) objCol = mix (vec3 (1., 0., 0.), objCol,\n\t   smoothstep (0.05, 0.2, trBloom));\n\tobjCol = mix (objCol, vec3 (0.5, 0.3, 0.1), smoothstep (0.9, 1., trBloom));\n      }\n      objCol = mix (objCol, vec3 (0.8), smoothstep (0.93, 0.98, trAge));\n    }\n    sh = ObjSShadow (ro, sunDir);\n  } else {\n    if (rd.y < 0.) {\n      sh = 0.7 + 0.3 * ObjSShadow (ro - rd * ro.y \/ rd.y, sunDir);\n    } else sh = 1.;\n  }\n  if (dstHit < dstFar) {\n    col = refl * objCol * (0.3 +\n       0.7 * max (dot (vn, sunDir), 0.) * (0.5 + 0.5 * sh) +\n       0.3 * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.));\n  } else col = sh * BgCol (ro, rd);\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage (out vec4 fragColor, in vec2 fragCoord)\n{\n  vec2 canvas = iResolution.xy;\n  vec2 uv = 2. * fragCoord.xy \/ canvas - 1.;\n  uv.x *= canvas.x \/ canvas.y;\n  tCur = iGlobalTime;\n  vec4 mPtr = iMouse;\n  mPtr.xy = mPtr.xy \/ canvas - 0.5;\n  mat3 vuMat;\n  vec3 ro, rd, vd, u;\n  float f, tPath;\n  tPath = tCur;\n  if (mPtr.z > 0.) tPath = 50. + 50. * mPtr.y;\n  SetupTree ();\n  ro = 0.5 * (TrackPath (tPath + 0.2) + TrackPath (tPath - 0.2));\n  vd = normalize (vec3 (0., 0.5 + 2.5 * min (trAge, 0.8) * szTree, 0.) - ro);\n  u = - vd.y * vd;\n  f = 1. \/ sqrt (1. - vd.y * vd.y);\n  vuMat = mat3 (f * vec3 (vd.z, 0., - vd.x), f * vec3 (u.x, 1. + u.y, u.z), vd);\n  rd = vuMat * normalize (vec3 (uv, 1. + 0.03 * length (ro)));\n  sunDir = normalize (vec3 (1., 3., 1.));\n  fragColor = vec4 (ShowScene (ro, rd), 1.);\n}\n","name":"","description":"","type":"image"}]}}