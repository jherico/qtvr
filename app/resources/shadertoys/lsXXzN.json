{"Shader":{"ver":"0.1","info":{"id":"lsXXzN","date":"1397566249","viewed":876,"name":"digits\/sliders\/kbd widgets","username":"FabriceNeyret2","description":"Utils","likes":10,"published":3,"flags":16,"tags":["font","keyboard","digits","sliders","widgets"],"hasliked":0},"renderpass":[{"inputs":[{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\nfloat t = iGlobalTime;\nvec2 FragCoord;\nvec4 FragColor;\n\n\/\/ --- key toggles -----------------------------------------------------\n\nbool keyToggle(int ascii) {\n\treturn (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.);\n}\n\n\n\n\/\/ --- Digit display ----------------------------------------------------\n\n\/\/ all functions return true or seg number if something was drawn -> caller can then exit the shader.\n\n\/\/     ... adapted from Andre in https:\/\/www.shadertoy.com\/view\/MdfGzf\n\nfloat segment(vec2 uv, bool On) {\n\treturn (On) ?  (1.-smoothstep(0.08,0.09+float(On)*0.02,abs(uv.x)))*\n\t\t\t       (1.-smoothstep(0.46,0.47+float(On)*0.02,abs(uv.y)+abs(uv.x)))\n\t\t        : 0.;\n}\n\nfloat digit(vec2 uv,int num) {\n\tfloat seg= 0.;\n    seg += segment(uv.yx+vec2(-1., 0.),num!=-1 && num!=1 && num!=4                    );\n\tseg += segment(uv.xy+vec2(-.5,-.5),num!=-1 && num!=1 && num!=2 && num!=3 && num!=7);\n\tseg += segment(uv.xy+vec2( .5,-.5),num!=-1 && num!=5 && num!=6                    );\n   \tseg += segment(uv.yx+vec2( 0., 0.),num!=-1 && num!=0 && num!=1 && num!=7          );\n\tseg += segment(uv.xy+vec2(-.5, .5),num==0 || num==2 || num==6 || num==8           );\n\tseg += segment(uv.xy+vec2( .5, .5),num!=-1 && num!=2                              );\n    seg += segment(uv.yx+vec2( 1., 0.),num!=-1 && num!=1 && num!=4 && num!=7          );\t\n\treturn seg;\n}\n\nfloat showNum(vec2 uv,int nr, bool zeroTrim) { \/\/ nr: 2 digits + sgn . zeroTrim: trim leading \"0\"\n\tif (abs(uv.x)>2.*1.5 || abs(uv.y)>1.2) return 0.;\n\n\tif (nr<0) {\n\t\tnr = -nr;\n\t\tif (uv.x>1.5) {\n\t\t\tuv.x -= 2.;\n\t\t\treturn segment(uv.yx,true); \/\/ minus sign.\n\t\t}\n\t}\n\t\n\tif (uv.x>0.) {\n\t\tnr \/= 10; if (nr==0 && zeroTrim) nr = -1;\n\t\tuv -= vec2(.75,0.);\n\t} else {\n\t\tuv += vec2(.75,0.); \n\t\tnr = int(mod(float(nr),10.));\n\t}\n\n\treturn digit(uv,nr);\n}\n\nfloat dots(vec2 uv, int dot) { \/\/ dot: bit 0 = bottom dot; bit 1 = top dot\n\tfloat point0 = float(dot\/2),\n\t\t  point1 = float(dot)-2.*point0; \n\tuv.y -= .5;\tfloat l0 = 1.-point0+length(uv); if (l0<.13) return (1.-smoothstep(.11,.13,l0));\n\tuv.y += 1.;\tfloat l1 = 1.-point1+length(uv); if (l1<.13) return (1.-smoothstep(.11,.13,l1));\n\treturn 0.;\n}\n\/\/    ... end of digits adapted from Andre\n\n#define STEPX .875\n#define STEPY 1.5\nfloat _offset=0.; \/\/ auto-increment useful for successive \"display\" call\n\n\/\/ 2digit int + sign\nbool display(vec2 pos, float scale, float offset, int number, int dot) { \/\/ dot: draw separator\n\tvec2 uv = FragCoord.xy\/iResolution.y;\n\tuv = (uv-pos)\/scale*2.; \n    uv.x = .5-uv.x + STEPX*offset;\n\tuv.y -= 1.;\n\t\n\tfloat seg = showNum(uv,number,false);\n\toffset += 2.;\n\t\n\tif (dot>0) {\n\t\tuv.x += STEPX*offset; \n\t\tseg += dots(uv,dot);\n\t\toffset += 2.;\n\t}\n\n\tFragColor += vec4(seg);  \/\/ change color here\n\t_offset = offset;\n\treturn (seg>0.);\n}\n\n\/\/ 2.2 float + sign\nbool display(vec2 pos, float scale, float offset, float val) { \/\/ dot: draw separator\n\tif (display( pos, scale, 0., int(val), 1)) return true;\n    if (display( pos, scale, _offset, int(fract(abs(val))*100.), 0)) return true;\n\treturn false;\n}\n\n\n\/\/ --- sliders and mouse widgets ---------------------------\n\nbool affMouse() \n{\n\tfloat R=5.;\n\tvec2 pix = FragCoord.xy\/iResolution.y;\n\tfloat pt = max(1e-2,1.\/iResolution.y); R*=pt;\n\n\tvec2 ptr = iMouse.xy\/iResolution.y; \n\tvec2 val = iMouse.zw\/iResolution.y; \n\tfloat s=sign(val.x); val = val*s;\n\t\n\t\/\/ current mouse pos\n    float k = dot(ptr-pix,ptr-pix)\/(R*R*.4*.4);\n\t\tif (k<1.) \n\t    { if (k>.8*.8) FragColor = vec4(0.);\n\t\t     else      FragColor = vec4(s,.4,0.,1.); \n\t\t  return true;\n\t\t}\n\t\n\t\/\/ prev mouse pos \n    k = dot(val-pix,val-pix)\/(R*R*.4*.4);\n\t\tif (k<1.) \n\t    { if (k>.8*.8) FragColor = vec4(0.);\n\t\t     else      FragColor = vec4(0.,.2,s,1.); \n\t\t  return true;\n\t\t}\n\t\n\treturn false;\n}\nbool affSlider(vec2 p0, vec2 dp, float v)\n{\n\tfloat R=5.;\n\tvec2 pix = FragCoord.xy\/iResolution.y;\n\tfloat pt = max(1e-2,1.\/iResolution.y); R*=pt;\n\tpix -= p0;\n\n\tfloat dp2 = dot(dp,dp);\n\tfloat x = dot(pix,dp)\/dp2; if ((x<0.)||(x>1.)) return false;\n\tfloat x2=x*x;\n\tfloat y = dot(pix,pix)\/dp2-x2; if (y>R*R) return false;\n\n\ty = sqrt(y);\n\tif (y<pt) { FragColor = vec4(1.,.2,0.,1.); return true; }      \/\/ rule\n\tvec2 p = vec2(x-v,y);\n\tif (dot(p,p)<R*R) { FragColor = vec4(1.,.2,0.,1.); return true; }  \/\/ button\n\t\n\treturn false;\n}\n\n\/\/ --- flag and values buton display ---\n\nfloat showFlag(vec2 p, vec2 uv, float v) {\n\tfloat d = length(2.*(uv-p));\n\treturn \t1.-step(.06*v,d) + smoothstep(0.005,0.,abs(d-.06));\n}\n\nfloat showFlag(vec2 p, vec2 uv, bool flag) {\n\treturn showFlag(p, uv, (flag) ? 1.: 0.);\n}\n\n\/\/ --------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    FragCoord=fragCoord;\n\tvec2 uv = fragCoord.xy\/iResolution.y;\n\tvec4 mouse = iMouse\/iResolution.y;\n\tFragColor = vec4(0.);\t\n\n    if (affMouse()) { fragColor=FragColor; return;} \/\/ display mouse and state\n\t\n\tif (iMouse.z<=0.) \/\/ auto-tuning if no user tuning\n\t{   float t = iGlobalTime;\n\t\tmouse.xy = .05+.3*vec2(1.+cos(t),1.+sin(t))\/2.;\n\t}\n\t\n\t{   \/\/ display sliders\n\t\tvec2 pos = vec2(.05,.02), len = vec2(.4,0);\n        if (affSlider(pos.xy, len.xy,(mouse.x-pos.x)\/length(len))) { fragColor=FragColor; return;}\n\t\tif (affSlider(pos.yx, len.yx,(mouse.y-pos.x)\/length(len))) { fragColor=FragColor; return;}\n\t}\n\t\n\t\/\/ display counters\n\tvec2 pos ; \n\tfloat scale = 0.1;\n\t\n\tpos = vec2(.2,.8);    if (display( pos, scale, 0., mouse.x*100.)) { fragColor=FragColor; return;}\n\tpos.y -= STEPY*scale; if (display( pos, scale, 0., mouse.y*100.)) { fragColor=FragColor; return;} \n\tpos.y -= STEPY*scale; if (display( pos, scale, 0., mouse.z*100.)) { fragColor=FragColor; return;}\n\tpos.y -= STEPY*scale; if (display( pos, scale, 0., mouse.a*100.)) { fragColor=FragColor; return;} \n\tpos.y -= STEPY*scale; if (display( pos, scale, 0., mod(iGlobalTime,60.))) { fragColor=FragColor; return;} \n\n\t\/\/ button panel\n\tfloat panel = showFlag(vec2(.70,.05),uv, (mouse.z<0.))\n\t\t\t\t+ showFlag(vec2(.70,.15),uv, (mouse.z>0.))\n\t\t\t\t+ showFlag(vec2(.80,.05),uv, (mouse.a<0.))\n\t\t\t\t+ showFlag(vec2(.80,.15),uv, (mouse.a>0.))\n\t\t\t\t+ showFlag(vec2(.90,.10),uv, mouse.x)\n\t\t\t\t+ showFlag(vec2(1.0,.10),uv, mouse.y);\n\tFragColor.b += panel;\n    fragColor=FragColor;\n}","name":"","description":"","type":"image"}]}}