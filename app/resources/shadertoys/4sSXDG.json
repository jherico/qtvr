{"Shader":{"ver":"0.1","info":{"id":"4sSXDG","date":"1415275141","viewed":865,"name":"River flight","username":"dr2","description":"Fasten your seatbelts for a wild ride.","likes":20,"published":3,"flags":0,"tags":["raymarching","landscape","aircraft"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"River flight\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nvec3 Noisev3v2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  vec2 ff = f * f;\n  vec2 u = ff * (3. - 2. * f);\n  vec2 uu = 30. * ff * (ff - 2. * f + 1.);\n  vec4 h = Hashv4f (dot (i, cHashA3.xy));\n  return vec3 (h.x + (h.y - h.x) * u.x + (h.z - h.x) * u.y +\n     (h.x - h.y - h.z + h.w) * u.x * u.y, uu * (vec2 (h.y - h.x, h.z - h.x) +\n     (h.x - h.y - h.z + h.w) * u.yx));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nfloat PrCapsDf (vec3 p, vec2 b)\n{\n  return length (p - vec3 (0., 0., b.x * clamp (p.z \/ b.x, -1., 1.))) - b.y;\n}\n\nfloat PrCylDf (vec3 p, vec2 b)\n{\n  return max (length (p.xy) - b.x, abs (p.z) - b.y);\n}\n\nfloat PrConeDf (vec3 p, vec3 b)\n{\n  return max (dot (vec2 (length (p.xy), p.z), b.xy), abs (p.z) - b.z);\n}\n\nint idObj;\nmat3 flyerMat;\nvec3 flyerPos, engPos, qHit, qHitTransObj, sunDir, sunCol;\nvec2 trkOffset;\nfloat szFac, wSpan, tCur;\nconst float dstFar = 400.;\nconst float pi = 3.14159;\n\nvec3 TrackPath (float t)\n{\n  return vec3 (24. * sin (0.035 * t) * sin (0.012 * t) * cos (0.01 * t) +\n     19. * sin (0.0032 * t) + 100. * trkOffset.x, 0., t);\n}\n\nfloat GrndHt (vec2 p, int hiRes)\n{\n  const vec2 vRot = vec2 (1.4624, 1.6721);\n  vec2 q = p * 0.06;\n  float w = 0.75 * Noisefv2 (0.25 * q) + 0.15;\n  w *= 36. * w;\n  vec2 vyz = vec2 (0.);\n  float ht = 0.;\n  for (int j = 0; j < 10; j ++) {\n    vec3 v = Noisev3v2 (q);\n    vyz += v.yz;\n    ht += w * v.x \/ (1. + dot (vyz, vyz));\n    if (j == 4) {\n      if (hiRes == 0) break;\n    }\n    w *= -0.37;      \n    q *= mat2 (vRot.x, vRot.y, - vRot.y, vRot.x);\n  }\n  vec3 pt = TrackPath (p.y);\n  pt.y -= 2.;\n  float g = smoothstep (1.5, 4.5, sqrt (abs (p.x - pt.x)));\n  return min (ht, pt.y * (1. - g) + ht * g);\n}\n\nvec3 GrndNf (vec3 p, float d)\n{\n  float ht = GrndHt (p.xz, 1);\n  vec2 e = vec2 (max (0.01, 0.00001 * d * d), 0.);\n  return normalize (vec3 (ht - GrndHt (p.xz + e.xy, 1), e.x,\n     ht - GrndHt (p.xz + e.yx, 1)));\n}\n\nvec4 GrndCol (vec3 p, vec3 n)\n{\n  const vec3 gCol1 = vec3 (0.6, 0.7, 0.7), gCol2 = vec3 (0.2, 0.1, 0.1),\n     gCol3 = vec3 (0.4, 0.3, 0.3), gCol4 = vec3 (0.1, 0.2, 0.1),\n     gCol5 = vec3 (0.7, 0.7, 0.8), gCol6 = vec3 (0.05, 0.3, 0.03),\n     gCol7 = vec3 (0.1, 0.08, 0.);\n  vec2 q = p.xz;\n  float f, d;\n  float cSpec = 0.;\n  f = 0.5 * (clamp (Noisefv2 (0.1 * q), 0., 1.) +\n      0.8 * Noisefv2 (0.2 * q + 2.1 * n.xy + 2.2 * n.yz));\n  vec3 col = f * mix (f * gCol1 + gCol2, f * gCol3 + gCol4, 0.65 * f);\n  if (n.y < 0.5) {\n    f = 0.4 * (Noisefv2 (0.4 * q + vec2 (0., 0.57 * p.y)) +\n       0.5 * Noisefv2 (6. * q));\n    d = 4. * (0.5 - n.y);\n    col = mix (col, vec3 (f), clamp (d * d, 0.1, 1.));\n    cSpec += 0.1;\n  }\n  if (p.y > 22.) {\n    if (n.y > 0.25) {\n      f = clamp (0.07 * (p.y - 22. - Noisefv2 (0.2 * q) * 15.), 0., 1.);\n      col = mix (col, gCol5, f);\n      cSpec += f;\n    }\n  } else {\n    if (n.y > 0.45) {\n      vec3 c = (n.y - 0.3) * (gCol6 * vec3 (Noisefv2 (0.4 * q),\n         Noisefv2 (0.34 * q), Noisefv2 (0.38 * q)) + vec3 (0.02, 0.1, 0.02));\n      col = mix (col, c, smoothstep (0.45, 0.65, n.y) *\n         (1. - smoothstep (15., 22., p.y - 1.5 + 1.5 * Noisefv2 (0.2 * q))));\n    }\n    if (p.y < 0.65 && n.y > 0.4) {\n      d = n.y - 0.4;\n      col = mix (col, d * d + gCol7, 2. * clamp ((0.65 - p.y -\n         0.35 * (Noisefv2 (0.4 * q) + 0.5 * Noisefv2 (0.8 * q) +\n         0.25 * Noisefv2 (1.6 * q))), 0., 0.3));\n      cSpec += 0.1;\n    }\n  }\n  return vec4 (col, cSpec);\n}\n\nfloat GrndRay (vec3 ro, vec3 rd)\n{\n  vec3 p;\n  float h, s, sLo, sHi;\n  s = 0.;\n  sLo = 0.;\n  float dHit = dstFar;\n  for (int j = 0; j < 150; j ++) {\n    p = ro + s * rd;\n    h = p.y - GrndHt (p.xz, 0);\n    if (h < 0.) break;\n    sLo = s;\n    s += max (0.15, 0.4 * h) + 0.008 * s;\n    if (s > dstFar) break;\n  }\n  if (h < 0.) {\n    sHi = s;\n    for (int j = 0; j < 10; j ++) {\n      s = 0.5 * (sLo + sHi);\n      p = ro + s * rd;\n      h = step (0., p.y - GrndHt (p.xz, 0));\n      sLo += h * (s - sLo);\n      sHi += (1. - h) * (s - sHi);\n    }\n    dHit = sHi;\n  }\n  return dHit;\n}\n\nfloat WaterHt (vec3 p)\n{\n  p *= 0.1;\n  float ht = 0.;\n  const float wb = 1.414;\n  float w = 0.2 * wb;\n  for (int j = 0; j < 7; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return ht;\n}\n\nvec3 WaterNf (vec3 p, float d)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (max (0.01, 0.001 * d * d), 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nvec3 SkyBg (vec3 rd)\n{\n  const vec3 sbCol = vec3 (0.15, 0.2, 0.65);\n  vec3 col;\n  col = sbCol + 0.2 * sunCol * pow (1. - max (rd.y, 0.), 5.);\n  return col;\n}\n\nvec3 SkyCol (vec3 ro, vec3 rd)\n{\n  const float skyHt = 200.;\n  vec3 col;\n  float cloudFac;\n  if (rd.y > 0.) {\n    ro.x += 0.5 * tCur;\n    vec2 p = 0.01 * (rd.xz * (skyHt - ro.y) \/ rd.y + ro.xz);\n    float w = 0.65;\n    float f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);\n      w *= 0.5;\n      p *= 2.3;\n    }\n    cloudFac = clamp (5. * (f - 0.5) * rd.y - 0.1, 0., 1.);\n  } else cloudFac = 0.;\n  float s = max (dot (rd, sunDir), 0.);\n  col = SkyBg (rd) + sunCol * (0.35 * pow (s, 6.) +\n     0.65 * min (pow (s, 256.), 0.3));\n  col = mix (col, vec3 (0.85), cloudFac);\n  return col;\n}\n\nfloat GrndSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.01;\n  for (int i = 0; i < 80; i++) {\n    vec3 p = ro + rd * d;\n    float h = p.y - GrndHt (p.xz, 0);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.5;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nstruct WingParm\n{\n  float span, sRad, trans, thck, leCut, leRad;\n};\n\nfloat WingDf (vec3 p, WingParm wg)\n{\n  vec2 q = p.yz;\n  float w = max (length (q - vec2 (wg.sRad, 0.)),\n     length (q + vec2 (wg.sRad, 0.)));\n  w = max (max (w - wg.thck, abs (p.x - wg.trans) - wg.span),\n     p.z - wg.leCut);\n  return min (w, max (length (q - vec2 (0., wg.leCut)) - wg.leRad,\n     abs (p.x - wg.trans) - wg.span));\n}\n\nfloat PropelDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  dHit \/= szFac;\n  p \/= szFac;\n  q = p;\n  q.x = abs (q.x);\n  q -= engPos;\n  d = PrCylDf (q - vec3 (0., 0., 3.65), vec2 (1.9, 0.05));\n  if (d < dHit) {\n    dHit = d;\n    qHitTransObj = q;\n  }\n  return dHit * szFac;\n}\n\nfloat TransObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  dHit = PropelDf (flyerMat * (p - flyerPos), dHit);\n  return dHit;\n}\n\nfloat TransObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = TransObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nfloat FlyerDf (vec3 p, float dHit)\n{\n  vec3 q;\n  WingParm wg;\n  float d, wr, ws, cLen;\n  const float wSweep = 0.2;\n  const float fusLen = 11.;\n  const float taPos = 12.5;\n  dHit \/= szFac;\n  p \/= szFac;\n  q = p;\n  wr = q.z \/ fusLen;\n  d = PrCapsDf (q - fusLen * vec3 (0., 0.045 + 0.08 * wr, 0.),\n     fusLen * vec2 (0.46, 0.11));\n  if (d < dHit) {\n    dHit = d;  idObj = 1;  qHit = q;\n  }\n  d = PrCapsDf (q - fusLen * vec3 (0., 0., -0.32),\n     fusLen * vec2 (1., 0.15 - 0.051 * wr * wr));\n  if (d < dHit + 0.1) {\n    dHit = SmoothMin (dHit, d, 0.1);  idObj = 2;  qHit = q;\n  }\n  ws = wSweep * abs (p.x) \/ wSpan;\n  q = p + vec3 (0., 0.054 * fusLen - 6. * ws, 12. * ws);\n  wg = WingParm (wSpan, 13.7, 0., 14., 1.72, 0.195);\n  d = WingDf (q, wg);\n  if (d < dHit + 0.2) {\n    dHit = SmoothMin (dHit, d, 0.2);  idObj = 3;  qHit = q;\n   }\n  q = p + vec3 (0., -0.1 - 6. * ws, taPos + 12. * ws);\n  wg = WingParm (0.4 * wSpan, 6.8, 0., 7., 1.2, 0.095);\n  d = WingDf (q, wg);\n  if (d < dHit + 0.1) {\n    dHit = SmoothMin (dHit, d, 0.1);  idObj = 4;  qHit = q;\n  }\n  ws = wSweep * abs (p.y) \/ wSpan;\n  q = p.yxz + vec3 (-0.2, 0., taPos + 12. * ws);\n  wg = WingParm (0.15 * wSpan, 6.8, 2.2, 7., 1.2, 0.095);\n  d = WingDf (q, wg);\n  if (d < dHit + 0.1) {\n    dHit = SmoothMin (dHit, d, 0.1);  idObj = 5;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  cLen = 3.5;\n  wr = q.z \/ cLen;\n  d = PrCylDf (q - engPos, cLen * vec2 (0.2  - 0.07 * wr * wr, 1.));\n  float d2 = PrCylDf (q - engPos, cLen * vec2 (0.04, 1.02));\n  d = max (d, - d2);\n  if (d < dHit) {\n    dHit = d;  idObj = 6;  qHit = q;\n  }\n  q = p;\n  q.x = abs (q.x);\n  d = PrConeDf (q - engPos - vec3 (0., 0., 4.2), vec3 (0.8, 0.6, 0.7));\n  if (d < dHit) {\n    dHit = d;  idObj = 7;  qHit = q;\n  }\n  q = p;\n  cLen = 2.8;\n  q.z += wSweep * wSpan - 0.025 * cLen;\n  q.x = abs (q.x);\n  wr = q.z \/ cLen;\n  d = PrCapsDf (q - vec3 (wSpan + 0.1, 0.5 * wSweep * wSpan - 0.6, -0.5),\n     cLen * vec2 (1., 0.15 - 0.055 * wr * wr));\n  if (d < dHit) {\n    dHit = d;  idObj = 8;  qHit = q;\n  }\n  return 0.8 * dHit * szFac;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  dHit = FlyerDf (flyerMat * (p - flyerPos), dHit);\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  const float dTol = 0.001;\n  float d;\n  float dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < dTol || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  float v0 = ObjDf (p + e.xxx);\n  float v1 = ObjDf (p + e.xyy);\n  float v2 = ObjDf (p + e.yxy);\n  float v3 = ObjDf (p + e.yyx);\n  return normalize (vec3 (v0 - v1 - v2 - v3) + 2. * vec3 (v1, v2, v3));\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh = 1.;\n  float d = 0.07 * szFac;\n  for (int i = 0; i < 50; i++) {\n    float h = ObjDf (ro + rd * d);\n    sh = min (sh, 20. * h \/ d);\n    d += 0.07 * szFac;\n    if (h < 0.001) break;\n  }\n  return clamp (sh, 0., 1.);\n}\n\nvec3 ObjCol (vec3 p, vec3 n)\n{\n  vec3 bCol = vec3 (0.8, 0.8, 0.85), wCol = vec3 (0.3, 0.3, 0.7),\n     tCol = vec3 (0.9, 0.7, 0.), uCol = vec3 (0.9, 0.1, 0.);\n  float cFac = 1.;\n  if (idObj >= 3 && idObj <= 5) {\n    float s1, s2;\n    if (idObj == 3) {\n      s1 = 2.2;  s2 = 6.;\n    } else if (idObj == 4) {\n      s1 = 1.2;  s2 = 1.7;\n    } else if (idObj == 5) {\n      s1 = 1.;  s2 = 1.;\n    }\n    if (abs (qHit.x) > s2 - 0.03)\n       cFac = 1. - 0.9 * SmoothBump (- 0.08, 0.08, 0.02, qHit.z + s1);\n    if (qHit.z < - s1)\n       cFac = 1. - 0.9 * SmoothBump (- 0.05, 0.05, 0.02, abs (qHit.x) - s2);\n  }\n  vec3 col;\n  vec3 nn;\n  if (idObj >= 1 && idObj <= 5) nn = flyerMat * n;\n  if (idObj == 1 || idObj == 2) {\n    col = mix (uCol, bCol, 1. - smoothstep (-0.6, 0., nn.y));\n    if (idObj == 2 && nn.y < 0.)\n       col = mix (bCol, wCol, SmoothBump (-0.8, 0.8, 0.3, qHit.z + 0.28));         \n  } else if (idObj == 3 || idObj == 4) {\n    col = mix (bCol, wCol, SmoothBump (-0.8, 0.8, 0.3, qHit.z));\n  } else if (idObj == 5) {\n    col = mix (bCol, tCol, SmoothBump (-0.6, 0.8, 0.3, qHit.z));\n  } else if (idObj == 6) {\n    col = bCol;\n  } else if (idObj == 7 || idObj == 8) {\n    col = tCol;\n  }\n  if (idObj == 1) {\n    if (qHit.z > 4.5 && abs (qHit.x) > 0.07) idObj = 10;\n  } else if (idObj == 2) {\n    float s = - qHit.z;\n    if (s > 0. && s < 9.) {\n      vec2 ws = vec2 (qHit.y - 0.5, mod (s + 1.5, 1.5) - 0.75);\n      ws *= ws;\n      if (dot (ws, ws) < 0.02) idObj = 10;\n    }\n  }\n  return col * cFac;\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  const float eps = 0.01;\n  vec4 col4;\n  vec3 objCol, col, vn;\n  float dstHit, dstGrnd, dstObj, dstPropel, f;\n  int idObjT;\n  vec3 roo = ro;\n  dstHit = dstFar;\n  dstGrnd = GrndRay (ro, rd);\n  wSpan = 12.;\n  engPos = vec3 (0.35 * wSpan, -0.2, -1.5);\n  idObj = 0;\n  dstObj = ObjRay (ro, rd);\n  idObjT = idObj;\n  dstPropel = TransObjRay (ro, rd);\n  if (dstObj < dstPropel) dstPropel = dstFar;\n  float refFac = 1.;\n  if (dstGrnd < dstObj && ro.y + dstGrnd * rd.y < 0.) {\n    float dw = - ro.y \/ rd.y;\n    ro += dw * rd;\n    rd = reflect (rd, WaterNf (ro, dw));\n    ro += eps * rd;\n    dstGrnd = GrndRay (ro, rd);\n    idObj = 0;\n    dstObj = ObjRay (ro, rd);\n    idObjT = idObj;\n    refFac *= 0.6;\n  }\n  bool isGrnd = false;\n  if (dstObj < dstGrnd) {\n    ro += dstObj * rd;\n    vn = ObjNf (ro);\n    idObj = idObjT;\n    objCol = ObjCol (ro, vn);\n    if (idObj == 10) objCol = vec3 (0.2) + 0.5 * SkyCol (ro, reflect (rd, vn));\n    float dif = max (dot (vn, sunDir), 0.);\n    col = sunCol * objCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * ObjSShadow (ro, sunDir) *\n       (dif + 0.5 * pow (max (0., dot (sunDir, reflect (rd, vn))), 100.)));\n    dstHit = dstObj;\n  } else {\n    vec3 rp = ro + dstGrnd * rd;\n    if (refFac < 1.) dstHit = length (rp - roo);\n    else dstHit = dstGrnd;\n    if (dstHit < dstFar) {\n      ro = rp;\n      isGrnd = true;\n    } else {\n      col = refFac * SkyCol (ro, rd);\n    }\n  }\n  if (isGrnd) {\n    vn = GrndNf (ro, dstHit);\n    col4 = GrndCol (ro, vn);\n    col = col4.xyz * refFac;\n    float dif = max (dot (vn, sunDir), 0.);\n    col *= sunCol * (0.2 * (1. +\n       max (dot (vn, - normalize (vec3 (sunDir.x, 0., sunDir.z))), 0.)) +\n       max (0., dif) * GrndSShadow (ro, sunDir) *\n       (dif + col4.w * pow (max (0., dot (sunDir, reflect (rd, vn))), 100.)));\n  }\n  if (dstPropel < dstFar) col = 0.7 * col + 0.1 -\n     0.04 * SmoothBump (1.5, 1.7, 0.02, length (qHitTransObj.xy));\n  if (dstHit < dstFar) {\n    f = dstHit \/ dstFar;\n    col = mix (col, refFac * SkyBg (rd), clamp (1.03 * f * f, 0., 1.));\n  }\n  col = sqrt (clamp (col, 0., 1.));\n  return clamp (col, 0., 1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  vec2 uvs = uv;\n  uv.x *= iResolution.x \/ iResolution.y;\n  trkOffset = vec2 (0.);\n  float zmFac = 2.7;\n  tCur = 15. * iGlobalTime + 100. * trkOffset.y;\n  sunDir = normalize (vec3 (0.9, 1., 0.4));\n  sunCol = vec3 (1., 0.9, 0.8);\n  vec3 ro, rd, vd, fpF, fpB, vDir;\n  szFac = 0.25;\n  float dt = 1.;\n  fpF = TrackPath (tCur + dt);\n  flyerPos = TrackPath (tCur);\n  fpB = TrackPath (tCur - dt);\n  vec3 vel = (fpF - fpB) \/ (2. * dt);\n  vel.y = 0.;\n  vec3 acc = (fpF - 2. * flyerPos + fpB) \/ (dt * dt);\n  acc.y = 0.;\n  vec3 va = cross (acc, vel) \/ length (vel);\n  float roll = 12. * length (va);\n  if (va.y < 0.) roll *= -1.;\n  vDir = normalize (vel);\n  float cRl = cos (roll);\n  float sRl = sin (roll);\n  flyerMat = mat3 (cRl, - sRl, 0., sRl, cRl, 0., 0., 0., 1.) *\n     mat3 (vDir.z, 0., vDir.x, 0., 1., 0., - vDir.x, 0., vDir.z);\n  float vuPeriod = 500.;\n  flyerPos.y = 3. + 1.5 * sin (2.5 * tCur \/ vuPeriod);\n  float lookDir = 2. * mod (floor (tCur \/ vuPeriod), 2.) - 1.;\n  ro = TrackPath (tCur - 40. * lookDir * (1. -\n     0.8 * abs (sin (pi * mod (tCur, vuPeriod) \/ vuPeriod))));\n  ro.y = 3. + 0.6 * sin (0.16 * tCur \/ vuPeriod);\n  vd = flyerPos - ro;\n  vd.y = 0.;\n  vd = normalize (lookDir * vDir + 0.3 * normalize (vd));\n  mat3 scMat = mat3 (vd.z, 0., - vd.x, 0., 1., 0., vd);\n  rd = scMat * normalize (vec3 (uv, zmFac));\n  vec3 col = ShowScene (ro, rd);\n  uvs *= uvs * uvs;\n  col = mix (vec3 (0.7), col, pow (max (0., 0.95 - length (uvs * uvs * uvs)), 0.3));\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}