{"Shader":{"ver":"0.1","info":{"id":"4lf3z2","date":"1423244222","viewed":740,"name":"Face \/ Edge \/ Vertex Transitive","username":"paniq","description":"Demonstrates how cube and octahedron are each others dual (one's face is the other's vertex), and the rhombic dodecahedron unites vertices from both sets and turns either edges into faces.","likes":3,"published":3,"flags":0,"tags":["mattdamon"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\n\/\/------------------------------------------------------------------------\n\/\/ Camera\n\/\/\n\/\/ Move the camera. In this case it's using time and the mouse position\n\/\/ to orbitate the camera around the origin of the world (0,0,0), where\n\/\/ the yellow sphere is.\n\/\/------------------------------------------------------------------------\nvoid doCamera( out vec3 camPos, out vec3 camTar, in float time, in float mouseX )\n{\n    float an = 0.05*iGlobalTime + 10.0*mouseX;\n\tcamPos = vec3(4.5*sin(an),2.0,4.5*cos(an));\n    camTar = vec3(0.0,0.0,0.0);\n}\n\n\n\/\/------------------------------------------------------------------------\n\/\/ Background \n\/\/\n\/\/ The background color. In this case it's just a black color.\n\/\/------------------------------------------------------------------------\nvec3 doBackground( void )\n{\n    return vec3( 0.0, 0.0, 0.0);\n}\n\n\/\/ all three basic bodies are symmetric across the XYZ planes\n\/\/ octahedron and rhombic dodecahedron have been scaled to align\n\/\/ with the vertices of the cube.\n\n\/\/ 1D distance of X Y Z planes\nvec2 cube(vec3 p, float r) {\n    vec3 o = abs(p);\n\tfloat s = o.x;\n\ts = max(s, o.y);\n\ts = max(s, o.z);\n\treturn vec2(s-r, 0.0);\n}\n\n\/\/ 3D distance of XYZ cross diagonal plane\nvec2 octahedron(vec3 p, float r) {\n    vec3 o = abs(p) \/ sqrt(3.0);\n\tfloat s = o.x+o.y+o.z;\n\treturn vec2(s-r*2.0\/sqrt(3.0), 1.0);\n}\n\n\/\/ 2D distance of XY YZ ZX diagonal planes\nvec2 rhombic(vec3 p, float r) {\n    vec3 o = abs(p) \/ sqrt(2.0);    \n\tfloat s = o.x+o.y;\n\ts = max(s, o.y+o.z);\n\ts = max(s, o.z+o.x);\n\treturn vec2(\n        s-r*sqrt(2.0),\n        2.0);\n}\n\nvec2 capsule(vec3 p, vec3 a, vec3 b)\n{\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n    return vec2(length( pa - ba*h ), 3.0);\n}\n\n\/\/ cube-centered axis (cubic symmetry), 6 directions\nvec2 axis_cc(vec3 p) {\n    vec3 o = p*p;    \n    float s = sqrt(o.x+o.y);\n    s = min(s, sqrt(o.x+o.z));\n    s = min(s, sqrt(o.y+o.z));\n    return vec2(s, 0.0);\n}\n\n\/\/ face-centered axis (rhombic dodecahedral symmetry), 12 directions\nvec2 axis_fcc(vec3 p) {\n    vec3 o = abs(p);\n    vec3 q = o \/ 2.0;\n    float s = length(vec3(o.xy - (q.x + q.y), o.z));\n    s = min(s, length(vec3(o.xz - (q.x + q.z), o.y)));\n    s = min(s, length(vec3(o.yz - (q.y + q.z), o.x)));\n    return vec2(s, 2.0);\n}\n\n\/\/ body-centered axis (octahedral symmetry), 8 directions\nvec2 axis_bcc(vec3 p) {\n    vec3 o = abs(p);    \n    return vec2(length( o - (o.x+o.y+o.z) \/ 3.0 ), 1.0);\n}\n\n\nvec2 min2(vec2 a, vec2 b) {\n    return (a.x <= b.x)?a:b;\n}\n\nvec2 max2(vec2 a, vec2 b) {\n    return (a.x > b.x)?a:b;\n}\n\nvec2 plane( vec3 p) {\n    return vec2(p.y+2.0,3.0);\n}\n\n#define SHAPE_COUNT 4.0\nvec2 get_shape(vec3 p, int i) {\n    if (i == 0) {\n        return cube(p, 1.0);\n    } else if ((i == 1)||(i == 3)) {\n        return rhombic(p, 1.0);\n    } else if (i == 2) {\n        return octahedron(p, 1.0);\n    }\n    return vec2(0.0);\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Modelling \n\/\/\n\/\/ Defines the shapes (a sphere in this case) through a distance field, in\n\/\/ this case it's a sphere of radius 1.\n\/\/------------------------------------------------------------------------\nvec2 doModel( vec3 p ) {\n    vec2 m = axis_bcc(p);\n    m = min2(m, axis_fcc(p));\n    m = min2(m, axis_cc(p));\n    m.x -= 0.05;\n    \n    float k = iGlobalTime*0.1;\n    float u = smoothstep(0.0,1.0,pow(fract(k),3.0));\n    int s1 = int(mod(k,SHAPE_COUNT));\n    int s2 = int(mod(k+1.0,SHAPE_COUNT));    \n    vec2 sh = mix(get_shape(p,s1),get_shape(p,s2),u);\n    m = min2(m, sh);\n    \n    return m;\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Material \n\/\/\n\/\/ Defines the material (colors, shading, pattern, texturing) of the model\n\/\/ at every point based on its position and normal. In this case, it simply\n\/\/ returns a constant yellow color.\n\/\/------------------------------------------------------------------------\nvec3 doMaterial( in vec3 pos, in vec3 nor )\n{\n    float k = doModel(pos).y;\n    return mix(mix(mix(vec3(1.0,0.07,0.01),vec3(0.2,1.0,0.01),clamp(k,0.0,1.0)),\n               vec3(0.1,0.07,1.0),\n               clamp(k-1.0,0.0,1.0)),\n               vec3(0.1),\n               clamp(k-2.0,0.0,1.0));\n}\n\n\/\/------------------------------------------------------------------------\n\/\/ Lighting\n\/\/------------------------------------------------------------------------\nfloat calcSoftshadow( in vec3 ro, in vec3 rd );\n\nvec3 doLighting( in vec3 pos, in vec3 nor, in vec3 rd, in float dis, in vec3 mal )\n{\n    vec3 lin = vec3(0.0);\n\n    \/\/ key light\n    \/\/-----------------------------\n    vec3  lig = normalize(vec3(1.0,0.7,0.9));\n    float dif = max(dot(nor,lig),0.0);\n    float sha = 0.0; if( dif>0.01 ) sha=calcSoftshadow( pos+0.01*nor, lig );\n    lin += dif*vec3(4.00,4.00,4.00)*sha;\n\n    \/\/ ambient light\n    \/\/-----------------------------\n    lin += vec3(0.50,0.50,0.50);\n\n    \n    \/\/ surface-light interacion\n    \/\/-----------------------------\n    vec3 col = mal*lin;\n\n    \n    \/\/ fog    \n    \/\/-----------------------------\n\tcol *= exp(-0.01*dis*dis);\n\n    return col;\n}\n\nfloat calcIntersection( in vec3 ro, in vec3 rd )\n{\n\tconst float maxd = 20.0;           \/\/ max trace distance\n\tconst float precis = 0.001;        \/\/ precission of the intersection\n    float h = precis*2.0;\n    float t = 0.0;\n\tfloat res = -1.0;\n    for( int i=0; i<90; i++ )          \/\/ max number of raymarching iterations is 90\n    {\n        if( h<precis||t>maxd ) break;\n\t    h = doModel( ro+rd*t ).x;\n        t += h;\n    }\n\n    if( t<maxd ) res = t;\n    return res;\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n    const float eps = 0.002;             \/\/ precision of the normal computation\n\n    const vec3 v1 = vec3( 1.0,-1.0,-1.0);\n    const vec3 v2 = vec3(-1.0,-1.0, 1.0);\n    const vec3 v3 = vec3(-1.0, 1.0,-1.0);\n    const vec3 v4 = vec3( 1.0, 1.0, 1.0);\n\n\treturn normalize( v1*doModel( pos + v1*eps ).x + \n\t\t\t\t\t  v2*doModel( pos + v2*eps ).x + \n\t\t\t\t\t  v3*doModel( pos + v3*eps ).x + \n\t\t\t\t\t  v4*doModel( pos + v4*eps ).x );\n}\n\nfloat calcSoftshadow( in vec3 ro, in vec3 rd )\n{\n    float res = 1.0;\n    float t = 0.0005;                 \/\/ selfintersection avoidance distance\n\tfloat h = 1.0;\n    for( int i=0; i<40; i++ )         \/\/ 40 is the max numnber of raymarching steps\n    {\n        h = doModel(ro + rd*t).x;\n        res = min( res, 64.0*h\/t );   \/\/ 64 is the hardness of the shadows\n\t\tt += clamp( h, 0.02, 2.0 );   \/\/ limit the max and min stepping distances\n    }\n    return clamp(res,0.0,1.0);\n}\n\nmat3 calcLookAtMatrix( in vec3 ro, in vec3 ta, in float roll )\n{\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(sin(roll),cos(roll),0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n    return mat3( uu, vv, ww );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy + 2.0*fragCoord.xy)\/iResolution.y;\n    vec2 m = iMouse.xy\/iResolution.xy;\n\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n    \n    \/\/ camera movement\n    vec3 ro, ta;\n    doCamera( ro, ta, iGlobalTime, m.x );\n\n    \/\/ camera matrix\n    mat3 camMat = calcLookAtMatrix( ro, ta, 0.0 );  \/\/ 0.0 is the camera roll\n    \n\t\/\/ create view ray\n\tvec3 rd = normalize( camMat * vec3(p.xy,2.0) ); \/\/ 2.0 is the lens length\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\n\tvec3 col = doBackground();\n\n\t\/\/ raymarch\n    float t = calcIntersection( ro, rd );\n    if( t>-0.5 )\n    {\n        \/\/ geometry\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal(pos);\n\n        \/\/ materials\n        vec3 mal = doMaterial( pos, nor );\n\n        col = doLighting( pos, nor, rd, t, mal );\n\t}\n\n\t\/\/-----------------------------------------------------\n\t\/\/ postprocessing\n    \/\/-----------------------------------------------------\n    \/\/ gamma\n\tcol = pow( clamp(col,0.0,1.0), vec3(0.4545) );\n\t   \n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}