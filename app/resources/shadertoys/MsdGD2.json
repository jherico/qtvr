{"Shader":{"ver":"0.1","info":{"id":"MsdGD2","date":"1452319990","viewed":321,"name":"One Sample Blur","username":"iq","description":"How to do a 2x2 box blur with a single texture sample.","likes":7,"published":3,"flags":32,"tags":["2d","blur","fast","trick"],"hasliked":0},"renderpass":[{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Trick: take one single texture sample at the very corner of a texel, right where the \n\/\/ four texels meet. That way the bilinear filtering hardware will average the four\n\/\/ pixels for you, meaning you no longer need to sample the texture four tims in order\n\/\/ to do a downsample or a box blur operation. This can be useful if you need a fast\n\/\/ reduction of your framebuffer to half resolution for doing SSAO or some postprocessing \n\/\/ effect.\n\/\/\n\/\/ This shader shows the technique by blurring an image repeatedly with only ONE texture\n\/\/ sample.\n\/\/\n\/\/ A more advanced use of this for gaussian blurs here: https:\/\/www.shadertoy.com\/view\/Xd33Rf\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfragColor = texture2D( iChannel0, fragCoord \/ iResolution.xy );\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2016\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Trick: take one single texture sample at the very corner of a texel, right where the \n\/\/ four texels meet. That way the bilinear filtering hardware will average the four\n\/\/ pixels for you, meaning you no longer need to sample the texture four tims in order\n\/\/ to do a downsample or a box blur operation. This can be useful if you need a fast\n\/\/ reduction of your framebuffer to half resolution for doing SSAO or some postprocessing \n\/\/ effect.\n\/\/\n\/\/ This shader shows the technique by blurring an image repeatedly with only ONE texture\n\/\/ sample.\n\/\/\n\/\/ A more advanced use of this for gaussian blurs here: https:\/\/www.shadertoy.com\/view\/Xd33Rf\n\n\nvec4 createTexture( in vec2 p );\n\n\/\/ ---------------------------------------------------------------------------------------------\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/ blur    \n    float s = -0.5+2.0*fract(float(iFrame)\/2.0);  \/\/ generate -0.5 or +0.5 alternativelly\n    fragColor = texture2D( iChannel0, (fragCoord+s) \/ iResolution.xy );\n\n\n    \/\/ initial image\n    if( iFrame==0 ) fragColor = createTexture(fragCoord\/iChannelResolution[0].xy);\n}\n\n\n\n\/\/ ---------------------------------------------------------------------------------------------\n\nvec4 createTexture( in vec2 p )\n{\n    vec2 cc = vec2( -0.1, 0.68 );\n\n\tvec4 dmin = vec4(1000.0);\n    float w = 0.0;\n    vec2 z = 1.1*(-1.0 + 2.0*p)*vec2(iChannelResolution[0].x\/iChannelResolution[0].y,1.0);\n    for( int i=0; i<80; i++ )\n    {\n        z = cc + vec2( z.x*z.x - z.y*z.y, 2.0*z.x*z.y );\n\n\t\tdmin=min(dmin, vec4(length( z-0.5), \n\t\t\t\t\t\t\tabs(-0.5+z.x + 0.2*sin(5.0*z.y)), \n\t\t\t\t\t\t\tdot(z,z),\n\t\t\t\t\t\t    length( fract(z\/8.0)-0.5) ) );\n        if( dot(z,z)>4.0 ) w=1.0;\n    }\n   \n    vec3 col = vec3(0.6,0.6,0.6);\n    col * 0.4+0.6*w;\n    col *= mix( vec3(1.0,0.45,0.1), vec3(1.0), w );\n    col *= 0.65 + dmin.w;\n    col = mix( col, 1.5*vec3(0.7,0.7,0.7),1.0-clamp(dmin.y*15.0,0.0,1.0) );\n    col = mix( col, vec3(1.1,1.1,1.0),1.0-clamp(dmin.x*2.0,0.0,1.0) );\n\tcol *= 0.5 + 0.5*clamp(dmin.z*50.0,0.0,1.0);\n\n\n    return vec4( col, 1.0 );\n}\n","name":"","description":"","type":"buffer"}]}}