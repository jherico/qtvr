{"Shader":{"ver":"0.1","info":{"id":"4lBSDD","date":"1443569051","viewed":627,"name":"FireFlicker","username":"jherico","description":"testing a flickering light algorithm. ","likes":0,"published":3,"flags":0,"tags":["2d"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"const float UPDATE_INTERVAL = 1.0 \/ 30.0; \/\/ 30fps\nconst float MINIMUM_LIGHT_INTENSITY = 0.75;\nconst float MAXIMUM_LIGHT_INTENSITY = 2.75;\nconst float LIGHT_INTENSITY_RANDOMNESS = 0.3;\nconst float MAXIMUM_LIGHT = MINIMUM_LIGHT_INTENSITY + 2.0 * MAXIMUM_LIGHT_INTENSITY + LIGHT_INTENSITY_RANDOMNESS;\nconst vec3 color = vec3(255, 100, 28) \/ 255.0;\nconst float UPDATE_RATE = 30.0;\n\n\/\/ *** Use these for integer ranges, ie Value-Noise\/Perlin functions.\n\/\/#define MOD3 vec3(.0631,.07369,.08787)\n\/\/#define MOD4 vec4(.0631,.07369,.08787, .09987)\n\n\/\/ This set suits the coords of of 0-1.0 ranges..\n#define MOD3 vec3(443.8975,397.2973, 491.1871)\n#define MOD4 vec4(443.8975,397.2973, 491.1871, 470.7827)\n\n\n\/\/----------------------------------------------------------------------------------------\n\/\/  1 out, 1 in...\nfloat hash11(float p)\n{\n\tvec3 p3  = fract(vec3(p) * MOD3);\n    p3 += dot(p3, p3.yzx + 19.19);\n    return fract(p3.x * p3.y * p3.z);\n}\n\n\n    \nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float t = iGlobalTime;\n    t *= UPDATE_RATE;\n    t -= fract(t);\n    t \/= UPDATE_RATE;\n    float intensity = (MINIMUM_LIGHT_INTENSITY + (MAXIMUM_LIGHT_INTENSITY + (sin(t) * MAXIMUM_LIGHT_INTENSITY)));\n    intensity += LIGHT_INTENSITY_RANDOMNESS + (hash11(t) * 2.0) - 1.0;\n    intensity \/= MAXIMUM_LIGHT;\n\tfragColor = vec4( color* intensity,1.0);\n}\n","name":"","description":"","type":"image"}]}}