{"Shader":{"ver":"0.1","info":{"id":"ltSGRc","date":"1430837849","viewed":673,"name":"Particle Experiment 4 : 3D","username":"aiekick","description":"Particle Experiment 1 in 3d","likes":1,"published":3,"flags":0,"tags":["3d","experiment","4","particle"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ use mouse y to change pattern\n\/\/ use mouse x to change camera distance\n\nconst vec2 RMPrec = vec2(0.5, 0.001); \/\/ ray marching tolerance precision \/\/ low, high\nconst vec2 DPrec = vec2(1e-5, 10.); \/\/ ray marching distance precision \/\/ low, high\n    \nfloat pattern = 3.; \/\/ pattern value 1. to 5. use mouse y to change\n\nfloat kernelRadius = 4.5; \/\/ radius of kernel\n\nfloat norPrec = 0.01; \/\/ normal precision \n  \n#define mPi 3.14159\n#define m2Pi 6.28318\n\nfloat power = 0.8;\nfloat duration = 2.8;\nfloat startRadius = 0.1;\nfloat endRadius = 0.5;\nconst int nBall = 30;\n\nfloat smin( float a, float b, float k )\n{\n    float h = clamp( 0.5+0.5*(b-a)\/k, 0.0, 1.0 );\n    return mix( b, a, h ) - k*h*(1.0-h);\n}\n\nvec2 map(vec3 p)\n{\n    vec2 res = vec2(0.);\n    \n    float t = iGlobalTime;\n        \n    for (int i=0; i<nBall; i++)\n    {\n        float d = fract(t*power+48934.4238*sin(float(i)*692.7398))*duration;\n    \t\n        vec3 a = m2Pi*float(i)\/(float(nBall)\/vec3(1.,2.,3.));\n        \n        vec3 o = vec3(cos(a.x),sin(a.y),sin(a.z))*d;\n        \n        float distRatio = d\/duration;\n        \n        float mbRadius = mix(startRadius, endRadius, distRatio);\n        \n        float sp = length(p-o) - mbRadius;\n        \n        if (i==0) \n            res.x = sp;\n        else \n            res.x = smin(res.x, sp, 1.);\n    }\n    \n    return res;\n}\n\nvec3 nor(vec3 p, float prec)\n{\n    vec2 e = vec2(prec, 0.);\n    \n    vec3 n;\n    \n    n.x = map(p+e.xyy).x - map(p-e.xyy).x; \n    n.y = map(p+e.yxy).x - map(p-e.yxy).x; \n    n.z = map(p+e.yyx).x - map(p-e.yyx).x;  \n    \n    return normalize(n); \n}\n\nvec4 scn(vec4 col, vec3 ro, vec3 rd)\n{\n    vec2 s = vec2(DPrec.x);\n    float d = 0.;\n    vec3 p = ro+rd*d;\n    vec4 c = col;\n    \n    float b = 0.35;\n    \n    float t = 1.1*(sin(iGlobalTime*.3)*.5+.6);\n    \n    for(int i=0;i<200;i++)\n    {\n    \tif(s.x<DPrec.x||s.x>DPrec.y) break;\n        s = map(p);\n        d += s.x*(s.x>DPrec.x?RMPrec.x:RMPrec.y);\n        p = ro+rd*d;\n    }\n    \n    if (s.x<DPrec.x)\n    {\n        vec3 n = nor(p, norPrec); \n      \tvec3 cuberay = textureCube(iChannel0, n).rgb * 0.5;\n        c.rgb = cuberay + pow(b, 25.);\n    }\n    else\n    {\n       \tc = textureCube(iChannel0, rd);\n    }\n    \n    return c;\n}\n\nvec3 cam(vec2 uv, vec3 ro, vec3 cu, vec3 org, float persp)\n{\n\tvec3 rorg = normalize(org-ro);\n    vec3 u =  normalize(cross(cu, rorg));\n    vec3 v =  normalize(cross(rorg, u));\n    vec3 rd = normalize(rorg + u*uv.x + v*uv.y);\n    return rd;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 s = iResolution.xy;\n    vec2 g = fragCoord.xy;\n    vec2 uv = (2.*g-s)\/s.y;\n    vec2 m = iMouse.xy;\n    \n    float t = iGlobalTime*0.2;\n    float ts = sin(t)*.5+.5;\n    \n    float axz = -t; \/\/ angle XZ\n    float axy = .8; \/\/ angle XY\n    float cd = 5.5;\/\/*ts; \/\/ cam dist to scene origine\n    \n    if ( iMouse.z>0.) cd = 10. * m.x\/s.x; \/\/ mouse x axis \n    if ( iMouse.z>0.) pattern = floor(6. * m.y\/s.y); \/\/ mouse y axis \n    \n    float ap = 1.; \/\/ angle de perspective\n    vec3 cu = vec3(0.,1.,0.); \/\/ cam up \n    vec3 org = vec3(0., 0., 0.); \/\/ scn org\n    vec3 ro = vec3(cos(axz),sin(axy),sin(axz))*cd; \/\/ cam org\n    \n    vec3 rd = cam(uv, ro, cu, org, ap);\n    \n    vec4 c = vec4(0.,0.,0.,1.); \/\/ col\n    \n    c = scn(c, ro, rd);\/\/scene\n    \n    fragColor = c;\n}\n","name":"","description":"","type":"image"}]}}