{"Shader":{"ver":"0.1","info":{"id":"MtlXWj","date":"1440160232","viewed":937,"name":"Attack of the Space Slugs","username":"tsherif","description":"Took the terrain from the SIGGRAPH 2015 Shadertoy workshop and added some flying slugs to it.<br\/><br\/>Click and drag to look around.","likes":5,"published":3,"flags":0,"tags":["raymarching","siggraph","slugs"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float sinNoise(in vec2 pos) {\n  return 0.5 * (sin(pos.x) + sin(pos.y));\n}\n\nconst mat2 m2 = mat2(0.8, -0.6, 0.6, 0.8);\n\nfloat mapH(in vec3 pos) {\n    float h = 0.0;\n    vec2 q = pos.xz * 0.5;\n    float s = 0.5;\n    for (int i = 0; i < 12; i++){\n        h += s * sinNoise(q);\n        s *= 0.49;\n        q = m2 * q * 1.7;\n    }\n    \n    return pos.y - h * 3.0;\n}\n\nfloat mapS(in vec3 pos) {\n    pos.z -= iGlobalTime * 2.0;\n    vec3 c = mod(pos, 10.0) - 4.0;\n    c.y = pos.y - 6.0 + sin(iGlobalTime * 2.0 + pos.z * 2.5 + pos.x);\n    float r = 1.0;\n    float d = length(c) - r;\n    \n    d += 0.1 * sin(pos.x * 10.0 + iGlobalTime) * sin(pos.y * 10.0 + iGlobalTime) * sin(pos.z * 10.0 + iGlobalTime);\n    \n    return d;\n}\n\nfloat map(in vec3 pos) {\n    return min(mapH(pos), mapS(pos));   \n}\n\nvec3 calcNormal(in vec3 pos) {\n    vec3 nor;\n    vec2 e = vec2(0.01, 0.0);\n    \n    nor.x = map(pos + e.xyy) - map(pos - e.xyy);\n    nor.y = map(pos + e.yxy) - map(pos - e.yxy);\n    nor.z = map(pos + e.yyx) - map(pos - e.yyx);\n    \n    return normalize(nor);\n}\n\nfloat calcShadow(vec3 ro, vec3 rd) {\n    float res = 1.0;\n    \n    float t = 0.1;\n    \n    for (int i = 0; i < 16; i++) {\n        vec3 pos = ro + t * rd;\n        float h = map(pos);\n        res = min(res, 10.0 * max(h, 0.0) \/ t);\n        \n        if (res < 0.1) break;\n        \n        t += h;\n    }\n    \n    return max(res, 0.1);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 pos = fragCoord.xy \/ iResolution.xy;\n    vec2 mouse = iMouse.xy \/ iResolution.xy;\n    \n    pos = pos * 2.0 - 1.0;\n    mouse = mouse * 2.0 - 1.0;\n    \n    pos.x *= iResolution.x \/ iResolution.y;\n    mouse.x *= iResolution.x \/ iResolution.y;\n    \n    vec3 color = vec3(0.7, 0.8, 0.9);    \n    vec3 ro = vec3(0.0, 2.0, 1.0 * -iGlobalTime);\n    vec3 rd = vec3(pos, -1.0);\n    \n    if (iMouse.x > 0.0) {\n    \trd.xy += mouse;\n    }\n    \n    rd = normalize(rd);\n    \n    color *= 1.0 - 0.5 * rd.y;\n\n    \n    float tmax = 80.0;\n    float t = 0.0;\n    \n    for (int i = 0; i < 256; i++) {\n      vec3 pos = ro + rd * t;\n        float h = map(pos);\n        if (h < 0.001 || t > tmax) break;\n        t += h * 0.5;\n    }\n    \n    vec3 light = normalize(vec3(1.0,1.0,0.5));\n    \n    if (t < tmax) {\n        vec3 pos = ro + rd * t;\n        vec3 nor = calcNormal(pos);\n        float sha = calcShadow(pos + nor * 0.1, light);\n        vec3 spec = vec3(0.0);\n        \n        vec3 mat;\n        if (pos.y > 3.0) {\n            mat = vec3(1.0, 0.7, 0.6);\n            spec = vec3(1.0) * pow(max(dot(-rd, reflect(-light, nor)), 0.0), 100.0);\n        } else {\n            mat = vec3(0.5, 0.2, 0.1);\n        \tmat = mix(mat, vec3(0.2, 0.5, 0.1), smoothstep(0.7, 0.9, nor.y));\n        }\n        \n        vec3 diff = max(0.0, dot(light, nor)) * vec3(1.0) * sha;\n        color = mat * (diff + spec);\n        \n        float fog = exp(-0.001 * t * t);\n        color = mix(vec3(0.6, 0.7, 0.8), color, fog);\n    }\n    \n    color = sqrt(color);\n    \n    fragColor = vec4(color, 1.0);\n}","name":"","description":"","type":"image"}]}}