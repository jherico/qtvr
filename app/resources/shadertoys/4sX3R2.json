{
	"Shader": 
	[
		{
			"ver": "0.1",
			"info": 
			{
				"id": "4sX3R2",
				"date": "1379564832",
				"viewed": 13618,
				"name": "Monster",
				"username": "iq",
				"description": "Rotating, translating and reflecting a sphere 22 times (and using orbit trapping for coloring). Raymarching and lighting as usual.",
				"likes": 40,
				"published": 3,
				"tags": 
				[
					"procedural",
					"3d",
					"raymarching",
					"fractal"
				],

				"hasliked": 0
			},

			"renderpass": 
			[
				{
					"inputs": 
					[
						{
							"id": 26,
							"src": "\/presets\/cube04_0.png",
							"ctype": "cubemap",
							"channel": 0
						}
					],

					"outputs": 
					[
						{
							"channel": "0",
							"dst": "-1"
						}
					],

					"code": "// aaaaCreated by inigo quilez - iq/2013\n// License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n#pragma vr\nvec3 hash3(float n) {\n  return fract(\n      sin(vec3(n, n + 1.0, n + 2.0))\n          * vec3(43758.5453123, 22578.1459123, 19642.3490423));\n}\n\nvec3 noise( in float x )\n{\n  float p = floor(x);\n  float f = fract(x);\n  f = f*f*(3.0-2.0*f);\n  return mix( hash3(p+0.0), hash3(p+1.0),f);\n}\n\nmat4 rotationMat( in vec3 xyz )\n{\n  vec3 si = sin(xyz);\n  vec3 co = cos(xyz);\n\n  return mat4( co.y*co.z, co.y*si.z, -si.y, 0.0,\n      si.x*si.y*co.z-co.x*si.z, si.x*si.y*si.z+co.x*co.z, si.x*co.y, 0.0,\n      co.x*si.y*co.z+si.x*si.z, co.x*si.y*si.z-si.x*co.z, co.x*co.y, 0.0,\n      0.0, 0.0, 0.0, 1.0 );\n}\n\nmat3 rotationMatrix(vec3 axis, float angle) {\n  axis = normalize(axis);\n  float s = sin(angle);\n  float c = cos(angle);\n  float oc = 1.0 - c;\n\n  return mat3(\n      oc * axis.x * axis.x + c, \n      oc * axis.x * axis.y - axis.z * s,\n      oc * axis.z * axis.x + axis.y * s, \n      oc * axis.x * axis.y + axis.z * s,\n      oc * axis.y * axis.y + c, \n      oc * axis.y * axis.z - axis.x * s,\n      oc * axis.z * axis.x - axis.y * s, \n      oc * axis.y * axis.z + axis.x * s,\n      oc * axis.z * axis.z + c);\n}\n\nconst float s = 1.1;\n\nmat4 mm;\n\nvec3 map(vec3 p) {\n  float k = 1.0;\n  float m = 1e10;\n  for (int i = 0; i \u003c 22; i++) {\n    m = min(m, dot(p, p) / (k * k));\n    p = (mm * vec4((abs(p)), 1.0)).xyz;\n    k *= s;\n  }\n\n  float d = (length(p) - 0.25) / k;\n\n  float h = p.z - 0.35 * p.x;\n\n  return vec3(d, m, h);\n}\n\nvec3 intersect( in vec3 ro, in vec3 rd ) {\n  float t = 0.0;\n  for( int i=0; i\u003c100; i++ ) {\n    vec3 res = map( ro+rd*t );\n    if( res.x\u003c0.0002 ) return vec3(t,res.yz);\n    t += res.x;\n    if( t\u003e9.0 ) break;\n  }\n\n  return vec3( -1.0 );\n}\n\nvec3 calcNormal( in vec3 pos, float e ) {\n  vec3 eps = vec3(e,0.0,0.0);\n\n  return normalize( vec3(\n          map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n          map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n          map(pos+eps.yyx).x - map(pos-eps.yyx).x ) );\n}\n\nfloat softshadow( in vec3 ro, in vec3 rd, float mint, float k ) {\n  float res = 1.0;\n  float t = mint;\n  for( int i=0; i\u003c32; i++ )\n  {\n    float h = map(ro + rd*t).x;\n    h = max( h, 0.0 );\n    res = min( res, k*h/t );\n    t += clamp( h, 0.001, 0.1 );\n    if( res\u003c0.01 || t\u003e6.0 ) break;\n  }\n  return clamp(res,0.0,1.0);\n}\n\nfloat calcAO( in vec3 pos, in vec3 nor ) {\n  float totao = 0.0;\n  for( int aoi=0; aoi\u003c16; aoi++ )\n  {\n    vec3 aopos = -1.0+2.0*hash3(float(aoi)*213.47);\n    aopos *= sign( dot(aopos,nor) );\n    aopos = pos + nor*0.01 + aopos*0.04;\n    float dd = clamp( map( aopos ).x*4.0, 0.0, 1.0 );\n    totao += dd;\n  }\n  totao /= 16.0;\n\n  return clamp( totao*totao*50.0, 0.0, 1.0 );\n}\n\nvoid main(void) {\n  vec2 q = gl_FragCoord.xy / iResolution.xy;\n\n  // animation    \n  float time = iGlobalTime;\n  time += 15.0 * smoothstep(15.0, 25.0, iGlobalTime);\n  time += 20.0 * smoothstep(65.0, 80.0, iGlobalTime);\n  time += 35.0 * smoothstep(105.0, 135.0, iGlobalTime);\n  time += 20.0 * smoothstep(165.0, 180.0, iGlobalTime);\n  time += 40.0 * smoothstep(220.0, 290.0, iGlobalTime);\n  time += 5.0 * smoothstep(320.0, 330.0, iGlobalTime);\n  float time1 = (time - 10.0) * 1.5 - 167.0;\n  float time2 = time;\n\n  mm = rotationMat(\n      vec3(0.4, 0.1, 3.4) + 0.15 * sin(0.1 * vec3(0.40, 0.30, 0.61) * time1)\n          + 0.15 * sin(0.1 * vec3(0.11, 0.53, 0.48) * time1));\n  mm[0].xyz *= s;\n  mm[1].xyz *= s;\n  mm[2].xyz *= s;\n  mm[3].xyz = vec3(0.15, 0.05, -0.07)\n      + 0.05 * sin(vec3(0.0, 1.0, 2.0) + 0.2 * vec3(0.31, 0.24, 0.42) * time1);\n\n  // camera\n  vec3 ro = iPos.zyx;\n  ro.x += 2;\n  vec3 rd = normalize(iDir.zyx); //normalize( p.x*uu + p.y*vv + 3.0*ww );\n  vec3 rdBg = rd;\n  \n  mat3 orbit = rotationMatrix(vec3(0.0, 1.0, 0.0), iGlobalTime / 2.0);\n  ro = orbit * ro;\n  rd = orbit * rd;\n  // raymarch\n  vec3 tmat = intersect(ro, rd);\n\n  // shade\n  vec3 col = vec3(0.0);\n  if (tmat.z \u003e -0.5) {\n    // geometry\n    vec3 pos = ro + tmat.x * rd;\n    vec3 nor = calcNormal(pos, 0.005);\n    vec3 sor = calcNormal(pos, 0.010);\n\n    // material\n    vec3 mate = vec3(1.0);\n    mate = mix(vec3(0.5, 0.5, 0.2), vec3(0.5, 0.3, 0.0),\n        0.5 + 0.5 * sin(4.0 + 8000.0 * tmat.y));\n    mate = mix(vec3(1.0, 0.9, 0.8), mate, 0.5 + 0.5 * sin(4.0 + 20.0 * tmat.z));\n    mate.x *= 1.15;\n\n    // lighting\n    float occ = 1.1 * calcAO(pos, nor);\n    occ *= 0.75 + 0.25 * clamp(tmat.y * 400.0, 0.0, 1.0);\n\n    // diffuse\n    col = vec3(0.0);\n    const int loop = 4;\n    for (int i = 0; i \u003c loop; i++) {\n      vec3 rr = normalize(-1.0 + 2.0 * hash3(float(i) * 123.5463));\n      rr = normalize(nor + 7.0 * rr);\n      rr = rr * sign(dot(nor, rr));\n      float ds = occ; //softshadow( pos, rr, 0.01, 32.0 );\n      col += pow(textureCube(iChannel0, rr).xyz, vec3(2.2)) * dot(rr, nor) * ds;\n    }\n    col /= float(loop);\n\n    col *= 1.8;\n\n    // subsurface       \n    col *= 1.0\n        + 1.0 * vec3(1.0, 0.6, 0.1) * pow(clamp(1.0 + dot(rd, sor), 0.0, 1.0), 2.0)\n            * vec3(1.0);\n\n    // specular     \n    float fre = pow(clamp(1.0 + dot(rd, nor), 0.0, 1.0), 5.0);\n    vec3 ref = reflect(rd, nor);\n    float rs = softshadow(pos, ref, 0.01, 32.0);\n    col += 1.8 * (0.04 + 12.0 * fre) * occ\n        * pow(textureCube(iChannel0, ref).xyz, vec3(2.0)) * rs;\n\n    col *= mate;\n  } else {\n    // background       \n    col = pow(textureCube(iChannel0, rdBg).xyz, vec3(2.2));\n  }\n\n  // gamma\n  col = pow(clamp(col, 0.0, 1.0), vec3(0.45));\n\n  // vigneting\n  col *= 0.5 + 0.5 * pow(16.0 * q.x * q.y * (1.0 - q.x) * (1.0 - q.y), 0.1);\n\n  gl_FragColor = vec4(col, 1.0);\n}\n",
					"name": "",
					"description": "",
					"type": "image"
				}
			]
		}
	]
}