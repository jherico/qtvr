{"Shader":{"ver":"0.1","info":{"id":"ltfGzs","date":"1427079981","viewed":604,"name":"Argyle Accident","username":"ForestCSharp","description":"Raymarching via JackAsser turns into a happy accident after inverting raycast function. Torus artifacts still present","likes":0,"published":3,"flags":0,"tags":["raymarching"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float PI=3.14159265;\n\n\nvec2 obj_union(in vec2 obj0, in vec2 obj1)\n{\n  if (obj0.x < obj1.x)\n  \treturn obj0;\n  else\n  \treturn obj1;\n}\n\n\/\/ Floor\nvec2 obj_floor(in vec3 p)\n{\n  return vec2(p.y+20.0,0);\n}\n\nvec2 obj_torus(in vec3 p)\n{\n  vec2 r = vec2(2.1,0.5);\n  vec2 q = vec2(length(p.xy)-r.x,p.z);\n  float d = length(q)-r.y;\n  return vec2(d,1);\n}\n\nvec2 op_sub(vec2 a, vec2 b)\n{\n  float d = max(a.x, -b.x);\n  return vec2(d,1);\n}\n\nvec2 obj_sphere(in vec3 p)\n{\n  float d = length(p)-4.;\n  return vec2(d,1);\n}\n\nvec2 obj_round_box(vec3 p)\n{\n  float d = length(max(abs(p)-vec3(4.0,0.5,2.0),0.0))-0.1;\n  return vec2(d,1);\n}\n\nvec2 distance_to_obj(in vec3 p)\n{\n  return obj_union(obj_floor(p), obj_torus(p));\n}\n\n\/\/Floor Color (checkerboard)\nvec3 floor_color(in vec3 p)\n{\n  if (fract(p.x*0.2)>0.2)\n  {\n    if (fract(p.z*0.2)>0.2)\n      return vec3(0,0.1,0.2);\n    else\n      return vec3(1,1,1);\n  }\n  else\n  {\n    if (fract(p.z*.2)>.2)\n      return vec3(1,1,1);\n    else\n      return vec3(0.3,0,0);\n   }\n}\n\n\/\/ Primitive color\nvec3 prim_c(in vec3 p)\n{\n  return vec3(0.,0.,0.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  \/\/Get Po\n  vec2 vPos = fragCoord.xy\/iResolution.xy - 0.5;\n\n  \/\/ Camera up vector.\n  vec3 vuv=vec3(0,1,0); \n  \n  \/\/ Camera lookat.\n  vec3 vrp=vec3(0,0,0);\n\n  float mx=iGlobalTime * 5. \/iResolution.x*PI*2.0;\n  float my=iMouse.y\/iResolution.y*PI\/2.01;\n  vec3 prp=vec3(cos(my)*cos(mx),sin(my),cos(my)*sin(mx))*6.0; \n\n  \/\/ Camera setup.\n  vec3 vpn=normalize(vrp-prp);\n  vec3 u=normalize(cross(vuv,vpn));\n  vec3 v=cross(vpn,u);\n  vec3 vcv=(prp+vpn);\n  vec3 scrCoord=vcv+vPos.x*u*iResolution.x\/iResolution.y+vPos.y*v;\n  vec3 scp=normalize(scrCoord-prp);\n\n  \/\/ Raymarching.\n  const vec3 e=vec3(0.05,0,0);\n  const float maxd=200.0; \/\/Max depth\n  vec2 d=vec2(0.1,0.0);\n  vec3 c,p,N;\n\n  float f=1.0;\n  for(int i=0;i<256;i++)\n  {\n    if ((abs(d.x) < .001) || (f > maxd)) \n      break;\n    \n    f+=d.y;\n    p=prp+scp*f;\n    d = distance_to_obj(p);\n  }\n  \n  if (f < maxd)\n  {\n    \/\/ y is used to manage materials.\n    if (d.y==0.0)\n      c=floor_color(p);\n    else\n      c=prim_c(p) + vec3(1.,0.,0.);\n    \n    vec3 n = vec3(d.x-distance_to_obj(p-e.xyy).x,\n                  d.x-distance_to_obj(p-e.yxy).x,\n                  d.x-distance_to_obj(p-e.yyx).x);\n    N = normalize(n);\n\tvec3 L = vec3(sin(iGlobalTime)*20.0,10,cos(iGlobalTime)*20.0);\n    float b=dot(N,normalize(prp-p+L));\n    \/\/simple phong lighting, LightPosition = CameraPosition\n    fragColor=vec4((b*c+pow(b,32.0))*(1.0-f*.01),1.0) * 2.;\n  }\n  else \n    fragColor=vec4(1.0,0.5,0.5,1); \/\/background color\n}\n","name":"","description":"","type":"image"}]}}