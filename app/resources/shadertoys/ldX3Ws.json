{"Shader":{"ver":"0.1","info":{"id":"ldX3Ws","date":"1381635042","viewed":5789,"name":"Balls and occlusion","username":"iq","description":"A few spheres with raytraced ambient occlusion.","likes":25,"published":3,"flags":0,"tags":["3d","raytracing","occlusion"],"hasliked":0},"renderpass":[{"inputs":[{"id":30,"src":"\/presets\/tex16.png","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n#define NUMSPHEREES 12\n\n#define eps 0.001\n\nvec2 hash2( float n )\n{\n    return fract(sin(vec2(n,n+1.0))*vec2(43758.5453123,22578.1459123));\n}\n\nvec3 hash3( float n )\n{\n    return fract(sin(vec3(n,n+1.0,n+2.0))*vec3(43758.5453123,22578.1459123,19642.3490423));\n}\n\nvec3 nSphere( in vec3 pos, in vec4 sph )\n{\n    return (pos-sph.xyz)\/sph.w;\n}\n\nfloat iSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n\tvec3 oc = ro - sph.xyz;\n\tfloat b = dot( oc, rd );\n\tfloat c = dot( oc, oc ) - sph.w*sph.w;\n\tfloat h = b*b - c;\n\tif( h<0.0 ) return -1.0;\n\treturn -b - sqrt( h );\n}\n\nfloat sSphere( in vec3 ro, in vec3 rd, in vec4 sph )\n{\n    vec3 oc = ro - sph.xyz;\n    float b = dot( oc, rd );\n    float c = dot( oc, oc ) - sph.w*sph.w;\n\t\n    return step( min( -b, min( c, b*b - c ) ), 0.0 );\n}\n\nvec4 sphere[NUMSPHEREES];\n\nfloat intersect( in vec3 ro, in vec3 rd, out vec3 nor, out float id )\n{\n\tfloat res = 1e20;\n\tfloat fou = -1.0;\n\t\n\tnor = vec3(0.0);\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tvec4 sph = sphere[i];\n\t    float t = iSphere( ro, rd, sph ); \n\t\tif( t>eps && t<res ) \n\t\t{\n\t\t\tres = t;\n\t\t\tnor = nSphere( ro + t*rd, sph );\n\t\t\tfou = 1.0;\n\t\t\tid = float(i);\n\t\t}\n\t}\n\t\t\t\t\t\t  \n    return fou * res;\t\t\t\t\t  \n}\n\nfloat shadow( in vec3 ro, in vec3 rd )\n{\n\tfloat res = 1.0;\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id = float(i);\n\t    float t = sSphere( ro, rd, sphere[i] ); \n\t\tres = min( t, res );\n\t}\n    return res;\t\t\t\t\t  \n}\n\nfloat getRad( float id )\n{\n\tfloat rad = 0.0;\n\tif( id<12.5 ) rad = 1.0;\n\tif( id<9.5 )  rad = 0.5;\n\tif( id<6.5 )  rad = 0.0;\n\treturn rad;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 q = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0 * q;\n    p.x *= iResolution.x\/iResolution.y;\n    vec2 m = vec2(0.5);\n\tif( iMouse.z>0.0 ) m = iMouse.xy\/iResolution.xy;\n\t\n    \/\/-----------------------------------------------------\n    \/\/ animate\n    \/\/-----------------------------------------------------\n\tfloat time = iGlobalTime - 11.6;\n\t\n\tfloat an = 0.3*time - 7.0*m.x;\n\n\tfor( int i=0; i<NUMSPHEREES; i++ )\n\t{\n\t\tfloat id  = float(i);\n\t\tfloat rad = getRad( id );\n\t    vec3  pos = 1.0*cos( 6.2831*hash3(id*37.17) + 0.5*(1.0-0.7*rad)*hash3(id*31.3+4.7)*time );\n\t\tsphere[i] = vec4( pos, (0.3+0.7 *rad) );\n    }\n\t\t\t\n    \/\/-----------------------------------------------------\n    \/\/ camera\n    \/\/-----------------------------------------------------\n\tvec3 ro = vec3(2.5*sin(an),1.5*cos(0.5*an),2.5*cos(an));\n    vec3 ta = vec3(0.0,0.0,0.0);\n    vec3 ww = normalize( ta - ro );\n    vec3 uu = normalize( cross(ww,vec3(0.0,1.0,0.0) ) );\n    vec3 vv = normalize( cross(uu,ww));\n\tvec3 rd = normalize( p.x*uu + p.y*vv + 2.0*ww );\n\n    \/\/-----------------------------------------------------\n\t\/\/ render\n    \/\/-----------------------------------------------------\n\tvec3 col = vec3(1.0) * (0.98+0.1*rd.y);\n\n\t\/\/ raymarch\n\tvec3 nor;\n\tfloat id;\n\tfloat t = intersect(ro,rd,nor, id);\n\tif( t>0.0 )\n\t{\n\t\tvec3 pos = ro + t*rd;\n\t\t\n\t\tfloat occ = 0.0;\n\n        #if 0\n\t\tvec3  uu  = normalize( cross( nor, vec3(0.0,1.0,1.0) ) );\n\t\tvec3  vv  = normalize( cross( uu, nor ) );\n        #else\n        \/\/ see http:\/\/orbit.dtu.dk\/fedora\/objects\/orbit:113874\/datastreams\/file_75b66578-222e-4c7d-abdf-f7e255100209\/content\n        \/\/ (link provided by nimitz)\n        vec3 tc = vec3( 1.0+nor.z-nor.xy*nor.xy, -nor.x*nor.y)\/(1.0+nor.z);\n        vec3 uu = vec3( tc.x, tc.z, -nor.x );\n   \t    vec3 vv = vec3( tc.z, tc.y, -nor.y );\n        #endif\n        \n        float off = texture2D( iChannel0, fragCoord.xy\/iChannelResolution[0].xy, -100.0 ).x;\n\t\tfor( int j=0; j<48; j++ )\n\t\t{\n\t\t\tvec2  aa = hash2( off + float(j)*203.1 );\n\t\t\tfloat ra = sqrt(aa.y);\n\t\t\tfloat rx = ra*cos(6.2831*aa.x); \n\t\t\tfloat ry = ra*sin(6.2831*aa.x);\n\t\t\tfloat rz = sqrt( 1.0-aa.y );\n\t\t\tvec3  rr = vec3( rx*uu + ry*vv + rz*nor );\n\t\t\tocc += shadow( pos, rr );\n\t\t}\n\t\tocc \/= 48.0;\n\t\t\t\t\n\t\tvec3 mate = vec3(1.0);\n\t\tmate = vec3( 1.0, 1.0, 0.6 );\n\t\tmate = mix( mate, vec3(1.0,0.4,0.1), (1.0-smoothstep(0.7,0.71,getRad( id ))) );\n\t\tmate = mix( mate, vec3(1.0,0.7,0.1), (1.0-smoothstep(0.4,0.41,getRad( id ))) );\n        mate += 0.10*sin( 5.0 + vec3(0.0,1.0,2.0) + id*20.0 );\n\t\tmate *= 0.25 + 0.75*mix( 1.0, smoothstep( -0.95,-0.8,sin(pos.y*40.0) ), 1.0-pow(abs(nor.y),8.0) );\n\t\tmate *= 1.00 + 0.10*nor*nor*nor;\n\t\t\n\t\tcol = mate * (occ*0.25+0.75*sqrt(occ));\n\t\t\n\t\tcol += 0.25*pow( 1.0+dot(rd,nor), 5.0 )*occ*occ;\n\t    col *= 0.90 + 0.10*nor.y;\n\t}\n\t\n\t\/\/ vigneting\n    col *= 1.0 - 0.3*dot((q-0.5)*(q-0.5),(q-0.5)*(q-0.5));\n\n\tfragColor = vec4( col, 1.0 );\n}\n","name":"","description":"","type":"image"}]}}