{"Shader":{"ver":"0.1","info":{"id":"ls2GRt","date":"1392511986","viewed":1669,"name":"Flappy Bird","username":"movAX13h","description":"The bird is composed of bit encoded integer numbers (3bit\/px = 8 colors, 24bit\/int, 204px => 26 ints).","likes":14,"published":3,"flags":0,"tags":["2d","game","flappy","bird","tribute"],"hasliked":0},"renderpass":[{"inputs":[{"id":19,"src":"\/presets\/mzk02.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Flappy Bird (tribute), fragment shader by movAX13h, Feb.2014\n\nfloat rand(float n)\n{\n    return fract(sin(n * 12.9898) * 43758.5453)-0.5;\n}\n\nvoid pipe(inout vec3 col, vec2 p, float h)\n{\n\tvec2 ap = abs(p);\n\tif (ap.y > h)\n\t{\n\t\tfloat dy = ap.y - h;\n\t\tif (dy < 60.0) ap.x *= 0.93;\n\t\tcol = mix(col, vec3(0.322, 0.224, 0.290), step(ap.x, 65.0)); \/\/ outline\n\t\tif (dy > 60.0 || mod(dy, 55.0) > 5.0) \n\t\t{\n\t\t\tfloat gradient = 0.0;\n\t\t\tif (abs(dy - 57.5) > 7.5) gradient = max(0.0, 0.5*cos(floor((p.x+25.0)\/5.0)*5.0*(0.026 - 0.006*step(dy, 10.0))));\n\t\t\tcol = mix(col, vec3(0.322, 0.506, 0.129) + gradient, step(ap.x, 60.0)); \/\/ pipe\n\t\t}\n\t}\n}\n\n\/\/ constant-array-index workaround ---\nfloat slice(int id) \n{\n\t\/\/ flappy bird character (no worries, I have a tool)\n\tif (id == 0) return 2359296.0;\n\tif (id == 1) return 585.0;\n\tif (id == 2) return 4489216.0;\n\tif (id == 3) return 46674.0;\n\tif (id == 4) return 4751360.0;\n\tif (id == 5) return 2995812.0;\n\tif (id == 6) return 8945664.0;\n\tif (id == 7) return 3003172.0;\n\tif (id == 8) return 9469963.0;\n\tif (id == 9) return 7248164.0;\n\tif (id == 10) return 2359385.0;\n\tif (id == 11) return 10897481.0;\n\tif (id == 12) return 6554331.0;\n\tif (id == 13) return 9574107.0;\n\tif (id == 14) return 2134601.0;\n\tif (id == 15) return 9492189.0;\n\tif (id == 16) return 3894705.0;\n\tif (id == 17) return 9474632.0;\n\tif (id == 18) return 2396785.0;\n\tif (id == 19) return 9585152.0;\n\tif (id == 20) return 14380132.0;\n\tif (id == 21) return 8683521.0;\n\tif (id == 22) return 2398500.0;\n\tif (id == 23) return 1.0;\n\tif (id == 24) return 4681.0;\t\n\treturn 0.0;\t\n}\n\nvec3 color(int id)\n{\n\t\/\/ flappy bird colors\n\tif (id == 0) return vec3(0.0);\n\tif (id == 1) return vec3(0.320,0.223,0.289);\n\tif (id == 2) return vec3(0.996,0.449,0.063);\n\tif (id == 3) return vec3(0.965,0.996,0.965);\n\tif (id == 4) return vec3(0.996,0.223,0.000);\n\tif (id == 5) return vec3(0.836,0.902,0.805);\n\treturn vec3(0.965,0.707,0.191);\n}\n\/\/ ---\n\nint sprite(vec2 p)\n{\n\t\/\/ this time it's 3 bit\/px (8 colors) and 8px\/slice, 204px total\n\tint d = 0;\n\tp = floor(p);\n\tp.x = 16.0 - p.x;\n\t\n\tif (clamp(p.x, 0.0, 16.0) == p.x && clamp(p.y, 0.0, 11.0) == p.y)\n\t{\n\t\tfloat k = p.x + 17.0*p.y;\n\t\tfloat s = floor(k \/ 8.0);\n\t\tfloat n = slice(int(s));\n\t\tk = (k - s*8.0)*3.0;\n\t\tif (int(mod(n\/(pow(2.0,k)),2.0)) == 1) \t\td += 1;\n\t\tif (int(mod(n\/(pow(2.0,k+1.0)),2.0)) == 1) \td += 2;\n\t\tif (int(mod(n\/(pow(2.0,k+2.0)),2.0)) == 1) \td += 4;\n\t}\n\treturn d;\n}\n\nvoid hero(inout vec3 col, vec2 p, float angle)\n{\n\tp = vec2(p.x * cos(angle) - p.y * sin(angle), p.y * cos(angle) + p.x * sin(angle));\n\tint i = sprite(p*0.2);\n\tcol = mix(col, color(i), min(1.0, float(i)));\n}\n\nvoid ground(inout vec3 col, vec2 p)\n{\n\tp = floor(p);\n\tif (p.y > -280.0) return;\n\tif (p.y < -285.0) col = color(1);\n\tif (p.y < -290.0) col = vec3(0.902, 1.000, 0.549);\n\tif (p.y < -295.0) col = mix(vec3(0.612, 0.906, 0.353), vec3(0.451, 0.745, 0.192), step(mod(p.x-floor(p.y\/5.0)*5.0, 60.0), 30.0));\n\tif (p.y < -325.0) col = vec3(0.322, 0.506, 0.129);\n\tif (p.y < -330.0) col = vec3(0.839, 0.667, 0.290);\n\tif (p.y < -335.0) col = vec3(0.871, 0.843, 0.580);\n}\n\nvoid sky(inout vec3 col, vec2 p)\n{\n\tcol = mix(col, vec3(1.0), 0.3*sin(p.y*0.01));\n}\n\nfloat hAt(float i)\n{\n\treturn 250.0*rand(i*1.232157);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tfloat s = 2000.0\/iResolution.x;\n\tvec2 p = max(1.6666667, s)*(fragCoord.xy - iResolution.xy * 0.5);\n\tfloat dx = iGlobalTime * 320.0;\n\tp.x += dx;\n\t\n\tvec3 col = vec3(0.322, 0.745, 0.808);\n\tsky(col, vec2(0.0, -100.0)-p);\n\t\n\tpipe(col, vec2(mod(p.x, 400.0)-200.0, p.y + hAt(floor(p.x \/ 400.0)) - 80.0), 110.0);\n\t\n\tfloat hx = dx - 200.0; \/\/ hero x\n\tfloat sx = hx - 300.0; \/\/ sample x\n\tfloat i = floor(sx\/400.0); \/\/ instance\n\tfloat ch = hAt(i); \/\/ current height\n\tfloat nh = hAt(i+1.0); \/\/ next height\n\tfloat bh = abs(60.0*sin(iChannelTime[0]*6.0)); \/\/ bounce height\n\tfloat hy = bh - mix(ch, nh, min(1.0, mod(sx, 400.0)*0.005)) + 80.0; \/\/ hero y\n\tfloat angle = -min(0.1, 0.002*(bh));\n\thero(col, vec2(hx, hy)-p, angle);\n\t\n\tground(col, p);\n\t\n\tfragColor = vec4(col,1.0);\n}\n","name":"","description":"","type":"image"}]}}