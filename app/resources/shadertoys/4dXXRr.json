{"Shader":{"ver":"0.1","info":{"id":"4dXXRr","date":"1395608225","viewed":913,"name":"A Simple Rectangle","username":"jonobr1","description":"A function to draw a simple rectangle based on coordinates and radius.","likes":3,"published":3,"flags":0,"tags":["2d","geometry"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/**\n * @author jonobr1 \/ http:\/\/jonobr1.com\/\n *\/\n\n\/**\n * Convert r, g, b to normalized vec3\n *\/\nvec3 rgb(float r, float g, float b) {\n\treturn vec3(r \/ 255.0, g \/ 255.0, b \/ 255.0);\n}\n\n\/**\n * Draw a rectangle at vec2 `pos` with width `width`, height `height` and\n * color `color`.\n *\/\nvec4 rectangle(vec2 uv, vec2 pos, float width, float height, vec3 color) {\n\tfloat t = 0.0;\n\tif ((uv.x > pos.x - width \/ 2.0) && (uv.x < pos.x + width \/ 2.0)\n\t\t&& (uv.y > pos.y - height \/ 2.0) && (uv.y < pos.y + height \/ 2.0)) {\n\t\tt = 1.0;\n\t}\n\treturn vec4(color, t);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) {\n\n\tvec2 uv = fragCoord.xy;\n\tvec2 center = iResolution.xy * 0.5;\n\tfloat width = 0.25 * iResolution.x;\n\tfloat height = 0.25 * iResolution.x;\n\n    \/\/ Background layer\n\tvec4 layer1 = vec4(rgb(144.0, 144.0, 144.0), 1.0);\n\t\n\t\/\/ Rectangle\n\tvec3 yellow = rgb(255.0, 255.0, 0.0);\n\tvec4 layer2 = rectangle(uv, center, width, height, yellow);\n\t\n\t\/\/ Blend the two\n\tfragColor = mix(layer1, layer2, layer2.a);\n\n}","name":"","description":"","type":"image"}]}}