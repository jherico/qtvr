{"Shader":{"ver":"0.1","info":{"id":"4sXGRX","date":"1375006115","viewed":1312,"name":"webcam game tracker - pong","username":"FabriceNeyret2","description":"track a green and red pannel in the video. <br\/>(e.g. colored A4 paper or cardboard. Tune your color lines 4,5)<br\/>NB: game not fonctionnal. (for the moment :-) ).","likes":0,"published":3,"flags":2,"tags":["video","pong","tracking"],"hasliked":0},"renderpass":[{"inputs":[{"id":31,"src":"\/presets\/webcam.png","ctype":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ webcam game trackers - pseudo-pong game\n\/\/ Fabrice Neyret 28\/07\/2013\n\n\/\/ less is cheaper but less accurate\n#define SAMPLE 16\n#define LEVEL 5.  \/\/ int(log(iChannelResolution[0].xy\/16.)\/log(2.))\n\/\/ no variable loop in webglsl. and no mipmap in shadertoy videos, anyway :-D\n\n\/\/ strangely, L2 normalize works better than L1 luminance\n#define lum(C) (length(C))\n\/\/#define lum(C) (((C).x+(C).y+(C).z)\/3.)\n#define unlight(C) ((C)\/lum(C))\n\n\/\/ target color is a compromise of most like target and least like scene \nvec3 targetA = unlight(vec3(1.,.0,.0)); \/\/ vec3(1.,.2,.2));\nvec3 targetB = unlight(vec3(0.,1.,.0)); \/\/ vec3(.5,1.,.8)); \n\nfloat time = iGlobalTime;\n\n\n\/\/ quality of potential match of C for targetC\nfloat match(vec3 C, vec3 targetC)\n{\n\t\/\/ normalize for no care luminance\n\tfloat I =.1+.9*lum(C); \/\/ ...but avoid dividing by 0\n\tC \/= I;\n    \/\/ distance to target (0 is good, 1-d = score, pow for contrast)\n\tfloat v = lum(abs(C-targetC));\n\t\/\/v = pow(v,.3);\n\tv = clamp(1.-v,0.,1.);\n\tv = pow(I*v,3.); \/\/ I for very dark area count less\n\treturn v;\n}\n\n\/\/ search in the texture at low res\/\n\/\/ compute barycenter weighted by fit quality to targets\nfloat _ambientI;\nvoid findTextureTargets(out vec2 pA, out vec2 pB)\n{\t\n\tvec3 Ctot = vec3(0.);\n\tpA = vec2(0.); float Atot=0.;\n\tpB = vec2(0.); float Btot=0.;\n\tfor (int j=0; j< SAMPLE; j++)\n\t  for (int i=0; i< SAMPLE; i++)\n\t  {\n\t\t  vec2 pos = (.5+vec2(i,j))\/float(SAMPLE);\n\t\t  vec3 c = texture2D(iChannel0,pos,LEVEL).rgb;\n\t\t  Ctot += c;\n\t\t  float v;\n\t\t  \n\t\t  v = match(c,targetA);\n\t\t  pA   += pos*v;\n\t\t  Atot += v;\n\t\t  \n\t\t  v = match(c,targetB);\n\t\t  pB   += pos*v;\n\t\t  Btot += v;\t  \n\t  }\n\tpA \/= Atot;\n\tpB \/= Btot;\n\t_ambientI = lum(Ctot)\/float(SAMPLE*SAMPLE);\n\treturn;\t\t \n}\n\n\/\/ test collision with tracker p\nbool test_collision(vec2 p, vec2 pong, vec2 Dpong)\n{\n\t\/\/ is there a tracker on Pong-t*Dpong for some valid l ?\n\t\/\/ ie, | p - (pong-t.Dpong) | < trackerRadius ?\n\t\/\/ -> solve P2(t)=0\n\tfloat a = dot(Dpong,Dpong);\n    float b = dot(p-pong,Dpong);\n\tfloat c = dot(p-pong,p-pong)-.1*.1;\n    float t = -b*(1.-sqrt(1.-a*c\/(b*b)));\n    if (t>0.)\n\t{   \/\/ one found, but was it before or after the last bounce ?\n\t\tvec2 B = abs(pong-t*Dpong-.5);\n\t    if (max(B.x,B.y)<=.501)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\t\t\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\tvec2 ratio = vec2(iResolution.x\/iResolution.y,1.);\n\tvec3 col = texture2D(iChannel0,uv).rgb;\n\t\n\t\/\/ ball\n\tvec2 pong0 = vec2(.123,0.) + time*vec2(1.,.8);\n\tvec2 pong = abs(mod(pong0,2.)-1.);\n\tvec2 Dpong = (abs(mod(pong0+.01*vec2(1.,.8),2.)-1.)-pong)\/.01;\n\t\t\n\t\/\/ trackers\n\tvec2 pA,pB;\n    findTextureTargets(pA,pB);\n\t\n\t\/\/ display\n\tfloat l = length((uv-pong)*ratio);\n\tif ((l<.05)||(uv.y<.02)||(uv.y>.98)) col = vec3(1.);\n\telse\n\t{ l = length((uv-pA)*ratio);\n\t  if ( l<.1) \n\t  { if(l>.09) col = targetA; }\n\t  else\n\t  { l = length((uv-pB)*ratio);\n\t    if (l<.1) \n\t    { if(l>.09) col = targetB; }\n\t      else \n\t      { \/\/col = texture2D(iChannel0,uv).rgb;\n\t\t\t  float lA = lum(texture2D(iChannel0,pA,LEVEL).rgb),\n\t\t\t\t    lB = lum(texture2D(iChannel0,pB,LEVEL).rgb);\n\t\t\t        l = pow(_ambientI,3.);\n\t\t\t  col = vec3(5.*match(col,targetA)\/(l),\n\t\t\t\t\t\t 5.*match(col,targetB)\/(l),\n\t\t\t\t\t\t .8*col.b);\n\t\t    \/\/ displays analyzer view... made more readable\n\t\t    \/\/col = vec3(2.*pow(match(col,targetA),.3),\n\t\t\t\/\/   \t       5.*pow(match(col,targetB),.3),\n\t\t\t\/\/\t       .8*col.b);\n\t}}}\n\t\n\t\/\/ collision tests\n\tif (test_collision(pA, pong,Dpong))\n\t\tcol *= targetA;\n\telse if(test_collision(pB, pong,Dpong))\n\t\tcol *= targetB;\n\t\n\tfragColor = vec4(col,1.);\n}","name":"","description":"","type":"image"}]}}