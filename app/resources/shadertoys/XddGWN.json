{"Shader":{"ver":"0.1","info":{"id":"XddGWN","date":"1449714055","viewed":179,"name":"boxything","username":"lycium","description":"kinda lame, but oh well it was fun","likes":1,"published":3,"flags":0,"tags":["boxes"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float FoldedRadicalInverse2(int n)\n{\n\tfloat inv_base = 0.5;\n\tfloat inv_base_i = inv_base;\n\tfloat val = 0.0;\n\tint offset = 0;\n\n\tfor (int i = 0; i < 8; ++i)\n\t{\n\t\tint div = (n + offset) \/ 2;\n\t\tint digit = (n + offset) - div * 2;\n\t\tval += float(digit) * inv_base_i;\n\t\tinv_base_i *= inv_base;\n\t\tn \/= 2;\n\t\toffset++;\n\t}\n\n\treturn val;\n}\n\nfloat boxything(vec2 p, float t)\n{\n    int returnval = 1;\n\n    const int num_squares = 32;\n    const float inv_num_squares = 1.0 \/ float(num_squares);\n    for (int i = 0; i < num_squares; i++)\n    {\n\t    float t_sin = sin(t + float(i) * 6.283185307179586476925286766559 * 0.1531);\n        float a = t_sin * 1.0 + 0.0;\/\/(i + 1.0) * 6.283185307179586476925286766559 * inv_num_squares;\n\n        int imod2 = i - ((i \/ 2) * 2);\n        float i_offset = float(i) + float(imod2) * inv_num_squares * 4.0;\n        float r = 1.0 \/ ((float(i_offset) + 1.0) * inv_num_squares);\n\n        vec2 x_basis = vec2( cos(a), sin(a));\n        vec2 y_basis = vec2(-sin(a), cos(a));\n        \n        float u = dot(p, x_basis) * r;\n        float v = dot(p, y_basis) * r;\n\n        returnval = (abs(u) < 1.0 && abs(v) < 1.0) ? returnval : imod2;\n    }\n\n    return float(returnval);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tvec2 pixel_scale = vec2(1.5 \/ iResolution.x);\n\n   \tfloat s = 0.0;\n    const int samples = 34;\n    const float norm = 1.0 \/ float(samples);\n\tfor (int z = 0; z < samples; z++)\n    {\n        float u = float(z) * norm;\n\t\tfloat a = u * 21.0 * 6.283185307179586476925286766559;\n        float r0 = sqrt(u);\n        float r = r0 * 1.5;\n        vec2 aa = vec2(cos(a), sin(a)) * r;\n        float w = 1.0 - r0;\n        \n\t\tfloat t0 = FoldedRadicalInverse2(z);\n        float t = iGlobalTime * 0.5 + u * 0.033333 * 2.0;\n\n\t\ts += boxything((fragCoord - iResolution.xy * 0.5 + aa) * pixel_scale, t) * w;\n    }\n    s *= norm * 2.5;\n    \n\tvec3 c_b = vec3(0.9, 0.5, 0.1) * 1.4;\n\tvec3 c_t = vec3(0.3, 0.2, 0.5) * 1.5;\n\n    vec3 c_w = vec3(1.3, 1.2, 1.9) * 1.0;\n\n    vec3 c = mix(c_t, c_b, fragCoord.y \/ iResolution.y);\n    c = mix(c, c_w, s);\n    \n    float gamma = 1.0 \/ 0.5;\n    float gamma_r = pow(c.x, gamma) * 1.12;\n    float gamma_g = pow(c.y, gamma) * 1.22;\n    float gamma_b = pow(c.z, gamma) * 1.31;\n    fragColor = vec4(gamma_r, gamma_g, gamma_b, 1.0);\n}\n","name":"","description":"","type":"image"}]}}