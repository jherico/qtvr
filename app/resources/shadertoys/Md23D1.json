{"Shader":{"ver":"0.1","info":{"id":"Md23D1","date":"1387654079","viewed":750,"name":"Wave tester","username":"RavenWorks","description":"Just a quick little tool to glance at the way a squiggly wave function will play out in the long run; edit waveFunc to whatever you want, and click+drag left\/right to zoom in\/out. (Made it for my own purposes, but figured other people might make use\u2026)","likes":3,"published":3,"flags":0,"tags":["test","example","wave","sine","function","tool"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"float waveFunc(float x){\n\treturn sin( x + sin(x*0.8) + sin(x*0.2)*sin(x*2.1) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float minMargin = 0.02;\n\tfloat zoomAmt = (1.0 +minMargin)\/( iMouse.x\/iResolution.x +minMargin );\n\t\n\tfloat xAmt = zoomAmt * 2.0 * (fragCoord.x \/ iResolution.x) + iGlobalTime * 8.0;\n\tfloat yAmt = zoomAmt * 2.0 * (fragCoord.y \/ iResolution.y - 0.5);\n\t\n\tif (abs(yAmt) > 1.0) {\n\t\tfragColor = vec4(0.6,0.6,0.6,1);\n\t} else {\n\t\tfragColor = yAmt < waveFunc(xAmt) ? vec4(1,0,0,1) : vec4(1,1,1,1);\n\t}\n}","name":"","description":"","type":"image"}]}}