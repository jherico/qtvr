{"Shader":{"ver":"0.1","info":{"id":"llfXzN","date":"1434887786","viewed":726,"name":"I Ching","username":"patriciogv","description":"I Ching Transformations animation, made with the material of http:\/\/thebookofshaders.com\/","likes":5,"published":3,"flags":0,"tags":["noise","distancefields","binary","shapes"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Author @patriciogv - 2015\n\/\/ http:\/\/patriciogonzalezvivo.com\n\n#define PI 3.14159265359\n#define TWO_PI 6.28318530718\n\nfloat shape(vec2 st, int N){\n    st = st*2.-1.;\n    float a = atan(st.x,st.y)+PI;\n    float r = TWO_PI\/float(N);\n    return cos(floor(.5+a\/r)*r-a)*length(st);\n}\n\nfloat box(vec2 st, vec2 size){\n    return shape(st*size,4);\n}\n\nfloat hex(vec2 st, bool a, bool b, bool c, bool d, bool e, bool f){\n    st = st*vec2(2.,6.);\n\n    vec2 fpos = fract(st);\n    vec2 ipos = floor(st);\n\n    if (ipos.x == 1.0) fpos.x = 1.-fpos.x;\n    if (ipos.y < 1.0){\n        return a? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    } else if (ipos.y < 2.0){\n        return b? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    } else if (ipos.y < 3.0){\n        return c? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    } else if (ipos.y < 4.0){\n        return d? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    } else if (ipos.y < 5.0){\n        return e? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    } else if (ipos.y < 6.0){\n        return f? box(fpos-vec2(0.03,0.), vec2(1.)) : box(fpos, vec2(0.84,1.));\n    }\n    return 0.0;\n}\n\nfloat hex(vec2 st, float N){\n    bool b[6];\n    float remain = floor(mod(N,64.));\n    for(int i = 0; i < 6; i++){\n        b[i] = mod(remain,2.)==1.?true:false;\n        remain = ceil(remain\/2.);\n    }\n    return hex(st,b[0],b[1],b[2],b[3],b[4],b[5]);\n}\n\nvec3 random3(vec3 c) {\n    float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n    vec3 r;\n    r.z = fract(512.0*j);\n    j *= .125;\n    r.x = fract(512.0*j);\n    j *= .125;\n    r.y = fract(512.0*j);\n    return r-0.5;\n}\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat snoise(vec3 p) {\n\n    vec3 s = floor(p + dot(p, vec3(F3)));\n    vec3 x = p - s + dot(s, vec3(G3));\n\n    vec3 e = step(vec3(0.0), x - x.yzx);\n    vec3 i1 = e*(1.0 - e.zxy);\n    vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\n    vec3 x1 = x - i1 + G3;\n    vec3 x2 = x - i2 + 2.0*G3;\n    vec3 x3 = x - 1.0 + 3.0*G3;\n\n    vec4 w, d;\n\n    w.x = dot(x, x);\n    w.y = dot(x1, x1);\n    w.z = dot(x2, x2);\n    w.w = dot(x3, x3);\n\n    w = max(0.6 - w, 0.0);\n\n    d.x = dot(random3(s), x);\n    d.y = dot(random3(s + i1), x1);\n    d.z = dot(random3(s + i2), x2);\n    d.w = dot(random3(s + 1.0), x3);\n\n    w *= w;\n    w *= w;\n    d *= w;\n\n    return dot(d, vec4(52.0));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ){\n    float aspect = iResolution.x\/iResolution.y;\n\tvec2 st = fragCoord.xy \/ iResolution.xy;\n    st.x -= 0.25;\n    st.x *= aspect;\n    \n    fragColor = vec4(1.);\n    if(st.x>1.||st.x<0.) return;\n    \n    float t = iGlobalTime*1.0;\n\n    float df = 1.0;\n    df = mix(hex(st,t),hex(st,t+1.),fract(t));\n    df += snoise(vec3(st*80.,t*0.1))*0.1;\n\n    fragColor = vec4(mix(vec3(0.),vec3(1.), step(0.75,df)),1.0);\n}","name":"","description":"","type":"image"}]}}