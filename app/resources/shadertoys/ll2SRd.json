{"Shader":{"ver":"0.1","info":{"id":"ll2SRd","date":"1445994967","viewed":470,"name":"webcam mush","username":"macbooktall","description":"\u2206","likes":2,"published":3,"flags":2,"tags":["mush"],"hasliked":0},"renderpass":[{"inputs":[{"id":31,"src":"\/presets\/webcam.png","ctype":"webcam","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define PI 3.14159265359\n\n\/\/ hue by cale\n vec4 hue_shift( vec4 color, float shift) {\n     \n     const vec4 kRGBToYPrime = vec4 (0.299, 0.587, 0.114, 0.0);\n     const vec4 kRGBToI     = vec4 (0.596, -0.275, -0.321, 0.0);\n     const vec4 kRGBToQ     = vec4 (0.212, -0.523, 0.311, 0.0);\n     \n     const vec4 kYIQToR   = vec4 (1.0, 0.956, 0.621, 0.0);\n     const vec4 kYIQToG   = vec4 (1.0, -0.272, -0.647, 0.0);\n     const vec4 kYIQToB   = vec4 (1.0, -1.107, 1.704, 0.0);\n     float   YPrime  = dot (color, kRGBToYPrime);\n     float   I      = dot (color, kRGBToI);\n     float   Q      = dot (color, kRGBToQ);\n     float   hue     = atan (Q, I);\n     float   chroma  = sqrt (I * I + Q * Q);\n     hue += shift;\n     Q = chroma * sin (hue);\n     I = chroma * cos (hue);\n     vec4    yIQ   = vec4 (YPrime, I, Q, 0.0);\n     color.r = dot (yIQ, kYIQToR);\n     color.g = dot (yIQ, kYIQToG);\n     color.b = dot (yIQ, kYIQToB);\n     \n     return color;\n }\n\n\/\/ noise by iq\n highp float hash(highp float n )\n{\n    return fract(sin(n)*43758.5453123);\n}\n \n highp float noise( highp vec2 x )\n{\n    highp vec2 p = floor(x);\n    highp vec2 f = fract(x);\n    \n    f = f*f*(3.0-2.0*f);\n    \n    highp float n = p.x + p.y*157.0;\n    \n    return mix(mix( hash(n+  0.0), hash(n+  1.0),f.x),\n               mix( hash(n+157.0), hash(n+158.0),f.x),f.y);\n}\n\nvec4 blend_avg_invert_b(vec4 colorA, vec4 colorB) {\n    return (colorA + (1.0-colorB)) \/ 2.0;\n}\n\nvec4 blend_divide(vec4 a, vec4 b) {\n    return a \/ b;\n}\n\nvec4 blend_weird(vec4 a, vec4 b, vec2 uv) {\n \treturn smoothstep(a, b, vec4(noise(uv+iGlobalTime)));\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )    \n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    float slow_time = iGlobalTime * 0.5;\n          \n    uv = abs(uv*2.0-1.0);\n \n    vec2 red_uv = uv + 0.25*noise(uv+iGlobalTime);\n    vec2 green_uv = uv -0.25*noise(uv+iGlobalTime);\n    \n    vec4 regular_pixel_color   = texture2D(iChannel0, uv );\n    vec4 red_shift_pixel_color = texture2D(iChannel0, red_uv );\n    vec4 green_shift_pixel_color = texture2D(iChannel0, green_uv );\n    vec4 blue_shift_pixel_color = regular_pixel_color;\n    \n    vec4 result_color = vec4(red_shift_pixel_color.r, green_shift_pixel_color.g, blue_shift_pixel_color.b, regular_pixel_color.a);\t    \n    result_color = hue_shift(result_color, iGlobalTime*4.0);\n    \n   \tfloat scanline = sin(uv.y*600.0)*0.05;\n\tresult_color -= scanline;\n \n    result_color = blend_divide(result_color, regular_pixel_color);\n    result_color = blend_avg_invert_b(result_color, regular_pixel_color);\n    result_color = blend_weird(result_color, regular_pixel_color, uv);\n    \n    \/\/ Set the resulting pixel color\n    fragColor = result_color;\n\n    \n}","name":"","description":"","type":"image"}]}}