{
    "Shader": 
    [
        {
            "ver": "0.1",
            "info": 
            {
                "id": "4dXGRM",
                "name": "Flying Steel Cubes",
                "username": "kataho",
                "description": "Cubes got light, texture and translation. Kill fov morphing if you want less psychedelic.",
                "tags": 
                [
                    "3d",
                    "raymarching",
                    "distancefield"
                ],
                "hasliked": 0
            },

            "renderpass": 
            [
                {
                    "inputs": 
                    [
                        {
                            "id": 7,
                            "src": "\/presets\/tex02.jpg",
                            "ctype": "texture",
                            "channel": 0
                        }
                    ],

                    "outputs": 
                    [
                        {
                            "channel": "0",
                            "dst": "-1"
                        },

                        {
                            "channel": "0",
                            "dst": "-1"
                        }
                    ],

                    "code": "#define FOV_MORPH 1\n#pragma vr\n\nfloat box(vec3 p) {\n    return length(max(abs(p)-vec3(.5),0.0)) - 0.15;\n}\n\nvec3 rot(vec3 p, float f) {\n    float s = sin(f);\n    float c = cos(f);\n    p.xy *= mat2(c, -s, s, c);\n    p.yz *= mat2(c, -s, s, c);\n    return p;\n}\n\n\nvec3 trans(vec3 p, out float rotout) {\n    p.zx += iGlobalTime*8.0;\n\n    vec3 b = vec3(4.);\n    vec3 rep = floor(p/b);\n\n    p = mod(p,b)-0.5*b;\n    \n    rotout = iGlobalTime*1.88 + (rep.x+rep.z+rep.y)*0.3;\n    p = rot(p, rotout);\n    return p;   \n}\n\nfloat scene(vec3 p) {\n    float dummy;\n    return box(trans(p,dummy));\n}\n\n\nvec3 normal(vec3 p, float d) {\n    vec3 e = vec3(0.04,.0,.0);\n    return normalize(vec3(\n        scene(p+e.xyy)-d,\n        scene(p+e.yxy)-d,\n        scene(p+e.yyx)-d));\n    \n}\n\nvoid main(void)\n{\n    vec2 xy = gl_FragCoord.xy / iResolution.xy - vec2(0.5,0.5);\n    xy.y *= -iResolution.y / iResolution.x;\n\n    float time = iGlobalTime*0.5;\n    vec3 ro = 1.5*normalize(vec3(cos(time),cos(time)*1.2,sin(time)));\n    vec3 eyed = normalize(vec3(0.0) - ro);\n    vec3 ud = normalize(cross(vec3(0.0,1.0,0.0), eyed));\n    vec3 vd = normalize(cross(eyed,ud));\n\n#if FOV_MORPH\n    float fov = 3.14 * 0.8 + sin(time*1.334)*1.45;\n#else\n    float fov = 3.14 * 0.7;\n#endif\n    \n    float f = fov * length(xy);\n    // vec3 rd = normalize(normalize(xy.x*ud + xy.y*vd) + (1.0/tan(f))*eyed);\n    vec3 rd = normalize(iDir);\n\n\n    vec3 p = ro + rd;\n\n    float dall,d;\n    for(int i = 0; i < 64; i++) {\n        d = scene(p);\n        if(d < 0.06) break;\n        p += d*rd;\n        dall += d;\n    }\n\n    vec3 bg = normalize(p).zzz + 0.1;\n\n    if(d < 0.06) {\n        vec3 n = normal(p,d); \n        vec3 col = vec3(dot(vec3(0.0,0.0,1.0), n));\n        float objrot;\n        vec3 objp = trans(p,objrot);\n        vec3 objn = abs(rot(n,objrot));\n        \n        vec2 uv = \n            (objn.y > 0.707) ? vec2(objp.zx) : \n            (objn.x > 0.707) ? vec2(objp.zy) :\n                               vec2(objp.xy) ;\n        vec3 tex = texture2D(iChannel0, uv).rgb;\n        vec3 hl = smoothstep(0.6, 1.0, col);\n        col *= clamp(tex.xyz+0.3, 0.0, 1.0);\n\n        col = col + hl*.4;\n        float fog = clamp(dall/mix(90.0,40.0,((rd.z+1.0)*0.5)), 0.0, 1.0);\n\n        gl_FragColor = vec4(mix(col, bg, fog),1.0);\n    }\n    else {\n        gl_FragColor = vec4(bg, 1.0);\n    }\n        \n\n        \n}",
                    "name": "",
                    "description": "",
                    "type": "image"
                }
            ]
        }
    ]
}