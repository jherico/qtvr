{"Shader":{"ver":"0.1","info":{"id":"Ml23zy","date":"1430150295","viewed":754,"name":"Buildings 2D","username":"lamogui","description":"Shader created for my attempt of LD32: noisecontroller (http:\/\/ludumdare.com\/compo\/ludum-dare-32\/?action=preview&uid=48226). I just replaced the noise_lvl variable with a bass_lvl variable.","likes":5,"published":3,"flags":0,"tags":["procedural","2d","sound","reactive","buildings","bass","noisecontroller"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\nfloat bass_lvl=0.;\n\nfloat bass()\n{\n    float b=.0; \n    for (int i=0; i < 7; i++)\n    {\n       \tvec2 coord=vec2(float(i)\/iChannelResolution[0].x,.0);\n        b=max(b,texture2D(iChannel0,coord).x);\n    }\n    return pow(b*0.85,3.);\n}\n\n\/\/Probably made by iq\nfloat hash( const float n ) {\n    return fract(sin(n*14.1234512)*51231.545341231);\n}\nfloat hash( const vec2 x ) {\n  float n = dot( x, vec2(14.1432,1131.15532) );\n    return fract(sin(n)*51231.545341231);\n}\n\nvec4 sky(vec2 uv)\n{\n    return vec4(0.0,0.0,0.5*(1.0-uv.y),1.);\n}\n\nbool onRect(vec2 p, vec2 center, vec2 size) {\n  return !(p.x > center.x + size.x*0.5 ||\n             p.x < center.x - size.x*0.5 ||\n             p.y > center.y + size.y*0.5 ||\n             p.y < center.y - size.y*0.5 );\n\n}\nconst float immeubles=18.0;\nconst float immeuble_largeur=1.0\/(immeubles-6.0);\nconst float window_width=immeuble_largeur\/3.0;\nconst float window_height=immeuble_largeur\/1.5;\nvec4 getImmeubleColor(vec2 uv, float height)\n{\n    if (cos(6.28*uv.x\/window_width) > 0.0 && uv.y > 0.09 &&\n        sin(6.28*uv.y\/window_height) > 0.0 && abs(uv.y + window_height*0.5) < height*0.5)  {\n        \/\/On window\n        float random=hash(floor(uv\/window_height)*height);\n        if ( random > 0.9-min(bass_lvl,0.65))\n          return vec4(1.0,1.0,0.0,1.);\n        else if ( random > 0.25)\n          return 0.33*sky(uv);\n        else \n          return vec4(0.0,0.0,0.0,1.);\n    }\n    return vec4(0.0,0.0,0.0,1.);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    bass_lvl=bass();\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec4 color=sky(uv);\n    \/\/uv.x-=0.5*iResolution.x\/iResolution.y;\n    uv.y -=0.1;\n    \/\/uv = normalize(vec3(uv,1.-length(uv))).xy;\n\n    float posx=-iGlobalTime*0.1;\n    if (uv.y < 0.0) {\n      color=vec4(0.15,0.15,0.15,0.15);\n\n    }\n    else {\n       for (float i=0.0; i < immeubles; i++) {\n            float position_x=(i-3.0)*immeuble_largeur+mod(posx,immeuble_largeur);\/\/-1.;\n            vec2 center=vec2(position_x,0.0);\n            vec2 size=vec2(immeuble_largeur,0.7*hash(i-floor(posx\/immeuble_largeur))+0.3);\n\n            if (onRect(uv, center, size)) {\n                color=getImmeubleColor(uv-center,size.y);\n                break;\n            }\n        }\n    }\n\n   float a=1.;\n   if (uv.y < 0.) a=0.;\n   int cas=int(mod(gl_FragCoord.x,3.0));\n    if (cas==0) color = color*0.5 + color*vec4(0.5,0.0,0.0,1.);\n    else if (cas==1) color = color*0.5 + color*vec4(0.0,0.5,0.0,1.);\n    else color = color*0.5 + color*vec4(0.0,0.0,0.5,1.);\n    \n\tfragColor = color;\n}","name":"","description":"","type":"image"}]}}