{"Shader":{"ver":"0.1","info":{"id":"XtsGRl","date":"1424308881","viewed":840,"name":"Bit Packed Sprites","username":"Flyguy","description":"Testing packing character sprites into the bits of an integer.","likes":10,"published":3,"flags":0,"tags":["binary","sprite","letters","bits"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"#define CHAR_SIZE vec2(3, 7)\n#define CHAR_SPACING vec2(4, 8)\n\n#define STRWIDTH(c) (c * CHAR_SPACING.x)\n#define STRHEIGHT(c) (c * CHAR_SPACING.y)\n\n\/*\nTop left pixel is the most significant bit.\nBottom right pixel is the least significant bit.\n\n \u2588     010    \n\u2588 \u2588    101    \n\u2588 \u2588    101    \n\u2588\u2588\u2588 -> 111 -> 010 101 101 111 101 101 101 -> 712557\n\u2588 \u2588    101    \n\u2588 \u2588    101    \n\u2588 \u2588    101    \n*\/\n\n\/\/Automatically generated from a sprite sheet.\nfloat ch_sp = 0.0;\nfloat ch_a = 712557.0;\nfloat ch_b = 1760622.0;\nfloat ch_c = 706858.0;\nfloat ch_d = 1760110.0;\nfloat ch_e = 2018607.0;\nfloat ch_f = 2018596.0;\nfloat ch_g = 706922.0;\nfloat ch_h = 1498989.0;\nfloat ch_i = 1909911.0;\nfloat ch_j = 1872746.0;\nfloat ch_k = 1498477.0;\nfloat ch_l = 1198375.0;\nfloat ch_m = 1571693.0;\nfloat ch_n = 1760109.0;\nfloat ch_o = 711530.0;\nfloat ch_p = 711972.0;\nfloat ch_q = 711675.0;\nfloat ch_r = 1760621.0;\nfloat ch_s = 2018927.0;\nfloat ch_t = 1909906.0;\nfloat ch_u = 1497963.0;\nfloat ch_v = 1497938.0;\nfloat ch_w = 1498109.0;\nfloat ch_x = 1496429.0;\nfloat ch_y = 1496210.0;\nfloat ch_z = 2004271.0;\nfloat ch_1 = 730263.0;\nfloat ch_2 = 693543.0;\nfloat ch_3 = 693354.0;\nfloat ch_4 = 1496649.0;\nfloat ch_5 = 1985614.0;\nfloat ch_6 = 707946.0;\nfloat ch_7 = 1873042.0;\nfloat ch_8 = 709994.0;\nfloat ch_9 = 710250.0;\nfloat ch_0 = 711530.0;\nfloat ch_per = 2.0;\nfloat ch_que = 693378.0;\nfloat ch_exc = 599170.0;\nfloat ch_com = 10.0;\nfloat ch_scl = 65556.0;\nfloat ch_col = 65552.0;\nfloat ch_usc = 7.0;\nfloat ch_crs = 11904.0;\nfloat ch_dsh = 3584.0;\nfloat ch_ast = 21824.0;\nfloat ch_fsl = 304292.0;\nfloat ch_bsl = 1189001.0;\nfloat ch_lpr = 346385.0;\nfloat ch_rpr = 1118804.0;\nfloat ch_lba = 862355.0;\nfloat ch_rpa = 1647254.0;\n\nvec2 res = iResolution.xy \/ 4.0;\nvec2 print_pos = vec2(2,2);\n\n\/\/Extracts bit b from the given number.\nfloat extract_bit(float n, float b)\n{\n\treturn floor(mod(floor(n \/ pow(2.0,floor(b))),2.0));   \n}\n\n\/\/Returns the pixel at uv in the given bit-packed sprite.\nfloat sprite(float spr, vec2 size, vec2 uv)\n{\n    uv = floor(uv);\n    \/\/Calculate the bit to extract (x + y * width) (flipped on x-axis)\n    float bit = (size.x-uv.x-1.0) + uv.y * size.x;\n    \n    \/\/Clipping bound to remove garbage outside the sprite's boundaries.\n    bool bounds = all(greaterThanEqual(uv,vec2(0)));\n    bounds = bounds && all(lessThan(uv,size));\n    \n    return bounds ? extract_bit(spr, bit) : 0.0;\n\n}\n\n\/\/Prints a character and moves the print position forward by 1 character width.\nfloat char(float ch, vec2 uv)\n{\n    float px = sprite(ch, CHAR_SIZE, uv - print_pos);\n    print_pos.x += CHAR_SPACING.x;\n    return px;\n}\n\n\/\/Returns the digit sprite for the given number.\nfloat get_digit(float d)\n{\n    d = floor(d);\n    \n    if(d == 0.0) return ch_0;\n    if(d == 1.0) return ch_1;\n    if(d == 2.0) return ch_2;\n    if(d == 3.0) return ch_3;\n    if(d == 4.0) return ch_4;\n    if(d == 5.0) return ch_5;\n    if(d == 6.0) return ch_6;\n    if(d == 7.0) return ch_7;\n    if(d == 8.0) return ch_8;\n    if(d == 9.0) return ch_9;\n    return 0.0;\n}\n\n\/\/Prints out the given number starting at pos.\nfloat print_number(float number,vec2 pos, vec2 uv)\n{\n\tvec2 dec_pos = pos;\n    float result = 0.0;\n    \n\tfor(int i = 3;i >= 0;i--)\n    {\n        float clip = float(abs(number) > pow(10.0, float(i)) || i == 0); \/\/Clip off leading zeros.\n        \n        float digit = mod(number \/ pow(10.0, float(i)),10.0);\n        \n        result += sprite(get_digit(digit),CHAR_SIZE, uv - dec_pos) * clip;\n        \n        dec_pos.x += CHAR_SPACING.x * clip;\n    }\n    \n    return result;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ 4.0;\n    uv =  floor(uv);\n    \n    float col = 0.0;\n    \n    print_pos = vec2(res.x\/2.0 - STRWIDTH(17.0)\/2.0,res.y\/2.0 - STRHEIGHT(1.0)\/2.0);\n    print_pos = floor(print_pos);\n       \n    col += char(ch_h,uv);\n    col += char(ch_e,uv);\n    col += char(ch_l,uv);\n    col += char(ch_l,uv);\n    col += char(ch_o,uv);\n    col += char(ch_com,uv);\n    \n    col += char(ch_sp,uv);\n    \n    col += char(ch_s,uv);\n    col += char(ch_h,uv);\n    col += char(ch_a,uv);\n    col += char(ch_d,uv);\n    col += char(ch_e,uv);\n    col += char(ch_r,uv);\n    col += char(ch_t,uv);\n    col += char(ch_o,uv);\n    col += char(ch_y,uv);\n    col += char(ch_exc,uv);\n    \n    print_pos = vec2(2);\n    \n    col += char(ch_t,uv);\n    col += char(ch_i,uv);\n    col += char(ch_m,uv);\n    col += char(ch_e,uv);\n    col += char(ch_col,uv);\n    \n    col += print_number(iGlobalTime,print_pos,uv);\n    \n\tfragColor = vec4(vec3(col), 1.0);\n}","name":"","description":"","type":"image"}]}}