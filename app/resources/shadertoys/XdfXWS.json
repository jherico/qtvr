{"Shader":{"ver":"0.1","info":{"id":"XdfXWS","date":"1406720544","viewed":1212,"name":"Music - Pulsating","username":"iq","description":"An example of how to make basic procedural music in the GPU with Shadertoy!","likes":9,"published":3,"flags":8,"tags":["procedural","2d","sound","music"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = (-iResolution.xy+2.0*fragCoord.xy)\/iResolution.y;\n\t\n    vec3 col = vec3( 0.0 );\n\t\n    float noteA = fract( iGlobalTime\/4.00 );\n    float noteB = fract( iGlobalTime\/0.50 );\n    float noteC = fract( iGlobalTime\/0.50 );\n\t\n    col = mix( col, vec3(1.0,1.0,0.5), (1.0-noteA)*(1.0-smoothstep( 0.0, 0.5, length(p-vec2( 0.8,0.0)))));\n    col = mix( col, vec3(0.5,1.0,0.5),      noteB *(1.0-smoothstep( 0.0, 0.2, length(p-vec2( 0.0,0.0)))));\n    col = mix( col, vec3(0.5,0.5,1.0), (1.0-noteC)*(1.0-smoothstep( 0.0, 0.2, length(p-vec2(-0.8,0.0)))));\n\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"},{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat noise( float x )\n{    \n\treturn fract(sin(1371.1*x)*43758.5453);\n}\n\nfloat doString( float soundTime )\n{    \n\tfloat noteTime = fract( soundTime\/4.0 )*4.0;\n\tfloat noteID   = floor( soundTime\/4.0 );\n\t\n\tfloat w = 220.0;    \n\tfloat y = 0.0;\n\t\n\tfloat t = noteTime;    \n\ty += 0.5*fract( t*w*1.00 )                      *exp( -0.0010*w*t );\n\ty += 0.3*fract( t*w*(1.50+0.1*mod(noteID,2.0)) )*exp( -0.0011*w*t );\n\ty += 0.2*fract( t*w*2.01 )                      *exp( -0.0012*w*t );\n\n\ty = -1.0 + 2.0*y;\n\t\n\treturn 0.35*y;\n}\n\nfloat doChis( float soundTime )\n{\n\tfloat inter = 0.5;\n\tfloat noteTime = fract( soundTime\/inter )*inter;\n\tfloat noteID   = floor( soundTime\/inter );\n\treturn 0.5*noise( noteTime )*exp(-20.0*noteTime );\n}\n\nfloat doTom( float soundTime )\n{\n\tfloat inter = 0.5;\n    soundTime += inter*0.5;   \n\t\n\tfloat noteTime = fract( soundTime\/inter )*inter;\n\tfloat f = 100.0 - 100.0*clamp(noteTime*2.0,0.0,1.0);\n\treturn clamp( 70.0*sin(6.2831*f*noteTime)*exp(-15.0*noteTime ), 0.0, 1.0 );\n}\n\n\/\/ stereo sound output. x=left, y=right\nvec2 mainSound( float time )\n{\n\tvec2 y = vec2( 0.0 );\n\ty += vec2(0.75,0.25) * doString( time );    \n\ty += vec2(0.50,0.50) * doChis( time );    \n\ty += vec2(0.50,0.50) * doTom( time );\n\t\n\treturn vec2( y );\n}","name":"","description":"","type":"sound"}]}}