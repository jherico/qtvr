{"Shader":{"ver":"0.1","info":{"id":"Xsy3Rm","date":"1453647127","viewed":63,"name":"JacoLapRnd","username":"knighty","description":"Solving Laplace equation with Jacobi method and (minimally) stochastic rounding.<br\/>Upper left: using integers+stochastic rounding.<br\/>Lower left : running mean of int+stchstic rndng.<br\/>Upper right side: using integers alone.<br\/>Lower right side: using floats.","likes":0,"published":3,"flags":32,"tags":["rgb","hsv","rounding","potential","stochastic","jacobi","laplace"],"hasliked":0},"renderpass":[{"inputs":[{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"vec4 getData(ivec2 uv){return texture2D(iChannel0, (vec2(uv)+vec2(0.5))\/iResolution.xy);}\n\nvec3 hsv2rgb(vec3 hsv) {\n    return mix(vec3(1.),\n               clamp((abs(fract(vec3(hsv.x)+vec3(1.,2.\/3.,1.\/3.))*6.-3.)-1.),0.,1.),\n               hsv.y)\n           * hsv.z;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    ivec2 iuv = ivec2(fragCoord);\n    vec4 data = getData(iuv);\n    float x = fragCoord.x<0.5*iResolution.x ?\n              \tfragCoord.y<0.5*iResolution.y ? data.w : data.x :\n              \tfragCoord.y<0.5*iResolution.y ? data.z : data.y;\n    vec3 col = hsv2rgb(vec3(x,1.,pow(x,0.1)));\n\tfragColor = vec4(col,1.0);\n}","name":"","description":"","type":"image"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/Set it to a power of two: 1, 2, 4 ...etc\n#define TWO_POW_B 32.\n\nfloat hash13(vec3 p3)\/\/from https:\/\/www.shadertoy.com\/view\/4djSRW\n{\n#define HASHSCALE .1031\n\tp3  = fract(p3 * HASHSCALE);\n    p3 += dot(p3, p3.yzx + 19.25869);\n    return fract((p3.x + 1.2356*p3.y) * p3.z);\n}\n\nvec4 getData(ivec2 uv){return texture2D(iChannel0, (vec2(uv)+vec2(0.5))\/iResolution.xy);}\n\nvec3 compNeighbours(ivec2 uv){\n    vec3 n = TWO_POW_B * getData(uv+ivec2(0,1)).xyz;\n    vec3 s = TWO_POW_B * getData(uv-ivec2(0,1)).xyz;\n    vec3 w = TWO_POW_B * getData(uv+ivec2(1,0)).xyz;\n    vec3 e = TWO_POW_B * getData(uv-ivec2(1,0)).xyz;\n    return n+s+e+w;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \/\/fragColor = vec4(0.0,0.0,0.0,0.0);\n    vec2 uv = fragCoord \/ iResolution.xy;\n    if(iFrame == 0 || iMouse.z>0.){\n        if(length(fragCoord - 0.5 * iResolution.xy) < 10.) fragColor = vec4(1.);\n        else if(fragCoord.x < 1. || fragCoord.y < 1. ||\n           fragCoord.x+1. > iResolution.x || fragCoord.y+1. > iResolution.y)\n            fragColor = vec4(0.,0.,0.,1.);\n        else fragColor = vec4(0.,0.,0.,0.);\n        return;\n    }\n    ivec2 iuv = ivec2(fragCoord);\n    fragColor = getData(iuv);\n    if(fragColor.w == 1.) return;\n    vec3 NSum = compNeighbours(iuv);\n    float r = hash13(vec3(iuv,iFrame)); r = floor(r * 4.);\n    fragColor.x = floor((NSum.x + r) * 0.25) *1.\/TWO_POW_B;\/\/Simulates use of integers with stochastic rounding\n    fragColor.y = floor((NSum.y) * 0.25) *1.\/TWO_POW_B;\/\/Simulates use of integers\n    fragColor.z = NSum.z * 0.25\/TWO_POW_B;\/\/\"Normal\" way\n}","name":"","description":"","type":"buffer"},{"inputs":[{"id":257,"src":"\/presets\/previz\/buffer00.png","ctype":"buffer","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}},{"id":258,"src":"\/presets\/previz\/buffer01.png","ctype":"buffer","channel":1,"sampler":{"filter":"linear","wrap":"clamp","vflip":"true","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"vec4 getAData(ivec2 uv){return texture2D(iChannel0, (vec2(uv)+vec2(0.5))\/iResolution.xy);}\n\nvec4 getBData(ivec2 uv){return texture2D(iChannel1, (vec2(uv)+vec2(0.5))\/iResolution.xy);}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    ivec2 iuv = ivec2(fragCoord);\n    vec4 x = getAData(iuv);\n    vec4 y = getBData(iuv);\n    fragColor = vec4(x.xyz,mix(y.w,x.x,0.1));\n}","name":"","description":"","type":"buffer"}]}}