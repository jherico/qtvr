{"Shader":{"ver":"0.1","info":{"id":"Md2GzR","date":"1386825059","viewed":997,"name":"Sierpinski - 2D","username":"iq","description":"2D Sierpinski fractal. See  for the 3D version.","likes":3,"published":3,"flags":0,"tags":["2d","fractal","sierpinski"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat length2( in vec2 p ) { return dot(p,p); }\n\nconst vec2 va = vec2(  0.0, 1.73-0.85 );\nconst vec2 vb = vec2(  1.0, 0.00-0.85 );\nconst vec2 vc = vec2( -1.0, 0.00-0.85 );\n\n\/\/ return distance and address\nvec2 map( vec2 p )\n{\n\tfloat a = 0.0;\n\tvec2 c;\n\tfloat dist, d, t;\n\tfor( int i=0; i<7; i++ )\n\t{\n\t\td = length2(p-va);                 c = va; dist=d; t=0.0;\n        d = length2(p-vb); if (d < dist) { c = vb; dist=d; t=1.0; }\n        d = length2(p-vc); if (d < dist) { c = vc; dist=d; t=2.0; }\n\t\tp = c + 2.0*(p - c);\n\t\ta = t + a*3.0;\n\t}\n\t\n\treturn vec2( length(p)\/pow(2.0, 7.0), a\/pow(3.0,7.0) );\n}\n\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.0*fragCoord.xy - iResolution.xy)\/iResolution.y;\n\n\tvec2 r = map( uv );\n\t\n\tvec3 col = 0.5 + 0.5*sin( 3.1416*r.y + vec3(0.0,5.0,5.0) );\n\tcol *= 1.0 - smoothstep( 0.0, 0.02, r.x );\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}