{"Shader":{"ver":"0.1","info":{"id":"XsdGzX","date":"1451372151","viewed":143,"name":"black moon","username":"DeMaCia","description":"diffuse simpleless test","likes":1,"published":3,"flags":0,"tags":["noise","moon","diffuse"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\nfloat randomNoise(vec2 p)\n{\n\treturn fract(sin(p.x * (12.9898) + p.y * (4.1414)) * 43758.5453);\n}\n\nfloat smoothNoise(vec2 p)\n{\/\/cross filter \n    \n\tvec2 nn = vec2(p.x, p.y+1.);\n\tvec2 ee = vec2(p.x+1., p.y);\n\tvec2 ss = vec2(p.x, p.y-1.);\n\tvec2 ww = vec2(p.x-1., p.y);\n\tvec2 cc = vec2(p.x, p.y);\n\n\tfloat sum = 0.;\n\tsum += randomNoise(nn)\/8.;\n\tsum += randomNoise(ee)\/8.;\n\tsum += randomNoise(ss)\/8.;\n\tsum += randomNoise(ww)\/8.;\n\tsum += randomNoise(cc)\/2.;\n\n\treturn sum;\n}\n\n\nfloat BINoise(vec2 p)\n{\/\/Bilinear interpolation\n    \n    float tiles = 64.;\n    \n\tvec2 base = floor(p\/tiles);\n    p = fract(p\/tiles);\n    \n    vec2 f = smoothstep(0., 1., p);\n    \n\tfloat q11 = smoothNoise(base);\n\tfloat q12 = smoothNoise(vec2(base.x, base.y+1.));\n\tfloat q21 = smoothNoise(vec2(base.x+1., base.y));\n\tfloat q22 = smoothNoise(vec2(base.x+1., base.y+1.));\n\n\tfloat r1 = mix(q11, q21, f.x);\n\tfloat r2 = mix(q12, q22, f.x);\n\n\treturn mix (r1, r2, f.y);\n} \n\n\nfloat perlinNoise(vec2 p)\n {\n\tfloat total = 0., amplitude = 1.;\n\tfor (int i = 0; i < 6; i++)\n\t{\n\t\ttotal += BINoise(p) * amplitude; \n        p *= 2.;\n\t\tamplitude *= .5;\n\t}\n\treturn total;\n}\n\n\nfloat diffuseSphere(vec2 p,vec2 c, float r,vec3 l)\n{\n    float px = p.x - c.x;\n    float py = p.y - c.y;\n    float sq = r*r - px*px - py*py;\n    if(sq<0.)\n    {\n    \treturn 0.;\n        \/\/return smoothstep(-.1,0.,sq);\n    }\n    \n\tfloat z = sqrt(sq);\n\tvec3 normal = normalize(vec3(px, py, z));\n\tfloat diffuse = max(0., dot(normal, l));\n\treturn diffuse;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    \n\tvec2 pos = (fragCoord.xy\/iResolution.xy)*2.-1.;\n    pos.x *= iResolution.x\/iResolution.y;\n\tfloat t = iGlobalTime;\n    \n    \/\/mouse\n    \/\/vec2 mousePos = (iMouse.xy\/iResolution.xy)*2.-1.;\n    \/\/mousePos.x *= iResolution.x\/iResolution.y;\n    \n\t\/\/Diffuse\n    float r = .5;\n    vec3 vp = vec3(sin(t*.2), cos(t*.2), sin(t*.2));\n    vec3 vl = normalize(vp);\n    vec2 pc = vec2(sin(t*.2)*.8, cos(t*.2)*.25);\n\tfloat diffuse = diffuseSphere(pos,pc,r,vl);\n\n\t\/\/Noise\n    float nSpeed = 4.;\n\tvec2 p = pos*215.1 + t * nSpeed;\n\tfloat noise = perlinNoise(p);\n\n\tfragColor = vec4(vec3(diffuse*noise), 1.);\n    \n}","name":"","description":"","type":"image"}]}}