{"Shader":{"ver":"0.1","info":{"id":"Msc3Rn","date":"1447653479","viewed":343,"name":"quasicrytals","username":"charmless","description":"As described at http:\/\/mainisusuallyafunction.blogspot.ca\/2011\/10\/quasicrystals-as-sums-of-waves-in-plane.html","likes":4,"published":3,"flags":0,"tags":["learning","quasicrystals"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ try changing LAYERS - 3,5,7 are nice.\n\/\/ try changing the wrap function (wrap1, wrap2, wrap3) used at the end of quasicrystal()\n\n#define PI 3.14159265359\n#define LAYERS 7.\n\nfloat wave(float theta, vec2 p) {\n\treturn (cos(dot(p,vec2(cos(theta),sin(theta)))) + 1.) \/ 2.;\n}\n\n\n\/\/ triangular wrapping\nfloat wrap1(float val) {\n    float v_int = floor(val), \n          v_frac = fract(val);\n\n    bool even = fract(v_int \/ 2.) < 1e-4;\n\treturn even ? v_frac : 1. - v_frac;\n}\n\n\/\/ sawtooth wrapping\nfloat wrap2(float val) {\n    return fract(val);\n}\n\n\/\/ sinusoidal wrapping\nfloat wrap3(float val) {\n    return (1. + sin(val)) \/ 2.;\n}\n\n\nfloat quasicrystal(vec2 p) {\n    float sum = 0.;\n    for(float theta = 0.; theta < PI; theta += PI\/LAYERS) \n        sum += wave(theta, p);\n\n    return wrap1(sum);\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat ratio = iResolution.x\/iResolution.y;\n\tvec2 uv = fragCoord.xy\/iResolution.y;\n    vec2 target = vec2(mix(-.3, .7, cos(iGlobalTime*.02)),\n                       mix(-.2, .4, sin(iGlobalTime*.012)));\n    uv -= vec2(target.x * ratio, target.y);\n    uv *= mix(128., 180., sin(iGlobalTime*.2));\n\n\n    fragColor = vec4(quasicrystal(uv));  \n}","name":"","description":"","type":"image"}]}}