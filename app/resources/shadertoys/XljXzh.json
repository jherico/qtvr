{"Shader":{"ver":"0.1","info":{"id":"XljXzh","date":"1441613220","viewed":828,"name":"Truchetic Epilator","username":"Kuukunen","description":"Messing around with two of WAHa_06x36's shaders, for something even worse.","likes":2,"published":3,"flags":0,"tags":["distancefield","music","epilepsy","pain"],"hasliked":0},"renderpass":[{"inputs":[{"id":21,"src":"\/presets\/mzk04.mp3","ctype":"music","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ if you have problems running this, you can try to adjust the iterations\n#define Iterations 35\n#define Thickness 0.1\n#define SuperQuadPower 8.0\n#define Fisheye 1.2\n\nfloat rand(vec3 r) { return fract(sin(dot(r.xy,vec2(1.38984*sin(r.z),1.13233*cos(r.z))))*653758.5453); }\n\nfloat phase1;\nfloat phase2;\nfloat phase3;\nfloat phase4;\nfloat phase5;\nvec3 phase;\n\n\nfloat truchetarc(vec3 pos)\n{\n\tfloat r=length(pos.xy);\n\/\/\treturn max(abs(r-0.5),abs(pos.z-0.5))-Thickness;\n\/\/\treturn length(vec2(r-0.5,pos.z-0.5))-Thickness;\n\treturn pow(pow(abs(r-0.5),SuperQuadPower)+pow(abs(pos.z-0.5),SuperQuadPower),1.0\/SuperQuadPower)-Thickness;\n}\n\nfloat truchetcell(vec3 pos)\n{\n\treturn min(min(\n\ttruchetarc(pos),\n\ttruchetarc(vec3(pos.z,1.0-pos.x,pos.y))),\n\ttruchetarc(vec3(1.0-pos.y,1.0-pos.z,pos.x)));\n}\n\nvec3 texat(vec3 pos)\n{\n\tpos = pos*0.6;\n\t\/*\n\tvec3 uv=vec3(sin(pos.x),sin(pos.y),sin(pos.z));\n\tfloat s1=texture2D(iChannel0,vec2(uv.x,1.0)).x;\n\tfloat s2=texture2D(iChannel0,vec2(uv.y,1.0)).x;\n\tfloat s3=texture2D(iChannel0,vec2(uv.z,1.0)).x;\n\tvec3 col=vec3(\n\t(texture2D(iChannel0,vec2(0.0,0.1)).x-0.5)*2.0,\n\t(texture2D(iChannel0,vec2(0.4,0.4)).x-0.5)*2.0,\n\t(texture2D(iChannel0,vec2(0.5,0.6)).x-0.5)*2.0);\n\t\/\/if(abs(s1-s2)<0.1)\n\t\treturn vec3(vec3(1.0-abs(s1-s2+s3)\/0.5)*col);\n\t\/\/else return vec3(vec3(0.0));\n\t*\/\n\t\/\/pos = pos*1.0;\n\tvec3 uv=vec3(sin(pos.x)\/2.0+0.5,sin(pos.y)\/2.0+0.5,sin(pos.z)\/2.0+0.5);\n\t\/\/vec3 uv=pos;\n\tfloat s1=texture2D(iChannel0,vec2(uv.x,1.0)).x;\n\tfloat s2=texture2D(iChannel0,vec2(uv.y,1.0)).x;\n\tfloat s3=texture2D(iChannel0,vec2(uv.z,1.0)).x;\n\tvec3 col=vec3(\n\t(phase1-0.5)*2.0,\n\t(phase2-0.5)*2.0,\n\t(phase4-0.5)*2.0);\n\t\/\/if(abs(s1-s2)<0.1)\n\t\treturn vec3(vec3(1.0-abs(s1-s2+s3)\/0.4)*col);\n\t\/\/else return vec3(vec3(0.0));\n\/*\n\tvec2 uv=fragCoord.xy\/iResolution.xy;\n\tfloat s1=texture2D(iChannel0,vec2(uv.x,1.0)).x;\n\tfloat s2=texture2D(iChannel0,vec2(uv.y,1.0)).x;\n\tvec3 col=vec3(\n\t(texture2D(iChannel0,vec2(0.0,0.1)).x-0.5)*2.0,\n\t(texture2D(iChannel0,vec2(0.0,0.2)).x-0.5)*2.0,\n\t1.0);\n\tif(abs(s1-s2)<0.1) fragColor=vec4(vec3(1.0-abs(s1-s2)\/0.1)*col,1.0);\n\telse fragColor=vec4(vec3(0.0),1.0);\n*\/\n}\n\nfloat distfunc(vec3 pos)\n{\n\tpos = vec3(pos.x+sin(pos.y\/2.0)+0.6*sin(pos.y\/2.3*sin(iGlobalTime\/5.0)*4.0)+0.6*sin(pos.y\/2.1*sin(iGlobalTime\/5.0)*8.0),\n\t\t\t   pos.y+sin(pos.z\/2.0)+0.6*sin(pos.y\/2.2*sin(iGlobalTime\/4.0)*3.0)+0.6*sin(pos.y\/2.2*sin(iGlobalTime\/7.0)*8.2),\n\t\t\t   pos.z+sin(pos.x\/2.0)+0.6*sin(pos.y\/2.1*sin(iGlobalTime\/5.3)*5.5)+0.6*sin(pos.y\/2.3*sin(iGlobalTime\/8.0)*8.1));\n\tvec3 cellpos=fract(pos);\n\tvec3 gridpos=floor(pos);\n\n\tfloat rnd=rand(gridpos);\n\n\tif(rnd<1.0\/8.0) return truchetcell(vec3(cellpos.x,cellpos.y,cellpos.z));\n\telse if(rnd<2.0\/8.0) return truchetcell(vec3(cellpos.x,1.0-cellpos.y,cellpos.z));\n\telse if(rnd<3.0\/8.0) return truchetcell(vec3(1.0-cellpos.x,cellpos.y,cellpos.z));\n\telse if(rnd<4.0\/8.0) return truchetcell(vec3(1.0-cellpos.x,1.0-cellpos.y,cellpos.z));\n\telse if(rnd<5.0\/8.0) return truchetcell(vec3(cellpos.y,cellpos.x,cellpos.z));\n\telse if(rnd<6.0\/8.0) return truchetcell(vec3(cellpos.y,1.0-cellpos.x,cellpos.z));\n\telse if(rnd<7.0\/8.0) return truchetcell(vec3(1.0-cellpos.y,cellpos.x,cellpos.z));\n\telse  return truchetcell(vec3(1.0-cellpos.y,1.0-cellpos.x,cellpos.z));\n}\n\nvec3 gradient(vec3 pos)\n{\n\tconst float eps=0.0001;\n\tfloat mid=distfunc(pos);\n\treturn vec3(\n\tdistfunc(pos+vec3(eps,0.0,0.0))-mid,\n\tdistfunc(pos+vec3(0.0,eps,0.0))-mid,\n\tdistfunc(pos+vec3(0.0,0.0,eps))-mid);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tconst float pi=3.141592;\n\n\tvec2 coords=(2.0*fragCoord.xy-iResolution.xy)\/length(iResolution.xy);\n\n\tphase1 = texture2D(iChannel0,vec2(0.0,0.0)).x;\n\tphase2 = texture2D(iChannel0,vec2(0.5,0.0)).x;\n\tphase3 = texture2D(iChannel0,vec2(1.0,0.0)).x;\n\tphase4 = texture2D(iChannel0,vec2(0.6,0.0)).x;\n\tphase5 = texture2D(iChannel0,vec2(0.2,0.0)).x;\n\tphase=vec3(phase1, phase2, phase3);\n\n    float a=iGlobalTime\/5.0;\n\tmat3 m=mat3(\n\t0.0,1.0,0.0,\n\t-sin(a),0.0,cos(a),\n\tcos(a),0.0,sin(a));\n\tm*=m;\n\tm*=m;\n\t\n\n\tvec3 dir = normalize(vec3(1.4*coords,-1.0+Fisheye*(coords.x*coords.x+coords.y*coords.y)));\n\tvec3 ray_dir=m*dir;\n\tvec3 pv = m*normalize(vec3(dir.z, dir.z, -dir.x-dir.y));\n\tmat3 ll = mat3(\n\t\t0.0, ray_dir.z, -ray_dir.y,\n\t\t-ray_dir.z, 0.0, ray_dir.x,\n\t\tray_dir.y, -ray_dir.x, 0.0);\n\t\/\/float rot = sqrt(phase5)-sqrt(phase2)*1.5-sqrt(phase3)*1.5;\n\t\/\/if(rot < 0.0) rot = 0.0;\n\t\/\/pv = normalize(pv*(mat3(1.0) + sin(a*3.0)*ll + ((1.0 - cos(a*3.0))*(ll*ll))));\n\n\tfloat t=iGlobalTime\/5.0;\n\tvec3 ray_pos=vec3(\n    2.0*(sin(t+sin(2.0*t)\/2.0)\/2.0+0.5),\n    2.0*(sin(t-sin(2.0*t)\/2.0-pi\/2.0)\/2.0+0.5),\n    2.0*((-2.0*(t-sin(4.0*t)\/4.0)\/pi)+0.5+0.5));\n\tvec3 shads = vec3(0.0);\n\tfloat dist2 = 0.0;\n\n\tfloat i=float(Iterations);\n\tfor(int j=0;j<Iterations;j++)\n\t{\n\t\tfloat dist=distfunc(ray_pos)+0.1;\n\t\tdist2 += dist;\n\t\tray_pos+=dist*ray_dir;\n\t\t\/\/ray_pos += rot*pv*dist*0.5;\n\n\t\tif(abs(dist)<0.101) { shads += texat(ray_pos)*0.2; }\n\t}\n\n\tfloat vignette=pow(1.0-length(coords),0.3);\n\tfloat light=vignette;\n\n\tfloat z=ray_pos.z\/2.0;\n\/\/\tvec3 col=(sin(vec3(z,z+pi\/3.0,z+pi*2.0\/3.0))+2.0)\/3.0;\n\/\/\tvec3 col=(cos(ray_pos\/2.0)+2.0)\/3.0;\n\tvec3 col=vec3(\n\t\t(cos(ray_pos\/2.0+phase1*10.0+iGlobalTime*1.0)+2.0).x,\n\t\t(cos(ray_pos\/2.0+phase2*10.0+iGlobalTime*1.5)+2.0).x,\n\t\t(cos(ray_pos\/2.0+phase3*10.0+iGlobalTime*2.0)+2.0).x\n\t\t)\/3.0;\n\tcol += shads;\n\tcol = col*light;\n\tfloat collen = length(col);\n\tvec3 unsat = vec3(collen);\n\tfloat base = phase1*1.5;\n\tif(base > 1.0) base = 1.0;\n\tfragColor=vec4((1.0-base)*unsat*0.8+base*col,1.0);\n\t\/\/fragColor=vec4(sqrt(phase5)-sqrt(phase2)*1.5-sqrt(phase3)*1.5);\n\/*\n\tfragColor=vec4(\n\t(texture2D(iChannel0,fragCoord.xy\/iResolution.xy)).x,\n\t0.0,\/\/(texture2D(iChannel0,coords+vec2(0.5,0.5)*1.0)).x,\n\t0.0,\/\/(texture2D(iChannel0,coords+vec2(0.5,0.5)*1.0)).x,\n\t1.0);*\/\n\t\/*\n\tvec2 p = fragCoord.xy\/iResolution.xy;\n\tif(p.x < 0.5 && p.y < 0.5) fragColor=vec4(texat(vec3(p.x*pi*2.0, p.y*pi*2.0, 0.0)),1.0)*2.0;\n\telse if(p.x >= 0.5 && p.y < 0.5) fragColor=vec4(texat(vec3(p.x*pi*2.0, p.y*pi*2.0, pi*0.33)),1.0)*2.0;\n\telse if(p.x >= 0.5 && p.y >= 0.5) fragColor=vec4(texat(vec3(p.x*pi*2.0, p.y*pi*2.0, pi*0.66)),1.0)*2.0;\n\telse fragColor=vec4(texat(vec3(p.x*pi*2.0, p.y*pi*2.0, pi)),1.0)*2.0;\n*\/\n}\n","name":"","description":"","type":"image"}]}}