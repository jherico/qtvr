{"Shader":{"ver":"0.1","info":{"id":"Msl3RH","date":"1363000001","viewed":1532,"name":"Derivatives - test","username":"iq","description":"Abusing the derivative functions of GLSL to do dirty emboss\/bump\/cartoon shading. Typically you want to use these functions for antialiasing procedural patterns by taking derivatives of the domain of your procedural function and removing detail.","likes":12,"published":3,"flags":0,"tags":["2d","glsl"],"hasliked":0},"renderpass":[{"inputs":[{"id":5,"src":"\/presets\/tex04.jpg","ctype":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2013\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n\t\n\tvec3  col = texture2D( iChannel0, vec2(uv.x,1.0-uv.y) ).xyz;\n\tfloat lum = dot(col,vec3(0.333));\n\tvec3 ocol = col;\n\t\n\tif( uv.x>0.5 )\n\t{\n\t\t\/\/ right side: changes in luminance\n        float f = fwidth( lum );\n        col *= 1.5*vec3( clamp(1.0-8.0*f,0.0,1.0) );\n\t}\n    else\n\t{\n\t\t\/\/ bottom left: emboss\n        vec3  nor = normalize( vec3( dFdx(lum), 64.0\/iResolution.x, dFdy(lum) ) );\n\t\tif( uv.y<0.5 )\n\t\t{\n\t\t\tfloat lig = 0.5 + dot(nor,vec3(0.7,0.2,-0.7));\n            col = vec3(lig);\n\t\t}\n\t\t\/\/ top left: bump\n        else\n\t\t{\n            float lig = clamp( 0.5 + 1.5*dot(nor,vec3(0.7,0.2,-0.7)), 0.0, 1.0 );\n            col *= vec3(lig);\n\t\t}\n\t}\n\n    col *= smoothstep( 0.003, 0.004, abs(uv.x-0.5) );\n\tcol *= 1.0 - (1.0-smoothstep( 0.007, 0.008, abs(uv.y-0.5) ))*(1.0-smoothstep(0.49,0.5,uv.x));\n    col = mix( col, ocol, pow( 0.5 + 0.5*sin(iGlobalTime), 4.0 ) );\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}