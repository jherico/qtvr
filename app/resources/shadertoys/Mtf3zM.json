{"Shader":{"ver":"0.1","info":{"id":"Mtf3zM","date":"1419840115","viewed":360,"name":"Aquarium","username":"dr2","description":"How many robofish can you see?","likes":6,"published":3,"flags":0,"tags":["reflection","refraction","waveoptics"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ \"Aquarium\" by dr2 - 2014\n\/\/ License: Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License\n\n\/\/ Includes refraction, total internal reflection and Fresnel reflection\n\/\/ (correctness not guaranteed, proof left as exercise for reader).\n\n\/\/ Pseudo-caustics based on Dave_H's \"Tileable Water Caustic\".\n\nconst float pi = 3.14159;\nconst vec4 cHashA4 = vec4 (0., 1., 57., 58.);\nconst vec3 cHashA3 = vec3 (1., 57., 113.);\nconst float cHashM = 43758.54;\n\nvec4 Hashv4f (float p)\n{\n  return fract (sin (p + cHashA4) * cHashM);\n}\n\nfloat Noisefv2 (vec2 p)\n{\n  vec2 i = floor (p);\n  vec2 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  vec4 t = Hashv4f (dot (i, cHashA3.xy));\n  return mix (mix (t.x, t.y, f.x), mix (t.z, t.w, f.x), f.y);\n}\n\nfloat Noisefv3 (vec3 p)\n{\n  vec3 i = floor (p);\n  vec3 f = fract (p);\n  f = f * f * (3. - 2. * f);\n  float q = dot (i, cHashA3);\n  vec4 t1 = Hashv4f (q);\n  vec4 t2 = Hashv4f (q + cHashA3.z);\n  return mix (mix (mix (t1.x, t1.y, f.x), mix (t1.z, t1.w, f.x), f.y),\n     mix (mix (t2.x, t2.y, f.x), mix (t2.z, t2.w, f.x), f.y), f.z);\n}\n\nfloat Fbm2 (vec2 p)\n{\n  float s = 0.;\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * Noisefv2 (p);\n    a *= 0.5;\n    p *= 2.;\n  }\n  return s;\n}\n\nfloat Fbmn (vec3 p, vec3 n)\n{\n  vec3 s = vec3 (0.);\n  float a = 1.;\n  for (int i = 0; i < 5; i ++) {\n    s += a * vec3 (Noisefv2 (p.yz), Noisefv2 (p.zx), Noisefv2 (p.xy));\n    a *= 0.5;\n    p *= 2.;\n  }\n  return dot (s, abs (n));\n}\n\nvec3 VaryNf (vec3 p, vec3 n, float f)\n{\n  vec3 e = vec3 (0.2, 0., 0.);\n  float s = Fbmn (p, n);\n  vec3 g = vec3 (Fbmn (p + e.xyy, n) - s,\n     Fbmn (p + e.yxy, n) - s, Fbmn (p + e.yyx, n) - s);\n  return normalize (n + f * (g - n * dot (n, g)));\n}\n\nfloat SmoothMin (float a, float b, float r)\n{\n  float h = clamp (0.5 + 0.5 * (b - a) \/ r, 0., 1.);\n  return mix (b, a, h) - r * h * (1. - h);\n}\n\nfloat SmoothBump (float lo, float hi, float w, float x)\n{\n  return (1. - smoothstep (hi - w, hi + w, x)) * smoothstep (lo - w, lo + w, x);\n}\n\nvec2 Rot2D (vec2 q, float a)\n{\n  return q * cos (a) * vec2 (1., 1.) + q.yx * sin (a) * vec2 (-1., 1.);\n}\n\nfloat PrBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = abs (p) - b;\n  float s = length (max (d, 0.));\n  d = min (d, 0.);\n  return max (d.x, max (d.y, d.z)) + s;\n}\n\nfloat PrOBoxDf (vec3 p, vec3 b)\n{\n  return length (max (abs (p) - b, 0.));\n}\n\nfloat PrIBoxDf (vec3 p, vec3 b)\n{\n  vec3 d = min (abs (p) - b, 0.);\n  return max (d.x, max (d.y, d.z));\n}\n\nfloat PrSphDf (vec3 p, float s)\n{\n  return length (p) - s;\n}\n\nfloat PrCylDf (vec3 p, float r, float h)\n{\n  return max (length (p.xy) - r, abs (p.z) - h);\n}\n\nfloat PrCapsDf (vec3 p, float r, float h)\n{\n  return length (p - vec3 (0., 0., h * clamp (p.z \/ h, -1., 1.))) - r;\n}\n\nvec3 RgbToHsv (vec3 c)\n{\n  vec4 p = mix (vec4 (c.bg, vec2 (-1., 2.\/3.)), vec4 (c.gb, vec2 (0., -1.\/3.)),\n     step (c.b, c.g));\n  vec4 q = mix (vec4 (p.xyw, c.r), vec4 (c.r, p.yzx), step (p.x, c.r));\n  float d = q.x - min (q.w, q.y);\n  const float e = 1.e-10;\n  return vec3 (abs (q.z + (q.w - q.y) \/ (6. * d + e)), d \/ (q.x + e), q.x);\n}\n\nvec3 HsvToRgb (vec3 c)\n{\n  vec3 p = abs (fract (c.xxx + vec3 (1., 2.\/3., 1.\/3.)) * 6. - 3.);\n  return c.z * mix (vec3 (1.), clamp (p - 1., 0., 1.), c.y);\n}\n\nint idObj;\nmat3 fishMat, vuMat;\nvec3 fishPos, qHit, sunDir, tankSize, waterDisp, cloudDisp;\nfloat tCur, fishLen, angTail, angFin, posMth;\nbool inTank, chkTank;\nconst float dstFar = 100.;\nconst int idStn = 1, idTkFlr = 2, idTkFrm = 3, idBrWall = 4, idTbl = 5,\n   idFBdy = 21, idTail = 22, idFin = 23, idEye = 24;\n\nvec3 BgCol (vec3 ro, vec3 rd)\n{\n  vec3 col;\n  vec2 p;\n  float cloudFac, w, f;\n  if (rd.y > 0.) {\n    ro.xz += cloudDisp.xz;\n    p = 0.05 * (rd.xz * (70. - ro.y) \/ rd.y + ro.xz);\n    w = 0.8;  f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);  w *= 0.5;  p *= 2.;\n    }\n    cloudFac = clamp (3. * f * rd.y - 0.3, 0., 1.);\n    f = max (dot (rd, sunDir), 0.);\n    col =  mix (vec3 (0.2, 0.3, 0.55) + 0.2 * pow (1. - rd.y, 5.) +\n       (0.35 * pow (f, 6.) + 0.65 * min (pow (f, 256.), 0.3)),\n       vec3 (0.85), cloudFac);\n  } else {\n    p = -0.02 * (rd.xz * ro.y \/ rd.y + ro.xz);\n    w = 1.;  f = 0.;\n    for (int j = 0; j < 4; j ++) {\n      f += w * Noisefv2 (p);  w *= 0.7;  p *= 2.5;\n    }\n    col = mix ((1. + min (f, 1.)) * vec3 (0.15, 0.2, 0.15),\n       vec3 (0.2, 0.3, 0.55) + 0.2, pow (1. + rd.y, 5.));\n  }\n  return col;\n}\n\nvec3 BrickSurfCol (vec2 p) {\n  vec2 q = p * vec2 (1.\/40., 1.\/20.);\n  vec2 i = floor (q);\n  if (2. * floor (i.y \/ 2.) != i.y) {\n    q.x += 0.5;\n    i = floor (q);\n  }\n  q = smoothstep (0.02, 0.04, abs (fract (q + 0.5) - 0.5));\n  return (1. + Noisefv2 (10. * p)) * (0.2 + 0.8 * q.x * q.y) *\n     vec3 (0.5, 0.4, 0.3);\n}\n\nvec3 BrickCol (vec3 p, vec3 n)\n{\n  n = abs (n);\n  p *= 150.;\n  return BrickSurfCol (p.zy) * n.x + BrickSurfCol (p.xz) * n.y +\n     BrickSurfCol (p.xy) * n.z;\n}\n\nvec3 WoodCol (vec3 p, vec3 n)\n{\n  p *= 4.;\n  float f = dot (vec3 (Fbm2 (p.yz * vec2 (1., 0.1)),\n     Fbm2 (p.zx * vec2 (1., 0.1)), Fbm2 (p.yx * vec2 (1., 0.1))), abs (n));\n  return mix (vec3 (0.8, 0.4, 0.2), vec3 (0.45, 0.25, 0.1), f);\n}\n\nfloat WaterHt (vec3 p)\n{\n  float ht, w;\n  const float wb = 1.414;\n  p *= 0.05;\n  ht = 0.;\n  w = wb;\n  for (int j = 0; j < 4; j ++) {\n    w *= 0.5;\n    p = wb * vec3 (p.y + p.z, p.z - p.y, 2. * p.x);\n    p += waterDisp;\n    ht += w * abs (Noisefv3 (p) - 0.5);\n  }\n  return 0.1 * ht;\n}\n\nvec3 WaterNf (vec3 p)\n{\n  float ht = WaterHt (p);\n  vec2 e = vec2 (0.01, 0.);\n  return normalize (vec3 (ht - WaterHt (p + e.xyy), e.x, ht - WaterHt (p + e.yyx)));\n}\n\nfloat TableDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, d1, d2, br, bl, sFac;\n  sFac = 2.5;  br = 1.6 * sFac;  bl = 1.1 * sFac;\n  p -= vec3 (0., - 2.2 * sFac - 0.01 * br, 0.);\n  q = p;\n  d = PrBoxDf (q, br * vec3 (1., 0.042, 0.6));\n  p.xz += 0.05 * br * vec2 (1., 1.5);\n  q = p;  q.y += bl;\n  d1 = PrCylDf (q.xzy, 0.07 * br, bl);\n  q = p;  q.y += 2. * bl;\n  d2 = max (PrCylDf (q.xzy, 0.5 * br, 0.15 * br * (1. -\n     0.7 * smoothstep (0.2 * br, 0.35 * br, length (p.xz)))), -0.05 * br - q.y);\n  d = min (d, min (d1, d2));\n  if (d < dHit) { dHit = d;  idObj = idTbl;  qHit = q; }\n  return dHit;\n}\n\nfloat TankWlDf (vec3 p, float dHit)\n{\n  float d;\n  d = (inTank)? max (PrIBoxDf (p, tankSize + 0.025 * tankSize.x),\n     - PrIBoxDf (p, tankSize + 0.015 * tankSize.x)) : PrOBoxDf (p, tankSize);\n  if (d < dHit) { dHit = d;  qHit = p;  idObj = 10; }\n  return dHit;\n}\n\nfloat FishDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d, wr, tr, u;\n  q = p;  q.x = abs (q.x);  q -= fishLen * vec3 (0.12, 0.1, 0.9);\n  d = PrSphDf (q, 0.05 * fishLen);\n  if (d < dHit) { dHit = d;  idObj = idEye;  qHit = q; }\n  q = p;\n  wr = q.z \/ fishLen;\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.11 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * (0.33 - 0.13 * u); \n  }\n  q.y *= 0.5;\n  d = PrCapsDf (q, 1.1 * tr * fishLen, fishLen);\n  q.y *= 2.;  q.z -= posMth * fishLen;\n  d = max (d, - PrCylDf (q.yzx, 0.03 * fishLen, 0.1 * fishLen));\n  if (d < dHit + 0.01 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.01 * fishLen);  idObj = idFBdy;  qHit = q;\n  }\n  q = p;  q.z -= -0.9 * fishLen;  q.y *= 0.1;\n  wr = q.z \/ (0.4 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.05 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  float dTail = PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen);\n  d = max (dTail, 0.15 * fishLen - q.z);\n  if (d < dHit + 0.01 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.01 * fishLen);  idObj = idTail;  qHit = q;\n  }\n  q.z -= 0.15 * fishLen;\n  q.xz = Rot2D (q.xz, angTail);\n  d = max (PrCylDf (q, 0.13 * tr * fishLen, 0.6 * fishLen), q.z);\n  if (d < dHit) { dHit = d;  idObj = idTail;  qHit = q; }\n  q = p;  q.y *= 0.5;  q.z -= -0.75 * fishLen;\n  q = q.xzy;\n  d = max (PrCylDf (q, 0.022 * fishLen, 0.11 * fishLen), dTail);\n  if (d < dHit) { dHit = d;  idObj = idTail;  qHit = 0.2 * q.xzy; }\n  q = p;  q.x = abs (q.x) - 0.18 * fishLen;  q.y *= 0.1;  q.z -= 0.4 * fishLen;\n  q.xz = Rot2D (q.xz, angFin);\n  wr = q.z \/ (0.2 * fishLen);\n  if (wr > 0.5) {\n    u = (wr - 0.5) \/ 0.5;  tr = 0.17 - 0.01 * u * u;\n  } else {\n    u = clamp ((wr - 0.5) \/ 1.5, -1., 1.);  u *= u;  tr = 0.17 - u * 0.34; \n  }\n  q.z -= 0.3 * fishLen;\n  d = PrCylDf (q, 0.12 * tr * fishLen, 0.5 * fishLen);\n  if (d < dHit + 0.005 * fishLen) {\n    dHit = SmoothMin (dHit, d, 0.005 * fishLen);  idObj = idFin;  qHit = q;\n  }\n  return 0.75 * dHit;\n}\n\nfloat TankIntDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.y -= -0.548 * tankSize.x;\n  d = max (max (PrSphDf (q, 0.35 * tankSize.x), q.y - 0.25 * tankSize.x), - q.y);\n  q.y -= 0.25 * tankSize.x;\n  d = max (d, - min (PrCylDf (q, 0.1 * tankSize.x, 0.4 * tankSize.x),\n     PrCylDf (q.zyx, 0.1 * tankSize.x, 0.4 * tankSize.x)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idStn; }\n  return dHit;\n}\n\nfloat TankExtDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.y -= - 2.7 * tankSize.x + 11.;  q.z -= 1.1 * tankSize.x;\n  d = PrBoxDf (q, vec3 (2.4, 1.35, 0.05) * tankSize.x);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrWall; }\n  q = p;  q -= vec3 (0., -2. * tankSize.x + 1., 1.1 * tankSize.x);\n  d = max (PrCylDf (q.xzy, 2.4 * tankSize.x, 0.05 * tankSize.x),\n     q.z);\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idBrWall; }\n  q = p;  q.y -= - tankSize.y + 5.1;\n  dHit = TableDf (q, dHit);\n  return dHit;\n}\n\nfloat TankFrameDf (vec3 p, float dHit)\n{\n  vec3 q;\n  float d;\n  q = p;  q.y -= -0.489 * tankSize.x;\n  d = max (q.y, PrBoxDf (q, vec3 (tankSize.x, 0.01 * tankSize.x, tankSize.z)));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idTkFlr; }\n  vec3 ts = tankSize - 0.01 * tankSize.x;\n  vec3 db = vec3 (0.1 * tankSize.x, 0., 0.);\n  q = p;\n  d = max (PrBoxDf (q, ts + 0.05 * tankSize.x),\n     - min (PrBoxDf (q, ts + 0.025 * tankSize.x),\n     min (PrBoxDf (q, ts + db.yzx), min (PrBoxDf (q, ts + db.zxy),\n     PrBoxDf (q, ts + db)))));\n  if (d < dHit) { dHit = d;  qHit = q;  idObj = idTkFrm; }\n  return dHit;\n}\n\nfloat ObjDf (vec3 p)\n{\n  float dHit = dstFar;\n  if (chkTank) dHit = TankWlDf (p, dHit);\n  else {\n    dHit = TankFrameDf (p, dHit);\n    if (inTank) {\n      dHit = TankIntDf (p, dHit);\n      dHit = FishDf (fishMat * (p - fishPos), dHit);\n    } else dHit = TankExtDf (p, dHit);\n  }\n  return dHit;\n}\n\nfloat ObjRay (vec3 ro, vec3 rd)\n{\n  float dHit, d;\n  dHit = 0.;\n  for (int j = 0; j < 150; j ++) {\n    d = ObjDf (ro + dHit * rd);\n    dHit += d;\n    if (d < 0.001 || dHit > dstFar) break;\n  }\n  return dHit;\n}\n\nvec3 ObjNf (vec3 p)\n{\n  const vec3 e = vec3 (0.001, -0.001, 0.);\n  vec4 v = vec4 (ObjDf (p + e.xxx), ObjDf (p + e.xyy),\n     ObjDf (p + e.yxy), ObjDf (p + e.yyx));\n  return normalize (vec3 (v.x - v.y - v.z - v.w) + 2. * v.yzw);\n}\n\nfloat ObjSShadow (vec3 ro, vec3 rd)\n{\n  float sh, d, h;\n  sh = 1.;\n  d = 0.1;\n  for (int j = 0; j < 60; j ++) {\n    h = ObjDf (ro + rd * d);\n    sh = min (sh, 10. * h \/ d);\n    d += 0.1;\n    if (h < 0.001) break;\n  }\n  return clamp (0.6 + sh, 0., 1.);\n}\n\nfloat ObjAO (vec3 ro, vec3 rd)\n{\n  float ao, d;\n  ao = 0.;\n  for (int j = 0; j < 8; j ++) {\n    d = 0.1 + float (j) \/ 8.;\n    ao += max (0., d - 3. * ObjDf (ro + rd * d));\n  }\n  return 0.3 + 0.7 * clamp (1. - 0.1 * ao, 0., 1.);\n}\n\nvec3 FishCol (vec3 n)\n{\n  vec3 col;\n  const vec3 col1 = vec3 (1., 0.2, 0.1), col2 = vec3 (0.1, 1., 0.2);\n  qHit *= 20. \/ fishLen;\n  if (idObj == idEye) {\n    col = vec3 (0., 0.6, 1.);\n    if (qHit.z > 0.5) col = vec3 (0., 0., 0.1);\n  } else if (idObj == idFBdy) {\n    col = mix (col2, col1, 0.5 * (1. + sin (2. * qHit.y)));\n    vec3 nn = fishMat * n;\n    col = mix (col1,  mix (col, col2, smoothstep (0.7, 1., nn.y)),\n       smoothstep (-1., -0.7, nn.y)) *\n       (1. - 0.2 * SmoothBump (-0.2, 0.2, 0.1, qHit.x));\n  } else if (idObj == idTail) {\n    col = mix (col2, col1, 0.5 * (1. + sin (20. * qHit.y)));\n  } else if (idObj == idFin) {\n    col = mix (col2, col1, 0.5 * (1. + sin (20. * qHit.y)));\n  }\n  return col;\n}\n\nvec4 ObjCol (vec3 n)\n{\n  vec4 col;\n  if (idObj == idStn) col = vec4 (0.16, 0.2, 0.16, 0.2) *\n     (0.1 + Fbm2 (5. * qHit.xz));\n  else if (idObj == idTkFlr) col = vec4 (0.2, 0.2, 0.05, 0.1) *\n     (0.5 + 0.5 * Fbm2 (10. * qHit.xz));\n  else if (idObj == idTkFrm) col = vec4 (0.2, 0.3, 0.9, 2.);\n  else if (idObj == idBrWall) col = vec4 (BrickCol (0.1 * qHit, n), 0.1);\n  else if (idObj == idTbl) col = vec4 (WoodCol (qHit, n), 0.3);\n  else col = vec4 (FishCol (n), 1.);\n  return col;\n}\n\nfloat TurbLt (vec3 p, vec3 n, float t)\n{\n  vec2 q, qq, a1, a2;\n  float c, tt;\n  q = 2. * pi * mod (vec2 (dot (p.yzx, n), dot (p.zxy, n)), 1.) - 256.;\n  t += 11.;\n  qq = q;  c = 0.;\n  for (int k = 1; k <= 6; k ++) {\n    tt = t * (1. + 1. \/ float (k));\n    a1 = tt - qq;  a2 = tt + qq;\n    qq = q + tt + vec2 (cos (a1.x) + sin (a2.y), sin (a1.y) + cos (a2.x));\n    c += 1. \/ length (q \/ vec2 (sin (qq.x), cos (qq.y)));\n  }\n  return clamp (pow (abs (1.1 - 40. * c), 8.), 0., 1.);\n}\n\nvec3 ShowScene (vec3 ro, vec3 rd)\n{\n  vec4 objCol;\n  vec3 roW, rdW, rdd, vn, vno, vnW, colD, colR, qHitTank;\n  float dstHit, dstTank, dstTankW, yLim, dif, ao, sh, reflFac, frnlFac;\n  int idObjT, idTank;\n  bool tWallHit, isDown;\n  const float eta = 1.25;\n  yLim = 0.999 * tankSize.y;\n  idObj = -1;\n  inTank = false;\n  chkTank = true;\n  dstTank = ObjRay (ro, rd);\n  if (idObj < 0) dstTank = dstFar;\n  idTank = -1;\n  if (dstTank < dstFar) {\n    idTank = idObj;\n    qHitTank = qHit;\n  }\n  idObj = -1;\n  chkTank = false;\n  dstHit = ObjRay (ro, rd);\n  if (idObj < 0) dstHit = dstFar;\n  idObjT = idObj;\n  roW = ro;  rdW = rd;\n  dstTankW = dstTank;\n  reflFac = 1.;\n  frnlFac = 0.;\n  tWallHit = (dstTank < dstHit && idTank > 0);\n  if (tWallHit) {\n    ro += dstTank * rd;\n    chkTank = true;\n    vn = (qHitTank.y < yLim) ? ObjNf (ro) : WaterNf (qHitTank);\n    vnW = vn;\n    frnlFac = (qHitTank.y > - yLim) ? abs (dot (rd, vn)) : 0.;\n    rd = refract (rd, vn, 1. \/ eta);\n    ro += 0.01 * rd;\n    idObj = -1;\n    inTank = true;\n    dstTank = ObjRay (ro, rd);\n    if (idObj < 0) dstTank = dstFar;\n    idTank = -1;\n    if (dstTank < dstFar) {\n      idTank = idObj;\n      qHitTank = qHit;\n    }\n    idObj = -1;\n    chkTank = false;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    idObjT = idObj;\n    if (dstTank < dstHit && idTank > 0) {\n      ro += dstTank * rd;\n      chkTank = true;\n      vn = (qHitTank.y < yLim) ? ObjNf (ro) : - WaterNf (qHitTank);\n      rdd = refract (rd, vn, eta);\n      if (length (rdd) > 0.) {\n        rd = rdd;\n        reflFac *= 0.8;\n        inTank = false;\n      } else rd = reflect (rd, vn);\n      ro += 0.01 * rd;\n      idObj = -1;\n      chkTank = false;\n      dstHit = ObjRay (ro, rd);\n      if (idObj < 0) dstHit = dstFar;\n      idObjT = idObj;\n    }\n  }\n  if (dstHit < dstFar) {\n    ro += rd * dstHit;\n    chkTank = false;\n    vn = ObjNf (ro);\n    vno = vn;\n    idObj = idObjT;\n    if (idObj == idStn) {\n      vn = VaryNf (6. * qHit, vn, 5.);\n    } else if (idObj == idTkFlr) {\n      vn = (vn.y > 0.) ? VaryNf (10. * qHit, vn, 2.) : vn;\n    }\n    objCol = ObjCol (vn);\n    dif = max (dot (vn, sunDir), 0.);\n    ao = ObjAO (ro, vn);\n    sh = (idObjT < idFBdy) ? ObjSShadow (ro, sunDir) : 1.;\n    colD = reflFac * objCol.rgb * (0.2 * ao + max (0., dif) * sh *\n       (dif + ao * objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    isDown = (vno.y < -0.999);\n    vno = normalize (smoothstep (0.1, 0.9, abs (vno)));\n    idObj = idObjT;\n    if (! isDown && (idObj <= idTkFlr || idObj >= idFBdy)) colD *= 1. +\n       ((idObj <= idTkFlr) ? 3. : 0.3) * TurbLt (0.1 * ro, vno, 0.5 * tCur);\n  } else colD = reflFac * BgCol (ro, rd);\n  colR = vec3 (0.);\n  reflFac = 1.;\n  if (tWallHit) {\n    ro = roW + dstTankW * rdW;\n    rd = (frnlFac > 0.) ? reflect (rdW, vnW) : rdW;\n    ro += 0.01 * rd;\n    inTank = false;\n    idObj = -1;\n    chkTank = false;\n    dstHit = ObjRay (ro, rd);\n    if (idObj < 0) dstHit = dstFar;\n    idObjT = idObj;\n    if (dstHit < dstFar) {\n      ro += rd * dstHit;\n      vn = ObjNf (ro);\n      idObj = idObjT;\n      objCol = ObjCol (vn);\n      dif = max (dot (vn, sunDir), 0.);\n      ao = ObjAO (ro, vn);\n      sh = ObjSShadow (ro, sunDir);\n      colR = reflFac * objCol.rgb * (0.2 * ao + max (0., dif) * sh *\n         (dif + ao * objCol.a * pow (max (0., dot (sunDir, reflect (rd, vn))), 64.)));\n    } else colR = reflFac * BgCol (ro, rd);\n    colR = HsvToRgb (RgbToHsv (colR) * vec3 (1., 0.7, 0.5));\n  }\n  frnlFac = (eta != 1. && frnlFac > 0.) ? 1. - pow (frnlFac, 4.) : 0.;\n  return sqrt (clamp (mix (colD, colR, smoothstep (0.98, 1., frnlFac)), 0., 1.));\n}\n\nvec3 FishTrack (float t)\n{\n  return 0.75 * tankSize * vec3 (cos (0.2 * t),\n     0.1 + 0.9 * sin (0.037 * t), sin (0.2 * t));\n}\n\nvoid FishPM (float t)\n{\n  float dt = 1.;\n  fishPos = FishTrack (t);\n  vec3 vel = (FishTrack (t + dt) - FishTrack (t - dt)) \/ (2. * dt);\n  float a = atan (vel.z, vel.x) - 0.5 * pi;\n  float ca = cos (a);\n  float sa = sin (a);\n  fishMat = mat3 (ca, 0., - sa, 0., 1., 0., sa, 0., ca);\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n  vec2 uv = 2. * fragCoord.xy \/ iResolution.xy - 1.;\n  uv.x *= iResolution.x \/ iResolution.y;\n  tCur = iGlobalTime;\n  vec3 ro, rd;\n  float el, az, zmFac;\n  tankSize = vec3 (5., 2.5, 3.);\n  FishPM (tCur);\n  fishLen = 0.2 * tankSize.x;\n  angTail = 0.1 * pi * sin (5. * tCur);\n  angFin = pi * (0.8 + 0.1 * sin (2.5 * tCur));\n  posMth = 1.04 + 0.01 * sin (5. * tCur);\n  zmFac = clamp (3. + 0.4 * tCur, 3., 7.);\n  waterDisp = 0.1 * tCur * vec3 (1., 0., 1.);\n  cloudDisp = 4. * tCur * vec3 (1., 0., 1.);\n  el = pi * (-0.25 + 0.7 * SmoothBump (0.25, 0.75, 0.25,\n     mod (0.071 * tCur + 0.4 * pi, 2. * pi) \/ (2. * pi)));\n  az = 0.6 * pi * (1. - 0.5 * abs (el)) * sin (0.21 * tCur);\n  vec2 vf = vec2 (el, az);\n  vec2 cf = cos (vf);\n  vec2 sf = sin (vf);\n  vuMat = mat3 (1., 0., 0., 0., cf.x, - sf.x, 0., sf.x, cf.x) *\n     mat3 (cf.y, 0., sf.y, 0., 1., 0., - sf.y, 0., cf.y);\n  rd = normalize (vec3 (uv, zmFac)) * vuMat;\n  ro = vec3 (0., 0., -40.) * vuMat;\n  sunDir = normalize (vec3 (-0.2, 0.2, -1.)) * vuMat;\n  vec3 col = ShowScene (ro, rd);\n  fragColor = vec4 (col, 1.);\n}\n","name":"","description":"","type":"image"}]}}