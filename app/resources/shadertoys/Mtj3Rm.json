{"Shader":{"ver":"0.1","info":{"id":"Mtj3Rm","date":"1427817952","viewed":667,"name":"Ray Marching Experiment 13","username":"aiekick","description":"Ray Marching Experiment 13","likes":0,"published":3,"flags":0,"tags":["ray","experiment","marching","13"],"hasliked":0},"renderpass":[{"inputs":[{"id":22,"src":"\/presets\/cube00_0.jpg","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"\/\/ Created by Stephane Cuillerdier - Aiekick\/2015\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\nfloat kernel = 1.;\nfloat ground = 1.5;\n\nfloat os( vec3 p, float r ){ return length(p)-r;}\n\nvec4 mapGround(vec3 p)\n{\n    float dist = os(p, ground);\n    \n    return vec4(dist, vec3(.2, .5, .8));\n}\n\nvec4 mapKernel(vec3 p)\n{\n    float dist = os(p, kernel);\n    \n    return vec4(dist, vec3(.5, .8, .2));\n}\n\nvec4 map(vec3 p)\n{\n\tvec4 g = mapGround(p);\n    vec4 k = mapKernel(p);\n    \n    float r = smoothstep(0., 1., g.x\/k.x);\n    \n    return vec4(atan(g.x,k.x), mix(g.yzw, k.yzw, r));\n}\n\nvec3 calcNormal( in vec3 pos )\n{\n\tvec3 eps = vec3( 0.1, 0., 0. );\n\tvec3 nor = vec3(\n\t    map(pos+eps.xyy).x - map(pos-eps.xyy).x,\n\t    map(pos+eps.yxy).x - map(pos-eps.yxy).x,\n\t    map(pos+eps.yyx).x - map(pos-eps.yyx).x );\n\treturn normalize(nor);\n}\n\n\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nfloat march(vec3 ro, vec3 rd, float rmPrec, float maxd, float mapPrec)\n{\n    float s = rmPrec;\n    float d = 0.;\n    vec3 p = ro+rd*d;\n    for(int i=0;i<80;i++)\n    {      \n        if (s<rmPrec||s>maxd) break;\n        s = map(p).x*mapPrec;\n        d += s;\n        p = ro+rd*d;\n    }\n    return d;\n}\n\n\/\/\/\/\/\/\/\/MAIN\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    float time = iGlobalTime*0.5;\n    float cam_a = time; \/\/ angle z\n    \n    float cam_e = 0.5; \/\/ elevation\n    float cam_d = 2.5 + (sin(iGlobalTime*.15)*.5+.5)*50.; \/\/ distance to origin axis\n   \t\n    vec3 camUp=vec3(0,1,0);\/\/Change camere up vector here\n  \tvec3 camView=vec3(0,0,0); \/\/Change camere view here\n  \tfloat li = 0.6; \/\/ light intensity\n    float prec = 0.00001; \/\/ ray marching precision\n    float maxd = 50.; \/\/ ray marching distance max\n    float refl_i = 0.45; \/\/ reflexion intensity\n    float refr_a = 0.7; \/\/ refraction angle\n    float refr_i = 0.8; \/\/ refraction intensity\n    float bii = 0.35; \/\/ bright init intensity\n    \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \/\/if ( iMouse.z>0.) cam_e = iMouse.x\/iResolution.x * 10.; \/\/ mouse x axis \n    if ( iMouse.z>0.) cam_d = iMouse.y\/iResolution.y * 50.; \/\/ mouse y axis \n    \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n    \n\tvec2 uv = fragCoord.xy \/ iResolution.xy * 2. -1.;\n    uv.x*=iResolution.x\/iResolution.y;\n    \n    vec3 col = vec3(0.);\n    \n    vec3 ro = vec3(-sin(cam_a)*cam_d, cam_e+1., cos(cam_a)*cam_d); \/\/\n  \tvec3 rov = normalize(camView-ro);\n    vec3 u = normalize(cross(camUp,rov));\n  \tvec3 v = cross(rov,u);\n  \tvec3 rd = normalize(rov + uv.x*u + uv.y*v);\n    \n    float b = bii;\n    \n    float d = march(ro, rd, prec, maxd, 0.5);\n    \n    if (d<maxd)\n    {\n        vec2 e = vec2(-1., 1.)*0.005; \n    \tvec3 p = ro+rd*d;\n        vec3 n = calcNormal(p);\n        \n        b=li;\n        \n        vec3 reflRay = reflect(rd, n);\n\t\tvec3 cubeRefl = textureCube(iChannel0, reflRay).rgb * refl_i;\n        \n        vec3 c = map(p).yzw;\n        col = cubeRefl + c*b + pow(b, 15.);\n    }\n    else\n    {\n        col = textureCube(iChannel0, rd).rgb;\n    }\n    \n\tfragColor.rgb = col;\n}","name":"","description":"","type":"image"}]}}