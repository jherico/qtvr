{"Shader":{"ver":"0.1","info":{"id":"4ssSRl","date":"1405671704","viewed":1814,"name":"Antialias \/ filtering","username":"iq","description":"Used filter width (fwidth) to antialias edges (no supersampling). See the jagged edges in the left side of the screen vs the smooth edges in the right side. Both pre and post gamma filtering are implemented (move mouse to change the areas)","likes":19,"published":3,"flags":0,"tags":["2d","antialias","filtering"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ distance to a line (can't get simpler than this)\nfloat line( in vec2 a, in vec2 b, in vec2 p )\n{\n\tvec2 pa = p - a;\n\tvec2 ba = b - a;\n\tfloat h = clamp( dot(pa,ba)\/dot(ba,ba), 0.0, 1.0 );\n\treturn length( pa - ba*h );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 p = (-iResolution.xy + 2.0*fragCoord.xy) \/ iResolution.yy;\n\tvec2 q = p;\n\t\n\tvec2 c = vec2(0.0);\n\tif( iMouse.z>0.0 ) c=(-iResolution.xy + 2.0*iMouse.xy) \/ iResolution.yy;\n\t\n    \/\/ background\t\n\tvec3 col = vec3(0.5,0.85,0.9)*(1.0-0.2*length(p));\n\tif( q.x>c.x && q.y>c.y ) col = pow(col,vec3(2.2));\n\n    \/\/ zoom in and out\t\n\tp *= 1.0 + 0.2*sin(iGlobalTime*0.4);\n\t\n\t\n\t\/\/ compute distance to a set of lines\n    float d = 1e20;\t\n\tfor( int i=0; i<7; i++ )\n\t{\n        float anA = 6.2831*float(i+0)\/7.0 + 0.15*iGlobalTime;\n        float anB = 6.2831*float(i+3)\/7.0 + 0.20*iGlobalTime;\n\t\tvec2 pA = 0.95*vec2( cos(anA), sin(anA) );\t\t\n        vec2 pB = 0.95*vec2( cos(anB), sin(anB) );\t\t\n\t\tfloat h = line( pA, pB, p );\n\t\td = min( d, h );\n\t}\n\n    \/\/ lines\/start, left side of screen\t: not filtered\n\tif( q.x<c.x )\n\t{\n\t\tif( d<0.12 ) col = vec3(0.0,0.0,0.0); \/\/ black \n\t\tif( d<0.04 ) col = vec3(1.0,0.6,0.0); \/\/ orange\n\t}\n    \/\/ lines\/start, right side of the screen: filtered\n\telse\n\t{\n\t\tfloat w = 0.5*fwidth(d); \n\t\tw *= 1.5; \/\/ extra blur\n\t\t\n\t\tif( q.y<c.y )\n\t\t{\n\t\tcol = mix( vec3(0.0,0.0,0.0), col, smoothstep(-w,w,d-0.12) ); \/\/ black\n\t\tcol = mix( vec3(1.0,0.6,0.0), col, smoothstep(-w,w,d-0.04) ); \/\/ orange\n\t\t}\n\t\telse\n\t\t{\n\t\tcol = mix( pow(vec3(0.0,0.0,0.0),vec3(2.2)), col, smoothstep(-w,w,d-0.12) ); \/\/ black\n\t\tcol = mix( pow(vec3(1.0,0.6,0.0),vec3(2.2)), col, smoothstep(-w,w,d-0.04) ); \/\/ orange\n\t\t}\n\t}\n\t\n\n\tif( q.x>c.x && q.y>c.y )\n\t\tcol = pow( col, vec3(1.0\/2.2) );\n\t\n    \/\/ draw left\/right separating line\n\tcol = mix( vec3(0.0), col, smoothstep(0.007,0.008,abs(q.x-c.x)) );\n\tcol = mix( col, vec3(0.0), (1.0-smoothstep(0.007,0.008,abs(q.y-c.y)))*step(0.0,q.x-c.x) );\n\t\n\t\n\tfragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}