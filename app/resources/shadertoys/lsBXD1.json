{"Shader":{"ver":"0.1","info":{"id":"lsBXD1","date":"1400113883","viewed":1452,"name":"GTC Conference","username":"iq","description":"A live coded shader during our talk at GTC 2014. You can see the live narration during the coding in this video: http:\/\/on-demand.gputechconf.com\/gtc\/2014\/video\/S4550-shadertoy-fragment-shader.mp4","likes":4,"published":3,"flags":0,"tags":["procedural","3d","conference"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Created by inigo quilez - iq\/2014\n\/\/ License Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License.\n\n\/\/ Live coded demo during out talk at GTC 2014. Seee here for comentary:\n\/\/ http:\/\/on-demand.gputechconf.com\/gtc\/2014\/video\/S4550-shadertoy-fragment-shader.mp4\n\nfloat map( in vec3 p )\n{\n    \n    vec3 q = mod( p+2.0, 4.0 ) - 2.0;\n    \n \tfloat d1 = length( q ) - 1.0;\n    \n    d1 += 0.1*sin(10.0*p.x)*sin(10.0*p.y + iGlobalTime )*sin(10.0*p.z);\n    \n \tfloat d2 = p.y + 1.0;\n    \n    float k = 1.5;\n    float h = clamp( 0.5 + 0.5*(d1-d2)\/k, 0.0, 1.0 );\n    return mix( d1, d2, h ) - k*h*(1.0-h);\n}\n\nvec3 calcNormal( in vec3 p ) \n{\n    vec2 e = vec2( 0.0001, 0.0 );\n     \n    return normalize( vec3( map(p+e.xyy) - map(p-e.xyy),\n                            map(p+e.yxy) - map(p-e.yxy),\n                            map(p+e.yyx) - map(p-e.yyx) ) );\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = fragCoord.xy \/ iResolution.xy;\n    vec2 p = -1.0 + 2.0*uv;\n    \n    p.x *= iResolution.x\/iResolution.y;\n    \n    vec3 ro = vec3( 0.0, 0.0, 2.0 );\n    \n    vec3 rd = normalize( vec3(p, -1.0) );\n    \n    vec3 col = vec3(0.0);\n    \n    \n    float tmax = 20.0;\n\tfloat h = 1.0;\n    float t = 0.0;\n    for( int i=0; i<100; i++ ) \n    {\n        if( h<0.0001 || t>tmax ) break;\n        h = map( ro + t*rd );\n        t += h;\n    }\n    \n    vec3 lig = vec3(0.5773);\n    \n    if( t<tmax )\n    {\n        vec3 pos = ro + t*rd;\n        vec3 nor = calcNormal( pos );\n    \tcol  = vec3(1.0, 0.8, 0.5)*clamp( dot(nor,lig), 0.0, 1.0 );\n        col += vec3(0.2, 0.3, 0.4)*clamp( nor.y, 0.0, 1.0 );\n        col += vec3(1.0, 0.7, 0.2)*clamp( 1.0+dot(rd,nor), 0.0, 1.0 );\n        col *= 0.8;        \n        col *= exp( -0.1*t );\n    }\n\n    fragColor = vec4( col, 1.0 );\n}","name":"","description":"","type":"image"}]}}