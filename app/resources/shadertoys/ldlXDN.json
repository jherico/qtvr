{"Shader":{"ver":"0.1","info":{"id":"ldlXDN","date":"1401643370","viewed":850,"name":"drop splash","username":"FabriceNeyret2","description":"Real drop splashes are *not* sin(k(d-ct)) !<br\/>- wave speed depends on wavelenght (dispertion). slowest=.4 cm; faster for larger (gravity) and smaller (capillary)<br\/>- vertical displ = A.sin, horiz displ = A.cos -> trochoids, not sinusoids (not drawn here).","likes":2,"published":3,"flags":0,"tags":["waves"],"hasliked":0},"renderpass":[{"inputs":[{"id":26,"src":"\/presets\/cube04_0.png","ctype":"cubemap","channel":0,"sampler":{"filter":"linear","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}},{"id":33,"src":"\/presets\/tex00.jpg","ctype":"keyboard","channel":2,"sampler":{"filter":"nearest","wrap":"clamp","vflip":"false","srgb":"false","internal":"byte"}}],"outputs":[{"channel":"0"}],"code":"#define Wmin 50.    \/\/ spectrum shape of exciter \n#define Wmax 200.\n#define Wsamples 150.\n#define AMP(w) (1.\/(w))\n\n#define COL 0\t\t\/\/ water reflects\n#define CAM 1\t\t\/\/ perspective camera\n#define PULSE 1     \/\/ time shape of exciter  1: square 2: smooth\n\/\/ SPACE to toggle spreaded source\n\nfloat t = .3*iGlobalTime;\n\nbool keyToggle(int ascii) {\n\treturn (texture2D(iChannel2,vec2((.5+float(ascii))\/256.,0.75)).x > 0.);\n}\n\n\/\/ --- rand\nfloat hash(float x) { return fract(sin(3234.*x)*6563.234); }\n\n\/\/ --- solve degree 3 equation\nfloat solveP3(float a, float c, float d) {\n\tc \/= a; d \/= a;\n\tfloat C = -d\/2.*(1.+sqrt(1.+(c*c*c)\/(d*d)*4.\/27.));  \n\tC = sign(C)*pow(abs(C),1.\/3.);\n    return C-c\/(3.*C);\n}\n\n\/\/ --- Pierson-Moskowitz oceanographic spectrum   V = wind at 20m height\nfloat PM(float w,float V) { return 8.1E-3*9.81*9.81\/pow(w,5.)*exp(-0.74*pow(9.81\/(V*w),4.)); }\n\n\/\/ --- drop exciter\nfloat pulse(float t) {\n#if   PULSE==1\n\treturn (mod(t,1.)<.1) ? 1.: 0.;      \/\/ square signal\n#elif PULSE==2\n\treturn pow(.5+.5*cos(6.283*t),20.);  \/\/ smoothed signal\n#endif\n}\n\n\/\/ === main loop\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = 2.*(fragCoord.xy \/ iResolution.y - vec2(.9,.5));\n\tvec2 m  =      2.*( iMouse.xy \/ iResolution.y - vec2(.9,.5));\n\tif (length(iMouse.zw)==0.) m = vec2(1e-5);\n\t\n#if CAM\n\t\/\/ set view conditions and get water plane position viewed in the pixel\n\tfloat b = 3.14*length(m), a = atan(m.y,m.x);\n\tvec3 eye = vec3(sin(b)*cos(a),sin(b)*sin(a),cos(b)); \/\/ vec3(2.*m,2.);\n\tmat3 M; \t\t\t\t\t\/\/ view matrix\n\tM[0] = normalize(-eye);\n\tM[2] = normalize(vec3(0.,0.,1.)-M[0].z*M[0]);\n\tM[1] = cross(M[0],M[2]);\n\tvec3 ray = normalize(M*vec3(1.,uv));\n\tif (abs(ray.z)>1e-3) {\n\t\tfloat l = -eye.z\/ray.z; vec3 P = eye + l*ray; \/\/ point on water plane\n\t\tuv = P.xy;\n\t}\n#endif\n\t\n\tvec2 dir = normalize(uv);\n\tfloat d = 10.*length(uv);\n\tfloat x = 0., y = 0.; vec4 col = vec4(0.);\n\t\n\t\/\/ k = 2Pi\/L , w = 2Pi\/T\n\t\/\/ complete waves dispertion equation: w^2 = (gk + sigma\/rho k^3) tanh(kh)\n\t\/\/ here, ignore tan(kh) ( = deep water case )\n\t\n\t\/\/ sum on wave spectrum \/\/ < 85: gravity waves  > 85: capillary waves\n\tfor (float w = Wmin; w < Wmax; w += (Wmax-Wmin)\/Wsamples) \n\t{  \n\t    float k = solveP3(9.81, 0.074\/1000.,-w*w);  \/\/ k(w)\n\t\tif (keyToggle(32)) d = 10.*length(uv+.03*(2.*vec2(hash(1.\/w),1.+hash(1.\/w))-1.));\n\t\tfloat phi =k*d-w*t ,\t\t\t\t\t\t\/\/ wave phase\n\t\t\t  phi0 = 6.283*hash(w);   \t\t\t\t\/\/ random phasing(w)\n\t\tfloat A = 2.*AMP(w) * pulse(-phi\/w);\t\t\/\/ amplitude\n#if !COL\n\t\ty += A*sin(phi+phi0);\n\t\t\/\/ x += A*cos(phi+phi0);\n#else\n\t\tA *= 1.;\n\t\t\/\/ normal to the surface, and ray reflection in the cubemap.\n\t\tvec3 N = normalize(vec3( A*k*cos(phi+phi0)*dir,-(1.-A*k*sin(phi+phi0)))),\n\t\t\t V = reflect(ray,N);\n\t\tcol += textureCube(iChannel0, V.xzy );\n#endif\n\t}\n\t\n#if COL\n\tfragColor = vec4(col\/Wsamples); \n#else\n\tfragColor = vec4(.5+y); fragColor.b += .1;\n#endif\n}","name":"","description":"","type":"image"}]}}