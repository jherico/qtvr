{"Shader":{"ver":"0.1","info":{"id":"4tX3Rf","date":"1423638153","viewed":746,"name":"Particles And Noise","username":"akaitora","description":"A Simple Shader demonstrating particles + noise.","likes":4,"published":3,"flags":0,"tags":["particlesnoise"],"hasliked":0},"renderpass":[{"inputs":[],"outputs":[{"channel":"0"}],"code":"\/\/ Particles + Noise Part 2\n\/\/ By: Brandon Fogerty\n\/\/ bfogerty at gmail dot com\n\n\n#define Resolution\t\t\t\tiResolution\n#define Time\t\t\t\t\tiGlobalTime\n\n#define HorizontalAmplitude\t\t0.30\n#define VerticleAmplitude\t\t0.20\n#define HorizontalSpeed\t\t\t0.90\n#define VerticleSpeed\t\t\t1.50\n#define ParticleMinSize\t\t\t1.76\n#define ParticleMaxSize\t\t\t1.61\n#define ParticleBreathingSpeed\t\t0.30\n#define ParticleColorChangeSpeed\t0.70\n#define ParticleCount\t\t\t2.0\n#define ParticleColor1\t\t\tvec3(9.0, 5.0, 3.0)\n#define ParticleColor2\t\t\tvec3(1.0, 3.0, 9.0)\n\n\nfloat hash( float x )\n{\n    return fract( sin( x ) * 43758.5453 );\n}\n\nfloat noise( vec2 uv )  \/\/ Thanks Inigo Quilez\n{\n    vec3 x = vec3( uv.xy, 0.0 );\n    \n    vec3 p = floor( x );\n    vec3 f = fract( x );\n    \n    f = f*f*(3.0 - 2.0*f);\n    \n    float offset = 57.0;\n    \n    float n = dot( p, vec3(1.0, offset, offset*2.0) );\n    \n    return mix(\tmix(\tmix( hash( n + 0.0 ), \t\thash( n + 1.0 ), f.x ),\n        \t\t\t\tmix( hash( n + offset), \thash( n + offset+1.0), f.x ), f.y ),\n\t\t\t\tmix(\tmix( hash( n + offset*2.0), hash( n + offset*2.0+1.0), f.x),\n                    \tmix( hash( n + offset*3.0), hash( n + offset*3.0+1.0), f.x), f.y), f.z);\n}\n\nfloat snoise( vec2 uv )\n{\n    return noise( uv ) * 2.0 - 1.0;\n}\n\n\nfloat perlinNoise( vec2 uv )\n{   \n    float n = \t\tnoise( uv * 1.0 ) \t* 128.0 +\n        \t\tnoise( uv * 2.0 ) \t* 64.0 +\n        \t\tnoise( uv * 4.0 ) \t* 32.0 +\n        \t\tnoise( uv * 8.0 ) \t* 16.0 +\n        \t\tnoise( uv * 16.0 ) \t* 8.0 +\n        \t\tnoise( uv * 32.0 ) \t* 4.0 +\n        \t\tnoise( uv * 64.0 ) \t* 2.0 +\n        \t\tnoise( uv * 128.0 ) * 1.0;\n    \n    float noiseVal = n \/ ( 1.0 + 2.0 + 4.0 + 8.0 + 16.0 + 32.0 + 64.0 + 128.0 );\n    noiseVal = abs(noiseVal * 2.0 - 1.0);\n\t\n    return \tnoiseVal;\n}\n\nfloat fBm( vec2 uv, float lacunarity, float gain )\n{\n    float sum = 0.0;\n    float amp = 10.0;\n    \n    for( int i = 0; i < 2; ++i )\n    {\n        sum += ( perlinNoise( uv ) ) * amp;\n        amp *= gain;\n        uv *= lacunarity;\n    }\n    \n    return sum;\n}\n\nvec3 particles( vec2 pos )\n{\n\t\n\tvec3 c = vec3( 0, 0, 0 );\n\t\n\tfloat noiseFactor = fBm( pos, 0.01, 0.1);\n\t\n\tfor( float i = 1.0; i < ParticleCount+1.0; ++i )\n\t{\n\t\tfloat cs = cos( Time * HorizontalSpeed * (i\/ParticleCount) + noiseFactor ) * HorizontalAmplitude;\n\t\tfloat ss = sin( Time * VerticleSpeed   * (i\/ParticleCount) + noiseFactor ) * VerticleAmplitude;\n\t\tvec2 origin = vec2( cs , ss );\n\t\t\n\t\tfloat t = sin( Time * ParticleBreathingSpeed * i ) * 0.5 + 0.5;\n\t\tfloat particleSize = mix( ParticleMinSize, ParticleMaxSize, t );\n\t\tfloat d = clamp( sin( length( pos - origin )  + particleSize ), 0.0, particleSize);\n\t\t\n\t\tfloat t2 = sin( Time * ParticleColorChangeSpeed * i ) * 0.5 + 0.5;\n\t\tvec3 color = mix( ParticleColor1, ParticleColor2, t2 );\n\t\tc += color * pow( d, 10.0 );\n\t}\n\t\n\treturn c;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord ) \n{\n\n\tvec2 uv = ( fragCoord.xy \/ Resolution.xy ) * 2.0 - 1.0;\n\tuv.x *= ( Resolution.x \/ Resolution.y );\n\t\n\n\tvec3 finalColor = particles( sin( abs(uv) ) );\n\t\n\t\n\tfragColor = vec4( finalColor, 1.0 );\n}","name":"","description":"","type":"image"}]}}